{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFiles(Collection[String]).mjava","commits":[{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFiles(Collection[String]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  @Override\n  public synchronized void deleteFiles(Collection<String> names) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot delete after crash\");\n    }\n\n    for(String name : names) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        if (assertNoDeleteOpenFile) {\n          throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        }\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n\n    unSyncedFiles.removeAll(names);\n    in.deleteFiles(names);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && (noDeleteOpenFile || assertNoDeleteOpenFile)) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n\n        if (!assertNoDeleteOpenFile) {\n          throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        } else {\n          throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        }\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    if (!forced && enableVirusScanner && (randomState.nextInt(4) == 0)) {\n      triedToDelete.add(name);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MDW: now refuse to delete file: \" + name);\n      }\n      throw new IOException(\"cannot delete file: \" + name + \", a virus scanner has it open\");\n    }\n    triedToDelete.remove(name);\n    in.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#deleteFiles(Collection[String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized void deleteFiles(Collection<String> names) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot delete after crash\");\n    }\n\n    for(String name : names) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        if (assertNoDeleteOpenFile) {\n          throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n        }\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n\n    unSyncedFiles.removeAll(names);\n    in.deleteFiles(names);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bfe104fc023fadc9e709f8d17403d2cc61133fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}