{"path":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","commits":[{"id":"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02","date":1244977984,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","pathOld":"src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","sourceNew":"  private static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(\"test text\", document.get(\"test\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    Set ftl = new HashSet();\n    ftl.add(\"other\");\n    FieldSelector fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    fs = new MapFieldSelector(new String[]{\"other\"});\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n  }\n\n","sourceOld":"  private static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(\"test text\", document.get(\"test\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    Set ftl = new HashSet();\n    ftl.add(\"other\");\n    FieldSelector fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    fs = new MapFieldSelector(new String[]{\"other\"});\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","sourceNew":"  private static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(\"test text\", document.get(\"test\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    FieldSelector fs = new SetBasedFieldSelector(ftl, Collections.<String>emptySet());\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    fs = new MapFieldSelector(new String[]{\"other\"});\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n  }\n\n","sourceOld":"  private static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(\"test text\", document.get(\"test\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    Set ftl = new HashSet();\n    ftl.add(\"other\");\n    FieldSelector fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    fs = new MapFieldSelector(new String[]{\"other\"});\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","sourceNew":"  private static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(\"test text\", document.get(\"test\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    FieldSelector fs = new SetBasedFieldSelector(ftl, Collections.<String>emptySet());\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    fs = new MapFieldSelector(new String[]{\"other\"});\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n  }\n\n","sourceOld":"  private static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(\"test text\", document.get(\"test\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    FieldSelector fs = new SetBasedFieldSelector(ftl, Collections.<String>emptySet());\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    fs = new MapFieldSelector(new String[]{\"other\"});\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}