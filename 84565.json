{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addUpdateDelete(String).mjava","commits":[{"id":"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b","date":1576537086,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addUpdateDelete(String).mjava","pathOld":"/dev/null","sourceNew":"  /**  NOTE: uses the cluster's CloudSolrClient and asumes default collection has been set */\n  private void addUpdateDelete(String docId) throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    // add the doc, confirm we can query it...\n    assertEquals(0, cloudClient.add(sdoc(\"id\", docId, \"content_t\", \"originalcontent\")).getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n    \n    assertEquals(1, cloudClient.query(params(\"q\", \"id:\" + docId)).getResults().getNumFound());\n    assertEquals(1, cloudClient.query(params(\"q\", \"content_t:originalcontent\")).getResults().getNumFound());\n    assertEquals(1,\n                 cloudClient.query(params(\"q\", \"content_t:originalcontent AND id:\" + docId))\n                 .getResults().getNumFound());\n    \n    checkShardConsistency(params(\"q\",\"id:\" + docId, \"rows\", \"99\",\"_trace\",\"original_doc\"));\n    \n    // update doc\n    assertEquals(0, cloudClient.add(sdoc(\"id\", docId, \"content_t\", \"updatedcontent\")).getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n    \n    // confirm we can query the doc by updated content and not original...\n    assertEquals(0, cloudClient.query(params(\"q\", \"content_t:originalcontent\")).getResults().getNumFound());\n    assertEquals(1, cloudClient.query(params(\"q\", \"content_t:updatedcontent\")).getResults().getNumFound());\n    assertEquals(1,\n                 cloudClient.query(params(\"q\", \"content_t:updatedcontent AND id:\" + docId))\n                 .getResults().getNumFound());\n    \n    // delete the doc, confim it no longer matches in queries...\n    assertEquals(0, cloudClient.deleteById(docId).getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n    \n    assertEquals(0, cloudClient.query(params(\"q\", \"id:\" + docId)).getResults().getNumFound());\n    assertEquals(0, cloudClient.query(params(\"q\", \"content_t:updatedcontent\")).getResults().getNumFound());\n    \n    checkShardConsistency(params(\"q\",\"id:\" + docId, \"rows\", \"99\",\"_trace\",\"del_updated_doc\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#addUpdateDelete(String).mjava","pathOld":"/dev/null","sourceNew":"  /**  NOTE: uses the cluster's CloudSolrClient and asumes default collection has been set */\n  private void addUpdateDelete(String docId) throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    // add the doc, confirm we can query it...\n    assertEquals(0, cloudClient.add(sdoc(\"id\", docId, \"content_t\", \"originalcontent\")).getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n    \n    assertEquals(1, cloudClient.query(params(\"q\", \"id:\" + docId)).getResults().getNumFound());\n    assertEquals(1, cloudClient.query(params(\"q\", \"content_t:originalcontent\")).getResults().getNumFound());\n    assertEquals(1,\n                 cloudClient.query(params(\"q\", \"content_t:originalcontent AND id:\" + docId))\n                 .getResults().getNumFound());\n    \n    checkShardConsistency(params(\"q\",\"id:\" + docId, \"rows\", \"99\",\"_trace\",\"original_doc\"));\n    \n    // update doc\n    assertEquals(0, cloudClient.add(sdoc(\"id\", docId, \"content_t\", \"updatedcontent\")).getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n    \n    // confirm we can query the doc by updated content and not original...\n    assertEquals(0, cloudClient.query(params(\"q\", \"content_t:originalcontent\")).getResults().getNumFound());\n    assertEquals(1, cloudClient.query(params(\"q\", \"content_t:updatedcontent\")).getResults().getNumFound());\n    assertEquals(1,\n                 cloudClient.query(params(\"q\", \"content_t:updatedcontent AND id:\" + docId))\n                 .getResults().getNumFound());\n    \n    // delete the doc, confim it no longer matches in queries...\n    assertEquals(0, cloudClient.deleteById(docId).getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n    \n    assertEquals(0, cloudClient.query(params(\"q\", \"id:\" + docId)).getResults().getNumFound());\n    assertEquals(0, cloudClient.query(params(\"q\", \"content_t:updatedcontent\")).getResults().getNumFound());\n    \n    checkShardConsistency(params(\"q\",\"id:\" + docId, \"rows\", \"99\",\"_trace\",\"del_updated_doc\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b945b8f5bba0303382bc69d60c0c287714f23328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b945b8f5bba0303382bc69d60c0c287714f23328","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}