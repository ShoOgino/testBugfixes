{"path":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#newString(int[],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#newString(int[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#newString(int[],int,int).mjava","sourceNew":"  /**\n   * Cover JDK 1.5 API. Create a String from an array of codePoints.\n   *\n   * @param codePoints The code array\n   * @param offset The start of the text in the code point array\n   * @param count The number of code points\n   * @return a String representing the code points between offset and count\n   * @throws IllegalArgumentException If an invalid code point is encountered\n   * @throws IndexOutOfBoundsException If the offset or count are out of bounds.\n   */\n  public static String newString(int[] codePoints, int offset, int count) {\n      if (count < 0) {\n          throw new IllegalArgumentException();\n      }\n      char[] chars = new char[count];\n      int w = 0;\n      for (int r = offset, e = offset + count; r < e; ++r) {\n          int cp = codePoints[r];\n          if (cp < 0 || cp > 0x10ffff) {\n              throw new IllegalArgumentException();\n          }\n          while (true) {\n              try {\n                  if (cp < 0x010000) {\n                      chars[w] = (char) cp;\n                      w++;\n                  } else {\n                      chars[w] = (char) (LEAD_SURROGATE_OFFSET_ + (cp >> LEAD_SURROGATE_SHIFT_));\n                      chars[w + 1] = (char) (TRAIL_SURROGATE_MIN_VALUE + (cp & TRAIL_SURROGATE_MASK_));\n                      w += 2;\n                  }\n                  break;\n              } catch (IndexOutOfBoundsException ex) {\n                  int newlen = (int) (Math.ceil((double) codePoints.length * (w + 2)\n                          / (r - offset + 1)));\n                  char[] temp = new char[newlen];\n                  System.arraycopy(chars, 0, temp, 0, w);\n                  chars = temp;\n              }\n          }\n      }\n      return new String(chars, 0, w);\n  }\n\n","sourceOld":"  /**\n   * Cover JDK 1.5 API. Create a String from an array of codePoints.\n   *\n   * @param codePoints The code array\n   * @param offset The start of the text in the code point array\n   * @param count The number of code points\n   * @return a String representing the code points between offset and count\n   * @throws IllegalArgumentException If an invalid code point is encountered\n   * @throws IndexOutOfBoundsException If the offset or count are out of bounds.\n   */\n  public static String newString(int[] codePoints, int offset, int count) {\n      if (count < 0) {\n          throw new IllegalArgumentException();\n      }\n      char[] chars = new char[count];\n      int w = 0;\n      for (int r = offset, e = offset + count; r < e; ++r) {\n          int cp = codePoints[r];\n          if (cp < 0 || cp > 0x10ffff) {\n              throw new IllegalArgumentException();\n          }\n          while (true) {\n              try {\n                  if (cp < 0x010000) {\n                      chars[w] = (char) cp;\n                      w++;\n                  } else {\n                      chars[w] = (char) (LEAD_SURROGATE_OFFSET_ + (cp >> LEAD_SURROGATE_SHIFT_));\n                      chars[w + 1] = (char) (TRAIL_SURROGATE_MIN_VALUE + (cp & TRAIL_SURROGATE_MASK_));\n                      w += 2;\n                  }\n                  break;\n              } catch (IndexOutOfBoundsException ex) {\n                  int newlen = (int) (Math.ceil((double) codePoints.length * (w + 2)\n                          / (r - offset + 1)));\n                  char[] temp = new char[newlen];\n                  System.arraycopy(chars, 0, temp, 0, w);\n                  chars = temp;\n              }\n          }\n      }\n      return new String(chars, 0, w);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}