{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","commits":[{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"/dev/null","sourceNew":"    private FieldInfo addInternal(String name, int fieldNumber, boolean isIndexed,\n                                  boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                                  IndexOptions indexOptions, DocValues.Type docValuesType, DocValues.Type normType) {\n      // don't check modifiable here since we use that to initially build up FIs\n      if (globalFieldNumbers != null) {\n        globalFieldNumbers.setIfNotSet(fieldNumber, name);\n      } \n      final FieldInfo fi = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, indexOptions, docValuesType, normType);\n      putInternal(fi);\n      return fi;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db170c1c8faa054c4e52af9aadc6cd12460af7a9","date":1337357757,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"    private FieldInfo addInternal(String name, int fieldNumber, boolean isIndexed,\n                                  boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                                  IndexOptions indexOptions, DocValues.Type docValuesType, DocValues.Type normType) {\n      globalFieldNumbers.setIfNotSet(fieldNumber, name);\n      final FieldInfo fi = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, indexOptions, docValuesType, normType);\n      putInternal(fi);\n      return fi;\n    }\n\n","sourceOld":"    private FieldInfo addInternal(String name, int fieldNumber, boolean isIndexed,\n                                  boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                                  IndexOptions indexOptions, DocValues.Type docValuesType, DocValues.Type normType) {\n      // don't check modifiable here since we use that to initially build up FIs\n      if (globalFieldNumbers != null) {\n        globalFieldNumbers.setIfNotSet(fieldNumber, name);\n      } \n      final FieldInfo fi = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, indexOptions, docValuesType, normType);\n      putInternal(fi);\n      return fi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0f42e0639920b2e917c9ece35fb68ad83021e38","date":1337629438,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"    private FieldInfo addInternal(String name, int fieldNumber, boolean isIndexed,\n                                  boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                                  IndexOptions indexOptions, DocValues.Type docValuesType, DocValues.Type normType) {\n      globalFieldNumbers.setIfNotSet(fieldNumber, name);\n      final FieldInfo fi = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, indexOptions, docValuesType, normType, null);\n      putInternal(fi);\n      return fi;\n    }\n\n","sourceOld":"    private FieldInfo addInternal(String name, int fieldNumber, boolean isIndexed,\n                                  boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                                  IndexOptions indexOptions, DocValues.Type docValuesType, DocValues.Type normType) {\n      globalFieldNumbers.setIfNotSet(fieldNumber, name);\n      final FieldInfo fi = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, indexOptions, docValuesType, normType);\n      putInternal(fi);\n      return fi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"/dev/null","sourceNew":"    private FieldInfo addInternal(String name, int fieldNumber, boolean isIndexed,\n                                  boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                                  IndexOptions indexOptions, DocValues.Type docValuesType, DocValues.Type normType) {\n      globalFieldNumbers.setIfNotSet(fieldNumber, name);\n      final FieldInfo fi = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, indexOptions, docValuesType, normType, null);\n      putInternal(fi);\n      return fi;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"    private FieldInfo addInternal(String name, int fieldNumber, boolean isIndexed,\n                                  boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                                  IndexOptions indexOptions, DocValues.Type docValuesType, DocValues.Type normType) {\n      globalFieldNumbers.setIfNotSet(fieldNumber, name, docValuesType);\n      final FieldInfo fi = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, indexOptions, docValuesType, normType, null);\n      putInternal(fi);\n      return fi;\n    }\n\n","sourceOld":"    private FieldInfo addInternal(String name, int fieldNumber, boolean isIndexed,\n                                  boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                                  IndexOptions indexOptions, DocValues.Type docValuesType, DocValues.Type normType) {\n      globalFieldNumbers.setIfNotSet(fieldNumber, name);\n      final FieldInfo fi = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, indexOptions, docValuesType, normType, null);\n      putInternal(fi);\n      return fi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":null,"sourceOld":"    private FieldInfo addInternal(String name, int fieldNumber, boolean isIndexed,\n                                  boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                                  IndexOptions indexOptions, DocValues.Type docValuesType, DocValues.Type normType) {\n      globalFieldNumbers.setIfNotSet(fieldNumber, name, docValuesType);\n      final FieldInfo fi = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, indexOptions, docValuesType, normType, null);\n      putInternal(fi);\n      return fi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":null,"sourceOld":"    private FieldInfo addInternal(String name, int fieldNumber, boolean isIndexed,\n                                  boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                                  IndexOptions indexOptions, DocValues.Type docValuesType, DocValues.Type normType) {\n      globalFieldNumbers.setIfNotSet(fieldNumber, name);\n      final FieldInfo fi = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, indexOptions, docValuesType, normType, null);\n      putInternal(fi);\n      return fi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0f42e0639920b2e917c9ece35fb68ad83021e38"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","0837ab0472feecb3a54260729d845f839e1cbd72"],"db170c1c8faa054c4e52af9aadc6cd12460af7a9":["a851824c09818632c94eba41e60ef5e72e323c8e"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["db170c1c8faa054c4e52af9aadc6cd12460af7a9"],"a851824c09818632c94eba41e60ef5e72e323c8e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d4d69c535930b5cce125cff868d40f6373dc27d4","6e2893fd5349134af382d33ccc3d84840394c6c1"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db170c1c8faa054c4e52af9aadc6cd12460af7a9":["a0f42e0639920b2e917c9ece35fb68ad83021e38"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","a851824c09818632c94eba41e60ef5e72e323c8e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a851824c09818632c94eba41e60ef5e72e323c8e":["db170c1c8faa054c4e52af9aadc6cd12460af7a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}