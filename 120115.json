{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","commits":[{"id":"c85fa43e6918808743daa7847ba0264373af687f","date":1395166336,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","pathOld":"/dev/null","sourceNew":"  // we might regret this decision...\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = atLeast(20);\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 256, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2454a87b7964d0c6d0b124f725778471c133ce2","date":1395235657,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","sourceNew":"  // we might regret this decision...\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = atLeast(20);\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 128, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  // we might regret this decision...\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = atLeast(20);\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 256, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"160d60746684538517688048690586b5f845a276","date":1397237140,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","sourceNew":"  // we might regret this decision...\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = atLeast(20);\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 80, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  // we might regret this decision...\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = atLeast(20);\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 128, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad53237cd844da2787711b60f12768c5d6288b3b","date":1417053965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","sourceNew":"  // we might regret this decision...\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = TEST_NIGHTLY ? atLeast(20) : 3;\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 80, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  // we might regret this decision...\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = atLeast(20);\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 80, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","sourceNew":"  // we might regret this decision...\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = TEST_NIGHTLY ? atLeast(20) : 3;\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      try (MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong())) {\n        if (VERBOSE) {\n          System.out.println(\"Creating random analyzer:\" + a);\n        }\n        try {\n          checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 80, false,\n              false /* We already validate our own offsets... */);\n        } catch (Throwable e) {\n          System.err.println(\"Exception from random analyzer: \" + a);\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // we might regret this decision...\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = TEST_NIGHTLY ? atLeast(20) : 3;\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 80, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","sourceNew":"  // we might regret this decision...\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = TEST_NIGHTLY ? atLeast(20) : 3;\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      try (MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong())) {\n        if (VERBOSE) {\n          System.out.println(\"Creating random analyzer:\" + a);\n        }\n        try {\n          checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 80, false,\n              false /* We already validate our own offsets... */);\n        } catch (Throwable e) {\n          System.err.println(\"Exception from random analyzer: \" + a);\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // we might regret this decision...\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = TEST_NIGHTLY ? atLeast(20) : 3;\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 80, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","sourceNew":"  // we might regret this decision...\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = TEST_NIGHTLY ? atLeast(20) : 3;\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      try (MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong())) {\n        if (VERBOSE) {\n          System.out.println(\"Creating random analyzer:\" + a);\n        }\n        try {\n          checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 80, false,\n              false /* We already validate our own offsets... */);\n        } catch (Throwable e) {\n          System.err.println(\"Exception from random analyzer: \" + a);\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // we might regret this decision...\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = TEST_NIGHTLY ? atLeast(20) : 3;\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      try (MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong())) {\n        if (VERBOSE) {\n          System.out.println(\"Creating random analyzer:\" + a);\n        }\n        try {\n          checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 80, false,\n              false /* We already validate our own offsets... */);\n        } catch (Throwable e) {\n          System.err.println(\"Exception from random analyzer: \" + a);\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","date":1529312258,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChainsWithLargeStrings().mjava","sourceNew":"  // we might regret this decision...\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = TEST_NIGHTLY ? atLeast(20) : 3;\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      try (MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong())) {\n        if (VERBOSE) {\n          System.out.println(\"Creating random analyzer:\" + a);\n        }\n        try {\n          checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 80, false,\n              false /* We already validate our own offsets... */);\n        } catch (Throwable e) {\n          System.err.println(\"Exception from random analyzer: \" + a);\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // we might regret this decision...\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testRandomChainsWithLargeStrings() throws Throwable {\n    int numIterations = TEST_NIGHTLY ? atLeast(20) : 3;\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      try (MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong())) {\n        if (VERBOSE) {\n          System.out.println(\"Creating random analyzer:\" + a);\n        }\n        try {\n          checkRandomData(random, a, 50*RANDOM_MULTIPLIER, 80, false,\n              false /* We already validate our own offsets... */);\n        } catch (Throwable e) {\n          System.err.println(\"Exception from random analyzer: \" + a);\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b2454a87b7964d0c6d0b124f725778471c133ce2":["c85fa43e6918808743daa7847ba0264373af687f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ad53237cd844da2787711b60f12768c5d6288b3b","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"160d60746684538517688048690586b5f845a276":["b2454a87b7964d0c6d0b124f725778471c133ce2"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ad53237cd844da2787711b60f12768c5d6288b3b"],"ad53237cd844da2787711b60f12768c5d6288b3b":["160d60746684538517688048690586b5f845a276"],"c85fa43e6918808743daa7847ba0264373af687f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"b2454a87b7964d0c6d0b124f725778471c133ce2":["160d60746684538517688048690586b5f845a276"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c85fa43e6918808743daa7847ba0264373af687f"],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"160d60746684538517688048690586b5f845a276":["ad53237cd844da2787711b60f12768c5d6288b3b"],"ad53237cd844da2787711b60f12768c5d6288b3b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"c85fa43e6918808743daa7847ba0264373af687f":["b2454a87b7964d0c6d0b124f725778471c133ce2"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}