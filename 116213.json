{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/fr/ElisionFilter#next(Token).mjava","commits":[{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/fr/ElisionFilter#next(Token).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the next input Token with term() without elisioned start\n   */\n  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n    if (nextToken == null)\n      return null;\n\n    char[] termBuffer = nextToken.termBuffer();\n    int termLength = nextToken.termLength();\n\n    int minPoz = Integer.MAX_VALUE;\n    for (int i = 0; i < apostrophes.length; i++) {\n      char apos = apostrophes[i];\n      // The equivalent of String.indexOf(ch)\n      for (int poz = 0; poz < termLength ; poz++) {\n        if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n        }\n      }\n    }\n\n    // An apostrophe has been found. If the prefix is an article strip it off.\n    if (minPoz != Integer.MAX_VALUE\n        && articles.contains(new String(nextToken.termBuffer(), 0, minPoz).toLowerCase())) {\n      nextToken.setTermBuffer(nextToken.termBuffer(), minPoz + 1, nextToken.termLength() - (minPoz + 1));\n    }\n\n    return nextToken;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/fr/ElisionFilter#next(Token).mjava","sourceNew":"  /**\n   * Returns the next input Token with term() without elisioned start\n   */\n  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n    if (nextToken == null)\n      return null;\n\n    char[] termBuffer = nextToken.termBuffer();\n    int termLength = nextToken.termLength();\n\n    int minPoz = Integer.MAX_VALUE;\n    for (int i = 0; i < apostrophes.length; i++) {\n      char apos = apostrophes[i];\n      // The equivalent of String.indexOf(ch)\n      for (int poz = 0; poz < termLength ; poz++) {\n        if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n        }\n      }\n    }\n\n    // An apostrophe has been found. If the prefix is an article strip it off.\n    if (minPoz != Integer.MAX_VALUE\n        && articles.contains(new String(nextToken.termBuffer(), 0, minPoz).toLowerCase())) {\n      nextToken.setTermBuffer(nextToken.termBuffer(), minPoz + 1, nextToken.termLength() - (minPoz + 1));\n    }\n\n    return nextToken;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token with term() without elisioned start\n   */\n  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n    if (nextToken == null)\n      return null;\n\n    char[] termBuffer = nextToken.termBuffer();\n    int termLength = nextToken.termLength();\n\n    int minPoz = Integer.MAX_VALUE;\n    for (int i = 0; i < apostrophes.length; i++) {\n      char apos = apostrophes[i];\n      // The equivalent of String.indexOf(ch)\n      for (int poz = 0; poz < termLength ; poz++) {\n        if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n        }\n      }\n    }\n\n    // An apostrophe has been found. If the prefix is an article strip it off.\n    if (minPoz != Integer.MAX_VALUE\n        && articles.contains(new String(nextToken.termBuffer(), 0, minPoz).toLowerCase())) {\n      nextToken.setTermBuffer(nextToken.termBuffer(), minPoz + 1, nextToken.termLength() - (minPoz + 1));\n    }\n\n    return nextToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}