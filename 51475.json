{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","commits":[{"id":"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","date":1462373155,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","pathOld":"/dev/null","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n    final List<String> outNames = SolrRules.solrFieldNames(getRowType());\n\n    List<Metric> metrics = new ArrayList<>();\n    Map<String, String> fieldMappings = new HashMap<>();\n    for(AggregateCall aggCall : aggCalls) {\n      Metric metric = toSolrMetric(aggCall.getAggregation(), inNames, aggCall.getArgList());\n      metrics.add(metric);\n      fieldMappings.put(aggCall.getName(), metric.getIdentifier());\n    }\n\n    List<String> buckets = new ArrayList<>();\n    for(int group : groupSet) {\n      final String inName = inNames.get(group);\n      buckets.add(inName);\n      fieldMappings.put(inName, inName);\n    }\n\n    implementor.addBuckets(buckets);\n    implementor.addMetrics(metrics);\n    implementor.addFieldMappings(fieldMappings);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cc8e977a08af3169747ab78c578cc3037d095d5","date":1462391783,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n    final List<String> outNames = SolrRules.solrFieldNames(getRowType());\n\n    List<Pair<String, String>> metrics = new ArrayList<>();\n    Map<String, String> fieldMappings = new HashMap<>();\n    for(AggregateCall aggCall : aggCalls) {\n      Pair<String, String> metric = toSolrMetric(aggCall.getAggregation(), inNames, aggCall.getArgList());\n      metrics.add(metric);\n      fieldMappings.put(aggCall.getName(), metric.getKey().toLowerCase(Locale.ROOT) + \"(\" + metric.getValue() + \")\");\n    }\n\n    List<String> buckets = new ArrayList<>();\n    for(int group : groupSet) {\n      final String inName = inNames.get(group);\n      buckets.add(inName);\n      fieldMappings.put(inName, inName);\n    }\n\n    implementor.addBuckets(buckets);\n    implementor.addMetrics(metrics);\n    implementor.addFieldMappings(fieldMappings);\n  }\n\n","sourceOld":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n    final List<String> outNames = SolrRules.solrFieldNames(getRowType());\n\n    List<Metric> metrics = new ArrayList<>();\n    Map<String, String> fieldMappings = new HashMap<>();\n    for(AggregateCall aggCall : aggCalls) {\n      Metric metric = toSolrMetric(aggCall.getAggregation(), inNames, aggCall.getArgList());\n      metrics.add(metric);\n      fieldMappings.put(aggCall.getName(), metric.getIdentifier());\n    }\n\n    List<String> buckets = new ArrayList<>();\n    for(int group : groupSet) {\n      final String inName = inNames.get(group);\n      buckets.add(inName);\n      fieldMappings.put(inName, inName);\n    }\n\n    implementor.addBuckets(buckets);\n    implementor.addMetrics(metrics);\n    implementor.addFieldMappings(fieldMappings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b35c86a7787a532402f49557ac05fe2596fa73b9","date":1462399837,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n    final List<String> outNames = SolrRules.solrFieldNames(getRowType());\n\n    Map<String, String> fieldMappings = new HashMap<>();\n    for(AggregateCall aggCall : aggCalls) {\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addMetric(metric);\n      fieldMappings.put(aggCall.getName(), metric.getKey().toLowerCase(Locale.ROOT) + \"(\" + metric.getValue() + \")\");\n    }\n\n    List<String> buckets = new ArrayList<>();\n    for(int group : groupSet) {\n      String inName = inNames.get(group);\n      String name = implementor.fieldMappings.getOrDefault(inName, inName);\n      buckets.add(name);\n      if(!fieldMappings.containsKey(name)) {\n        fieldMappings.put(name, name);\n      }\n    }\n\n    implementor.addBuckets(buckets);\n    implementor.addFieldMappings(fieldMappings);\n  }\n\n","sourceOld":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n    final List<String> outNames = SolrRules.solrFieldNames(getRowType());\n\n    List<Pair<String, String>> metrics = new ArrayList<>();\n    Map<String, String> fieldMappings = new HashMap<>();\n    for(AggregateCall aggCall : aggCalls) {\n      Pair<String, String> metric = toSolrMetric(aggCall.getAggregation(), inNames, aggCall.getArgList());\n      metrics.add(metric);\n      fieldMappings.put(aggCall.getName(), metric.getKey().toLowerCase(Locale.ROOT) + \"(\" + metric.getValue() + \")\");\n    }\n\n    List<String> buckets = new ArrayList<>();\n    for(int group : groupSet) {\n      final String inName = inNames.get(group);\n      buckets.add(inName);\n      fieldMappings.put(inName, inName);\n    }\n\n    implementor.addBuckets(buckets);\n    implementor.addMetrics(metrics);\n    implementor.addFieldMappings(fieldMappings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa4a466195c69a11a113b33adc90f9069031e54e","date":1477605536,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n\n    for(Pair<AggregateCall, String> namedAggCall : getNamedAggCalls()) {\n      AggregateCall aggCall = namedAggCall.getKey();\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addMetricPair(namedAggCall.getValue(), metric.getKey(), metric.getValue());\n      if(aggCall.getName() == null) {\n        implementor.addFieldMapping(namedAggCall.getValue(),\n            aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n      }\n    }\n\n    for(int group : getGroupSet()) {\n      String inName = inNames.get(group);\n      implementor.addBucket(inName);\n    }\n  }\n\n","sourceOld":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n    final List<String> outNames = SolrRules.solrFieldNames(getRowType());\n\n    Map<String, String> fieldMappings = new HashMap<>();\n    for(AggregateCall aggCall : aggCalls) {\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addMetric(metric);\n      fieldMappings.put(aggCall.getName(), metric.getKey().toLowerCase(Locale.ROOT) + \"(\" + metric.getValue() + \")\");\n    }\n\n    List<String> buckets = new ArrayList<>();\n    for(int group : groupSet) {\n      String inName = inNames.get(group);\n      String name = implementor.fieldMappings.getOrDefault(inName, inName);\n      buckets.add(name);\n      if(!fieldMappings.containsKey(name)) {\n        fieldMappings.put(name, name);\n      }\n    }\n\n    implementor.addBuckets(buckets);\n    implementor.addFieldMappings(fieldMappings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36b1ce25b5b465615c00f409ce694664abbe7bd2","date":1481836328,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n\n\n    for(Pair<AggregateCall, String> namedAggCall : getNamedAggCalls()) {\n\n      AggregateCall aggCall = namedAggCall.getKey();\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addMetricPair(namedAggCall.getValue(), metric.getKey(), metric.getValue());\n      if(aggCall.getName() == null) {\n        implementor.addFieldMapping(namedAggCall.getValue(),\n            aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n      }\n    }\n\n    for(int group : getGroupSet()) {\n      String inName = inNames.get(group);\n      implementor.addBucket(inName);\n    }\n  }\n\n","sourceOld":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n\n    for(Pair<AggregateCall, String> namedAggCall : getNamedAggCalls()) {\n      AggregateCall aggCall = namedAggCall.getKey();\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addMetricPair(namedAggCall.getValue(), metric.getKey(), metric.getValue());\n      if(aggCall.getName() == null) {\n        implementor.addFieldMapping(namedAggCall.getValue(),\n            aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n      }\n    }\n\n    for(int group : getGroupSet()) {\n      String inName = inNames.get(group);\n      implementor.addBucket(inName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5cb41f0427fb7a75b0bfefe992561738c11fd80","date":1486576891,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n\n\n    for(Pair<AggregateCall, String> namedAggCall : getNamedAggCalls()) {\n\n\n      AggregateCall aggCall = namedAggCall.getKey();\n\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addReverseAggMapping(namedAggCall.getValue(), metric.getKey().toLowerCase()+\"(\"+metric.getValue()+\")\");\n      implementor.addMetricPair(namedAggCall.getValue(), metric.getKey(), metric.getValue());\n      if(aggCall.getName() == null) {\n        implementor.addFieldMapping(namedAggCall.getValue(),\n            aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n      }\n    }\n\n    for(int group : getGroupSet()) {\n      String inName = inNames.get(group);\n      implementor.addBucket(inName);\n    }\n  }\n\n","sourceOld":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n\n\n    for(Pair<AggregateCall, String> namedAggCall : getNamedAggCalls()) {\n\n      AggregateCall aggCall = namedAggCall.getKey();\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addMetricPair(namedAggCall.getValue(), metric.getKey(), metric.getValue());\n      if(aggCall.getName() == null) {\n        implementor.addFieldMapping(namedAggCall.getValue(),\n            aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n      }\n    }\n\n    for(int group : getGroupSet()) {\n      String inName = inNames.get(group);\n      implementor.addBucket(inName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","pathOld":"/dev/null","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n\n\n    for(Pair<AggregateCall, String> namedAggCall : getNamedAggCalls()) {\n\n\n      AggregateCall aggCall = namedAggCall.getKey();\n\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addReverseAggMapping(namedAggCall.getValue(), metric.getKey().toLowerCase()+\"(\"+metric.getValue()+\")\");\n      implementor.addMetricPair(namedAggCall.getValue(), metric.getKey(), metric.getValue());\n      if(aggCall.getName() == null) {\n        implementor.addFieldMapping(namedAggCall.getValue(),\n            aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n      }\n    }\n\n    for(int group : getGroupSet()) {\n      String inName = inNames.get(group);\n      implementor.addBucket(inName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca94deb4283ad57489e4bb6a6e79e30a3ad4337e","date":1487187299,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n\n\n    for(Pair<AggregateCall, String> namedAggCall : getNamedAggCalls()) {\n\n\n      AggregateCall aggCall = namedAggCall.getKey();\n\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addReverseAggMapping(namedAggCall.getValue(), metric.getKey().toLowerCase(Locale.ROOT)+\"(\"+metric.getValue()+\")\");\n      implementor.addMetricPair(namedAggCall.getValue(), metric.getKey(), metric.getValue());\n      if(aggCall.getName() == null) {\n        implementor.addFieldMapping(namedAggCall.getValue(),\n            aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n      }\n    }\n\n    for(int group : getGroupSet()) {\n      String inName = inNames.get(group);\n      implementor.addBucket(inName);\n    }\n  }\n\n","sourceOld":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n\n\n    for(Pair<AggregateCall, String> namedAggCall : getNamedAggCalls()) {\n\n\n      AggregateCall aggCall = namedAggCall.getKey();\n\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addReverseAggMapping(namedAggCall.getValue(), metric.getKey().toLowerCase()+\"(\"+metric.getValue()+\")\");\n      implementor.addMetricPair(namedAggCall.getValue(), metric.getKey(), metric.getValue());\n      if(aggCall.getName() == null) {\n        implementor.addFieldMapping(namedAggCall.getValue(),\n            aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n      }\n    }\n\n    for(int group : getGroupSet()) {\n      String inName = inNames.get(group);\n      implementor.addBucket(inName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9fe3175bbaa122d67f736a75c2984617c502cc0","date":1490722938,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n\n\n    for(Pair<AggregateCall, String> namedAggCall : getNamedAggCalls()) {\n\n      AggregateCall aggCall = namedAggCall.getKey();\n\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addReverseAggMapping(namedAggCall.getValue(), metric.getKey().toLowerCase(Locale.ROOT)+\"(\"+metric.getValue()+\")\");\n      implementor.addMetricPair(namedAggCall.getValue(), metric.getKey(), metric.getValue());\n      /*\n      if(aggCall.getName() == null) {\n        System.out.println(\"AGG:\"+namedAggCall.getValue()+\":\"+ aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n        implementor.addFieldMapping(namedAggCall.getValue(),\n          aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n      }\n      */\n    }\n\n    for(int group : getGroupSet()) {\n      String inName = inNames.get(group);\n      implementor.addBucket(inName);\n    }\n  }\n\n","sourceOld":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n\n\n    for(Pair<AggregateCall, String> namedAggCall : getNamedAggCalls()) {\n\n\n      AggregateCall aggCall = namedAggCall.getKey();\n\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addReverseAggMapping(namedAggCall.getValue(), metric.getKey().toLowerCase(Locale.ROOT)+\"(\"+metric.getValue()+\")\");\n      implementor.addMetricPair(namedAggCall.getValue(), metric.getKey(), metric.getValue());\n      if(aggCall.getName() == null) {\n        implementor.addFieldMapping(namedAggCall.getValue(),\n            aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n      }\n    }\n\n    for(int group : getGroupSet()) {\n      String inName = inNames.get(group);\n      implementor.addBucket(inName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b741b54c163686a5fd077895a797daa9b0b95f","date":1490873946,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#implement(Implementor).mjava","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n\n\n    for(Pair<AggregateCall, String> namedAggCall : getNamedAggCalls()) {\n\n      AggregateCall aggCall = namedAggCall.getKey();\n\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addReverseAggMapping(namedAggCall.getValue(), metric.getKey().toLowerCase(Locale.ROOT)+\"(\"+metric.getValue()+\")\");\n      implementor.addMetricPair(namedAggCall.getValue(), metric.getKey(), metric.getValue());\n      /*\n      if(aggCall.getName() == null) {\n        System.out.println(\"AGG:\"+namedAggCall.getValue()+\":\"+ aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n        implementor.addFieldMapping(namedAggCall.getValue(),\n          aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n      }\n      */\n    }\n\n    for(int group : getGroupSet()) {\n      String inName = inNames.get(group);\n      implementor.addBucket(inName);\n    }\n  }\n\n","sourceOld":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    final List<String> inNames = SolrRules.solrFieldNames(getInput().getRowType());\n\n\n    for(Pair<AggregateCall, String> namedAggCall : getNamedAggCalls()) {\n\n\n      AggregateCall aggCall = namedAggCall.getKey();\n\n      Pair<String, String> metric = toSolrMetric(implementor, aggCall, inNames);\n      implementor.addReverseAggMapping(namedAggCall.getValue(), metric.getKey().toLowerCase(Locale.ROOT)+\"(\"+metric.getValue()+\")\");\n      implementor.addMetricPair(namedAggCall.getValue(), metric.getKey(), metric.getValue());\n      if(aggCall.getName() == null) {\n        implementor.addFieldMapping(namedAggCall.getValue(),\n            aggCall.getAggregation().getName() + \"(\" + inNames.get(aggCall.getArgList().get(0)) + \")\");\n      }\n    }\n\n    for(int group : getGroupSet()) {\n      String inName = inNames.get(group);\n      implementor.addBucket(inName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa4a466195c69a11a113b33adc90f9069031e54e":["b35c86a7787a532402f49557ac05fe2596fa73b9"],"b35c86a7787a532402f49557ac05fe2596fa73b9":["9cc8e977a08af3169747ab78c578cc3037d095d5"],"a9b741b54c163686a5fd077895a797daa9b0b95f":["ca94deb4283ad57489e4bb6a6e79e30a3ad4337e"],"9cc8e977a08af3169747ab78c578cc3037d095d5":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["fa4a466195c69a11a113b33adc90f9069031e54e"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["ca94deb4283ad57489e4bb6a6e79e30a3ad4337e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ca94deb4283ad57489e4bb6a6e79e30a3ad4337e":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9fe3175bbaa122d67f736a75c2984617c502cc0"]},"commit2Childs":{"fa4a466195c69a11a113b33adc90f9069031e54e":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"b35c86a7787a532402f49557ac05fe2596fa73b9":["fa4a466195c69a11a113b33adc90f9069031e54e"],"a9b741b54c163686a5fd077895a797daa9b0b95f":[],"9cc8e977a08af3169747ab78c578cc3037d095d5":["b35c86a7787a532402f49557ac05fe2596fa73b9"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["ca94deb4283ad57489e4bb6a6e79e30a3ad4337e"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"ca94deb4283ad57489e4bb6a6e79e30a3ad4337e":["a9b741b54c163686a5fd077895a797daa9b0b95f","d9fe3175bbaa122d67f736a75c2984617c502cc0"],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["9cc8e977a08af3169747ab78c578cc3037d095d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a9b741b54c163686a5fd077895a797daa9b0b95f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}