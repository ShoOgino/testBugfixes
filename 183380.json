{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AscEvaluator#doWork(Object).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AscEvaluator#doWork(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n    if(null == value){\n      return value;\n    }\n    else if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a List\",toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n    \n    List<?> list = (List<?>)value;\n    \n    if(0 == list.size()){\n      return list;\n    }\n\n    // Validate all of same type and are comparable\n    Object checkingObject = list.get(0);\n    for(int idx = 0; idx < list.size(); ++idx){\n      Object item = list.get(0);\n      \n      if(null == item){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found null value\",toExpression(constructingFactory)));\n      }\n      else if(!(item instanceof Comparable<?>)){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found non-comparable value %s of type %s\",toExpression(constructingFactory), item.toString(), item.getClass().getSimpleName()));\n      }\n      else if(!item.getClass().getCanonicalName().equals(checkingObject.getClass().getCanonicalName())){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - value %s is of type %s but we are expeting type %s\",toExpression(constructingFactory), item.toString(), item.getClass().getSimpleName(), checkingObject.getClass().getCanonicalName()));\n      }\n    }\n\n    return list.stream().sorted((left,right) -> ((Comparable)left).compareTo((Comparable)right)).collect(Collectors.toList());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AscEvaluator#doWork(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n    if(null == value){\n      return value;\n    }\n    else if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a List\",toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n    \n    List<?> list = (List<?>)value;\n    \n    if(0 == list.size()){\n      return list;\n    }\n\n    // Validate all of same type and are comparable\n    Object checkingObject = list.get(0);\n    for(int idx = 0; idx < list.size(); ++idx){\n      Object item = list.get(0);\n      \n      if(null == item){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found null value\",toExpression(constructingFactory)));\n      }\n      else if(!(item instanceof Comparable<?>)){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found non-comparable value %s of type %s\",toExpression(constructingFactory), item.toString(), item.getClass().getSimpleName()));\n      }\n      else if(!item.getClass().getCanonicalName().equals(checkingObject.getClass().getCanonicalName())){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - value %s is of type %s but we are expeting type %s\",toExpression(constructingFactory), item.toString(), item.getClass().getSimpleName(), checkingObject.getClass().getCanonicalName()));\n      }\n    }\n\n    return list.stream().sorted((left,right) -> ((Comparable)left).compareTo((Comparable)right)).collect(Collectors.toList());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AscEvaluator#doWork(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n    if(null == value){\n      return value;\n    }\n    else if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a List\",toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n    \n    List<?> list = (List<?>)value;\n    \n    if(0 == list.size()){\n      return list;\n    }\n\n    // Validate all of same type and are comparable\n    Object checkingObject = list.get(0);\n    for(int idx = 0; idx < list.size(); ++idx){\n      Object item = list.get(0);\n      \n      if(null == item){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found null value\",toExpression(constructingFactory)));\n      }\n      else if(!(item instanceof Comparable<?>)){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found non-comparable value %s of type %s\",toExpression(constructingFactory), item.toString(), item.getClass().getSimpleName()));\n      }\n      else if(!item.getClass().getCanonicalName().equals(checkingObject.getClass().getCanonicalName())){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - value %s is of type %s but we are expeting type %s\",toExpression(constructingFactory), item.toString(), item.getClass().getSimpleName(), checkingObject.getClass().getCanonicalName()));\n      }\n    }\n\n    return list.stream().sorted((left,right) -> ((Comparable)left).compareTo((Comparable)right)).collect(Collectors.toList());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AscEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AscEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Object doWork(Object value) throws IOException {\n    if(null == value){\n      return value;\n    }\n    else if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a List\",toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n    \n    List<?> list = (List<?>)value;\n    \n    if(0 == list.size()){\n      return list;\n    }\n\n    // Validate all of same type and are comparable\n    Object checkingObject = list.get(0);\n    for(int idx = 0; idx < list.size(); ++idx){\n      Object item = list.get(0);\n      \n      if(null == item){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found null value\",toExpression(constructingFactory)));\n      }\n      else if(!(item instanceof Comparable<?>)){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found non-comparable value %s of type %s\",toExpression(constructingFactory), item.toString(), item.getClass().getSimpleName()));\n      }\n      else if(!item.getClass().getCanonicalName().equals(checkingObject.getClass().getCanonicalName())){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - value %s is of type %s but we are expeting type %s\",toExpression(constructingFactory), item.toString(), item.getClass().getSimpleName(), checkingObject.getClass().getCanonicalName()));\n      }\n    }\n\n    return list.stream().sorted((left,right) -> ((Comparable)left).compareTo((Comparable)right)).collect(Collectors.toList());\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException {\n    if(null == value){\n      return value;\n    }\n    else if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a List\",toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n    \n    List<?> list = (List<?>)value;\n    \n    if(0 == list.size()){\n      return list;\n    }\n\n    // Validate all of same type and are comparable\n    Object checkingObject = list.get(0);\n    for(int idx = 0; idx < list.size(); ++idx){\n      Object item = list.get(0);\n      \n      if(null == item){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found null value\",toExpression(constructingFactory)));\n      }\n      else if(!(item instanceof Comparable<?>)){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found non-comparable value %s of type %s\",toExpression(constructingFactory), item.toString(), item.getClass().getSimpleName()));\n      }\n      else if(!item.getClass().getCanonicalName().equals(checkingObject.getClass().getCanonicalName())){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - value %s is of type %s but we are expeting type %s\",toExpression(constructingFactory), item.toString(), item.getClass().getSimpleName(), checkingObject.getClass().getCanonicalName()));\n      }\n    }\n\n    return list.stream().sorted((left,right) -> ((Comparable)left).compareTo((Comparable)right)).collect(Collectors.toList());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}