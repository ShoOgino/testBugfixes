{"path":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"/dev/null","sourceNew":"  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      System.out.println(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":null,"sourceOld":"  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      System.out.println(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      System.out.println(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","sourceOld":"  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      System.out.println(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"/dev/null","sourceNew":"  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      System.out.println(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce83f0d72db4660fd277a9d357698004d8f4336","date":1269047368,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","sourceOld":"  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      System.out.println(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","sourceOld":"  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"537aa1aad31dab05c20bd62ddedb670d7d3a1aa6","date":1287154428,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d","date":1292210954,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","sourceOld":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","sourceOld":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","sourceOld":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","sourceOld":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","sourceOld":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["227a2cd43fc1affe16eb4c4ab4423fbc276bd81d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["afeb033b2bd36d8ce9d82142b197da4dde13068b","227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d":["537aa1aad31dab05c20bd62ddedb670d7d3a1aa6"],"537aa1aad31dab05c20bd62ddedb670d7d3a1aa6":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["afeb033b2bd36d8ce9d82142b197da4dde13068b","537aa1aad31dab05c20bd62ddedb670d7d3a1aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d":["c26f00b574427b55127e869b935845554afde1fa","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"537aa1aad31dab05c20bd62ddedb670d7d3a1aa6":["227a2cd43fc1affe16eb4c4ab4423fbc276bd81d","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","537aa1aad31dab05c20bd62ddedb670d7d3a1aa6","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}