{"path":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03276b2744036b1b19a7a2dd4b74ba7bc484f107","date":1274048508,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new MockRAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = newDirectory(random);\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new MockRAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = newDirectory(random);\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = newField(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = newField(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = newField(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = newField(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = newField(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = newField(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = newField(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = newField(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = newField(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = newField(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = newField(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["790e1fde4caa765b3faaad3fbcd25c6973450336","0762b640e0d0d12b6edb96db68986e13145c3484"],"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"0762b640e0d0d12b6edb96db68986e13145c3484":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0762b640e0d0d12b6edb96db68986e13145c3484"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5f4e87790277826a2aea119328600dfb07761f32":["03276b2744036b1b19a7a2dd4b74ba7bc484f107","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"c084e47df29de3330311d69dabf515ceaa989512":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["29ef99d61cda9641b6250bf9567329a6e65f901d","0762b640e0d0d12b6edb96db68986e13145c3484"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","0762b640e0d0d12b6edb96db68986e13145c3484","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","15bbd254c1506df5299c4df8c148262c7bd6301e","5f4e87790277826a2aea119328600dfb07761f32"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}