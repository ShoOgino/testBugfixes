{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","sourceNew":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(request, null);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","sourceOld":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(request, null);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d81baa64023bbb9b43f6d929ee168b105940d30","date":1486492702,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","sourceNew":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(request, null);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","sourceOld":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(request, null);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","sourceNew":null,"sourceOld":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(request, null);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","sourceNew":null,"sourceOld":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(request, null);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","sourceNew":null,"sourceOld":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(request, null);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d81baa64023bbb9b43f6d929ee168b105940d30":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["3d81baa64023bbb9b43f6d929ee168b105940d30","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["3d81baa64023bbb9b43f6d929ee168b105940d30"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["3d81baa64023bbb9b43f6d929ee168b105940d30","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"3d81baa64023bbb9b43f6d929ee168b105940d30":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["3d81baa64023bbb9b43f6d929ee168b105940d30"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}