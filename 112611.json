{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#buildRandomQuery().mjava","commits":[{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#buildRandomQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#buildRandomQuery().mjava","sourceNew":"  /**\n   * Generates a random query string across the randomized fields/values in the index\n   *\n   * @see #randFieldValue\n   * @see #field\n   */\n  private static String buildRandomQuery() {\n    if (0 == TestUtil.nextInt(random(), 0,10)) {\n      return \"*:*\";\n    }\n    final int numClauses = TestUtil.nextInt(random(), 3, 10);\n    List<String> clauses = new ArrayList<String>(numClauses);\n    for (int c = 0; c < numClauses; c++) {\n      final int fieldNum = random().nextInt(MAX_FIELD_NUM);\n      // keep queries simple, just use str fields - not point of test\n      clauses.add(strfield(fieldNum) + \":\" + randFieldValue(fieldNum));\n    }\n    return \"(\" + StringUtils.join(clauses, \" OR \") + \")\";\n  }\n\n","sourceOld":"  /**\n   * Generates a random query string across the randomized fields/values in the index\n   *\n   * @see #randFieldValue\n   * @see #field\n   */\n  private static String buildRandomQuery() {\n    if (0 == TestUtil.nextInt(random(), 0,10)) {\n      return \"*:*\";\n    }\n    final int numClauses = TestUtil.nextInt(random(), 3, 10);\n    List<String> clauses = new ArrayList<String>(numClauses);\n    for (int c = 0; c < numClauses; c++) {\n      final int fieldNum = random().nextInt(MAX_FIELD_NUM);\n      // keep queries simple, just use str fields - not point of test\n      clauses.add(strfield(fieldNum) + \":\" + randFieldValue(fieldNum));\n    }\n    return \"(\" + StringUtils.join(clauses, \" OR \") + \")\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ac6494315d04f68950d2f00f5436b4861bcd467","date":1553125039,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#buildRandomQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#buildRandomQuery().mjava","sourceNew":"  /**\n   * Generates a random query string across the randomized fields/values in the index\n   *\n   * @see #randFieldValue\n   * @see #field\n   */\n  private static String buildRandomQuery() {\n    if (0 == TestUtil.nextInt(random(), 0,10)) {\n      return \"*:*\";\n    }\n    final int numClauses = TestUtil.nextInt(random(), 3, 10);\n    List<String> clauses = new ArrayList<String>(numClauses);\n    for (int c = 0; c < numClauses; c++) {\n      final int fieldNum = random().nextInt(MAX_FIELD_NUM);\n      // keep queries simple, just use str fields - not point of test\n      clauses.add(strfield(fieldNum) + \":\" + randFieldValue(fieldNum));\n    }\n    return \"(\" + String.join(\" OR \", clauses) + \")\";\n  }\n\n","sourceOld":"  /**\n   * Generates a random query string across the randomized fields/values in the index\n   *\n   * @see #randFieldValue\n   * @see #field\n   */\n  private static String buildRandomQuery() {\n    if (0 == TestUtil.nextInt(random(), 0,10)) {\n      return \"*:*\";\n    }\n    final int numClauses = TestUtil.nextInt(random(), 3, 10);\n    List<String> clauses = new ArrayList<String>(numClauses);\n    for (int c = 0; c < numClauses; c++) {\n      final int fieldNum = random().nextInt(MAX_FIELD_NUM);\n      // keep queries simple, just use str fields - not point of test\n      clauses.add(strfield(fieldNum) + \":\" + randFieldValue(fieldNum));\n    }\n    return \"(\" + StringUtils.join(clauses, \" OR \") + \")\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ac6494315d04f68950d2f00f5436b4861bcd467":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ac6494315d04f68950d2f00f5436b4861bcd467"]},"commit2Childs":{"0ac6494315d04f68950d2f00f5436b4861bcd467":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["0ac6494315d04f68950d2f00f5436b4861bcd467"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}