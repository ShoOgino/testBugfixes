{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#packValues(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#packValues(String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#packValues(String).mjava","sourceNew":"  /**\n   * Packs the values by storing them in 4 bits, two values into a byte Values\n   * range is from 0 to 9. We use zero as terminator, so we'll add 1 to the\n   * value.\n   * \n   * @param values a string of digits from '0' to '9' representing the\n   *        interletter values.\n   * @return the index into the vspace array where the packed values are stored.\n   */\n  protected int packValues(String values) {\n    int i, n = values.length();\n    int m = (n & 1) == 1 ? (n >> 1) + 2 : (n >> 1) + 1;\n    int offset = vspace.alloc(m);\n    byte[] va = vspace.getArray();\n    for (i = 0; i < n; i++) {\n      int j = i >> 1;\n      byte v = (byte) ((values.charAt(i) - '0' + 1) & 0x0f);\n      if ((i & 1) == 1) {\n        va[j + offset] = (byte) (va[j + offset] | v);\n      } else {\n        va[j + offset] = (byte) (v << 4); // big endian\n      }\n    }\n    va[m - 1 + offset] = 0; // terminator\n    return offset;\n  }\n\n","sourceOld":"  /**\n   * Packs the values by storing them in 4 bits, two values into a byte Values\n   * range is from 0 to 9. We use zero as terminator, so we'll add 1 to the\n   * value.\n   * \n   * @param values a string of digits from '0' to '9' representing the\n   *        interletter values.\n   * @return the index into the vspace array where the packed values are stored.\n   */\n  protected int packValues(String values) {\n    int i, n = values.length();\n    int m = (n & 1) == 1 ? (n >> 1) + 2 : (n >> 1) + 1;\n    int offset = vspace.alloc(m);\n    byte[] va = vspace.getArray();\n    for (i = 0; i < n; i++) {\n      int j = i >> 1;\n      byte v = (byte) ((values.charAt(i) - '0' + 1) & 0x0f);\n      if ((i & 1) == 1) {\n        va[j + offset] = (byte) (va[j + offset] | v);\n      } else {\n        va[j + offset] = (byte) (v << 4); // big endian\n      }\n    }\n    va[m - 1 + offset] = 0; // terminator\n    return offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#packValues(String).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#packValues(String).mjava","sourceNew":"  /**\n   * Packs the values by storing them in 4 bits, two values into a byte Values\n   * range is from 0 to 9. We use zero as terminator, so we'll add 1 to the\n   * value.\n   * \n   * @param values a string of digits from '0' to '9' representing the\n   *        interletter values.\n   * @return the index into the vspace array where the packed values are stored.\n   */\n  protected int packValues(String values) {\n    int i, n = values.length();\n    int m = (n & 1) == 1 ? (n >> 1) + 2 : (n >> 1) + 1;\n    int offset = vspace.alloc(m);\n    byte[] va = vspace.getArray();\n    for (i = 0; i < n; i++) {\n      int j = i >> 1;\n      byte v = (byte) ((values.charAt(i) - '0' + 1) & 0x0f);\n      if ((i & 1) == 1) {\n        va[j + offset] = (byte) (va[j + offset] | v);\n      } else {\n        va[j + offset] = (byte) (v << 4); // big endian\n      }\n    }\n    va[m - 1 + offset] = 0; // terminator\n    return offset;\n  }\n\n","sourceOld":"  /**\n   * Packs the values by storing them in 4 bits, two values into a byte Values\n   * range is from 0 to 9. We use zero as terminator, so we'll add 1 to the\n   * value.\n   * \n   * @param values a string of digits from '0' to '9' representing the\n   *        interletter values.\n   * @return the index into the vspace array where the packed values are stored.\n   */\n  protected int packValues(String values) {\n    int i, n = values.length();\n    int m = (n & 1) == 1 ? (n >> 1) + 2 : (n >> 1) + 1;\n    int offset = vspace.alloc(m);\n    byte[] va = vspace.getArray();\n    for (i = 0; i < n; i++) {\n      int j = i >> 1;\n      byte v = (byte) ((values.charAt(i) - '0' + 1) & 0x0f);\n      if ((i & 1) == 1) {\n        va[j + offset] = (byte) (va[j + offset] | v);\n      } else {\n        va[j + offset] = (byte) (v << 4); // big endian\n      }\n    }\n    va[m - 1 + offset] = 0; // terminator\n    return offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}