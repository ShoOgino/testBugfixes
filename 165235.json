{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#incrementToken().mjava","commits":[{"id":"540f57ba7d9d46ccc6f0157e8b8021a4c969770d","date":1272974241,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/PatternTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (index >= str.length()) return false;\n    clearAttributes();\n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        index = matcher.start(group);\n        final int endIndex = matcher.end(group);\n        if (index == endIndex) continue;       \n        termAtt.setEmpty().append(str, index, endIndex);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(endIndex));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setEmpty().append(str, index, matcher.start());\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setEmpty().append(str, index, str.length());\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (index >= str.length()) return false;\n    clearAttributes();\n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        final String match = matcher.group(group);\n        if (match.length() == 0) continue;\n        termAtt.setEmpty().append(match);\n        index = matcher.start(group);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.end(group)));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setEmpty().append(str, index, matcher.start());\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setEmpty().append(str, index, str.length());\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (index >= str.length()) return false;\n    clearAttributes();\n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        index = matcher.start(group);\n        final int endIndex = matcher.end(group);\n        if (index == endIndex) continue;       \n        termAtt.setEmpty().append(str, index, endIndex);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(endIndex));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setEmpty().append(str, index, matcher.start());\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setEmpty().append(str, index, str.length());\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (index >= str.length()) return false;\n    clearAttributes();\n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        index = matcher.start(group);\n        final int endIndex = matcher.end(group);\n        if (index == endIndex) continue;       \n        termAtt.setEmpty().append(str, index, endIndex);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(endIndex));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setEmpty().append(str, index, matcher.start());\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setEmpty().append(str, index, str.length());\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}