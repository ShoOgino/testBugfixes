{"path":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","commits":[{"id":"2a2cca106df030d94d85350e3573bac463d5fb1a","date":1184352530,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","pathOld":"/dev/null","sourceNew":"  private static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n\t  Directory d = FSDirectory.getDirectory(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatiblitiy\n      log.warning(\"No lockType configured for \"+path+\" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n    \n\t  if (\"simple\".equals(lockType)) {\n\t\t  d.setLockFactory(new SimpleFSLockFactory(path));\n\t  } else if(\"native\".equals(lockType)) {\n\t\t  d.setLockFactory(new NativeFSLockFactory(path));\n\t  } else if(\"single\".equals(lockType)) {\n\t\t  d.setLockFactory(new SingleInstanceLockFactory());\n\t  } else if(\"none\".equals(lockType)) {\n\t\t  d.setLockFactory(new NoLockFactory());\n\t  } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              \"Unrecognized lockType: \" + rawLockType);\n\t  } \n\t  return d;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f7f08509420d59592367d932f6b559dd709ca7","date":1204748616,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","sourceNew":"  private static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    Directory d = FSDirectory.getDirectory(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatiblitiy\n      log.warning(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  private static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n\t  Directory d = FSDirectory.getDirectory(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatiblitiy\n      log.warning(\"No lockType configured for \"+path+\" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n    \n\t  if (\"simple\".equals(lockType)) {\n\t\t  d.setLockFactory(new SimpleFSLockFactory(path));\n\t  } else if(\"native\".equals(lockType)) {\n\t\t  d.setLockFactory(new NativeFSLockFactory(path));\n\t  } else if(\"single\".equals(lockType)) {\n\t\t  d.setLockFactory(new SingleInstanceLockFactory());\n\t  } else if(\"none\".equals(lockType)) {\n\t\t  d.setLockFactory(new NoLockFactory());\n\t  } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              \"Unrecognized lockType: \" + rawLockType);\n\t  } \n\t  return d;\n  }\n\n","bugFix":null,"bugIntro":["44a77e8359cdae8da5c1bc2c2490d5074d34d1c2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e74c023a740578ac4e079f01ded819fd6307c78","date":1215880020,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    Directory d = FSDirectory.getDirectory(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatiblitiy\n      log.warning(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  private static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    Directory d = FSDirectory.getDirectory(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatiblitiy\n      log.warning(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44a77e8359cdae8da5c1bc2c2490d5074d34d1c2","date":1218314075,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    Directory d = FSDirectory.getDirectory(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatiblitiy\n      log.warning(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // recipie for disaster\n      log.severe(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    Directory d = FSDirectory.getDirectory(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatiblitiy\n      log.warning(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":["41f7f08509420d59592367d932f6b559dd709ca7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    Directory d = FSDirectory.getDirectory(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatiblitiy\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // recipie for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    Directory d = FSDirectory.getDirectory(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatiblitiy\n      log.warning(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // recipie for disaster\n      log.severe(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f1e0aff124b03ebeca0a1de45361b8efd0d2d9","date":1226014899,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * @deprecated use getDirectory(DirectoryFactory directoryFactory, SolrIndexConfig config)\n   */\n  public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    Directory d = FSDirectory.getDirectory(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    Directory d = FSDirectory.getDirectory(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatiblitiy\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // recipie for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"988f04bd8ab1aed74513226e8d1e0be89aae4aa1","date":1229460317,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * @deprecated use getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config)\n   */\n  public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    return getDirectory(path, LEGACY_DIR_FACTORY, config);\n  }\n\n","sourceOld":"  /**\n   * @deprecated use getDirectory(DirectoryFactory directoryFactory, SolrIndexConfig config)\n   */\n  public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    Directory d = FSDirectory.getDirectory(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f902fa5ac9163d7a5a789615cab57d852fd2f0b","date":1240946122,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * @deprecated use getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config)\n   */\n  public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    log.warn(\"SolrIndexWriter is using LEGACY_DIR_FACTORY which means deprecated code is likely in use and SolrIndexWriter is ignoring any custom DirectoryFactory.\");\n    return getDirectory(path, LEGACY_DIR_FACTORY, config);\n  }\n\n","sourceOld":"  /**\n   * @deprecated use getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config)\n   */\n  public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    return getDirectory(path, LEGACY_DIR_FACTORY, config);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,SolrIndexConfig).mjava","sourceNew":"  /**\n   * @deprecated use getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config)\n   */\n  public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    log.warn(\"SolrIndexWriter is using LEGACY_DIR_FACTORY which means deprecated code is likely in use and SolrIndexWriter is ignoring any custom DirectoryFactory.\");\n    return getDirectory(path, LEGACY_DIR_FACTORY, config);\n  }\n\n","sourceOld":"  /**\n   * @deprecated use getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config)\n   */\n  public static Directory getDirectory(String path, SolrIndexConfig config) throws IOException {\n    log.warn(\"SolrIndexWriter is using LEGACY_DIR_FACTORY which means deprecated code is likely in use and SolrIndexWriter is ignoring any custom DirectoryFactory.\");\n    return getDirectory(path, LEGACY_DIR_FACTORY, config);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44a77e8359cdae8da5c1bc2c2490d5074d34d1c2":["0e74c023a740578ac4e079f01ded819fd6307c78"],"41f7f08509420d59592367d932f6b559dd709ca7":["2a2cca106df030d94d85350e3573bac463d5fb1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f902fa5ac9163d7a5a789615cab57d852fd2f0b":["988f04bd8ab1aed74513226e8d1e0be89aae4aa1"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2a2cca106df030d94d85350e3573bac463d5fb1a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["8f902fa5ac9163d7a5a789615cab57d852fd2f0b"],"0e74c023a740578ac4e079f01ded819fd6307c78":["41f7f08509420d59592367d932f6b559dd709ca7"],"988f04bd8ab1aed74513226e8d1e0be89aae4aa1":["31f1e0aff124b03ebeca0a1de45361b8efd0d2d9"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["44a77e8359cdae8da5c1bc2c2490d5074d34d1c2"],"31f1e0aff124b03ebeca0a1de45361b8efd0d2d9":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44a77e8359cdae8da5c1bc2c2490d5074d34d1c2":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"41f7f08509420d59592367d932f6b559dd709ca7":["0e74c023a740578ac4e079f01ded819fd6307c78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8f902fa5ac9163d7a5a789615cab57d852fd2f0b":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2a2cca106df030d94d85350e3573bac463d5fb1a"],"2a2cca106df030d94d85350e3573bac463d5fb1a":["41f7f08509420d59592367d932f6b559dd709ca7"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"0e74c023a740578ac4e079f01ded819fd6307c78":["44a77e8359cdae8da5c1bc2c2490d5074d34d1c2"],"988f04bd8ab1aed74513226e8d1e0be89aae4aa1":["8f902fa5ac9163d7a5a789615cab57d852fd2f0b"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["31f1e0aff124b03ebeca0a1de45361b8efd0d2d9"],"31f1e0aff124b03ebeca0a1de45361b8efd0d2d9":["988f04bd8ab1aed74513226e8d1e0be89aae4aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}