{"path":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","commits":[{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"/dev/null","sourceNew":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation, backupName);\n    String restoreIndexName = \"restore.\" + backupName;\n    Path restoreIndexPath = Paths.get(core.getDataDir(), restoreIndexName);\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath.toString(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying over file to restore directory \" + filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          long checksum = CodecUtil.retrieveChecksum(indexInput);\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.info(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["28c977c4aef9be49834367cc544d77c28f8d2770","0463d2997b25fd01c7d3f0f93e6a523e5a4b5f68","b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"/dev/null","sourceNew":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation, backupName);\n    String restoreIndexName = \"restore.\" + backupName;\n    Path restoreIndexPath = Paths.get(core.getDataDir(), restoreIndexName);\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath.toString(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying over file to restore directory \" + filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          long checksum = CodecUtil.retrieveChecksum(indexInput);\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.info(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72","date":1428245942,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation, backupName);\n    String restoreIndexName = \"restore.\" + backupName;\n    Path restoreIndexPath = Paths.get(core.getDataDir(), restoreIndexName);\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath.toString(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.info(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation, backupName);\n    String restoreIndexName = \"restore.\" + backupName;\n    Path restoreIndexPath = Paths.get(core.getDataDir(), restoreIndexName);\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath.toString(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying over file to restore directory \" + filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          long checksum = CodecUtil.retrieveChecksum(indexInput);\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.info(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28c977c4aef9be49834367cc544d77c28f8d2770","date":1428417532,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation, backupName);\n    String restoreIndexName = \"restore.\" + backupName;\n    Path restoreIndexPath = Paths.get(core.getDataDir(), restoreIndexName);\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath.toString(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation, backupName);\n    String restoreIndexName = \"restore.\" + backupName;\n    Path restoreIndexPath = Paths.get(core.getDataDir(), restoreIndexName);\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath.toString(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.info(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c42316df77794f7252857e7d5e9ce45ff1d65c61","date":1428666763,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    String restoreIndexName = \"restore.\" + backupName;\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation, backupName);\n    String restoreIndexName = \"restore.\" + backupName;\n    Path restoreIndexPath = Paths.get(core.getDataDir(), restoreIndexName);\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath.toString(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    String restoreIndexName = \"restore.\" + backupName;\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFiles(Collections.singleton(IndexFetcher.INDEX_PROPERTIES));\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    String restoreIndexName = \"restore.\" + backupName;\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44a0466296f4b2d9deac60e3e524628c97aa5191","date":1454532248,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    String restoreIndexName = \"restore.\" + backupName;\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    String restoreIndexName = \"restore.\" + backupName;\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFiles(Collections.singleton(IndexFetcher.INDEX_PROPERTIES));\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0463d2997b25fd01c7d3f0f93e6a523e5a4b5f68","date":1457217731,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    String restoreIndexName = \"restore.\" + backupName;\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  private boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal || (!compareResult.checkSummed && (filename.endsWith(\".si\")\n              || filename.endsWith(\".liv\") || filename.startsWith(\"segments_\")))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.createURI(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["af3193c66df8e8324d4bce9f66df967af9e8c602"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"91e2345fb81b6c1c7faefa550ee5eaafadc54486","date":1469730189,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.createURI(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n\n        SolrSnapshotMetaDataManager snapshotsMgr = core.getSnapshotMetaDataManager();\n        Collection<SnapshotMetaData> snapshots = snapshotsMgr.listSnapshotsInIndexDir(indexDirPath);\n\n        // Delete the old index directory only if no snapshot exists in that directory.\n        if (snapshots.isEmpty()) {\n          core.getDirectoryFactory().remove(indexDir);\n        } else {\n          SolrSnapshotManager.deleteNonSnapshotIndexFiles(indexDir, snapshots);\n        }\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.createURI(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.createURI(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n\n        SolrSnapshotMetaDataManager snapshotsMgr = core.getSnapshotMetaDataManager();\n        Collection<SnapshotMetaData> snapshots = snapshotsMgr.listSnapshotsInIndexDir(indexDirPath);\n\n        // Delete the old index directory only if no snapshot exists in that directory.\n        if (snapshots.isEmpty()) {\n          core.getDirectoryFactory().remove(indexDir);\n        } else {\n          SolrSnapshotManager.deleteNonSnapshotIndexFiles(indexDir, snapshots);\n        }\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.createURI(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3193c66df8e8324d4bce9f66df967af9e8c602","date":1472772499,"type":3,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.resolve(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n\n        SolrSnapshotMetaDataManager snapshotsMgr = core.getSnapshotMetaDataManager();\n        Collection<SnapshotMetaData> snapshots = snapshotsMgr.listSnapshotsInIndexDir(indexDirPath);\n\n        // Delete the old index directory only if no snapshot exists in that directory.\n        if (snapshots.isEmpty()) {\n          core.getDirectoryFactory().remove(indexDir);\n        } else {\n          SolrSnapshotManager.deleteNonSnapshotIndexFiles(indexDir, snapshots);\n        }\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.createURI(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n\n        SolrSnapshotMetaDataManager snapshotsMgr = core.getSnapshotMetaDataManager();\n        Collection<SnapshotMetaData> snapshots = snapshotsMgr.listSnapshotsInIndexDir(indexDirPath);\n\n        // Delete the old index directory only if no snapshot exists in that directory.\n        if (snapshots.isEmpty()) {\n          core.getDirectoryFactory().remove(indexDir);\n        } else {\n          SolrSnapshotManager.deleteNonSnapshotIndexFiles(indexDir, snapshots);\n        }\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da02fc41cfc83eaee66abb7c926f2c909bda6d26","date":1472818509,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.resolve(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n\n        SolrSnapshotMetaDataManager snapshotsMgr = core.getSnapshotMetaDataManager();\n        Collection<SnapshotMetaData> snapshots = snapshotsMgr.listSnapshotsInIndexDir(indexDirPath);\n\n        // Delete the old index directory only if no snapshot exists in that directory.\n        if (snapshots.isEmpty()) {\n          core.getDirectoryFactory().remove(indexDir);\n        } else {\n          SolrSnapshotManager.deleteNonSnapshotIndexFiles(indexDir, snapshots);\n        }\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.createURI(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n\n        SolrSnapshotMetaDataManager snapshotsMgr = core.getSnapshotMetaDataManager();\n        Collection<SnapshotMetaData> snapshots = snapshotsMgr.listSnapshotsInIndexDir(indexDirPath);\n\n        // Delete the old index directory only if no snapshot exists in that directory.\n        if (snapshots.isEmpty()) {\n          core.getDirectoryFactory().remove(indexDir);\n        } else {\n          SolrSnapshotManager.deleteNonSnapshotIndexFiles(indexDir, snapshots);\n        }\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.resolve(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n\n        SolrSnapshotMetaDataManager snapshotsMgr = core.getSnapshotMetaDataManager();\n        Collection<SnapshotMetaData> snapshots = snapshotsMgr.listSnapshotsInIndexDir(indexDirPath);\n\n        // Delete the old index directory only if no snapshot exists in that directory.\n        if (snapshots.isEmpty()) {\n          core.getDirectoryFactory().remove(indexDir);\n        } else {\n          SolrSnapshotManager.deleteNonSnapshotIndexFiles(indexDir, snapshots);\n        }\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.createURI(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n\n        SolrSnapshotMetaDataManager snapshotsMgr = core.getSnapshotMetaDataManager();\n        Collection<SnapshotMetaData> snapshots = snapshotsMgr.listSnapshotsInIndexDir(indexDirPath);\n\n        // Delete the old index directory only if no snapshot exists in that directory.\n        if (snapshots.isEmpty()) {\n          core.getDirectoryFactory().remove(indexDir);\n        } else {\n          SolrSnapshotManager.deleteNonSnapshotIndexFiles(indexDir, snapshots);\n        }\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.resolve(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n\n        SolrSnapshotMetaDataManager snapshotsMgr = core.getSnapshotMetaDataManager();\n        Collection<SnapshotMetaData> snapshots = snapshotsMgr.listSnapshotsInIndexDir(indexDirPath);\n\n        // Delete the old index directory only if no snapshot exists in that directory.\n        if (snapshots.isEmpty()) {\n          core.getDirectoryFactory().remove(indexDir);\n        } else {\n          SolrSnapshotManager.deleteNonSnapshotIndexFiles(indexDir, snapshots);\n        }\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.createURI(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n\n        SolrSnapshotMetaDataManager snapshotsMgr = core.getSnapshotMetaDataManager();\n        Collection<SnapshotMetaData> snapshots = snapshotsMgr.listSnapshotsInIndexDir(indexDirPath);\n\n        // Delete the old index directory only if no snapshot exists in that directory.\n        if (snapshots.isEmpty()) {\n          core.getDirectoryFactory().remove(indexDir);\n        } else {\n          SolrSnapshotManager.deleteNonSnapshotIndexFiles(indexDir, snapshots);\n        }\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e13696c44d3e2405098726359ab81dab178e7bc","date":1476726926,"type":3,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.resolve(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        // Cleanup all index files not associated with any *named* snapshot.\n        core.deleteNonSnapshotIndexFiles(indexDirPath);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.resolve(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n\n        SolrSnapshotMetaDataManager snapshotsMgr = core.getSnapshotMetaDataManager();\n        Collection<SnapshotMetaData> snapshots = snapshotsMgr.listSnapshotsInIndexDir(indexDirPath);\n\n        // Delete the old index directory only if no snapshot exists in that directory.\n        if (snapshots.isEmpty()) {\n          core.getDirectoryFactory().remove(indexDir);\n        } else {\n          SolrSnapshotManager.deleteNonSnapshotIndexFiles(indexDir, snapshots);\n        }\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.resolve(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        // Cleanup all index files not associated with any *named* snapshot.\n        core.deleteNonSnapshotIndexFiles(indexDirPath);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean doRestore() throws Exception {\n\n    Path backupPath = Paths.get(backupLocation).resolve(backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try (Directory backupDir = FSDirectory.open(backupPath)) {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(core.getIndexDir(),\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupDir.listAll()) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupDir.openInput(filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            restoreIndexDir.copyFrom(backupDir, filename, filename, IOContext.READONCE);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\");\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        core.getDirectoryFactory().remove(indexDir);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b39b1b02e442aaf736cc87417e93552cbd8ef1da","date":1484786722,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.resolve(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      core.modifyIndexProps(restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        // Cleanup all index files not associated with any *named* snapshot.\n        core.deleteNonSnapshotIndexFiles(indexDirPath);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.resolve(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        // Cleanup all index files not associated with any *named* snapshot.\n        core.deleteNonSnapshotIndexFiles(indexDirPath);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.resolve(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      core.modifyIndexProps(restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        // Cleanup all index files not associated with any *named* snapshot.\n        core.deleteNonSnapshotIndexFiles(indexDirPath);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.resolve(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      IndexFetcher.modifyIndexProps(core, restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        // Cleanup all index files not associated with any *named* snapshot.\n        core.deleteNonSnapshotIndexFiles(indexDirPath);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RestoreCore#doRestore().mjava","sourceNew":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.resolve(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: {}\", filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      core.modifyIndexProps(restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        // Cleanup all index files not associated with any *named* snapshot.\n        core.deleteNonSnapshotIndexFiles(indexDirPath);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  public boolean doRestore() throws Exception {\n\n    URI backupPath = backupRepo.resolve(backupLocation, backupName);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(SnapShooter.DATE_FMT, Locale.ROOT);\n    String restoreIndexName = \"restore.\" + dateFormat.format(new Date());\n    String restoreIndexPath = core.getDataDir() + restoreIndexName;\n\n    String indexDirPath = core.getIndexDir();\n    Directory restoreIndexDir = null;\n    Directory indexDir = null;\n    try {\n\n      restoreIndexDir = core.getDirectoryFactory().get(restoreIndexPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Prefer local copy.\n      indexDir = core.getDirectoryFactory().get(indexDirPath,\n          DirectoryFactory.DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n\n      //Move all files from backupDir to restoreIndexDir\n      for (String filename : backupRepo.listAll(backupPath)) {\n        checkInterrupted();\n        log.info(\"Copying file {} to restore directory \", filename);\n        try (IndexInput indexInput = backupRepo.openInput(backupPath, filename, IOContext.READONCE)) {\n          Long checksum = null;\n          try {\n            checksum = CodecUtil.retrieveChecksum(indexInput);\n          } catch (Exception e) {\n            log.warn(\"Could not read checksum from index file: \" + filename, e);\n          }\n          long length = indexInput.length();\n          IndexFetcher.CompareResult compareResult = IndexFetcher.compareFile(indexDir, filename, length, checksum);\n          if (!compareResult.equal ||\n              (IndexFetcher.filesToAlwaysDownloadIfNoChecksums(filename, length, compareResult))) {\n            backupRepo.copyFileTo(backupPath, filename, restoreIndexDir);\n          } else {\n            //prefer local copy\n            restoreIndexDir.copyFrom(indexDir, filename, filename, IOContext.READONCE);\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while restoring the backup index \", e);\n          throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n        }\n      }\n      log.debug(\"Switching directories\");\n      core.modifyIndexProps(restoreIndexName);\n\n      boolean success;\n      try {\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        success = true;\n        log.info(\"Successfully restored to the backup index\");\n      } catch (Exception e) {\n        //Rollback to the old index directory. Delete the restore index directory and mark the restore as failed.\n        log.warn(\"Could not switch to restored index. Rolling back to the current index\", e);\n        Directory dir = null;\n        try {\n          dir = core.getDirectoryFactory().get(core.getDataDir(), DirectoryFactory.DirContext.META_DATA,\n              core.getSolrConfig().indexConfig.lockType);\n          dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n        } finally {\n          if (dir != null) {\n            core.getDirectoryFactory().release(dir);\n          }\n        }\n\n        core.getDirectoryFactory().doneWithDirectory(restoreIndexDir);\n        core.getDirectoryFactory().remove(restoreIndexDir);\n        core.getUpdateHandler().newIndexWriter(false);\n        openNewSearcher();\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Exception while restoring the backup index\", e);\n      }\n      if (success) {\n        core.getDirectoryFactory().doneWithDirectory(indexDir);\n        // Cleanup all index files not associated with any *named* snapshot.\n        core.deleteNonSnapshotIndexFiles(indexDirPath);\n      }\n\n      return true;\n    } finally {\n      if (restoreIndexDir != null) {\n        core.getDirectoryFactory().release(restoreIndexDir);\n      }\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","af3193c66df8e8324d4bce9f66df967af9e8c602"],"bc8f206328a706450934717bec7ccc22ad166fc0":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["0463d2997b25fd01c7d3f0f93e6a523e5a4b5f68","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"28c977c4aef9be49834367cc544d77c28f8d2770":["53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"0463d2997b25fd01c7d3f0f93e6a523e5a4b5f68":["c42316df77794f7252857e7d5e9ce45ff1d65c61"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["c42316df77794f7252857e7d5e9ce45ff1d65c61"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["3e13696c44d3e2405098726359ab81dab178e7bc"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"3e13696c44d3e2405098726359ab81dab178e7bc":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["0463d2997b25fd01c7d3f0f93e6a523e5a4b5f68"],"53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","3e13696c44d3e2405098726359ab81dab178e7bc"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["0463d2997b25fd01c7d3f0f93e6a523e5a4b5f68","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"c42316df77794f7252857e7d5e9ce45ff1d65c61":["28c977c4aef9be49834367cc544d77c28f8d2770"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"]},"commit2Childs":{"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"28c977c4aef9be49834367cc544d77c28f8d2770":["c42316df77794f7252857e7d5e9ce45ff1d65c61"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3e13696c44d3e2405098726359ab81dab178e7bc"],"0463d2997b25fd01c7d3f0f93e6a523e5a4b5f68":["55b50463286869f584cf849d1587a0fcd54d1dfa","c5c99ad021f3da085fcb66220598a8f91dc5e453","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["44a0466296f4b2d9deac60e3e524628c97aa5191"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["da02fc41cfc83eaee66abb7c926f2c909bda6d26","bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","af3193c66df8e8324d4bce9f66df967af9e8c602","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3e13696c44d3e2405098726359ab81dab178e7bc":["b39b1b02e442aaf736cc87417e93552cbd8ef1da","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72":["28c977c4aef9be49834367cc544d77c28f8d2770"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["55b50463286869f584cf849d1587a0fcd54d1dfa","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"44a0466296f4b2d9deac60e3e524628c97aa5191":[],"c42316df77794f7252857e7d5e9ce45ff1d65c61":["0463d2997b25fd01c7d3f0f93e6a523e5a4b5f68","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","44a0466296f4b2d9deac60e3e524628c97aa5191","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}