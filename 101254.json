{"path":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveHdfsReplica(ClusterState,NamedList,String,String,String,String,DocCollection,Replica,Slice).mjava","commits":[{"id":"114b665752b215f36836a7c5411f7c433b4d1352","date":1497007372,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveHdfsReplica(ClusterState,NamedList,String,String,String,String,DocCollection,Replica,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveHdfsReplica(ClusterState,NamedList,String,String,String,DocCollection,Replica,Slice).mjava","sourceNew":"  private void moveHdfsReplica(ClusterState clusterState, NamedList results, String dataDir, String ulogDir, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName()\n        );\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_DATA_DIR, false);\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_INDEX, false);\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n      return;\n    }\n\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName,\n        CoreAdminParams.DATA_DIR, dataDir,\n        CoreAdminParams.ULOG_DIR, ulogDir);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveHdfsReplica(ClusterState clusterState, NamedList results, String dataDir, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName()\n        );\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_DATA_DIR, false);\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_INDEX, false);\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n      return;\n    }\n\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName,\n        CoreAdminParams.DATA_DIR, dataDir);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveHdfsReplica(ClusterState,NamedList,String,String,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveHdfsReplica(ClusterState,NamedList,String,String,String,String,DocCollection,Replica,Slice).mjava","sourceNew":"  private void moveHdfsReplica(ClusterState clusterState, NamedList results, String dataDir, String ulogDir, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName()\n        );\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_DATA_DIR, false);\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_INDEX, false);\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n      return;\n    }\n\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName,\n        CoreAdminParams.DATA_DIR, dataDir,\n        CoreAdminParams.ULOG_DIR, ulogDir);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveHdfsReplica(ClusterState clusterState, NamedList results, String dataDir, String ulogDir, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName()\n        );\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_DATA_DIR, false);\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_INDEX, false);\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n      return;\n    }\n\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName,\n        CoreAdminParams.DATA_DIR, dataDir,\n        CoreAdminParams.ULOG_DIR, ulogDir);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["114b665752b215f36836a7c5411f7c433b4d1352","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"114b665752b215f36836a7c5411f7c433b4d1352":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"114b665752b215f36836a7c5411f7c433b4d1352":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","114b665752b215f36836a7c5411f7c433b4d1352","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}