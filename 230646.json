{"path":"src/test/org/apache/lucene/search/TestRangeQuery#testInclusiveCollating().mjava","commits":[{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeQuery#testInclusiveCollating().mjava","pathOld":"/dev/null","sourceNew":"  public void testInclusiveCollating() throws Exception {\n    Query query = new RangeQuery(new Term(\"content\", \"A\"),\n                                 new Term(\"content\", \"C\"),\n                                 true, Collator.getInstance(Locale.ENGLISH));\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeQuery#testInclusiveCollating().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeQuery#testInclusiveCollating().mjava","sourceNew":"  public void testInclusiveCollating() throws Exception {\n    Query query = new RangeQuery(\"content\", \"A\", \"C\",true, true, Collator.getInstance(Locale.ENGLISH));\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testInclusiveCollating() throws Exception {\n    Query query = new RangeQuery(new Term(\"content\", \"A\"),\n                                 new Term(\"content\", \"C\"),\n                                 true, Collator.getInstance(Locale.ENGLISH));\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusiveCollating().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeQuery#testInclusiveCollating().mjava","sourceNew":"  public void testInclusiveCollating() throws Exception {\n    Query query = new TermRangeQuery(\"content\", \"A\", \"C\",true, true, Collator.getInstance(Locale.ENGLISH));\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testInclusiveCollating() throws Exception {\n    Query query = new RangeQuery(\"content\", \"A\", \"C\",true, true, Collator.getInstance(Locale.ENGLISH));\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"b33dc4652df2747e38f9782fde82bd426b77c538":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"]},"commit2Childs":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b33dc4652df2747e38f9782fde82bd426b77c538"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}