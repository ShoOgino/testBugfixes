{"path":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          wrapped.close();\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94","date":1327846543,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          // nocommit: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          // nocommit: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          // nocommit: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cd232a36e691d3af7035460733f822fb1a5239a","date":1327962711,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          // TODO: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          // TODO: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          // TODO: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          // nocommit: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          // nocommit: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          // nocommit: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          // TODO: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          // TODO: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          // TODO: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9","date":1327969999,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          // TODO: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          // TODO: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          // TODO: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n          //FieldCache.DEFAULT.purge(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["7b91922b55d15444d554721b352861d028eb8278"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["7b91922b55d15444d554721b352861d028eb8278","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8cd232a36e691d3af7035460733f822fb1a5239a":["a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94"],"a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8be580b58bcc650d428f3f22de81cadcf51d650a","8cd232a36e691d3af7035460733f822fb1a5239a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","8be580b58bcc650d428f3f22de81cadcf51d650a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"8cd232a36e691d3af7035460733f822fb1a5239a":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94":["8cd232a36e691d3af7035460733f822fb1a5239a"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}