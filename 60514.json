{"path":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createMainResponse().mjava","commits":[{"id":"c32d2a50662592e12dae8ea10960cce611c7ba1c","date":1290627254,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createMainResponse().mjava","pathOld":"/dev/null","sourceNew":"    private void createMainResponse() {\n      int docCount = numGroups;\n      int docOffset = offset;    \n      int docsToGather = getMax(docOffset, docCount, maxDoc);\n\n      float maxScore = Float.NEGATIVE_INFINITY; \n      List<TopDocs> topDocsList = new ArrayList<TopDocs>();\n      int numDocs = 0;\n      for (SearchGroup group : collector.orderedGroups) {\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        \n        TopDocsCollector collector = groupDocs.collector;\n        int hits = collector.getTotalHits();\n\n        int num = Math.min(docsPerGroup, hits - groupOffset); // how many docs are in this group\n        if (num <= 0) continue;\n\n        TopDocs topDocs = collector.topDocs(groupOffset, Math.min(docsPerGroup,docsToGather-numDocs));\n        topDocsList.add(topDocs);\n        numDocs += topDocs.scoreDocs.length;\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n\n        if (numDocs >= docsToGather) break;\n      }\n      assert numDocs <= docCount; // make sure we didn't gather too many\n      \n      int[] ids = new int[numDocs];\n      float[] scores = needScores ? new float[numDocs] : null;\n      int pos = 0;\n\n      for (TopDocs topDocs : topDocsList) {\n        for (ScoreDoc sd : topDocs.scoreDocs) {\n          ids[pos] = sd.doc;\n          if (scores != null) scores[pos] = sd.score;\n          pos++;\n        }\n      }\n\n      DocSlice docs = new DocSlice(docOffset, Math.max(0, ids.length - docOffset), ids, scores, getMatches(), maxScore);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n\n      mainResult = docs;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c800a92bdddc053fba2b1b33e434f7536a2daae1","date":1290628554,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createSimpleResponse().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createMainResponse().mjava","sourceNew":"    private DocList createSimpleResponse() {\n      int docCount = numGroups;\n      int docOffset = offset;    \n      int docsToGather = getMax(docOffset, docCount, maxDoc);\n\n      float maxScore = Float.NEGATIVE_INFINITY; \n      List<TopDocs> topDocsList = new ArrayList<TopDocs>();\n      int numDocs = 0;\n      for (SearchGroup group : collector.orderedGroups) {\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        \n        TopDocsCollector collector = groupDocs.collector;\n        int hits = collector.getTotalHits();\n\n        int num = Math.min(docsPerGroup, hits - groupOffset); // how many docs are in this group\n        if (num <= 0) continue;\n\n        TopDocs topDocs = collector.topDocs(groupOffset, Math.min(docsPerGroup,docsToGather-numDocs));\n        topDocsList.add(topDocs);\n        numDocs += topDocs.scoreDocs.length;\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n\n        if (numDocs >= docsToGather) break;\n      }\n      assert numDocs <= docCount; // make sure we didn't gather too many\n      \n      int[] ids = new int[numDocs];\n      float[] scores = needScores ? new float[numDocs] : null;\n      int pos = 0;\n\n      for (TopDocs topDocs : topDocsList) {\n        for (ScoreDoc sd : topDocs.scoreDocs) {\n          ids[pos] = sd.doc;\n          if (scores != null) scores[pos] = sd.score;\n          pos++;\n        }\n      }\n\n      DocSlice docs = new DocSlice(docOffset, Math.max(0, ids.length - docOffset), ids, scores, getMatches(), maxScore);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n\n      return docs;\n    }\n\n","sourceOld":"    private void createMainResponse() {\n      int docCount = numGroups;\n      int docOffset = offset;    \n      int docsToGather = getMax(docOffset, docCount, maxDoc);\n\n      float maxScore = Float.NEGATIVE_INFINITY; \n      List<TopDocs> topDocsList = new ArrayList<TopDocs>();\n      int numDocs = 0;\n      for (SearchGroup group : collector.orderedGroups) {\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        \n        TopDocsCollector collector = groupDocs.collector;\n        int hits = collector.getTotalHits();\n\n        int num = Math.min(docsPerGroup, hits - groupOffset); // how many docs are in this group\n        if (num <= 0) continue;\n\n        TopDocs topDocs = collector.topDocs(groupOffset, Math.min(docsPerGroup,docsToGather-numDocs));\n        topDocsList.add(topDocs);\n        numDocs += topDocs.scoreDocs.length;\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n\n        if (numDocs >= docsToGather) break;\n      }\n      assert numDocs <= docCount; // make sure we didn't gather too many\n      \n      int[] ids = new int[numDocs];\n      float[] scores = needScores ? new float[numDocs] : null;\n      int pos = 0;\n\n      for (TopDocs topDocs : topDocsList) {\n        for (ScoreDoc sd : topDocs.scoreDocs) {\n          ids[pos] = sd.doc;\n          if (scores != null) scores[pos] = sd.score;\n          pos++;\n        }\n      }\n\n      DocSlice docs = new DocSlice(docOffset, Math.max(0, ids.length - docOffset), ids, scores, getMatches(), maxScore);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n\n      mainResult = docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c32d2a50662592e12dae8ea10960cce611c7ba1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c800a92bdddc053fba2b1b33e434f7536a2daae1":["c32d2a50662592e12dae8ea10960cce611c7ba1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c800a92bdddc053fba2b1b33e434f7536a2daae1"]},"commit2Childs":{"c32d2a50662592e12dae8ea10960cce611c7ba1c":["c800a92bdddc053fba2b1b33e434f7536a2daae1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c32d2a50662592e12dae8ea10960cce611c7ba1c"],"c800a92bdddc053fba2b1b33e434f7536a2daae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}