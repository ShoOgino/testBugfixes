{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#countOnly(int,int[],int[],int,int,int,int,int).mjava","commits":[{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#countOnly(int,int[],int[],int,int,int,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#countOnly(int,int[],int[],FacetArrays,int,int,int,int,int).mjava","sourceNew":"  /**\n   * Recursively count <code>ordinal</code>, whose depth is <code>currentDepth</code>, \n   * and all its descendants down to <code>maxDepth</code> (including), \n   * descendants whose value in the count arrays, <code>arrays</code>, is != 0. \n   * The count arrays only includes the current partition, from <code>offset</code>, to (exclusive) \n   * <code>endOffset</code>.\n   * It is assumed that <code>ordinal</code> < <code>endOffset</code>, \n   * otherwise, not <code>ordinal</code>, and none of its descendants, reside in\n   * the current partition. <code>ordinal</code> < <code>offset</code> is allowed, \n   * as ordinal's descendants might be >= <code>offeset</code>.\n   * \n   * @param ordinal a facet ordinal. \n   * @param youngestChild mapping a given ordinal to its youngest child in the taxonomy (of largest ordinal number),\n   * or to -1 if has no children.  \n   * @param olderSibling  mapping a given ordinal to its older sibling, or to -1\n   * @param partitionSize  number of ordinals in the given partition\n   * @param offset  the first (smallest) ordinal in the given partition\n   * @param endOffset one larger than the largest ordinal that belong to this partition\n   * @param currentDepth the depth or ordinal in the TaxonomyTree (relative to rootnode of the facetRequest)\n   * @param maxDepth maximal depth of descendants to be considered here (measured relative to rootnode of the \n   * facetRequest).\n   * @return the number of nodes, from ordinal down its descendants, of depth <= maxDepth,\n   * which reside in the current partition, and whose value != 0\n   */\n  private int countOnly(int ordinal, int[] youngestChild, int[] olderSibling, int partitionSize, int offset, \n      int endOffset, int currentDepth, int maxDepth) {\n    int ret = 0;\n    if (offset <= ordinal) {\n      // ordinal belongs to the current partition\n      if (0 != facetRequest.getValueOf(facetArrays, ordinal % partitionSize)) {\n        ret++;\n      }\n    }\n    // now consider children of ordinal, if not too deep\n    if (currentDepth >= maxDepth) {\n      return ret;\n    }\n\n    int yc = youngestChild[ordinal];\n    while (yc >= endOffset) {\n      yc = olderSibling[yc];\n    }\n    while (yc > TaxonomyReader.INVALID_ORDINAL) { // assuming this is -1, smaller than any legal ordinal\n      ret += countOnly (yc, youngestChild, olderSibling, partitionSize, \n          offset, endOffset, currentDepth+1, maxDepth);\n      yc = olderSibling[yc];\n    }\n    return ret;\n  }\n\n","sourceOld":"  /**\n   * Recursively count <code>ordinal</code>, whose depth is <code>currentDepth</code>, \n   * and all its descendants down to <code>maxDepth</code> (including), \n   * descendants whose value in the count arrays, <code>arrays</code>, is != 0. \n   * The count arrays only includes the current partition, from <code>offset</code>, to (exclusive) \n   * <code>endOffset</code>.\n   * It is assumed that <code>ordinal</code> < <code>endOffset</code>, \n   * otherwise, not <code>ordinal</code>, and none of its descendants, reside in\n   * the current partition. <code>ordinal</code> < <code>offset</code> is allowed, \n   * as ordinal's descendants might be >= <code>offeset</code>.\n   * \n   * @param ordinal a facet ordinal. \n   * @param youngestChild mapping a given ordinal to its youngest child in the taxonomy (of largest ordinal number),\n   * or to -1 if has no children.  \n   * @param olderSibling  mapping a given ordinal to its older sibling, or to -1\n   * @param arrays  values for the ordinals in the given partition\n   * @param offset  the first (smallest) ordinal in the given partition\n   * @param partitionSize  number of ordinals in the given partition\n   * @param endOffset one larger than the largest ordinal that belong to this partition\n   * @param currentDepth the depth or ordinal in the TaxonomyTree (relative to rootnode of the facetRequest)\n   * @param maxDepth maximal depth of descendants to be considered here (measured relative to rootnode of the \n   * facetRequest).\n   * \n   * @return the number of nodes, from ordinal down its descendants, of depth <= maxDepth,\n   * which reside in the current partition, and whose value != 0\n   */\n  private int countOnly(int ordinal, int[] youngestChild, int[] olderSibling,\n                        FacetArrays arrays, int partitionSize, int offset,\n                        int endOffset, int currentDepth, int maxDepth) {\n    int ret = 0;\n    if (offset <= ordinal) {\n      // ordinal belongs to the current partition\n      if (0 != facetRequest.getValueOf(arrays, ordinal % partitionSize)) {\n        ret++;\n      }\n    }\n    // now consider children of ordinal, if not too deep\n    if (currentDepth >= maxDepth) {\n      return ret;\n    }\n\n    int yc = youngestChild[ordinal];\n    while (yc >= endOffset) {\n      yc = olderSibling[yc];\n    }\n    while (yc > TaxonomyReader.INVALID_ORDINAL) { // assuming this is -1, smaller than any legal ordinal\n      ret += countOnly (yc, youngestChild, olderSibling, arrays, \n          partitionSize, offset, endOffset, currentDepth+1, maxDepth);\n      yc = olderSibling[yc];\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b1c67b5eba853532b31132bf5aef70a3b2be63f","date":1375351298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#countOnly(int,int[],int[],int,int,int,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#countOnly(int,int[],int[],int,int,int,int,int).mjava","sourceNew":"  /**\n   * Recursively count <code>ordinal</code>, whose depth is <code>currentDepth</code>, \n   * and all its descendants down to <code>maxDepth</code> (including), \n   * descendants whose value in the count arrays, <code>arrays</code>, is != 0. \n   * The count arrays only includes the current partition, from <code>offset</code>, to (exclusive) \n   * <code>endOffset</code>.\n   * It is assumed that <code>ordinal</code> < <code>endOffset</code>, \n   * otherwise, not <code>ordinal</code>, and none of its descendants, reside in\n   * the current partition. <code>ordinal</code> < <code>offset</code> is allowed, \n   * as ordinal's descendants might be >= <code>offeset</code>.\n   * \n   * @param ordinal a facet ordinal. \n   * @param youngestChild mapping a given ordinal to its youngest child in the taxonomy (of largest ordinal number),\n   * or to -1 if has no children.  \n   * @param olderSibling  mapping a given ordinal to its older sibling, or to -1\n   * @param partitionSize  number of ordinals in the given partition\n   * @param offset  the first (smallest) ordinal in the given partition\n   * @param endOffset one larger than the largest ordinal that belong to this partition\n   * @param currentDepth the depth or ordinal in the TaxonomyTree (relative to rootnode of the facetRequest)\n   * @param maxDepth maximal depth of descendants to be considered here (measured relative to rootnode of the \n   * facetRequest).\n   * @return the number of nodes, from ordinal down its descendants, of depth <= maxDepth,\n   * which reside in the current partition, and whose value != 0\n   */\n  private int countOnly(int ordinal, int[] youngestChild, int[] olderSibling, int partitionSize, int offset, \n      int endOffset, int currentDepth, int maxDepth) {\n    int ret = 0;\n    if (offset <= ordinal) {\n      // ordinal belongs to the current partition\n      if (0 != resolver.valueOf(ordinal % partitionSize)) {\n        ret++;\n      }\n    }\n    // now consider children of ordinal, if not too deep\n    if (currentDepth >= maxDepth) {\n      return ret;\n    }\n\n    int yc = youngestChild[ordinal];\n    while (yc >= endOffset) {\n      yc = olderSibling[yc];\n    }\n    while (yc > TaxonomyReader.INVALID_ORDINAL) { // assuming this is -1, smaller than any legal ordinal\n      ret += countOnly (yc, youngestChild, olderSibling, partitionSize, \n          offset, endOffset, currentDepth+1, maxDepth);\n      yc = olderSibling[yc];\n    }\n    return ret;\n  }\n\n","sourceOld":"  /**\n   * Recursively count <code>ordinal</code>, whose depth is <code>currentDepth</code>, \n   * and all its descendants down to <code>maxDepth</code> (including), \n   * descendants whose value in the count arrays, <code>arrays</code>, is != 0. \n   * The count arrays only includes the current partition, from <code>offset</code>, to (exclusive) \n   * <code>endOffset</code>.\n   * It is assumed that <code>ordinal</code> < <code>endOffset</code>, \n   * otherwise, not <code>ordinal</code>, and none of its descendants, reside in\n   * the current partition. <code>ordinal</code> < <code>offset</code> is allowed, \n   * as ordinal's descendants might be >= <code>offeset</code>.\n   * \n   * @param ordinal a facet ordinal. \n   * @param youngestChild mapping a given ordinal to its youngest child in the taxonomy (of largest ordinal number),\n   * or to -1 if has no children.  \n   * @param olderSibling  mapping a given ordinal to its older sibling, or to -1\n   * @param partitionSize  number of ordinals in the given partition\n   * @param offset  the first (smallest) ordinal in the given partition\n   * @param endOffset one larger than the largest ordinal that belong to this partition\n   * @param currentDepth the depth or ordinal in the TaxonomyTree (relative to rootnode of the facetRequest)\n   * @param maxDepth maximal depth of descendants to be considered here (measured relative to rootnode of the \n   * facetRequest).\n   * @return the number of nodes, from ordinal down its descendants, of depth <= maxDepth,\n   * which reside in the current partition, and whose value != 0\n   */\n  private int countOnly(int ordinal, int[] youngestChild, int[] olderSibling, int partitionSize, int offset, \n      int endOffset, int currentDepth, int maxDepth) {\n    int ret = 0;\n    if (offset <= ordinal) {\n      // ordinal belongs to the current partition\n      if (0 != facetRequest.getValueOf(facetArrays, ordinal % partitionSize)) {\n        ret++;\n      }\n    }\n    // now consider children of ordinal, if not too deep\n    if (currentDepth >= maxDepth) {\n      return ret;\n    }\n\n    int yc = youngestChild[ordinal];\n    while (yc >= endOffset) {\n      yc = olderSibling[yc];\n    }\n    while (yc > TaxonomyReader.INVALID_ORDINAL) { // assuming this is -1, smaller than any legal ordinal\n      ret += countOnly (yc, youngestChild, olderSibling, partitionSize, \n          offset, endOffset, currentDepth+1, maxDepth);\n      yc = olderSibling[yc];\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#countOnly(int,int[],int[],int,int,int,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#countOnly(int,int[],int[],int,int,int,int,int).mjava","sourceNew":"  /**\n   * Recursively count <code>ordinal</code>, whose depth is <code>currentDepth</code>, \n   * and all its descendants down to <code>maxDepth</code> (including), \n   * descendants whose value in the count arrays, <code>arrays</code>, is != 0. \n   * The count arrays only includes the current partition, from <code>offset</code>, to (exclusive) \n   * <code>endOffset</code>.\n   * It is assumed that <code>ordinal</code> < <code>endOffset</code>, \n   * otherwise, not <code>ordinal</code>, and none of its descendants, reside in\n   * the current partition. <code>ordinal</code> < <code>offset</code> is allowed, \n   * as ordinal's descendants might be >= <code>offeset</code>.\n   * \n   * @param ordinal a facet ordinal. \n   * @param youngestChild mapping a given ordinal to its youngest child in the taxonomy (of largest ordinal number),\n   * or to -1 if has no children.  \n   * @param olderSibling  mapping a given ordinal to its older sibling, or to -1\n   * @param partitionSize  number of ordinals in the given partition\n   * @param offset  the first (smallest) ordinal in the given partition\n   * @param endOffset one larger than the largest ordinal that belong to this partition\n   * @param currentDepth the depth or ordinal in the TaxonomyTree (relative to rootnode of the facetRequest)\n   * @param maxDepth maximal depth of descendants to be considered here (measured relative to rootnode of the \n   * facetRequest).\n   * @return the number of nodes, from ordinal down its descendants, of depth <= maxDepth,\n   * which reside in the current partition, and whose value != 0\n   */\n  private int countOnly(int ordinal, int[] youngestChild, int[] olderSibling, int partitionSize, int offset, \n      int endOffset, int currentDepth, int maxDepth) {\n    int ret = 0;\n    if (offset <= ordinal) {\n      // ordinal belongs to the current partition\n      if (0 != resolver.valueOf(ordinal % partitionSize)) {\n        ret++;\n      }\n    }\n    // now consider children of ordinal, if not too deep\n    if (currentDepth >= maxDepth) {\n      return ret;\n    }\n\n    int yc = youngestChild[ordinal];\n    while (yc >= endOffset) {\n      yc = olderSibling[yc];\n    }\n    while (yc > TaxonomyReader.INVALID_ORDINAL) { // assuming this is -1, smaller than any legal ordinal\n      ret += countOnly (yc, youngestChild, olderSibling, partitionSize, \n          offset, endOffset, currentDepth+1, maxDepth);\n      yc = olderSibling[yc];\n    }\n    return ret;\n  }\n\n","sourceOld":"  /**\n   * Recursively count <code>ordinal</code>, whose depth is <code>currentDepth</code>, \n   * and all its descendants down to <code>maxDepth</code> (including), \n   * descendants whose value in the count arrays, <code>arrays</code>, is != 0. \n   * The count arrays only includes the current partition, from <code>offset</code>, to (exclusive) \n   * <code>endOffset</code>.\n   * It is assumed that <code>ordinal</code> < <code>endOffset</code>, \n   * otherwise, not <code>ordinal</code>, and none of its descendants, reside in\n   * the current partition. <code>ordinal</code> < <code>offset</code> is allowed, \n   * as ordinal's descendants might be >= <code>offeset</code>.\n   * \n   * @param ordinal a facet ordinal. \n   * @param youngestChild mapping a given ordinal to its youngest child in the taxonomy (of largest ordinal number),\n   * or to -1 if has no children.  \n   * @param olderSibling  mapping a given ordinal to its older sibling, or to -1\n   * @param partitionSize  number of ordinals in the given partition\n   * @param offset  the first (smallest) ordinal in the given partition\n   * @param endOffset one larger than the largest ordinal that belong to this partition\n   * @param currentDepth the depth or ordinal in the TaxonomyTree (relative to rootnode of the facetRequest)\n   * @param maxDepth maximal depth of descendants to be considered here (measured relative to rootnode of the \n   * facetRequest).\n   * @return the number of nodes, from ordinal down its descendants, of depth <= maxDepth,\n   * which reside in the current partition, and whose value != 0\n   */\n  private int countOnly(int ordinal, int[] youngestChild, int[] olderSibling, int partitionSize, int offset, \n      int endOffset, int currentDepth, int maxDepth) {\n    int ret = 0;\n    if (offset <= ordinal) {\n      // ordinal belongs to the current partition\n      if (0 != facetRequest.getValueOf(facetArrays, ordinal % partitionSize)) {\n        ret++;\n      }\n    }\n    // now consider children of ordinal, if not too deep\n    if (currentDepth >= maxDepth) {\n      return ret;\n    }\n\n    int yc = youngestChild[ordinal];\n    while (yc >= endOffset) {\n      yc = olderSibling[yc];\n    }\n    while (yc > TaxonomyReader.INVALID_ORDINAL) { // assuming this is -1, smaller than any legal ordinal\n      ret += countOnly (yc, youngestChild, olderSibling, partitionSize, \n          offset, endOffset, currentDepth+1, maxDepth);\n      yc = olderSibling[yc];\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#countOnly(int,int[],int[],int,int,int,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Recursively count <code>ordinal</code>, whose depth is <code>currentDepth</code>, \n   * and all its descendants down to <code>maxDepth</code> (including), \n   * descendants whose value in the count arrays, <code>arrays</code>, is != 0. \n   * The count arrays only includes the current partition, from <code>offset</code>, to (exclusive) \n   * <code>endOffset</code>.\n   * It is assumed that <code>ordinal</code> < <code>endOffset</code>, \n   * otherwise, not <code>ordinal</code>, and none of its descendants, reside in\n   * the current partition. <code>ordinal</code> < <code>offset</code> is allowed, \n   * as ordinal's descendants might be >= <code>offeset</code>.\n   * \n   * @param ordinal a facet ordinal. \n   * @param youngestChild mapping a given ordinal to its youngest child in the taxonomy (of largest ordinal number),\n   * or to -1 if has no children.  \n   * @param olderSibling  mapping a given ordinal to its older sibling, or to -1\n   * @param partitionSize  number of ordinals in the given partition\n   * @param offset  the first (smallest) ordinal in the given partition\n   * @param endOffset one larger than the largest ordinal that belong to this partition\n   * @param currentDepth the depth or ordinal in the TaxonomyTree (relative to rootnode of the facetRequest)\n   * @param maxDepth maximal depth of descendants to be considered here (measured relative to rootnode of the \n   * facetRequest).\n   * @return the number of nodes, from ordinal down its descendants, of depth <= maxDepth,\n   * which reside in the current partition, and whose value != 0\n   */\n  private int countOnly(int ordinal, int[] youngestChild, int[] olderSibling, int partitionSize, int offset, \n      int endOffset, int currentDepth, int maxDepth) {\n    int ret = 0;\n    if (offset <= ordinal) {\n      // ordinal belongs to the current partition\n      if (0 != resolver.valueOf(ordinal % partitionSize)) {\n        ret++;\n      }\n    }\n    // now consider children of ordinal, if not too deep\n    if (currentDepth >= maxDepth) {\n      return ret;\n    }\n\n    int yc = youngestChild[ordinal];\n    while (yc >= endOffset) {\n      yc = olderSibling[yc];\n    }\n    while (yc > TaxonomyReader.INVALID_ORDINAL) { // assuming this is -1, smaller than any legal ordinal\n      ret += countOnly (yc, youngestChild, olderSibling, partitionSize, \n          offset, endOffset, currentDepth+1, maxDepth);\n      yc = olderSibling[yc];\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#countOnly(int,int[],int[],int,int,int,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Recursively count <code>ordinal</code>, whose depth is <code>currentDepth</code>, \n   * and all its descendants down to <code>maxDepth</code> (including), \n   * descendants whose value in the count arrays, <code>arrays</code>, is != 0. \n   * The count arrays only includes the current partition, from <code>offset</code>, to (exclusive) \n   * <code>endOffset</code>.\n   * It is assumed that <code>ordinal</code> < <code>endOffset</code>, \n   * otherwise, not <code>ordinal</code>, and none of its descendants, reside in\n   * the current partition. <code>ordinal</code> < <code>offset</code> is allowed, \n   * as ordinal's descendants might be >= <code>offeset</code>.\n   * \n   * @param ordinal a facet ordinal. \n   * @param youngestChild mapping a given ordinal to its youngest child in the taxonomy (of largest ordinal number),\n   * or to -1 if has no children.  \n   * @param olderSibling  mapping a given ordinal to its older sibling, or to -1\n   * @param partitionSize  number of ordinals in the given partition\n   * @param offset  the first (smallest) ordinal in the given partition\n   * @param endOffset one larger than the largest ordinal that belong to this partition\n   * @param currentDepth the depth or ordinal in the TaxonomyTree (relative to rootnode of the facetRequest)\n   * @param maxDepth maximal depth of descendants to be considered here (measured relative to rootnode of the \n   * facetRequest).\n   * @return the number of nodes, from ordinal down its descendants, of depth <= maxDepth,\n   * which reside in the current partition, and whose value != 0\n   */\n  private int countOnly(int ordinal, int[] youngestChild, int[] olderSibling, int partitionSize, int offset, \n      int endOffset, int currentDepth, int maxDepth) {\n    int ret = 0;\n    if (offset <= ordinal) {\n      // ordinal belongs to the current partition\n      if (0 != resolver.valueOf(ordinal % partitionSize)) {\n        ret++;\n      }\n    }\n    // now consider children of ordinal, if not too deep\n    if (currentDepth >= maxDepth) {\n      return ret;\n    }\n\n    int yc = youngestChild[ordinal];\n    while (yc >= endOffset) {\n      yc = olderSibling[yc];\n    }\n    while (yc > TaxonomyReader.INVALID_ORDINAL) { // assuming this is -1, smaller than any legal ordinal\n      ret += countOnly (yc, youngestChild, olderSibling, partitionSize, \n          offset, endOffset, currentDepth+1, maxDepth);\n      yc = olderSibling[yc];\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3b1c67b5eba853532b31132bf5aef70a3b2be63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["3b1c67b5eba853532b31132bf5aef70a3b2be63f","d33e19a97046248623a7591aeaa6547233fd15e2"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["3b1c67b5eba853532b31132bf5aef70a3b2be63f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}