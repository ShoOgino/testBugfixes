{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","commits":[{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    CompositeReader ir2 = DirectoryReader.open(dir2);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(false,\n     new CompositeReader[] {ir1, ir2},\n     new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNotNull(slow.terms(\"f1\"));\n    assertNotNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelCompositeReader(false,\n        new CompositeReader[] {ir2},\n        new CompositeReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelCompositeReader(true,\n      new CompositeReader[] {ir2},\n      new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    try {\n      new ParallelCompositeReader(true,\n        new CompositeReader[0],\n        new CompositeReader[] {ir1});\n      fail(\"didn't get expected exception: need a non-empty main-reader array\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","sourceNew":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    CompositeReader ir2 = DirectoryReader.open(dir2);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(false,\n     new CompositeReader[] {ir1, ir2},\n     new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNotNull(slow.terms(\"f1\"));\n    assertNotNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelCompositeReader(false,\n        new CompositeReader[] {ir2},\n        new CompositeReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelCompositeReader(true,\n      new CompositeReader[] {ir2},\n      new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    try {\n      new ParallelCompositeReader(true,\n        new CompositeReader[0],\n        new CompositeReader[] {ir1});\n      fail(\"didn't get expected exception: need a non-empty main-reader array\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    CompositeReader ir2 = DirectoryReader.open(dir2);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(false,\n     new CompositeReader[] {ir1, ir2},\n     new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNotNull(slow.terms(\"f1\"));\n    assertNotNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelCompositeReader(false,\n        new CompositeReader[] {ir2},\n        new CompositeReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelCompositeReader(true,\n      new CompositeReader[] {ir2},\n      new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    try {\n      new ParallelCompositeReader(true,\n        new CompositeReader[0],\n        new CompositeReader[] {ir1});\n      fail(\"didn't get expected exception: need a non-empty main-reader array\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","sourceNew":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    CompositeReader ir2 = DirectoryReader.open(dir2);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(false,\n     new CompositeReader[] {ir1, ir2},\n     new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    LeafReader slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNotNull(slow.terms(\"f1\"));\n    assertNotNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelCompositeReader(false,\n        new CompositeReader[] {ir2},\n        new CompositeReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelCompositeReader(true,\n      new CompositeReader[] {ir2},\n      new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    try {\n      new ParallelCompositeReader(true,\n        new CompositeReader[0],\n        new CompositeReader[] {ir1});\n      fail(\"didn't get expected exception: need a non-empty main-reader array\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    CompositeReader ir2 = DirectoryReader.open(dir2);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(false,\n     new CompositeReader[] {ir1, ir2},\n     new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNotNull(slow.terms(\"f1\"));\n    assertNotNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelCompositeReader(false,\n        new CompositeReader[] {ir2},\n        new CompositeReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelCompositeReader(true,\n      new CompositeReader[] {ir2},\n      new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    try {\n      new ParallelCompositeReader(true,\n        new CompositeReader[0],\n        new CompositeReader[] {ir1});\n      fail(\"didn't get expected exception: need a non-empty main-reader array\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","sourceNew":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    CompositeReader ir2 = DirectoryReader.open(dir2);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(false,\n     new CompositeReader[] {ir1, ir2},\n     new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    LeafReader slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNotNull(slow.terms(\"f1\"));\n    assertNotNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelCompositeReader(false,\n        new CompositeReader[] {ir2},\n        new CompositeReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelCompositeReader(true,\n      new CompositeReader[] {ir2},\n      new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    expectThrows(IllegalArgumentException.class, () -> {\n      new ParallelCompositeReader(true,\n        new CompositeReader[0],\n        new CompositeReader[] {ir1});\n    });\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    CompositeReader ir2 = DirectoryReader.open(dir2);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(false,\n     new CompositeReader[] {ir1, ir2},\n     new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    LeafReader slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNotNull(slow.terms(\"f1\"));\n    assertNotNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelCompositeReader(false,\n        new CompositeReader[] {ir2},\n        new CompositeReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelCompositeReader(true,\n      new CompositeReader[] {ir2},\n      new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    try {\n      new ParallelCompositeReader(true,\n        new CompositeReader[0],\n        new CompositeReader[] {ir1});\n      fail(\"didn't get expected exception: need a non-empty main-reader array\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":["6e09a3a223be07d75777515a717312813221fe58"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","sourceNew":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    CompositeReader ir2 = DirectoryReader.open(dir2);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(false,\n     new CompositeReader[] {ir1, ir2},\n     new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    Fields slow = MultiFields.getFields(pr);\n    assertNotNull(slow.terms(\"f1\"));\n    assertNotNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelCompositeReader(false,\n        new CompositeReader[] {ir2},\n        new CompositeReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = MultiFields.getFields(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelCompositeReader(true,\n      new CompositeReader[] {ir2},\n      new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = MultiFields.getFields(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    expectThrows(IllegalArgumentException.class, () -> {\n      new ParallelCompositeReader(true,\n        new CompositeReader[0],\n        new CompositeReader[] {ir1});\n    });\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    CompositeReader ir2 = DirectoryReader.open(dir2);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(false,\n     new CompositeReader[] {ir1, ir2},\n     new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    LeafReader slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNotNull(slow.terms(\"f1\"));\n    assertNotNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelCompositeReader(false,\n        new CompositeReader[] {ir2},\n        new CompositeReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelCompositeReader(true,\n      new CompositeReader[] {ir2},\n      new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = SlowCompositeReaderWrapper.wrap(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    expectThrows(IllegalArgumentException.class, () -> {\n      new ParallelCompositeReader(true,\n        new CompositeReader[0],\n        new CompositeReader[] {ir1});\n    });\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6e09a3a223be07d75777515a717312813221fe58"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","sourceNew":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    CompositeReader ir2 = DirectoryReader.open(dir2);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(false,\n     new CompositeReader[] {ir1, ir2},\n     new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNotNull(MultiFields.getTerms(pr, \"f1\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f2\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f3\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelCompositeReader(false,\n        new CompositeReader[] {ir2},\n        new CompositeReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(MultiFields.getTerms(pr, \"f1\"));\n    assertNull(MultiFields.getTerms(pr, \"f2\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f3\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelCompositeReader(true,\n      new CompositeReader[] {ir2},\n      new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(MultiFields.getTerms(pr, \"f1\"));\n    assertNull(MultiFields.getTerms(pr, \"f2\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f3\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f4\"));\n    pr.close();\n    \n    // no main readers\n    expectThrows(IllegalArgumentException.class, () -> {\n      new ParallelCompositeReader(true,\n        new CompositeReader[0],\n        new CompositeReader[] {ir1});\n    });\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    CompositeReader ir2 = DirectoryReader.open(dir2);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(false,\n     new CompositeReader[] {ir1, ir2},\n     new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    Fields slow = MultiFields.getFields(pr);\n    assertNotNull(slow.terms(\"f1\"));\n    assertNotNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelCompositeReader(false,\n        new CompositeReader[] {ir2},\n        new CompositeReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = MultiFields.getFields(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelCompositeReader(true,\n      new CompositeReader[] {ir2},\n      new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    slow = MultiFields.getFields(pr);\n    assertNull(slow.terms(\"f1\"));\n    assertNull(slow.terms(\"f2\"));\n    assertNotNull(slow.terms(\"f3\"));\n    assertNotNull(slow.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    expectThrows(IllegalArgumentException.class, () -> {\n      new ParallelCompositeReader(true,\n        new CompositeReader[0],\n        new CompositeReader[] {ir1});\n    });\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIgnoreStoredFields().mjava","sourceNew":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    CompositeReader ir2 = DirectoryReader.open(dir2);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(false,\n     new CompositeReader[] {ir1, ir2},\n     new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNotNull(MultiTerms.getTerms(pr, \"f1\"));\n    assertNotNull(MultiTerms.getTerms(pr, \"f2\"));\n    assertNotNull(MultiTerms.getTerms(pr, \"f3\"));\n    assertNotNull(MultiTerms.getTerms(pr, \"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelCompositeReader(false,\n        new CompositeReader[] {ir2},\n        new CompositeReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(MultiTerms.getTerms(pr, \"f1\"));\n    assertNull(MultiTerms.getTerms(pr, \"f2\"));\n    assertNotNull(MultiTerms.getTerms(pr, \"f3\"));\n    assertNotNull(MultiTerms.getTerms(pr, \"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelCompositeReader(true,\n      new CompositeReader[] {ir2},\n      new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(MultiTerms.getTerms(pr, \"f1\"));\n    assertNull(MultiTerms.getTerms(pr, \"f2\"));\n    assertNotNull(MultiTerms.getTerms(pr, \"f3\"));\n    assertNotNull(MultiTerms.getTerms(pr, \"f4\"));\n    pr.close();\n    \n    // no main readers\n    expectThrows(IllegalArgumentException.class, () -> {\n      new ParallelCompositeReader(true,\n        new CompositeReader[0],\n        new CompositeReader[] {ir1});\n    });\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    CompositeReader ir2 = DirectoryReader.open(dir2);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(false,\n     new CompositeReader[] {ir1, ir2},\n     new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNotNull(MultiFields.getTerms(pr, \"f1\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f2\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f3\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelCompositeReader(false,\n        new CompositeReader[] {ir2},\n        new CompositeReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(MultiFields.getTerms(pr, \"f1\"));\n    assertNull(MultiFields.getTerms(pr, \"f2\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f3\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelCompositeReader(true,\n      new CompositeReader[] {ir2},\n      new CompositeReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(MultiFields.getTerms(pr, \"f1\"));\n    assertNull(MultiFields.getTerms(pr, \"f2\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f3\"));\n    assertNotNull(MultiFields.getTerms(pr, \"f4\"));\n    pr.close();\n    \n    // no main readers\n    expectThrows(IllegalArgumentException.class, () -> {\n      new ParallelCompositeReader(true,\n        new CompositeReader[0],\n        new CompositeReader[] {ir1});\n    });\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6e09a3a223be07d75777515a717312813221fe58"],"6e09a3a223be07d75777515a717312813221fe58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e09a3a223be07d75777515a717312813221fe58"],"05fe562aa248790944d43cdd478f512572835ba0":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6e09a3a223be07d75777515a717312813221fe58":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}