{"path":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","commits":[{"id":"520d7467475e194bd1143ba662a0717e6345137f","date":1496984366,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","sourceOld":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","sourceOld":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = ApiBag.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"/dev/null","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    Exception e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown type\"));\n\n    e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown key\"));\n\n    e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","sourceOld":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    Exception e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown type\"));\n\n    e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown key\"));\n\n    e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","sourceOld":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    Exception e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown type\"));\n\n    e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown key\"));\n\n    e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","sourceOld":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    @SuppressWarnings({\"rawtypes\"})\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    Exception e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown type\"));\n\n    e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown key\"));\n\n    e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","sourceOld":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    Exception e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown type\"));\n\n    e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown key\"));\n\n    e = expectThrows(Exception.class, () -> {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n    });\n    assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"520d7467475e194bd1143ba662a0717e6345137f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["28288370235ed02234a64753cdbf0c6ec096304a","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","520d7467475e194bd1143ba662a0717e6345137f"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","520d7467475e194bd1143ba662a0717e6345137f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["520d7467475e194bd1143ba662a0717e6345137f","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["9ba1b632c041956c93c41aa1143d16a567014891","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"520d7467475e194bd1143ba662a0717e6345137f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"28288370235ed02234a64753cdbf0c6ec096304a":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}