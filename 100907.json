{"path":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T]).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(INPUT_TYPE,Outputs[T]).mjava","sourceNew":"  // make a new empty FST, for building\n  public FST(INPUT_TYPE inputType, Outputs<T> outputs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building\n  public FST(INPUT_TYPE inputType, Outputs<T> outputs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(INPUT_TYPE,Outputs[T]).mjava","sourceNew":"  // make a new empty FST, for building\n  public FST(INPUT_TYPE inputType, Outputs<T> outputs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building\n  public FST(INPUT_TYPE inputType, Outputs<T> outputs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(INPUT_TYPE,Outputs[T]).mjava","sourceNew":"  // make a new empty FST, for building\n  public FST(INPUT_TYPE inputType, Outputs<T> outputs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building\n  public FST(INPUT_TYPE inputType, Outputs<T> outputs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":6,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T]).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new int[8];\n      inCounts = new int[8];\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building\n  public FST(INPUT_TYPE inputType, Outputs<T> outputs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,int[],Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T]).mjava","sourceNew":"  // Creates a packed FST\n  private FST(INPUT_TYPE inputType, int[] nodeRefToAddress, Outputs<T> outputs) {\n    packed = true;\n    this.inputType = inputType;\n    bytes = new byte[128];\n    this.nodeRefToAddress = nodeRefToAddress;\n    this.outputs = outputs;\n    NO_OUTPUT = outputs.getNoOutput();\n    writer = new BytesWriter();\n  }\n\n","sourceOld":"  // make a new empty FST, for building\n  public FST(INPUT_TYPE inputType, Outputs<T> outputs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":6,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T]).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new int[8];\n      inCounts = new int[8];\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building\n  public FST(INPUT_TYPE inputType, Outputs<T> outputs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,int[],Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T]).mjava","sourceNew":"  // Creates a packed FST\n  private FST(INPUT_TYPE inputType, int[] nodeRefToAddress, Outputs<T> outputs) {\n    packed = true;\n    this.inputType = inputType;\n    bytes = new byte[128];\n    this.nodeRefToAddress = nodeRefToAddress;\n    this.outputs = outputs;\n    NO_OUTPUT = outputs.getNoOutput();\n    writer = new BytesWriter();\n  }\n\n","sourceOld":"  // make a new empty FST, for building\n  public FST(INPUT_TYPE inputType, Outputs<T> outputs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T]).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new int[8];\n      inCounts = new int[8];\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building\n  public FST(INPUT_TYPE inputType, Outputs<T> outputs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,int[],Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T]).mjava","sourceNew":"  // Creates a packed FST\n  private FST(INPUT_TYPE inputType, int[] nodeRefToAddress, Outputs<T> outputs) {\n    packed = true;\n    this.inputType = inputType;\n    bytes = new byte[128];\n    this.nodeRefToAddress = nodeRefToAddress;\n    this.outputs = outputs;\n    NO_OUTPUT = outputs.getNoOutput();\n    writer = new BytesWriter();\n  }\n\n","sourceOld":"  // make a new empty FST, for building\n  public FST(INPUT_TYPE inputType, Outputs<T> outputs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5b6fdfce35d0adb18836cf8711abe487a934df33","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}