{"path":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","commits":[{"id":"0f45f65b8ca4312a6880cc80396c35205dc21543","date":1317846119,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would be \"text_en\".  If such a field doesn't exist,\n   * then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = lcMap.containsKey(language) ? lcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    return newFieldName; \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0d6621eda6ffc681632153605ee20ed10dbb76b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f","date":1351009382,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","sourceNew":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would be \"text_en\".  If such a field doesn't exist,\n   * then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = lcMap.containsKey(language) ? lcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    return newFieldName;\n  }\n\n","sourceOld":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would be \"text_en\".  If such a field doesn't exist,\n   * then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = lcMap.containsKey(language) ? lcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    return newFieldName; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","sourceNew":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would be \"text_en\".  If such a field doesn't exist,\n   * then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = lcMap.containsKey(language) ? lcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    return newFieldName;\n  }\n\n","sourceOld":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would be \"text_en\".  If such a field doesn't exist,\n   * then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = lcMap.containsKey(language) ? lcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    return newFieldName; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d6621eda6ffc681632153605ee20ed10dbb76b9","date":1359505599,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","sourceNew":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would by default be \"text_en\".\n   * This method also performs custom regex pattern replace if configured. If enforceSchema=true\n   * and the resulting field name doesn't exist, then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace, or null if illegal\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = lcMap.containsKey(language) ? lcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    if(enforceSchema && schema.getFieldOrNull(newFieldName) == null) {\n      log.warn(\"Unsuccessful field name mapping from {} to {}, field does not exist and enforceSchema=true; skipping mapping.\", currentField, newFieldName);\n      return null;\n    } else {\n      log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    }\n    return newFieldName;\n  }\n\n","sourceOld":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would be \"text_en\".  If such a field doesn't exist,\n   * then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = lcMap.containsKey(language) ? lcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    return newFieldName;\n  }\n\n","bugFix":["0f45f65b8ca4312a6880cc80396c35205dc21543"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","sourceNew":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would by default be \"text_en\".\n   * This method also performs custom regex pattern replace if configured. If enforceSchema=true\n   * and the resulting field name doesn't exist, then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace, or null if illegal\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = lcMap.containsKey(language) ? lcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    if(enforceSchema && schema.getFieldOrNull(newFieldName) == null) {\n      log.warn(\"Unsuccessful field name mapping from {} to {}, field does not exist and enforceSchema=true; skipping mapping.\", currentField, newFieldName);\n      return null;\n    } else {\n      log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    }\n    return newFieldName;\n  }\n\n","sourceOld":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would be \"text_en\".  If such a field doesn't exist,\n   * then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = lcMap.containsKey(language) ? lcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    return newFieldName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee","date":1372775927,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","sourceNew":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would by default be \"text_en\".\n   * This method also performs custom regex pattern replace if configured. If enforceSchema=true\n   * and the resulting field name doesn't exist, then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace, or null if illegal\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = mapLcMap.containsKey(language) ? mapLcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    if(enforceSchema && schema.getFieldOrNull(newFieldName) == null) {\n      log.warn(\"Unsuccessful field name mapping from {} to {}, field does not exist and enforceSchema=true; skipping mapping.\", currentField, newFieldName);\n      return null;\n    } else {\n      log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    }\n    return newFieldName;\n  }\n\n","sourceOld":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would by default be \"text_en\".\n   * This method also performs custom regex pattern replace if configured. If enforceSchema=true\n   * and the resulting field name doesn't exist, then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace, or null if illegal\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = lcMap.containsKey(language) ? lcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    if(enforceSchema && schema.getFieldOrNull(newFieldName) == null) {\n      log.warn(\"Unsuccessful field name mapping from {} to {}, field does not exist and enforceSchema=true; skipping mapping.\", currentField, newFieldName);\n      return null;\n    } else {\n      log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    }\n    return newFieldName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","sourceNew":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would by default be \"text_en\".\n   * This method also performs custom regex pattern replace if configured. If enforceSchema=true\n   * and the resulting field name doesn't exist, then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace, or null if illegal\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = mapLcMap.containsKey(language) ? mapLcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    if(enforceSchema && schema.getFieldOrNull(newFieldName) == null) {\n      log.warn(\"Unsuccessful field name mapping from {} to {}, field does not exist and enforceSchema=true; skipping mapping.\", currentField, newFieldName);\n      return null;\n    } else {\n      log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    }\n    return newFieldName;\n  }\n\n","sourceOld":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would by default be \"text_en\".\n   * This method also performs custom regex pattern replace if configured. If enforceSchema=true\n   * and the resulting field name doesn't exist, then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace, or null if illegal\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = lcMap.containsKey(language) ? lcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    if(enforceSchema && schema.getFieldOrNull(newFieldName) == null) {\n      log.warn(\"Unsuccessful field name mapping from {} to {}, field does not exist and enforceSchema=true; skipping mapping.\", currentField, newFieldName);\n      return null;\n    } else {\n      log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    }\n    return newFieldName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#getMappedField(String,String).mjava","sourceNew":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would by default be \"text_en\".\n   * This method also performs custom regex pattern replace if configured. If enforceSchema=true\n   * and the resulting field name doesn't exist, then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace, or null if illegal\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = mapLcMap.containsKey(language) ? mapLcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    if(enforceSchema && schema.getFieldOrNull(newFieldName) == null) {\n      log.warn(\"Unsuccessful field name mapping from {} to {}, field does not exist and enforceSchema=true; skipping mapping.\", currentField, newFieldName);\n      return null;\n    } else {\n      log.debug(\"Doing mapping from {} with language {} to field {}\", currentField, language, newFieldName);\n    }\n    return newFieldName;\n  }\n\n","sourceOld":"  /**\n   * Returns the name of the field to map the current contents into, so that they are properly analyzed.  For instance\n   * if the currentField is \"text\" and the code is \"en\", the new field would by default be \"text_en\".\n   * This method also performs custom regex pattern replace if configured. If enforceSchema=true\n   * and the resulting field name doesn't exist, then null is returned.\n   *\n   * @param currentField The current field name\n   * @param language the language code\n   * @return The new schema field name, based on pattern and replace, or null if illegal\n   */\n  protected String getMappedField(String currentField, String language) {\n    String lc = mapLcMap.containsKey(language) ? mapLcMap.get(language) : language;\n    String newFieldName = langPattern.matcher(mapPattern.matcher(currentField).replaceFirst(mapReplaceStr)).replaceFirst(lc);\n    if(enforceSchema && schema.getFieldOrNull(newFieldName) == null) {\n      log.warn(\"Unsuccessful field name mapping from {} to {}, field does not exist and enforceSchema=true; skipping mapping.\", currentField, newFieldName);\n      return null;\n    } else {\n      log.debug(\"Doing mapping from \"+currentField+\" with language \"+language+\" to field \"+newFieldName);\n    }\n    return newFieldName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee":["0d6621eda6ffc681632153605ee20ed10dbb76b9"],"46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f":["0f45f65b8ca4312a6880cc80396c35205dc21543"],"61d5f95d14e5b9b046998c51e16709a398c15226":["46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f","0d6621eda6ffc681632153605ee20ed10dbb76b9"],"0f45f65b8ca4312a6880cc80396c35205dc21543":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["0d6621eda6ffc681632153605ee20ed10dbb76b9","8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee"],"62e52115b56781006682fd92c6938efaf174304d":["0f45f65b8ca4312a6880cc80396c35205dc21543","46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee"],"0d6621eda6ffc681632153605ee20ed10dbb76b9":["46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f":["61d5f95d14e5b9b046998c51e16709a398c15226","62e52115b56781006682fd92c6938efaf174304d","0d6621eda6ffc681632153605ee20ed10dbb76b9"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"0f45f65b8ca4312a6880cc80396c35205dc21543":["46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f","62e52115b56781006682fd92c6938efaf174304d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"62e52115b56781006682fd92c6938efaf174304d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f45f65b8ca4312a6880cc80396c35205dc21543"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d6621eda6ffc681632153605ee20ed10dbb76b9":["8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee","61d5f95d14e5b9b046998c51e16709a398c15226","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","37a0f60745e53927c4c876cfe5b5a58170f0646c","62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}