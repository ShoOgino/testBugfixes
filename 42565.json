{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JoinStream#JoinStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"333d804f5abfaf34c57493306a4cb2e01e55662d","date":1447206304,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JoinStream#JoinStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public JoinStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression,\n        Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter onExpression = factory.getNamedOperand(expression, \"on\");\n    \n    // validate expression contains only what we want.\n    if (expression.getParameters().size() != streamExpressions.size() + 1) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if (streamExpressions.size() < 2) {\n      throw new IOException(String.format(Locale.ROOT,\n          \"Invalid expression %s - expecting at least two streams but found %d (must be PushBackStream types)\",\n          expression, streamExpressions.size()));\n    }\n    \n    this.streams = new ArrayList<PushBackStream>();\n    for (StreamExpression streamExpression : streamExpressions) {\n      this.streams.add(new PushBackStream(factory.constructStream(streamExpression)));\n    }\n    \n    if (null == onExpression || !(onExpression.getParameter() instanceof StreamExpressionValue)) {\n      throw new IOException(String.format(Locale.ROOT,\n          \"Invalid expression %s - expecting single 'on' parameter listing fields to join on but didn't find one\",\n          expression));\n    }\n    \n    this.eq = factory.constructEqualitor(((StreamExpressionValue) onExpression.getParameter()).getValue(),\n        FieldEqualitor.class);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"333d804f5abfaf34c57493306a4cb2e01e55662d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["333d804f5abfaf34c57493306a4cb2e01e55662d"]},"commit2Childs":{"333d804f5abfaf34c57493306a4cb2e01e55662d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}