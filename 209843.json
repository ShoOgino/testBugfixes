{"path":"lucene/src/java/org/apache/lucene/util/fst/Builder#add(BytesRef,T).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#add(BytesRef,T).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(BytesRef,T).mjava","sourceNew":"  public void add(BytesRef input, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE1;\n    scratchIntsRef.grow(input.length);\n    for(int i=0;i<input.length;i++) {\n      scratchIntsRef.ints[i] = input.bytes[i+input.offset] & 0xFF;\n    }\n    scratchIntsRef.length = input.length;\n    add(scratchIntsRef, output);\n  }\n\n","sourceOld":"  public void add(BytesRef input, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE1;\n    scratchIntsRef.grow(input.length);\n    for(int i=0;i<input.length;i++) {\n      scratchIntsRef.ints[i] = input.bytes[i+input.offset] & 0xFF;\n    }\n    scratchIntsRef.length = input.length;\n    add(scratchIntsRef, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#add(BytesRef,T).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(BytesRef,T).mjava","sourceNew":"  public void add(BytesRef input, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE1;\n    scratchIntsRef.grow(input.length);\n    for(int i=0;i<input.length;i++) {\n      scratchIntsRef.ints[i] = input.bytes[i+input.offset] & 0xFF;\n    }\n    scratchIntsRef.length = input.length;\n    add(scratchIntsRef, output);\n  }\n\n","sourceOld":"  public void add(BytesRef input, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE1;\n    scratchIntsRef.grow(input.length);\n    for(int i=0;i<input.length;i++) {\n      scratchIntsRef.ints[i] = input.bytes[i+input.offset] & 0xFF;\n    }\n    scratchIntsRef.length = input.length;\n    add(scratchIntsRef, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#add(BytesRef,T).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(BytesRef,T).mjava","sourceNew":"  public void add(BytesRef input, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE1;\n    scratchIntsRef.grow(input.length);\n    for(int i=0;i<input.length;i++) {\n      scratchIntsRef.ints[i] = input.bytes[i+input.offset] & 0xFF;\n    }\n    scratchIntsRef.length = input.length;\n    add(scratchIntsRef, output);\n  }\n\n","sourceOld":"  public void add(BytesRef input, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE1;\n    scratchIntsRef.grow(input.length);\n    for(int i=0;i<input.length;i++) {\n      scratchIntsRef.ints[i] = input.bytes[i+input.offset] & 0xFF;\n    }\n    scratchIntsRef.length = input.length;\n    add(scratchIntsRef, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ec890fad2ea96317f4429e0aa0085bb25673641","date":1326669938,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#add(BytesRef,T).mjava","sourceNew":null,"sourceOld":"  public void add(BytesRef input, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE1;\n    scratchIntsRef.grow(input.length);\n    for(int i=0;i<input.length;i++) {\n      scratchIntsRef.ints[i] = input.bytes[i+input.offset] & 0xFF;\n    }\n    scratchIntsRef.length = input.length;\n    add(scratchIntsRef, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1ec890fad2ea96317f4429e0aa0085bb25673641","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1ec890fad2ea96317f4429e0aa0085bb25673641":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}