{"path":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      new LuceneTaxonomyWriter(indexDir);\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    LuceneTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new LuceneTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    tr.refresh();\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","sourceNew":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      new LuceneTaxonomyWriter(indexDir);\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    LuceneTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new LuceneTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    tr.refresh();\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      new LuceneTaxonomyWriter(indexDir);\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    LuceneTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new LuceneTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    tr.refresh();\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      new LuceneTaxonomyWriter(indexDir);\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    LuceneTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new LuceneTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    tr.refresh();\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      new LuceneTaxonomyWriter(indexDir);\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    LuceneTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new LuceneTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    tr.refresh();\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","sourceNew":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      new DirectoryTaxonomyWriter(indexDir);\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    tr.refresh();\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      new LuceneTaxonomyWriter(indexDir);\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    LuceneTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new LuceneTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    tr.refresh();\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testWriterLock().mjava","sourceNew":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      new DirectoryTaxonomyWriter(indexDir);\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    tr.refresh();\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Test what happens if we try to write to a locked taxonomy writer,\n   * and see that we can unlock it and continue.\n   */\n  @Test\n  public void testWriterLock() throws Exception {\n    // native fslock impl gets angry if we use it, so use RAMDirectory explicitly.\n    Directory indexDir = new RAMDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"hi\", \"there\"));\n    tw.commit();\n    // we deliberately not close the write now, and keep it open and\n    // locked.\n    // Verify that the writer worked:\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    assertEquals(2, tr.getOrdinal(new CategoryPath(\"hi\", \"there\")));\n    // Try to open a second writer, with the first one locking the directory.\n    // We expect to get a LockObtainFailedException.\n    try {\n      new DirectoryTaxonomyWriter(indexDir);\n      fail(\"should have failed to write in locked directory\");\n    } catch (LockObtainFailedException e) {\n      // this is what we expect to happen.\n    }\n    // Remove the lock, and now the open should succeed, and we can\n    // write to the new writer.\n    DirectoryTaxonomyWriter.unlock(indexDir);\n    TaxonomyWriter tw2 = new DirectoryTaxonomyWriter(indexDir);\n    tw2.addCategory(new CategoryPath(\"hey\"));\n    tw2.close();\n    // See that the writer indeed wrote:\n    tr.refresh();\n    assertEquals(3, tr.getOrdinal(new CategoryPath(\"hey\")));\n    tr.close();\n    tw.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}