{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size()==0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer(); \n    for (final String name  : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \"+colName;\n      if (roundNum<0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\",template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n],template));\n        }\n        else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n],template));\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size()==0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer(); \n    for (final String name  : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \"+colName;\n      if (roundNum<0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\",template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n],template));\n        }\n        else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n],template));\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b","date":1269463784,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size()==0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer(); \n    for (final String name  : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \"+colName;\n      if (roundNum<0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\",template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n],template));\n        }\n        else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n],template));\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b80ad3438ccc68d1ef441add711ed2143324f14","date":1293087175,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9b80ad3438ccc68d1ef441add711ed2143324f14"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b","9b80ad3438ccc68d1ef441add711ed2143324f14"],"9b80ad3438ccc68d1ef441add711ed2143324f14":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["dc5ecd93bcd50b2199757091d526fc1bcbce0db1","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"9b80ad3438ccc68d1ef441add711ed2143324f14":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","9b80ad3438ccc68d1ef441add711ed2143324f14"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}