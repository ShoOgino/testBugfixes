{"path":"src/java/org/apache/solr/search/DocSetDelegateCollector[DocSetHitCollector]#collect(int).mjava","commits":[{"id":"ac3e6437547a34cce2b5405ce0cf9e3af578401e","date":1243373693,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DocSetDelegateCollector[DocSetHitCollector]#collect(int).mjava","pathOld":"src/java/org/apache/solr/search/DocSetHitCollector#collect(int,float).mjava","sourceNew":"  public void collect(int doc) throws IOException {\n    collector.collect(doc);\n\n    doc += base;\n    // optimistically collect the first docs in an array\n    // in case the total number will be small enough to represent\n    // as a small set like SortedIntDocSet instead...\n    // Storing in this array will be quicker to convert\n    // than scanning through a potentially huge bit vector.\n    // FUTURE: when search methods all start returning docs in order, maybe\n    // we could have a ListDocSet() and use the collected array directly.\n    if (pos < scratch.length) {\n      scratch[pos]=doc;\n    } else {\n      // this conditional could be removed if BitSet was preallocated, but that\n      // would take up more memory, and add more GC time...\n      if (bits==null) bits = new OpenBitSet(maxDoc);\n      bits.fastSet(doc);\n    }\n\n    pos++;\n  }\n\n","sourceOld":"  public void collect(int doc, float score) {\n    // optimistically collect the first docs in an array\n    // in case the total number will be small enough to represent\n    // as a small set like SortedIntDocSet instead...\n    // Storing in this array will be quicker to convert\n    // than scanning through a potentially huge bit vector.\n    // FUTURE: when search methods all start returning docs in order, maybe\n    // we could have a ListDocSet() and use the collected array directly.\n    if (pos < scratch.length) {\n      scratch[pos]=doc;\n    } else {\n      // this conditional could be removed if BitSet was preallocated, but that\n      // would take up more memory, and add more GC time...\n      if (bits==null) bits = new OpenBitSet(maxDoc);\n      bits.fastSet(doc);\n    }\n\n    pos++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/DocSetDelegateCollector[DocSetHitCollector]#collect(int).mjava","pathOld":"src/java/org/apache/solr/search/DocSetDelegateCollector[DocSetHitCollector]#collect(int).mjava","sourceNew":"  public void collect(int doc) throws IOException {\n    collector.collect(doc);\n\n    doc += base;\n    // optimistically collect the first docs in an array\n    // in case the total number will be small enough to represent\n    // as a small set like SortedIntDocSet instead...\n    // Storing in this array will be quicker to convert\n    // than scanning through a potentially huge bit vector.\n    // FUTURE: when search methods all start returning docs in order, maybe\n    // we could have a ListDocSet() and use the collected array directly.\n    if (pos < scratch.length) {\n      scratch[pos]=doc;\n    } else {\n      // this conditional could be removed if BitSet was preallocated, but that\n      // would take up more memory, and add more GC time...\n      if (bits==null) bits = new OpenBitSet(maxDoc);\n      bits.fastSet(doc);\n    }\n\n    pos++;\n  }\n\n","sourceOld":"  public void collect(int doc) throws IOException {\n    collector.collect(doc);\n\n    doc += base;\n    // optimistically collect the first docs in an array\n    // in case the total number will be small enough to represent\n    // as a small set like SortedIntDocSet instead...\n    // Storing in this array will be quicker to convert\n    // than scanning through a potentially huge bit vector.\n    // FUTURE: when search methods all start returning docs in order, maybe\n    // we could have a ListDocSet() and use the collected array directly.\n    if (pos < scratch.length) {\n      scratch[pos]=doc;\n    } else {\n      // this conditional could be removed if BitSet was preallocated, but that\n      // would take up more memory, and add more GC time...\n      if (bits==null) bits = new OpenBitSet(maxDoc);\n      bits.fastSet(doc);\n    }\n\n    pos++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}