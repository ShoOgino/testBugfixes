{"path":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","commits":[{"id":"5a412a7808b2815566cb17117ebe6638112b9a31","date":1484916151,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","sourceNew":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), new DocValuesNumbersQuery(\"f2\", 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), new DocValuesNumbersQuery(\"f2\", 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","sourceNew":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), new DocValuesNumbersQuery(\"f2\", 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(reader.leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), new DocValuesNumbersQuery(\"f2\", 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(reader.leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9970073fd3c04efd7374f975e45a61084b169ce9","date":1499179453,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","sourceNew":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newSlowRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newSlowRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","sourceNew":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newSlowRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newSlowRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","sourceNew":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newSlowRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, ScoreMode.COMPLETE);\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newSlowRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, ScoreMode.COMPLETE);\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newSlowRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newSlowRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","sourceNew":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newSlowRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, ScoreMode.COMPLETE);\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newSlowRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, ScoreMode.COMPLETE);\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newSlowRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newSlowRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","sourceNew":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newSlowRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createWeight(searcher.rewrite(q1), ScoreMode.COMPLETE, 1);\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newSlowRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createWeight(searcher.rewrite(q2), ScoreMode.COMPLETE, 1);\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newSlowRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, ScoreMode.COMPLETE);\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newSlowRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, ScoreMode.COMPLETE);\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","sourceNew":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newSlowRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createWeight(searcher.rewrite(q1), ScoreMode.COMPLETE, 1);\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newSlowRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createWeight(searcher.rewrite(q2), ScoreMode.COMPLETE, 1);\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newSlowRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, ScoreMode.COMPLETE);\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newSlowRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, ScoreMode.COMPLETE);\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["5a412a7808b2815566cb17117ebe6638112b9a31","9970073fd3c04efd7374f975e45a61084b169ce9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9970073fd3c04efd7374f975e45a61084b169ce9":["5a412a7808b2815566cb17117ebe6638112b9a31"],"5a412a7808b2815566cb17117ebe6638112b9a31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["9970073fd3c04efd7374f975e45a61084b169ce9"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a412a7808b2815566cb17117ebe6638112b9a31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["9970073fd3c04efd7374f975e45a61084b169ce9","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a412a7808b2815566cb17117ebe6638112b9a31","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"5a412a7808b2815566cb17117ebe6638112b9a31":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","9970073fd3c04efd7374f975e45a61084b169ce9","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"9970073fd3c04efd7374f975e45a61084b169ce9":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}