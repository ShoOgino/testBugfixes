{"path":"src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","commits":[{"id":"09b1d6bb7960af6daf734195c6353ec14a0c95c0","date":1169589665,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns <code>true</code> if all readers are still up-to-date.\n   * \n   * @throws IOException\n   */\n  public boolean isCurrent() throws IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      IndexReader reader = subReaders[i];\n      if (!reader.isCurrent())\n        return false;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07ef68fd341288151fb0f6d34d3291ea006bb0f5","date":1169592880,"type":4,"author":"Daniel Naber","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns <code>true</code> if all readers are still up-to-date.\n   * \n   * @throws IOException\n   */\n  public boolean isCurrent() throws IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      IndexReader reader = subReaders[i];\n      if (!reader.isCurrent())\n        return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","sourceNew":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","sourceNew":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["07ef68fd341288151fb0f6d34d3291ea006bb0f5"],"09b1d6bb7960af6daf734195c6353ec14a0c95c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"07ef68fd341288151fb0f6d34d3291ea006bb0f5":["09b1d6bb7960af6daf734195c6353ec14a0c95c0"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09b1d6bb7960af6daf734195c6353ec14a0c95c0"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["8a9e385641d717e641408d8fbbc62be8fc766357"],"09b1d6bb7960af6daf734195c6353ec14a0c95c0":["07ef68fd341288151fb0f6d34d3291ea006bb0f5"],"07ef68fd341288151fb0f6d34d3291ea006bb0f5":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}