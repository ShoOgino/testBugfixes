{"path":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testMultipleDocs().mjava","commits":[{"id":"093e8fad7328aef756bbbf01ec3d5c42a7a62211","date":1363798585,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testMultipleDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n\n    int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, offsetsType));\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, hits);\n    assertEquals(numDocs, snippets.length);\n    for(int hit=0;hit<numDocs;hit++) {\n      StoredDocument doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id  & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testMultipleDocs().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testMultipleDocs().mjava","sourceNew":"  public void testMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n\n    int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, offsetsType));\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, hits);\n    assertEquals(numDocs, snippets.length);\n    for(int hit=0;hit<numDocs;hit++) {\n      StoredDocument doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id  & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n\n    int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, offsetsType));\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, hits);\n    assertEquals(numDocs, snippets.length);\n    for(int hit=0;hit<numDocs;hit++) {\n      StoredDocument doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id  & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testMultipleDocs().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testMultipleDocs().mjava","sourceNew":"  public void testMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n\n    int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, offsetsType));\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, hits);\n    assertEquals(numDocs, snippets.length);\n    for(int hit=0;hit<numDocs;hit++) {\n      StoredDocument doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id  & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n\n    int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, offsetsType));\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, hits);\n    assertEquals(numDocs, snippets.length);\n    for(int hit=0;hit<numDocs;hit++) {\n      StoredDocument doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id  & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testMultipleDocs().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testMultipleDocs().mjava","sourceNew":"  public void testMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n\n    int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, offsetsType));\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, hits);\n    assertEquals(numDocs, snippets.length);\n    for(int hit=0;hit<numDocs;hit++) {\n      StoredDocument doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id  & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n\n    int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, offsetsType));\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, hits);\n    assertEquals(numDocs, snippets.length);\n    for(int hit=0;hit<numDocs;hit++) {\n      StoredDocument doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id  & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testMultipleDocs().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testMultipleDocs().mjava","sourceNew":"  public void testMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n\n    int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, offsetsType));\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, hits);\n    assertEquals(numDocs, snippets.length);\n    for(int hit=0;hit<numDocs;hit++) {\n      Document doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id  & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n\n    int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, offsetsType));\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, hits);\n    assertEquals(numDocs, snippets.length);\n    for(int hit=0;hit<numDocs;hit++) {\n      StoredDocument doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id  & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testMultipleDocs().mjava","sourceNew":null,"sourceOld":"  public void testMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n\n    int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, offsetsType));\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, hits);\n    assertEquals(numDocs, snippets.length);\n    for(int hit=0;hit<numDocs;hit++) {\n      Document doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id  & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testMultipleDocs().mjava","sourceNew":null,"sourceOld":"  public void testMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n\n    int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, offsetsType));\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, hits);\n    assertEquals(numDocs, snippets.length);\n    for(int hit=0;hit<numDocs;hit++) {\n      Document doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id  & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","381618eac2691bb34ab9a3fca76ad55c6274517e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"093e8fad7328aef756bbbf01ec3d5c42a7a62211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["093e8fad7328aef756bbbf01ec3d5c42a7a62211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"093e8fad7328aef756bbbf01ec3d5c42a7a62211":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["093e8fad7328aef756bbbf01ec3d5c42a7a62211"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}