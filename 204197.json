{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","commits":[{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      log.info(\"A cluster state change: {}, has occurred - updating... (live nodes size: {})\", (event), ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size());\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      log.info(\"A cluster state change: {}, has occurred - updating... (live nodes size: {})\", (event), ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size());\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f616abd7d3345b373ca3f5a49a3351a7a18eb741","date":1455910613,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.debug(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.debug(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.debug(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.info(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      log.debug(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      LOG.debug(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":4,"author":"murblanc","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.LegacyClusterStateWatcher#process(WatchedEvent).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      int liveNodesSize = ZkStateReader.this.clusterState == null ? 0 : ZkStateReader.this.clusterState.getLiveNodes().size();\n      log.debug(\"A cluster state change: [{}], has occurred - updating... (live nodes size: [{}])\", event, liveNodesSize);\n      refreshAndWatch();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","962cd4f5e313777f35da8f521265323e84184929"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}