{"path":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","commits":[{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","pathOld":"/dev/null","sourceNew":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ef80fac452dc9fe7ee68e418183ebbeb8d4001c","date":1370731787,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    //every test with SlowFuzzyQuery.defaultMinSimilarity\n    //is exercising the Automaton, not the brute force linear method\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    //every test with SlowFuzzyQuery.defaultMinSimilarity\n    //is exercising the Automaton, not the brute force linear method\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.shutdown();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    //every test with SlowFuzzyQuery.defaultMinSimilarity\n    //is exercising the Automaton, not the brute force linear method\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    //every test with SlowFuzzyQuery.defaultMinSimilarity\n    //is exercising the Automaton, not the brute force linear method\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    //every test with SlowFuzzyQuery.defaultMinSimilarity\n    //is exercising the Automaton, not the brute force linear method\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.shutdown();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    //every test with SlowFuzzyQuery.defaultMinSimilarity\n    //is exercising the Automaton, not the brute force linear method\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    //every test with SlowFuzzyQuery.defaultMinSimilarity\n    //is exercising the Automaton, not the brute force linear method\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","sourceNew":null,"sourceOld":"  public void testFuzziness() throws Exception {\n    //every test with SlowFuzzyQuery.defaultMinSimilarity\n    //is exercising the Automaton, not the brute force linear method\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","sourceNew":null,"sourceOld":"  public void testFuzziness() throws Exception {\n    //every test with SlowFuzzyQuery.defaultMinSimilarity\n    //is exercising the Automaton, not the brute force linear method\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","sourceNew":null,"sourceOld":"  public void testFuzziness() throws Exception {\n    //every test with SlowFuzzyQuery.defaultMinSimilarity\n    //is exercising the Automaton, not the brute force linear method\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzziness().mjava","sourceNew":null,"sourceOld":"  public void testFuzziness() throws Exception {\n    //every test with SlowFuzzyQuery.defaultMinSimilarity\n    //is exercising the Automaton, not the brute force linear method\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new SlowFuzzyQuery(new Term(\"field\", \"bbbbb\"), SlowFuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), SlowFuzzyQuery.defaultMinSimilarity, 0);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaccc\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaa\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaac\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new SlowFuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), SlowFuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ef80fac452dc9fe7ee68e418183ebbeb8d4001c":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","89424def13674ea17829b41c5883c54ecc31a132"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["4ef80fac452dc9fe7ee68e418183ebbeb8d4001c"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"89424def13674ea17829b41c5883c54ecc31a132":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"]},"commit2Childs":{"4ef80fac452dc9fe7ee68e418183ebbeb8d4001c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["4ef80fac452dc9fe7ee68e418183ebbeb8d4001c"],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}