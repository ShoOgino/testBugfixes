{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    //assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    //assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db610e9e698f94982d7a1af15a21d6a30ef96b9d","date":1270586294,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    //assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    //assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":null,"sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["db610e9e698f94982d7a1af15a21d6a30ef96b9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"db610e9e698f94982d7a1af15a21d6a30ef96b9d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["db610e9e698f94982d7a1af15a21d6a30ef96b9d"],"db610e9e698f94982d7a1af15a21d6a30ef96b9d":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}