{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler.IntPriorityQueue#lessThan(Object,Object).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler.IntPriorityQueue#lessThan(Object,Object).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler.IntPriorityQueue#lessThan(Object,Object).mjava","sourceNew":"    /**\n     * Returns true if <code>o1<code>'s weight is less than that of <code>o2</code>, for\n     * ordering in the PQ.\n     * @return True if <code>o1</code> weighs less than <code>o2</code>.\n     */\n    @Override\n    public boolean lessThan(Object o1, Object o2) {\n      return ((MI)o1).value < ((MI)o2).value;\n    }\n\n","sourceOld":"    /**\n     * Returns true if <code>o1<code>'s weight is less than that of <code>o2</code>, for\n     * ordering in the PQ.\n     * @return True if <code>o1</code> weighs less than <code>o2</code>.\n     */\n    @Override\n    public boolean lessThan(Object o1, Object o2) {\n      return ((MI)o1).value < ((MI)o2).value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9409b6a55f3d296d49614bc49405b834457f93e","date":1359015345,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler.IntPriorityQueue#lessThan(MI,MI).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler.IntPriorityQueue#lessThan(Object,Object).mjava","sourceNew":"    /**\n     * Returns true if <code>o1<code>'s weight is less than that of <code>o2</code>, for\n     * ordering in the PQ.\n     * @return True if <code>o1</code> weighs less than <code>o2</code>.\n     */\n    @Override\n    public boolean lessThan(MI o1, MI o2) {\n      return o1.value < o2.value;\n    }\n\n","sourceOld":"    /**\n     * Returns true if <code>o1<code>'s weight is less than that of <code>o2</code>, for\n     * ordering in the PQ.\n     * @return True if <code>o1</code> weighs less than <code>o2</code>.\n     */\n    @Override\n    public boolean lessThan(Object o1, Object o2) {\n      return ((MI)o1).value < ((MI)o2).value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler.IntPriorityQueue#lessThan(MI,MI).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler.IntPriorityQueue#lessThan(Object,Object).mjava","sourceNew":"    /**\n     * Returns true if <code>o1<code>'s weight is less than that of <code>o2</code>, for\n     * ordering in the PQ.\n     * @return True if <code>o1</code> weighs less than <code>o2</code>.\n     */\n    @Override\n    public boolean lessThan(MI o1, MI o2) {\n      return o1.value < o2.value;\n    }\n\n","sourceOld":"    /**\n     * Returns true if <code>o1<code>'s weight is less than that of <code>o2</code>, for\n     * ordering in the PQ.\n     * @return True if <code>o1</code> weighs less than <code>o2</code>.\n     */\n    @Override\n    public boolean lessThan(Object o1, Object o2) {\n      return ((MI)o1).value < ((MI)o2).value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9409b6a55f3d296d49614bc49405b834457f93e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9409b6a55f3d296d49614bc49405b834457f93e"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["b89678825b68eccaf09e6ab71675fc0b0af1e099","e9409b6a55f3d296d49614bc49405b834457f93e"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e9409b6a55f3d296d49614bc49405b834457f93e","b2d5244a676b83c2d551c3746e8181588ba619e1"],"e9409b6a55f3d296d49614bc49405b834457f93e":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}