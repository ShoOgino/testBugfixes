{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n        // }\n        assert clearEOF();\n        if (target.compareTo(term) != 0 || !termExists) {\n          assert otherState != null && otherState instanceof BlockTermState;\n          currentFrame = staticFrame;\n          currentFrame.state.copyFrom(otherState);\n          term.copy(target);\n          currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n          assert currentFrame.metaDataUpto > 0;\n          validIndexPrefix = 0;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n          // }\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","sourceNew":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n        // }\n        assert clearEOF();\n        if (target.compareTo(term) != 0 || !termExists) {\n          assert otherState != null && otherState instanceof BlockTermState;\n          currentFrame = staticFrame;\n          currentFrame.state.copyFrom(otherState);\n          term.copyBytes(target);\n          currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n          assert currentFrame.metaDataUpto > 0;\n          validIndexPrefix = 0;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n          // }\n        }\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n        // }\n        assert clearEOF();\n        if (target.compareTo(term) != 0 || !termExists) {\n          assert otherState != null && otherState instanceof BlockTermState;\n          currentFrame = staticFrame;\n          currentFrame.state.copyFrom(otherState);\n          term.copy(target);\n          currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n          assert currentFrame.metaDataUpto > 0;\n          validIndexPrefix = 0;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n          // }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","sourceNew":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n        // }\n        assert clearEOF();\n        if (target.compareTo(term) != 0 || !termExists) {\n          assert otherState != null && otherState instanceof BlockTermState;\n          currentFrame = staticFrame;\n          currentFrame.state.copyFrom(otherState);\n          term.copyBytes(target);\n          currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n          assert currentFrame.metaDataUpto > 0;\n          validIndexPrefix = 0;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n          // }\n        }\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n        // }\n        assert clearEOF();\n        if (target.compareTo(term) != 0 || !termExists) {\n          assert otherState != null && otherState instanceof BlockTermState;\n          currentFrame = staticFrame;\n          currentFrame.state.copyFrom(otherState);\n          term.copyBytes(target);\n          currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n          assert currentFrame.metaDataUpto > 0;\n          validIndexPrefix = 0;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n          // }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["e6e919043fa85ee891123768dd655a98edbbf63c"],"e6e919043fa85ee891123768dd655a98edbbf63c":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6e919043fa85ee891123768dd655a98edbbf63c":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}