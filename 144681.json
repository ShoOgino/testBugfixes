{"path":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchRandomAccess().mjava","commits":[{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchRandomAccess().mjava","pathOld":"/dev/null","sourceNew":"  public void testDisjunctionWithMinShouldMatchRandomAccess() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // Only the most costly clause uses random-access in that case:\n    // most of time, we will find agreement between the 2 least costly\n    // clauses and only then check whether the 3rd one matches too\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // When random-access is true, just propagate\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(true); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3).get(false); // triggers assertions as a side-effect\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchRandomAccess().mjava","pathOld":"/dev/null","sourceNew":"  public void testDisjunctionWithMinShouldMatchRandomAccess() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // Only the most costly clause uses random-access in that case:\n    // most of time, we will find agreement between the 2 least costly\n    // clauses and only then check whether the 3rd one matches too\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // When random-access is true, just propagate\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(true); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3).get(false); // triggers assertions as a side-effect\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchLeadCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchRandomAccess().mjava","sourceNew":"  public void testDisjunctionWithMinShouldMatchLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // minShouldMatch is 2 so the 2 least costly clauses will lead iteration\n    // and their cost will be 30+12=42\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(50, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(100); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // If the leadCost is less than the msm cost, then it wins\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 20));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(20); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, 62));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 62));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 62));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, 62));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(100); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, 32));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 32));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 32));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, 32));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3).get(100); // triggers assertions as a side-effect\n  }\n\n","sourceOld":"  public void testDisjunctionWithMinShouldMatchRandomAccess() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // Only the most costly clause uses random-access in that case:\n    // most of time, we will find agreement between the 2 least costly\n    // clauses and only then check whether the 3rd one matches too\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // When random-access is true, just propagate\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(true); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3).get(false); // triggers assertions as a side-effect\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchLeadCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchRandomAccess().mjava","sourceNew":"  public void testDisjunctionWithMinShouldMatchLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // minShouldMatch is 2 so the 2 least costly clauses will lead iteration\n    // and their cost will be 30+12=42\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(50, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(100); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // If the leadCost is less than the msm cost, then it wins\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 20));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(20); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, 62));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 62));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 62));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, 62));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(100); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, 32));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 32));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 32));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, 32));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3).get(100); // triggers assertions as a side-effect\n  }\n\n","sourceOld":"  public void testDisjunctionWithMinShouldMatchRandomAccess() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // Only the most costly clause uses random-access in that case:\n    // most of time, we will find agreement between the 2 least costly\n    // clauses and only then check whether the 3rd one matches too\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // When random-access is true, just propagate\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(true); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3).get(false); // triggers assertions as a side-effect\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchLeadCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchRandomAccess().mjava","sourceNew":"  public void testDisjunctionWithMinShouldMatchLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // minShouldMatch is 2 so the 2 least costly clauses will lead iteration\n    // and their cost will be 30+12=42\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(50, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(100); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // If the leadCost is less than the msm cost, then it wins\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 20));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(20); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, 62));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 62));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 62));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, 62));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(100); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, 32));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 32));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 32));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, 32));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3).get(100); // triggers assertions as a side-effect\n  }\n\n","sourceOld":"  public void testDisjunctionWithMinShouldMatchRandomAccess() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // Only the most costly clause uses random-access in that case:\n    // most of time, we will find agreement between the 2 least costly\n    // clauses and only then check whether the 3rd one matches too\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // When random-access is true, just propagate\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(true); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3).get(false); // triggers assertions as a side-effect\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchLeadCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchRandomAccess().mjava","sourceNew":"  public void testDisjunctionWithMinShouldMatchLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // minShouldMatch is 2 so the 2 least costly clauses will lead iteration\n    // and their cost will be 30+12=42\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(50, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(100); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // If the leadCost is less than the msm cost, then it wins\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 20));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(20); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, 62));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 62));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 62));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, 62));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(100); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, 32));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, 32));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 32));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, 32));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3).get(100); // triggers assertions as a side-effect\n  }\n\n","sourceOld":"  public void testDisjunctionWithMinShouldMatchRandomAccess() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // Only the most costly clause uses random-access in that case:\n    // most of time, we will find agreement between the 2 least costly\n    // clauses and only then check whether the 3rd one matches too\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // When random-access is true, just propagate\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(true); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect\n\n    subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));\n    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3).get(false); // triggers assertions as a side-effect\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["dca67e06c96e95a8d9ef07418b6299bfd981523b","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","24f3e9c0fc20b3107388ec853a6fbad9f891b461","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dca67e06c96e95a8d9ef07418b6299bfd981523b","302d34f2c66e8d489ee13078305c330cbf67b226"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}