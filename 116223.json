{"path":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#convertSegToken(SegToken,String,int,String).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#convertSegToken(SegToken,String,int,String).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#convertSegToken(SegToken,String,int,String).mjava","sourceNew":"  /**\n   * Convert a {@link SegToken} to a Lucene {@link Token}\n   * \n   * @param st input {@link SegToken}\n   * @param sentence associated Sentence\n   * @param sentenceStartOffset offset into sentence\n   * @param type token type, default is word\n   * @return Lucene {@link Token}\n   */\n  public Token convertSegToken(SegToken st, String sentence,\n      int sentenceStartOffset, String type) {\n    Token result;\n    switch (st.wordType) {\n      case WordType.STRING:\n      case WordType.NUMBER:\n      case WordType.FULLWIDTH_NUMBER:\n      case WordType.FULLWIDTH_STRING:\n        st.charArray = sentence.substring(st.startOffset, st.endOffset)\n            .toCharArray();\n        break;\n      default:\n        break;\n    }\n\n    st = tokenFilter.filter(st);\n\n    result = new Token(st.charArray, 0, st.charArray.length, st.startOffset\n        + sentenceStartOffset, st.endOffset + sentenceStartOffset);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Convert a {@link SegToken} to a Lucene {@link Token}\n   * \n   * @param st input {@link SegToken}\n   * @param sentence associated Sentence\n   * @param sentenceStartOffset offset into sentence\n   * @param type token type, default is word\n   * @return Lucene {@link Token}\n   */\n  public Token convertSegToken(SegToken st, String sentence,\n      int sentenceStartOffset, String type) {\n    Token result;\n    switch (st.wordType) {\n      case WordType.STRING:\n      case WordType.NUMBER:\n      case WordType.FULLWIDTH_NUMBER:\n      case WordType.FULLWIDTH_STRING:\n        st.charArray = sentence.substring(st.startOffset, st.endOffset)\n            .toCharArray();\n        break;\n      default:\n        break;\n    }\n\n    st = tokenFilter.filter(st);\n\n    result = new Token(st.charArray, 0, st.charArray.length, st.startOffset\n        + sentenceStartOffset, st.endOffset + sentenceStartOffset);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#convertSegToken(SegToken,String,int).mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordSegmenter#convertSegToken(SegToken,String,int,String).mjava","sourceNew":"  /**\n   * Process a {@link SegToken} so that it is ready for indexing.\n   * \n   * This method calculates offsets and normalizes the token with {@link SegTokenFilter}.\n   * \n   * @param st input {@link SegToken}\n   * @param sentence associated Sentence\n   * @param sentenceStartOffset offset into sentence\n   * @return Lucene {@link SegToken}\n   */\n  public SegToken convertSegToken(SegToken st, String sentence,\n      int sentenceStartOffset) {\n\n    switch (st.wordType) {\n      case WordType.STRING:\n      case WordType.NUMBER:\n      case WordType.FULLWIDTH_NUMBER:\n      case WordType.FULLWIDTH_STRING:\n        st.charArray = sentence.substring(st.startOffset, st.endOffset)\n            .toCharArray();\n        break;\n      default:\n        break;\n    }\n\n    st = tokenFilter.filter(st);\n    st.startOffset += sentenceStartOffset;\n    st.endOffset += sentenceStartOffset;\n    return st;\n  }\n\n","sourceOld":"  /**\n   * Convert a {@link SegToken} to a Lucene {@link Token}\n   * \n   * @param st input {@link SegToken}\n   * @param sentence associated Sentence\n   * @param sentenceStartOffset offset into sentence\n   * @param type token type, default is word\n   * @return Lucene {@link Token}\n   */\n  public Token convertSegToken(SegToken st, String sentence,\n      int sentenceStartOffset, String type) {\n    Token result;\n    switch (st.wordType) {\n      case WordType.STRING:\n      case WordType.NUMBER:\n      case WordType.FULLWIDTH_NUMBER:\n      case WordType.FULLWIDTH_STRING:\n        st.charArray = sentence.substring(st.startOffset, st.endOffset)\n            .toCharArray();\n        break;\n      default:\n        break;\n    }\n\n    st = tokenFilter.filter(st);\n\n    result = new Token(st.charArray, 0, st.charArray.length, st.startOffset\n        + sentenceStartOffset, st.endOffset + sentenceStartOffset);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b5756469957918cac40a831acec9cf01c8c2bb3"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}