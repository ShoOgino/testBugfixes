{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoDegeneratePath#intersects(Plane,GeoPoint[],Membership...).mjava","commits":[{"id":"45d96903d9a4f1788ca19cd283e5b2e7c196bcb6","date":1504887519,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoDegeneratePath#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n    //System.err.println(\" Looking for intersection of plane \"+plane+\" with path \"+this);\n    for (final SegmentEndpoint pathPoint : endPoints) {\n      if (pathPoint.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"224bcc703bd464ae5b137e87bccafd0a32836f9a","date":1505041410,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoDegeneratePath#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoDegeneratePath#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n    //System.err.println(\" Looking for intersection of plane \"+plane+\" with path \"+this);\n    \n    // Since the endpoints are included in the path segments, we only need to do this if there are\n    // no path segments\n    if (endPoints.size() == 1) {\n      return endPoints.get(0).intersects(planetModel, plane, notablePoints, bounds);\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n    //System.err.println(\" Looking for intersection of plane \"+plane+\" with path \"+this);\n    for (final SegmentEndpoint pathPoint : endPoints) {\n      if (pathPoint.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoDegeneratePath#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // We look for an intersection with any of the exterior edges of the path.\n    // We also have to look for intersections with the cones described by the endpoints.\n    // Return \"true\" if any such intersections are found.\n\n    // For plane intersections, the basic idea is to come up with an equation of the line that is\n    // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n    // any of the intersection points are within the bounds, then we've detected an intersection.\n    // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n    // But that's an edge case and we won't be optimizing for it.\n    //System.err.println(\" Looking for intersection of plane \"+plane+\" with path \"+this);\n    \n    // Since the endpoints are included in the path segments, we only need to do this if there are\n    // no path segments\n    if (endPoints.size() == 1) {\n      return endPoints.get(0).intersects(planetModel, plane, notablePoints, bounds);\n    }\n\n    for (final PathSegment pathSegment : segments) {\n      if (pathSegment.intersects(planetModel, plane, notablePoints, bounds)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","224bcc703bd464ae5b137e87bccafd0a32836f9a"],"224bcc703bd464ae5b137e87bccafd0a32836f9a":["45d96903d9a4f1788ca19cd283e5b2e7c196bcb6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["224bcc703bd464ae5b137e87bccafd0a32836f9a"],"45d96903d9a4f1788ca19cd283e5b2e7c196bcb6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"224bcc703bd464ae5b137e87bccafd0a32836f9a":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","45d96903d9a4f1788ca19cd283e5b2e7c196bcb6"],"45d96903d9a4f1788ca19cd283e5b2e7c196bcb6":["224bcc703bd464ae5b137e87bccafd0a32836f9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}