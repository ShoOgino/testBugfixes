{"path":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","commits":[{"id":"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","date":1381993379,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    AtomicReader atomicReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      atomicReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(atomicReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (atomicReader != null)\n        atomicReader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","sourceNew":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    LeafReader leafReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      leafReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(leafReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (leafReader != null)\n        leafReader.close();\n    }\n  }\n\n","sourceOld":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    AtomicReader atomicReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      atomicReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(atomicReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (atomicReader != null)\n        atomicReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44","date":1415781486,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","sourceNew":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    LeafReader leafReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      leafReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(leafReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      double score = classificationResult.getScore();\n      assertTrue(\"score should be between 0 and 1, got:\" + score, score <= 1 && score >= 0);\n    } finally {\n      if (leafReader != null)\n        leafReader.close();\n    }\n  }\n\n","sourceOld":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    LeafReader leafReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      leafReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(leafReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (leafReader != null)\n        leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":4,"author":"Tommaso Teofili","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String,Query).mjava","sourceNew":null,"sourceOld":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName, Query query) throws Exception {\n    LeafReader leafReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      leafReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(leafReader, textFieldName, classFieldName, analyzer, query);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      double score = classificationResult.getScore();\n      assertTrue(\"score should be between 0 and 1, got:\" + score, score <= 1 && score >= 0);\n    } finally {\n      if (leafReader != null)\n        leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44"]},"commit2Childs":{"e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"360ff513ddb24a30ffa2111a3ef0f91038803100":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}