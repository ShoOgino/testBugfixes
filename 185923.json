{"path":"src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","commits":[{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order to see the changes.  See the description of the <a\n   * href=\"IndexWriter.html#autoCommit\"><code>autoCommit</code></a> flag which controls when the {@link IndexWriter}\n   * actually commits changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n  }\n\n","sourceOld":"  /**\n   * Check whether this IndexReader is still using the\n   * current (i.e., most recently committed) version of the\n   * index.  If a writer has committed any changes to the\n   * index since this reader was opened, this will return\n   * <code>false</code>, in which case you must open a new\n   * IndexReader in order to see the changes.  See the\n   * description of the <a href=\"IndexWriter.html#autoCommit\"><code>autoCommit</code></a>\n   * flag which controls when the {@link IndexWriter}\n   * actually commits changes to the index.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n  }\n\n","sourceOld":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order to see the changes.  See the description of the <a\n   * href=\"IndexWriter.html#autoCommit\"><code>autoCommit</code></a> flag which controls when the {@link IndexWriter}\n   * actually commits changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n  }\n\n","bugFix":null,"bugIntro":["537382020d6797489b93fa8aeb62495d5018b0ba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"537382020d6797489b93fa8aeb62495d5018b0ba","date":1255718738,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfosStart);\n    }\n  }\n\n","sourceOld":"  /**\n   * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If\n   * a writer has committed any changes to the index since this reader was opened, this will return <code>false</code>,\n   * in which case you must open a new IndexReader in order\n   * to see the changes.  Use {@link IndexWriter#commit} to\n   * commit changes to the index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n  }\n\n","bugFix":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","87c966e9308847938a7c905c2e46a56d8df788b8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfosStart);\n    }\n  }\n\n","sourceOld":"  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfosStart);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfosStart);\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == null || writer.isClosed()) {\n      // we loaded SegmentInfos from the directory\n      return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n    } else {\n      return writer.nrtIsCurrent(segmentInfosStart);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["537382020d6797489b93fa8aeb62495d5018b0ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"537382020d6797489b93fa8aeb62495d5018b0ba":["87c966e9308847938a7c905c2e46a56d8df788b8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"537382020d6797489b93fa8aeb62495d5018b0ba":["8a9e385641d717e641408d8fbbc62be8fc766357"],"87c966e9308847938a7c905c2e46a56d8df788b8":["537382020d6797489b93fa8aeb62495d5018b0ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}