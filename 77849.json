{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","commits":[{"id":"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298","date":1452706901,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testParallelComplementStream() throws Exception {\n    indexr(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\");\n    indexr(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\");\n    indexr(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\");\n    \n    indexr(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\");\n    indexr(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\");\n    indexr(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\");\n    \n    indexr(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\");\n    indexr(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\");\n    commit();\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = zkServer.getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","sourceNew":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = cluster.getZkServer().getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n\n  }\n\n","sourceOld":"  private void testParallelComplementStream() throws Exception {\n    indexr(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\");\n    indexr(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\");\n    indexr(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\");\n    \n    indexr(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\");\n    indexr(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\");\n    indexr(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\");\n    \n    indexr(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\");\n    indexr(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\");\n    commit();\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = zkServer.getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","sourceNew":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = cluster.getZkServer().getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n\n  }\n\n","sourceOld":"  private void testParallelComplementStream() throws Exception {\n    indexr(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\");\n    indexr(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\");\n    indexr(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\");\n    \n    indexr(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\");\n    indexr(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\");\n    indexr(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\");\n    \n    indexr(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\");\n    indexr(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\");\n    commit();\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = zkServer.getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","sourceNew":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = cluster.getZkServer().getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n\n  }\n\n","sourceOld":"  private void testParallelComplementStream() throws Exception {\n    indexr(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\");\n    indexr(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\");\n    indexr(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\");\n    \n    indexr(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\");\n    indexr(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\");\n    indexr(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\");\n    \n    indexr(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\");\n    indexr(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\");\n    commit();\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = zkServer.getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","sourceNew":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = cluster.getZkServer().getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n\n  }\n\n","sourceOld":"  private void testParallelComplementStream() throws Exception {\n    indexr(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\");\n    indexr(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\");\n    indexr(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\");\n    \n    indexr(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\");\n    indexr(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\");\n    indexr(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\");\n    \n    indexr(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\");\n    indexr(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\");\n    commit();\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = zkServer.getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","sourceNew":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = cluster.getZkServer().getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = cluster.getZkServer().getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","sourceNew":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = cluster.getZkServer().getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = cluster.getZkServer().getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","sourceNew":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      final String zkHost = cluster.getZkServer().getZkAddress();\n      final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n          + \"collection1, \"\n          + \"complement(\"\n          + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n          + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n          + \"on=\\\"a_i\\\"),\"\n          + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n\n      stream.setStreamContext(streamContext);\n      final List<Tuple> tuples = getTuples(stream);\n      assert (tuples.size() == 1);\n      assertOrder(tuples, 2);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = cluster.getZkServer().getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","sourceNew":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      final String zkHost = cluster.getZkServer().getZkAddress();\n      final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n          + \"collection1, \"\n          + \"complement(\"\n          + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n          + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n          + \"on=\\\"a_i\\\"),\"\n          + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n\n      stream.setStreamContext(streamContext);\n      final List<Tuple> tuples = getTuples(stream);\n      assert (tuples.size() == 1);\n      assertOrder(tuples, 2);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n    \n    final String zkHost = cluster.getZkServer().getZkAddress();\n    final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n      + \"collection1, \"\n      + \"complement(\"\n        + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n        + \"on=\\\"a_i\\\"),\"\n      + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n    final List<Tuple> tuples = getTuples(stream);\n    \n    assert(tuples.size() == 1);\n    assertOrder(tuples, 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelComplementStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelComplementStream().mjava","sourceNew":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      final String zkHost = cluster.getZkServer().getZkAddress();\n      final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n          + \"collection1, \"\n          + \"complement(\"\n          + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n          + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n          + \"on=\\\"a_i\\\"),\"\n          + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n\n      stream.setStreamContext(streamContext);\n      final List<Tuple> tuples = getTuples(stream);\n      assert (tuples.size() == 1);\n      assertOrder(tuples, 2);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelComplementStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"setA\", \"a_i\", \"0\")\n        .add(id, \"2\", \"a_s\", \"setA\", \"a_i\", \"1\")\n        .add(id, \"3\", \"a_s\", \"setA\", \"a_i\", \"2\")\n        .add(id, \"4\", \"a_s\", \"setA\", \"a_i\", \"3\")\n\n        .add(id, \"5\", \"a_s\", \"setB\", \"a_i\", \"2\")\n        .add(id, \"6\", \"a_s\", \"setB\", \"a_i\", \"3\")\n        .add(id, \"9\", \"a_s\", \"setB\", \"a_i\", \"5\")\n\n        .add(id, \"7\", \"a_s\", \"setAB\", \"a_i\", \"0\")\n        .add(id, \"8\", \"a_s\", \"setAB\", \"a_i\", \"6\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory streamFactory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      final String zkHost = cluster.getZkServer().getZkAddress();\n      final TupleStream stream = streamFactory.constructStream(\"parallel(\"\n          + \"collection1, \"\n          + \"complement(\"\n          + \"search(collection1, q=a_s:(setA || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc, a_s asc\\\", partitionKeys=\\\"a_i\\\"),\"\n          + \"search(collection1, q=a_s:(setB || setAB), fl=\\\"id,a_s,a_i\\\", sort=\\\"a_i asc\\\", partitionKeys=\\\"a_i\\\"),\"\n          + \"on=\\\"a_i\\\"),\"\n          + \"workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_i asc\\\")\");\n\n      stream.setStreamContext(streamContext);\n      final List<Tuple> tuples = getTuples(stream);\n      assert (tuples.size() == 1);\n      assertOrder(tuples, 2);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298","b940572a59da1b42b6c20ab5278155b12816807a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","8c969f15cd04d31e520319c619a445ae21f02d72"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["73450c0955930295d34703e7ddbfc6973b7a121a"],"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b940572a59da1b42b6c20ab5278155b12816807a":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","b940572a59da1b42b6c20ab5278155b12816807a"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}