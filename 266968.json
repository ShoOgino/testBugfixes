{"path":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean).mjava","commits":[{"id":"1381b91b03f7409d8d548c7070dbc615931a0f50","date":1343667369,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter().mjava","sourceNew":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   * \n   * @param rollback IndexWriter if true else close\n   * \n   * @throws IOException\n   */\n  public abstract void newIndexWriter(boolean rollback) throws IOException;\n\n","sourceOld":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   * \n   * @throws IOException\n   */\n  public abstract void newIndexWriter() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   * \n   * @param rollback IndexWriter if true else close\n   * \n   * @throws IOException\n   */\n  public abstract void newIndexWriter(boolean rollback) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   * \n   * @param rollback IndexWriter if true else close\n   * \n   * @throws IOException\n   */\n  public abstract void newIndexWriter(boolean rollback) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean).mjava","sourceNew":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   * \n   * @param rollback IndexWriter if true else close\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void newIndexWriter(boolean rollback) throws IOException;\n\n","sourceOld":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   * \n   * @param rollback IndexWriter if true else close\n   * \n   * @throws IOException\n   */\n  public abstract void newIndexWriter(boolean rollback) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean).mjava","sourceNew":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   * \n   * @param rollback IndexWriter if true else close\n   * @param forceNewDir Force a new Directory instance\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void newIndexWriter(boolean rollback, boolean forceNewDir) throws IOException;\n\n","sourceOld":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   * \n   * @param rollback IndexWriter if true else close\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void newIndexWriter(boolean rollback) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean).mjava","sourceNew":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   * \n   * @param rollback IndexWriter if true else close\n   * @param forceNewDir Force a new Directory instance\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void newIndexWriter(boolean rollback, boolean forceNewDir) throws IOException;\n\n","sourceOld":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   * \n   * @param rollback IndexWriter if true else close\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void newIndexWriter(boolean rollback) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11fa6b3c54740236744aa64f1a29954b1cf172a5","date":1363907001,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean,boolean).mjava","sourceNew":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   * \n   * @param rollback IndexWriter if true else close\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void newIndexWriter(boolean rollback) throws IOException;\n\n","sourceOld":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   * \n   * @param rollback IndexWriter if true else close\n   * @param forceNewDir Force a new Directory instance\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void newIndexWriter(boolean rollback, boolean forceNewDir) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#newIndexWriter(boolean).mjava","sourceNew":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   *\n   * @param rollback IndexWriter if true else close\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void newIndexWriter(boolean rollback) throws IOException;\n\n","sourceOld":"  /**\n   * Called when the Writer should be opened again - eg when replication replaces\n   * all of the index files.\n   * \n   * @param rollback IndexWriter if true else close\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract void newIndexWriter(boolean rollback) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["1381b91b03f7409d8d548c7070dbc615931a0f50"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["11fa6b3c54740236744aa64f1a29954b1cf172a5"],"11fa6b3c54740236744aa64f1a29954b1cf172a5":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1381b91b03f7409d8d548c7070dbc615931a0f50"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1381b91b03f7409d8d548c7070dbc615931a0f50"],"1381b91b03f7409d8d548c7070dbc615931a0f50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"f2126b84bd093fa3d921582a109a0ee578c28126":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86290366cefc1b9d4eced13b430858c4a4c0421d"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11fa6b3c54740236744aa64f1a29954b1cf172a5":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","1381b91b03f7409d8d548c7070dbc615931a0f50"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"1381b91b03f7409d8d548c7070dbc615931a0f50":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["11fa6b3c54740236744aa64f1a29954b1cf172a5","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}