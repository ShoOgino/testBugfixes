{"path":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","commits":[{"id":"2b58d8cd6130103868e9c4987eb78379ed15be83","date":1487612318,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {\n    MergePolicy.MergeSpecification ms;\n    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null\n      ms = new MergePolicy.MergeSpecification();\n      // append up to 10 (random non-sensical) one merge objects\n      for (int ii = 0; ii < random().nextInt(10); ++ii) {\n        final SegmentInfo si = new SegmentInfo(\n            dir, // dir\n            Version.LATEST, // version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();\n        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0));\n        ms.add(new MergePolicy.OneMerge(segments));\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","sourceNew":"  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {\n    MergePolicy.MergeSpecification ms;\n    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null\n      ms = new MergePolicy.MergeSpecification();\n      // append up to 10 (random non-sensical) one merge objects\n      for (int ii = 0; ii < random().nextInt(10); ++ii) {\n        final SegmentInfo si = new SegmentInfo(\n            dir, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();\n        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0));\n        ms.add(new MergePolicy.OneMerge(segments));\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {\n    MergePolicy.MergeSpecification ms;\n    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null\n      ms = new MergePolicy.MergeSpecification();\n      // append up to 10 (random non-sensical) one merge objects\n      for (int ii = 0; ii < random().nextInt(10); ++ii) {\n        final SegmentInfo si = new SegmentInfo(\n            dir, // dir\n            Version.LATEST, // version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();\n        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0));\n        ms.add(new MergePolicy.OneMerge(segments));\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","sourceNew":"  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {\n    MergePolicy.MergeSpecification ms;\n    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null\n      ms = new MergePolicy.MergeSpecification();\n      // append up to 10 (random non-sensical) one merge objects\n      for (int ii = 0; ii < random().nextInt(10); ++ii) {\n        final SegmentInfo si = new SegmentInfo(\n            dir, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();\n        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0));\n        ms.add(new MergePolicy.OneMerge(segments));\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {\n    MergePolicy.MergeSpecification ms;\n    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null\n      ms = new MergePolicy.MergeSpecification();\n      // append up to 10 (random non-sensical) one merge objects\n      for (int ii = 0; ii < random().nextInt(10); ++ii) {\n        final SegmentInfo si = new SegmentInfo(\n            dir, // dir\n            Version.LATEST, // version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();\n        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0));\n        ms.add(new MergePolicy.OneMerge(segments));\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f2203cb8ae87188877cfbf6ad170c5738a0aad5","date":1528117512,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","sourceNew":"  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {\n    MergePolicy.MergeSpecification ms;\n    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null\n      ms = new MergePolicy.MergeSpecification();\n      // append up to 10 (random non-sensical) one merge objects\n      for (int ii = 0; ii < random().nextInt(10); ++ii) {\n        final SegmentInfo si = new SegmentInfo(\n            dir, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();\n        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0, 0));\n        ms.add(new MergePolicy.OneMerge(segments));\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {\n    MergePolicy.MergeSpecification ms;\n    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null\n      ms = new MergePolicy.MergeSpecification();\n      // append up to 10 (random non-sensical) one merge objects\n      for (int ii = 0; ii < random().nextInt(10); ++ii) {\n        final SegmentInfo si = new SegmentInfo(\n            dir, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();\n        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0));\n        ms.add(new MergePolicy.OneMerge(segments));\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","sourceNew":"  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {\n    MergePolicy.MergeSpecification ms;\n    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null\n      ms = new MergePolicy.MergeSpecification();\n      // append up to 10 (random non-sensical) one merge objects\n      for (int ii = 0; ii < random().nextInt(10); ++ii) {\n        final SegmentInfo si = new SegmentInfo(\n            dir, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();\n        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0, 0));\n        ms.add(new MergePolicy.OneMerge(segments));\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {\n    MergePolicy.MergeSpecification ms;\n    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null\n      ms = new MergePolicy.MergeSpecification();\n      // append up to 10 (random non-sensical) one merge objects\n      for (int ii = 0; ii < random().nextInt(10); ++ii) {\n        final SegmentInfo si = new SegmentInfo(\n            dir, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();\n        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0));\n        ms.add(new MergePolicy.OneMerge(segments));\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","sourceNew":"  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {\n    MergePolicy.MergeSpecification ms;\n    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null\n      ms = new MergePolicy.MergeSpecification();\n      // append up to 10 (random non-sensical) one merge objects\n      for (int ii = 0; ii < random().nextInt(10); ++ii) {\n        final SegmentInfo si = new SegmentInfo(\n            dir, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();\n        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0, 0));\n        ms.add(new MergePolicy.OneMerge(segments));\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {\n    MergePolicy.MergeSpecification ms;\n    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null\n      ms = new MergePolicy.MergeSpecification();\n      // append up to 10 (random non-sensical) one merge objects\n      for (int ii = 0; ii < random().nextInt(10); ++ii) {\n        final SegmentInfo si = new SegmentInfo(\n            dir, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();\n        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0));\n        ms.add(new MergePolicy.OneMerge(segments));\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14654be3f7a82c9a3c52169e365baa55bfe64f66","date":1587212697,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOneMergeWrappingMergePolicy#createRandomMergeSpecification(Directory).mjava","sourceNew":"  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {\n    MergePolicy.MergeSpecification ms;\n    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null\n      ms = new MergePolicy.MergeSpecification();\n      // append up to 10 (random non-sensical) one merge objects\n      for (int ii = 0; ii < random().nextInt(10); ++ii) {\n        final SegmentInfo si = new SegmentInfo(\n            dir, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();\n        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0, 0, StringHelper.randomId()));\n        ms.add(new MergePolicy.OneMerge(segments));\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private static MergePolicy.MergeSpecification createRandomMergeSpecification(Directory dir) {\n    MergePolicy.MergeSpecification ms;\n    if (0 < random().nextInt(10)) { // ~ 1 in 10 times return null\n      ms = new MergePolicy.MergeSpecification();\n      // append up to 10 (random non-sensical) one merge objects\n      for (int ii = 0; ii < random().nextInt(10); ++ii) {\n        final SegmentInfo si = new SegmentInfo(\n            dir, // dir\n            Version.LATEST, // version\n            Version.LATEST, // min version\n            TestUtil.randomSimpleString(random()), // name\n            random().nextInt(), // maxDoc\n            random().nextBoolean(), // isCompoundFile\n            null, // codec\n            Collections.emptyMap(), // diagnostics\n            TestUtil.randomSimpleString(// id\n                random(),\n                StringHelper.ID_LENGTH,\n                StringHelper.ID_LENGTH).getBytes(StandardCharsets.US_ASCII),\n            Collections.emptyMap(), // attributes\n            null /* indexSort */);\n        final List<SegmentCommitInfo> segments = new LinkedList<SegmentCommitInfo>();\n        segments.add(new SegmentCommitInfo(si, 0, 0, 0, 0, 0));\n        ms.add(new MergePolicy.OneMerge(segments));\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14654be3f7a82c9a3c52169e365baa55bfe64f66":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["31741cf1390044e38a2ec3127cf302ba841bfd75","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["2b58d8cd6130103868e9c4987eb78379ed15be83"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"2b58d8cd6130103868e9c4987eb78379ed15be83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["31741cf1390044e38a2ec3127cf302ba841bfd75","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14654be3f7a82c9a3c52169e365baa55bfe64f66"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["2b58d8cd6130103868e9c4987eb78379ed15be83"]},"commit2Childs":{"14654be3f7a82c9a3c52169e365baa55bfe64f66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2b58d8cd6130103868e9c4987eb78379ed15be83"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["14654be3f7a82c9a3c52169e365baa55bfe64f66","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"2b58d8cd6130103868e9c4987eb78379ed15be83":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","31741cf1390044e38a2ec3127cf302ba841bfd75"],"f592209545c71895260367152601e9200399776d":[],"31741cf1390044e38a2ec3127cf302ba841bfd75":["b70042a8a492f7054d480ccdd2be9796510d4327","8f2203cb8ae87188877cfbf6ad170c5738a0aad5","f592209545c71895260367152601e9200399776d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","92212fd254551a0b1156aafc3a1a6ed1a43932ad","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}