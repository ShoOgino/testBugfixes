{"path":"src/test/org/apache/lucene/search/TestScorerPerf#doConjunctions(int,int).mjava","commits":[{"id":"ba4dc8f71618a4d32d1cff3265c274a7d8c26eab","date":1161740775,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#doConjunctions(int,int).mjava","pathOld":"/dev/null","sourceNew":"  public int doConjunctions(int iter, int maxClauses) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      BitSet result=null;\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(bq, hc);\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    \n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#doConjunctions(int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#doConjunctions(int,int).mjava","sourceNew":"  public int doConjunctions(int iter, int maxClauses) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      BitSet result=null;\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(bq, hc);\n      ret += hc.getSum();\n\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    \n    return ret;\n  }\n\n","sourceOld":"  public int doConjunctions(int iter, int maxClauses) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      BitSet result=null;\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(bq, hc);\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    \n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#doConjunctions(int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#doConjunctions(int,int).mjava","sourceNew":"  public int doConjunctions(int iter, int maxClauses) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      BitSet result=null;\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(bq, hc);\n      ret += hc.getSum();\n\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    \n    return ret;\n  }\n\n","sourceOld":"  public int doConjunctions(int iter, int maxClauses) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      BitSet result=null;\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(bq, hc);\n      ret += hc.getSum();\n\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    \n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba4dc8f71618a4d32d1cff3265c274a7d8c26eab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63bc3238545c6012bd44f5d294077997f236bc4e":["ba4dc8f71618a4d32d1cff3265c274a7d8c26eab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["63bc3238545c6012bd44f5d294077997f236bc4e"]},"commit2Childs":{"ba4dc8f71618a4d32d1cff3265c274a7d8c26eab":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba4dc8f71618a4d32d1cff3265c274a7d8c26eab"],"63bc3238545c6012bd44f5d294077997f236bc4e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}