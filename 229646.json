{"path":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/collector/SchedulerMetricsCollector#collectMetrics().mjava","commits":[{"id":"4cd8a9425419baa85ef4a56ed411ffb4c57964d3","date":1551677567,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/collector/SchedulerMetricsCollector#collectMetrics().mjava","pathOld":"/dev/null","sourceNew":"  private void collectMetrics() {\n\n    try (Histogram.Timer timer = metricsCollectionTime.startTimer()) {\n      log.info(\"Beginning metrics collection\");\n\n      List<CompletableFuture<MetricSamples>> futures = new ArrayList<>();\n\n      for (MetricCollector metricsCollector : metricCollectors) {\n        futures.add(CompletableFuture.supplyAsync(() -> {\n          try {\n            return metricsCollector.collect();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }, executor));\n      }\n\n      try {\n        CompletableFuture<List<MetricSamples>> sampleFuture = Async.waitForAllSuccessfulResponses(futures);\n        List<MetricSamples> samples = sampleFuture.get();\n\n        MetricSamples metricSamples = new MetricSamples();\n        samples.forEach(metricSamples::addAll);\n\n        notifyObservers(metricSamples.asList());\n\n        log.info(\"Completed metrics collection\");\n      } catch (InterruptedException | ExecutionException e) {\n        log.error(\"Error while waiting for metric collection to complete\", e);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc","date":1591973782,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/collector/SchedulerMetricsCollector#collectMetrics().mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/collector/SchedulerMetricsCollector#collectMetrics().mjava","sourceNew":"  private@SuppressWarnings({\"try\"})\n  void collectMetrics() {\n\n    try (Histogram.Timer timer = metricsCollectionTime.startTimer()) {\n      log.info(\"Beginning metrics collection\");\n\n      List<CompletableFuture<MetricSamples>> futures = new ArrayList<>();\n\n      for (MetricCollector metricsCollector : metricCollectors) {\n        futures.add(CompletableFuture.supplyAsync(() -> {\n          try {\n            return metricsCollector.collect();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }, executor));\n      }\n\n      try {\n        CompletableFuture<List<MetricSamples>> sampleFuture = Async.waitForAllSuccessfulResponses(futures);\n        List<MetricSamples> samples = sampleFuture.get();\n\n        MetricSamples metricSamples = new MetricSamples();\n        samples.forEach(metricSamples::addAll);\n\n        notifyObservers(metricSamples.asList());\n\n        log.info(\"Completed metrics collection\");\n      } catch (InterruptedException | ExecutionException e) {\n        log.error(\"Error while waiting for metric collection to complete\", e);\n      }\n    }\n\n  }\n\n","sourceOld":"  private void collectMetrics() {\n\n    try (Histogram.Timer timer = metricsCollectionTime.startTimer()) {\n      log.info(\"Beginning metrics collection\");\n\n      List<CompletableFuture<MetricSamples>> futures = new ArrayList<>();\n\n      for (MetricCollector metricsCollector : metricCollectors) {\n        futures.add(CompletableFuture.supplyAsync(() -> {\n          try {\n            return metricsCollector.collect();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }, executor));\n      }\n\n      try {\n        CompletableFuture<List<MetricSamples>> sampleFuture = Async.waitForAllSuccessfulResponses(futures);\n        List<MetricSamples> samples = sampleFuture.get();\n\n        MetricSamples metricSamples = new MetricSamples();\n        samples.forEach(metricSamples::addAll);\n\n        notifyObservers(metricSamples.asList());\n\n        log.info(\"Completed metrics collection\");\n      } catch (InterruptedException | ExecutionException e) {\n        log.error(\"Error while waiting for metric collection to complete\", e);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577","date":1597435180,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/collector/SchedulerMetricsCollector#collectMetrics().mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/collector/SchedulerMetricsCollector#collectMetrics().mjava","sourceNew":"  private@SuppressWarnings({\"try\"})\n  void collectMetrics() {\n\n    try (Histogram.Timer timer = metricsCollectionTime.startTimer()) {\n      log.info(\"Beginning metrics collection\");\n\n      final List<Future<MetricSamples>> futures = executor.invokeAll(\n          metricCollectors.stream()\n              .map(metricCollector -> (Callable<MetricSamples>) metricCollector::collect)\n              .collect(Collectors.toList())\n      );\n      MetricSamples metricSamples = new MetricSamples();\n      for (Future<MetricSamples> future : futures) {\n        try {\n          metricSamples.addAll(future.get());\n        } catch (ExecutionException e) {\n          log.error(\"Error occurred during metrics collection\", e.getCause());//logok\n          // continue any ways; do not fail\n        }\n      }\n\n      notifyObservers(metricSamples.asList());\n\n      log.info(\"Completed metrics collection\");\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted waiting for metric collection to complete\", e);\n      Thread.currentThread().interrupt();\n    }\n\n  }\n\n","sourceOld":"  private@SuppressWarnings({\"try\"})\n  void collectMetrics() {\n\n    try (Histogram.Timer timer = metricsCollectionTime.startTimer()) {\n      log.info(\"Beginning metrics collection\");\n\n      List<CompletableFuture<MetricSamples>> futures = new ArrayList<>();\n\n      for (MetricCollector metricsCollector : metricCollectors) {\n        futures.add(CompletableFuture.supplyAsync(() -> {\n          try {\n            return metricsCollector.collect();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }, executor));\n      }\n\n      try {\n        CompletableFuture<List<MetricSamples>> sampleFuture = Async.waitForAllSuccessfulResponses(futures);\n        List<MetricSamples> samples = sampleFuture.get();\n\n        MetricSamples metricSamples = new MetricSamples();\n        samples.forEach(metricSamples::addAll);\n\n        notifyObservers(metricSamples.asList());\n\n        log.info(\"Completed metrics collection\");\n      } catch (InterruptedException | ExecutionException e) {\n        log.error(\"Error while waiting for metric collection to complete\", e);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d19164145b2a65acf62a657c75f4a249b649c0","date":1601732857,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/collector/SchedulerMetricsCollector#collectMetrics().mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/collector/SchedulerMetricsCollector#collectMetrics().mjava","sourceNew":"  private@SuppressWarnings({\"try\"})\n  void collectMetrics() {\n\n    try (Histogram.Timer timer = metricsCollectionTime.startTimer()) {\n      log.info(\"Beginning metrics collection\");\n\n      final List<Future<MetricSamples>> futures = executor.invokeAll(\n          metricCollectors.stream()\n              .map(metricCollector -> (Callable<MetricSamples>) metricCollector::collect)\n              .collect(Collectors.toList())\n      );\n      MetricSamples metricSamples = new MetricSamples();\n      for (Future<MetricSamples> future : futures) {\n        try {\n          metricSamples.addAll(future.get());\n        } catch (ExecutionException e) {\n          log.error(\"Error occurred during metrics collection\", e.getCause());//nowarn\n          // continue any ways; do not fail\n        }\n      }\n\n      notifyObservers(metricSamples.asList());\n\n      log.info(\"Completed metrics collection\");\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted waiting for metric collection to complete\", e);\n      Thread.currentThread().interrupt();\n    }\n\n  }\n\n","sourceOld":"  private@SuppressWarnings({\"try\"})\n  void collectMetrics() {\n\n    try (Histogram.Timer timer = metricsCollectionTime.startTimer()) {\n      log.info(\"Beginning metrics collection\");\n\n      final List<Future<MetricSamples>> futures = executor.invokeAll(\n          metricCollectors.stream()\n              .map(metricCollector -> (Callable<MetricSamples>) metricCollector::collect)\n              .collect(Collectors.toList())\n      );\n      MetricSamples metricSamples = new MetricSamples();\n      for (Future<MetricSamples> future : futures) {\n        try {\n          metricSamples.addAll(future.get());\n        } catch (ExecutionException e) {\n          log.error(\"Error occurred during metrics collection\", e.getCause());//logok\n          // continue any ways; do not fail\n        }\n      }\n\n      notifyObservers(metricSamples.asList());\n\n      log.info(\"Completed metrics collection\");\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted waiting for metric collection to complete\", e);\n      Thread.currentThread().interrupt();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}