{"path":"solr/core/src/java/org/apache/solr/analytics/util/valuesource/FilterFieldSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/util/valuesource/FilterFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues vals =  source.getValues(context, readerContext);\n    return new FunctionValues() {\n\n      @Override\n      public byte byteVal(int doc) {\n        return vals.byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return vals.shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return vals.floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return vals.intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return vals.longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return vals.doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return vals.strVal(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return exists(doc)? vals.objectVal(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        Object other = vals.objectVal(doc);\n        return other!=null&&!missValue.equals(other);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return NAME + '(' + vals.toString(doc) + ')';\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final ValueFiller delegateFiller = vals.getValueFiller();\n          private final MutableValue mval = delegateFiller.getValue();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            delegateFiller.fillValue(doc);\n            mval.exists = exists(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/util/valuesource/FilterFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues vals =  source.getValues(context, readerContext);\n    return new FunctionValues() {\n\n      @Override\n      public byte byteVal(int doc) {\n        return vals.byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return vals.shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return vals.floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return vals.intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return vals.longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return vals.doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return vals.strVal(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return exists(doc)? vals.objectVal(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        Object other = vals.objectVal(doc);\n        return other!=null&&!missValue.equals(other);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return NAME + '(' + vals.toString(doc) + ')';\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final ValueFiller delegateFiller = vals.getValueFiller();\n          private final MutableValue mval = delegateFiller.getValue();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            delegateFiller.fillValue(doc);\n            mval.exists = exists(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/FilterFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/util/valuesource/FilterFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues vals =  source.getValues(context, readerContext);\n    return new FunctionValues() {\n\n      @Override\n      public byte byteVal(int doc) {\n        return vals.byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return vals.shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return vals.floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return vals.intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return vals.longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return vals.doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return vals.strVal(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return exists(doc)? vals.objectVal(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        Object other = vals.objectVal(doc);\n        return other!=null&&!missValue.equals(other);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return NAME + '(' + vals.toString(doc) + ')';\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final ValueFiller delegateFiller = vals.getValueFiller();\n          private final MutableValue mval = delegateFiller.getValue();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            delegateFiller.fillValue(doc);\n            mval.exists = exists(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues vals =  source.getValues(context, readerContext);\n    return new FunctionValues() {\n\n      @Override\n      public byte byteVal(int doc) {\n        return vals.byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return vals.shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return vals.floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return vals.intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return vals.longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return vals.doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return vals.strVal(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return exists(doc)? vals.objectVal(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        Object other = vals.objectVal(doc);\n        return other!=null&&!missValue.equals(other);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return NAME + '(' + vals.toString(doc) + ')';\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final ValueFiller delegateFiller = vals.getValueFiller();\n          private final MutableValue mval = delegateFiller.getValue();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            delegateFiller.fillValue(doc);\n            mval.exists = exists(doc);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["ff403346522eaa9de75403763e297e83a3ea585c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}