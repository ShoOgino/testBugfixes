{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","commits":[{"id":"9b95105f40584c3ef98e6a1ab1b55ad47d67f136","date":1476256601,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    // Custom run method which may return exit code\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n      if (cli.hasOption(\"r\")) {\n        if (assertRootUser() > 0) return 1;\n      }\n      if (cli.hasOption(\"R\")) {\n        if (assertNotRootUser() > 0) return 1;\n      }\n      if (cli.hasOption(\"x\")) {\n        if (assertFileExists(cli.getOptionValue(\"x\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"X\")) {\n        if (assertFileNotExists(cli.getOptionValue(\"X\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"u\")) {\n        if (sameUser(cli.getOptionValue(\"u\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        if (assertSolrRunning(cli.getOptionValue(\"s\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        if (assertSolrNotRunning(cli.getOptionValue(\"S\")) > 0) return 1;\n      }\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    // Custom run method which may return exit code\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n      if (cli.hasOption(\"r\")) {\n        if (assertRootUser() > 0) return 1;\n      }\n      if (cli.hasOption(\"R\")) {\n        if (assertNotRootUser() > 0) return 1;\n      }\n      if (cli.hasOption(\"x\")) {\n        if (assertFileExists(cli.getOptionValue(\"x\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"X\")) {\n        if (assertFileNotExists(cli.getOptionValue(\"X\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"u\")) {\n        if (sameUser(cli.getOptionValue(\"u\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        if (assertSolrRunning(cli.getOptionValue(\"s\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        if (assertSolrNotRunning(cli.getOptionValue(\"S\")) > 0) return 1;\n      }\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03863b37ac630a6817a2b474afd108d51a80cf","date":1477096287,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","sourceNew":"    // Custom run method which may return exit code\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n      if (cli.hasOption(\"r\")) {\n        if (assertRootUser() > 0) return 1;\n      }\n      if (cli.hasOption(\"R\")) {\n        if (assertNotRootUser() > 0) return 1;\n      }\n      if (cli.hasOption(\"x\")) {\n        if (assertFileExists(cli.getOptionValue(\"x\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"X\")) {\n        if (assertFileNotExists(cli.getOptionValue(\"X\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"u\")) {\n        if (sameUser(cli.getOptionValue(\"u\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        if (assertSolrRunning(cli.getOptionValue(\"s\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"S\")) {\n        if (assertSolrNotRunning(cli.getOptionValue(\"S\")) > 0) return 1;\n      }\n      return 0;\n    }\n\n","sourceOld":"    // Custom run method which may return exit code\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n      if (cli.hasOption(\"r\")) {\n        if (assertRootUser() > 0) return 1;\n      }\n      if (cli.hasOption(\"R\")) {\n        if (assertNotRootUser() > 0) return 1;\n      }\n      if (cli.hasOption(\"x\")) {\n        if (assertFileExists(cli.getOptionValue(\"x\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"X\")) {\n        if (assertFileNotExists(cli.getOptionValue(\"X\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"u\")) {\n        if (sameUser(cli.getOptionValue(\"u\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        if (assertSolrRunning(cli.getOptionValue(\"s\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        if (assertSolrNotRunning(cli.getOptionValue(\"S\")) > 0) return 1;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8677448a186f4abd32218787f7ae73ad38f575cf","date":1477484362,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","sourceNew":"    /**\n     * Custom run method which may return exit code\n     * @param cli the command line object\n     * @return 0 on success, or a number corresponding to number of tests that failed\n     * @throws Exception if a tool failed, e.g. authentication failure\n     */\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"t\")) {\n        timeoutMs = Optional.of(Long.parseLong(cli.getOptionValue(\"t\")));\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n\n      int ret = 0;\n      if (cli.hasOption(\"r\")) {\n        ret += assertRootUser();\n      }\n      if (cli.hasOption(\"R\")) {\n        ret += assertNotRootUser();\n      }\n      if (cli.hasOption(\"x\")) {\n        ret += assertFileExists(cli.getOptionValue(\"x\"));\n      }\n      if (cli.hasOption(\"X\")) {\n        ret += assertFileNotExists(cli.getOptionValue(\"X\"));\n      }\n      if (cli.hasOption(\"u\")) {\n        ret += sameUser(cli.getOptionValue(\"u\"));\n      }\n      if (cli.hasOption(\"s\")) {\n        ret += assertSolrRunning(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"S\")) {\n        ret += assertSolrNotRunning(cli.getOptionValue(\"S\"));\n      }\n      return ret;\n    }\n\n","sourceOld":"    // Custom run method which may return exit code\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n      if (cli.hasOption(\"r\")) {\n        if (assertRootUser() > 0) return 1;\n      }\n      if (cli.hasOption(\"R\")) {\n        if (assertNotRootUser() > 0) return 1;\n      }\n      if (cli.hasOption(\"x\")) {\n        if (assertFileExists(cli.getOptionValue(\"x\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"X\")) {\n        if (assertFileNotExists(cli.getOptionValue(\"X\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"u\")) {\n        if (sameUser(cli.getOptionValue(\"u\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        if (assertSolrRunning(cli.getOptionValue(\"s\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"S\")) {\n        if (assertSolrNotRunning(cli.getOptionValue(\"S\")) > 0) return 1;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","sourceNew":"    /**\n     * Custom run method which may return exit code\n     * @param cli the command line object\n     * @return 0 on success, or a number corresponding to number of tests that failed\n     * @throws Exception if a tool failed, e.g. authentication failure\n     */\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"t\")) {\n        timeoutMs = Optional.of(Long.parseLong(cli.getOptionValue(\"t\")));\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n\n      int ret = 0;\n      if (cli.hasOption(\"r\")) {\n        ret += assertRootUser();\n      }\n      if (cli.hasOption(\"R\")) {\n        ret += assertNotRootUser();\n      }\n      if (cli.hasOption(\"x\")) {\n        ret += assertFileExists(cli.getOptionValue(\"x\"));\n      }\n      if (cli.hasOption(\"X\")) {\n        ret += assertFileNotExists(cli.getOptionValue(\"X\"));\n      }\n      if (cli.hasOption(\"u\")) {\n        ret += sameUser(cli.getOptionValue(\"u\"));\n      }\n      if (cli.hasOption(\"s\")) {\n        ret += assertSolrRunning(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"S\")) {\n        ret += assertSolrNotRunning(cli.getOptionValue(\"S\"));\n      }\n      return ret;\n    }\n\n","sourceOld":"    // Custom run method which may return exit code\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n      if (cli.hasOption(\"r\")) {\n        if (assertRootUser() > 0) return 1;\n      }\n      if (cli.hasOption(\"R\")) {\n        if (assertNotRootUser() > 0) return 1;\n      }\n      if (cli.hasOption(\"x\")) {\n        if (assertFileExists(cli.getOptionValue(\"x\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"X\")) {\n        if (assertFileNotExists(cli.getOptionValue(\"X\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"u\")) {\n        if (sameUser(cli.getOptionValue(\"u\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        if (assertSolrRunning(cli.getOptionValue(\"s\")) > 0) return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        if (assertSolrNotRunning(cli.getOptionValue(\"S\")) > 0) return 1;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a171ed3ff25e158a76780310dbb91c67f6801238","date":1519299877,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","sourceNew":"    /**\n     * Custom run method which may return exit code\n     * @param cli the command line object\n     * @return 0 on success, or a number corresponding to number of tests that failed\n     * @throws Exception if a tool failed, e.g. authentication failure\n     */\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-c <url>] [-C <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"t\")) {\n        timeoutMs = Optional.of(Long.parseLong(cli.getOptionValue(\"t\")));\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n\n      int ret = 0;\n      if (cli.hasOption(\"r\")) {\n        ret += assertRootUser();\n      }\n      if (cli.hasOption(\"R\")) {\n        ret += assertNotRootUser();\n      }\n      if (cli.hasOption(\"x\")) {\n        ret += assertFileExists(cli.getOptionValue(\"x\"));\n      }\n      if (cli.hasOption(\"X\")) {\n        ret += assertFileNotExists(cli.getOptionValue(\"X\"));\n      }\n      if (cli.hasOption(\"u\")) {\n        ret += sameUser(cli.getOptionValue(\"u\"));\n      }\n      if (cli.hasOption(\"s\")) {\n        ret += assertSolrRunning(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"S\")) {\n        ret += assertSolrNotRunning(cli.getOptionValue(\"S\"));\n      }\n      if (cli.hasOption(\"c\")) {\n        ret += assertSolrRunningInCloudMode(cli.getOptionValue(\"c\"));\n      }\n      if (cli.hasOption(\"C\")) {\n        ret += assertSolrNotRunningInCloudMode(cli.getOptionValue(\"C\"));\n      }\n      return ret;\n    }\n\n","sourceOld":"    /**\n     * Custom run method which may return exit code\n     * @param cli the command line object\n     * @return 0 on success, or a number corresponding to number of tests that failed\n     * @throws Exception if a tool failed, e.g. authentication failure\n     */\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"t\")) {\n        timeoutMs = Optional.of(Long.parseLong(cli.getOptionValue(\"t\")));\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n\n      int ret = 0;\n      if (cli.hasOption(\"r\")) {\n        ret += assertRootUser();\n      }\n      if (cli.hasOption(\"R\")) {\n        ret += assertNotRootUser();\n      }\n      if (cli.hasOption(\"x\")) {\n        ret += assertFileExists(cli.getOptionValue(\"x\"));\n      }\n      if (cli.hasOption(\"X\")) {\n        ret += assertFileNotExists(cli.getOptionValue(\"X\"));\n      }\n      if (cli.hasOption(\"u\")) {\n        ret += sameUser(cli.getOptionValue(\"u\"));\n      }\n      if (cli.hasOption(\"s\")) {\n        ret += assertSolrRunning(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"S\")) {\n        ret += assertSolrNotRunning(cli.getOptionValue(\"S\"));\n      }\n      return ret;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","sourceNew":"    /**\n     * Custom run method which may return exit code\n     * @param cli the command line object\n     * @return 0 on success, or a number corresponding to number of tests that failed\n     * @throws Exception if a tool failed, e.g. authentication failure\n     */\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-c <url>] [-C <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"t\")) {\n        timeoutMs = Optional.of(Long.parseLong(cli.getOptionValue(\"t\")));\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n\n      int ret = 0;\n      if (cli.hasOption(\"r\")) {\n        ret += assertRootUser();\n      }\n      if (cli.hasOption(\"R\")) {\n        ret += assertNotRootUser();\n      }\n      if (cli.hasOption(\"x\")) {\n        ret += assertFileExists(cli.getOptionValue(\"x\"));\n      }\n      if (cli.hasOption(\"X\")) {\n        ret += assertFileNotExists(cli.getOptionValue(\"X\"));\n      }\n      if (cli.hasOption(\"u\")) {\n        ret += sameUser(cli.getOptionValue(\"u\"));\n      }\n      if (cli.hasOption(\"s\")) {\n        ret += assertSolrRunning(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"S\")) {\n        ret += assertSolrNotRunning(cli.getOptionValue(\"S\"));\n      }\n      if (cli.hasOption(\"c\")) {\n        ret += assertSolrRunningInCloudMode(cli.getOptionValue(\"c\"));\n      }\n      if (cli.hasOption(\"C\")) {\n        ret += assertSolrNotRunningInCloudMode(cli.getOptionValue(\"C\"));\n      }\n      return ret;\n    }\n\n","sourceOld":"    /**\n     * Custom run method which may return exit code\n     * @param cli the command line object\n     * @return 0 on success, or a number corresponding to number of tests that failed\n     * @throws Exception if a tool failed, e.g. authentication failure\n     */\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-c <url>] [-C <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"t\")) {\n        timeoutMs = Optional.of(Long.parseLong(cli.getOptionValue(\"t\")));\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n\n      int ret = 0;\n      if (cli.hasOption(\"r\")) {\n        ret += assertRootUser();\n      }\n      if (cli.hasOption(\"R\")) {\n        ret += assertNotRootUser();\n      }\n      if (cli.hasOption(\"x\")) {\n        ret += assertFileExists(cli.getOptionValue(\"x\"));\n      }\n      if (cli.hasOption(\"X\")) {\n        ret += assertFileNotExists(cli.getOptionValue(\"X\"));\n      }\n      if (cli.hasOption(\"u\")) {\n        ret += sameUser(cli.getOptionValue(\"u\"));\n      }\n      if (cli.hasOption(\"s\")) {\n        ret += assertSolrRunning(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"S\")) {\n        ret += assertSolrNotRunning(cli.getOptionValue(\"S\"));\n      }\n      if (cli.hasOption(\"c\")) {\n        ret += assertSolrRunningInCloudMode(cli.getOptionValue(\"c\"));\n      }\n      if (cli.hasOption(\"C\")) {\n        ret += assertSolrNotRunningInCloudMode(cli.getOptionValue(\"C\"));\n      }\n      return ret;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","sourceNew":"    /**\n     * Custom run method which may return exit code\n     * @param cli the command line object\n     * @return 0 on success, or a number corresponding to number of tests that failed\n     * @throws Exception if a tool failed, e.g. authentication failure\n     */\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-c <url>] [-C <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"t\")) {\n        timeoutMs = Optional.of(Long.parseLong(cli.getOptionValue(\"t\")));\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n\n      int ret = 0;\n      if (cli.hasOption(\"r\")) {\n        ret += assertRootUser();\n      }\n      if (cli.hasOption(\"R\")) {\n        ret += assertNotRootUser();\n      }\n      if (cli.hasOption(\"x\")) {\n        ret += assertFileExists(cli.getOptionValue(\"x\"));\n      }\n      if (cli.hasOption(\"X\")) {\n        ret += assertFileNotExists(cli.getOptionValue(\"X\"));\n      }\n      if (cli.hasOption(\"u\")) {\n        ret += sameUser(cli.getOptionValue(\"u\"));\n      }\n      if (cli.hasOption(\"s\")) {\n        ret += assertSolrRunning(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"S\")) {\n        ret += assertSolrNotRunning(cli.getOptionValue(\"S\"));\n      }\n      if (cli.hasOption(\"c\")) {\n        ret += assertSolrRunningInCloudMode(cli.getOptionValue(\"c\"));\n      }\n      if (cli.hasOption(\"C\")) {\n        ret += assertSolrNotRunningInCloudMode(cli.getOptionValue(\"C\"));\n      }\n      return ret;\n    }\n\n","sourceOld":"    /**\n     * Custom run method which may return exit code\n     * @param cli the command line object\n     * @return 0 on success, or a number corresponding to number of tests that failed\n     * @throws Exception if a tool failed, e.g. authentication failure\n     */\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-c <url>] [-C <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"t\")) {\n        timeoutMs = Optional.of(Long.parseLong(cli.getOptionValue(\"t\")));\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n\n      int ret = 0;\n      if (cli.hasOption(\"r\")) {\n        ret += assertRootUser();\n      }\n      if (cli.hasOption(\"R\")) {\n        ret += assertNotRootUser();\n      }\n      if (cli.hasOption(\"x\")) {\n        ret += assertFileExists(cli.getOptionValue(\"x\"));\n      }\n      if (cli.hasOption(\"X\")) {\n        ret += assertFileNotExists(cli.getOptionValue(\"X\"));\n      }\n      if (cli.hasOption(\"u\")) {\n        ret += sameUser(cli.getOptionValue(\"u\"));\n      }\n      if (cli.hasOption(\"s\")) {\n        ret += assertSolrRunning(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"S\")) {\n        ret += assertSolrNotRunning(cli.getOptionValue(\"S\"));\n      }\n      if (cli.hasOption(\"c\")) {\n        ret += assertSolrRunningInCloudMode(cli.getOptionValue(\"c\"));\n      }\n      if (cli.hasOption(\"C\")) {\n        ret += assertSolrNotRunningInCloudMode(cli.getOptionValue(\"C\"));\n      }\n      return ret;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#runAssert(CommandLine).mjava","sourceNew":"    /**\n     * Custom run method which may return exit code\n     * @param cli the command line object\n     * @return 0 on success, or a number corresponding to number of tests that failed\n     * @throws Exception if a tool failed, e.g. authentication failure\n     */\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-c <url>] [-C <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"t\")) {\n        timeoutMs = Optional.of(Long.parseLong(cli.getOptionValue(\"t\")));\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n\n      int ret = 0;\n      if (cli.hasOption(\"r\")) {\n        ret += assertRootUser();\n      }\n      if (cli.hasOption(\"R\")) {\n        ret += assertNotRootUser();\n      }\n      if (cli.hasOption(\"x\")) {\n        ret += assertFileExists(cli.getOptionValue(\"x\"));\n      }\n      if (cli.hasOption(\"X\")) {\n        ret += assertFileNotExists(cli.getOptionValue(\"X\"));\n      }\n      if (cli.hasOption(\"u\")) {\n        ret += sameUser(cli.getOptionValue(\"u\"));\n      }\n      if (cli.hasOption(\"s\")) {\n        ret += assertSolrRunning(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"S\")) {\n        ret += assertSolrNotRunning(cli.getOptionValue(\"S\"));\n      }\n      if (cli.hasOption(\"c\")) {\n        ret += assertSolrRunningInCloudMode(cli.getOptionValue(\"c\"));\n      }\n      if (cli.hasOption(\"C\")) {\n        ret += assertSolrNotRunningInCloudMode(cli.getOptionValue(\"C\"));\n      }\n      return ret;\n    }\n\n","sourceOld":"    /**\n     * Custom run method which may return exit code\n     * @param cli the command line object\n     * @return 0 on success, or a number corresponding to number of tests that failed\n     * @throws Exception if a tool failed, e.g. authentication failure\n     */\n    protected int runAssert(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-c <url>] [-C <url>] [-u <dir>] [-x <dir>] [-X <dir>]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"m\")) {\n        message = cli.getOptionValue(\"m\");\n      }\n      if (cli.hasOption(\"t\")) {\n        timeoutMs = Optional.of(Long.parseLong(cli.getOptionValue(\"t\")));\n      }\n      if (cli.hasOption(\"e\")) {\n        useExitCode = true;\n      }\n\n      int ret = 0;\n      if (cli.hasOption(\"r\")) {\n        ret += assertRootUser();\n      }\n      if (cli.hasOption(\"R\")) {\n        ret += assertNotRootUser();\n      }\n      if (cli.hasOption(\"x\")) {\n        ret += assertFileExists(cli.getOptionValue(\"x\"));\n      }\n      if (cli.hasOption(\"X\")) {\n        ret += assertFileNotExists(cli.getOptionValue(\"X\"));\n      }\n      if (cli.hasOption(\"u\")) {\n        ret += sameUser(cli.getOptionValue(\"u\"));\n      }\n      if (cli.hasOption(\"s\")) {\n        ret += assertSolrRunning(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"S\")) {\n        ret += assertSolrNotRunning(cli.getOptionValue(\"S\"));\n      }\n      if (cli.hasOption(\"c\")) {\n        ret += assertSolrRunningInCloudMode(cli.getOptionValue(\"c\"));\n      }\n      if (cli.hasOption(\"C\")) {\n        ret += assertSolrNotRunningInCloudMode(cli.getOptionValue(\"C\"));\n      }\n      return ret;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb03863b37ac630a6817a2b474afd108d51a80cf":["9b95105f40584c3ef98e6a1ab1b55ad47d67f136"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a171ed3ff25e158a76780310dbb91c67f6801238","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"8677448a186f4abd32218787f7ae73ad38f575cf":["fb03863b37ac630a6817a2b474afd108d51a80cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8677448a186f4abd32218787f7ae73ad38f575cf"],"9b95105f40584c3ef98e6a1ab1b55ad47d67f136":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a171ed3ff25e158a76780310dbb91c67f6801238":["8677448a186f4abd32218787f7ae73ad38f575cf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9b95105f40584c3ef98e6a1ab1b55ad47d67f136"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["a171ed3ff25e158a76780310dbb91c67f6801238"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a171ed3ff25e158a76780310dbb91c67f6801238","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"fb03863b37ac630a6817a2b474afd108d51a80cf":["8677448a186f4abd32218787f7ae73ad38f575cf"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"8677448a186f4abd32218787f7ae73ad38f575cf":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","a171ed3ff25e158a76780310dbb91c67f6801238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b95105f40584c3ef98e6a1ab1b55ad47d67f136","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"9b95105f40584c3ef98e6a1ab1b55ad47d67f136":["fb03863b37ac630a6817a2b474afd108d51a80cf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a171ed3ff25e158a76780310dbb91c67f6801238":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}