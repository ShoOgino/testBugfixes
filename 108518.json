{"path":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRightOpenRange(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRightOpenRange(int).mjava","pathOld":"/dev/null","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Integer> q=NumericRangeQuery.newIntRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in right open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, Integer.parseInt(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRightOpenRange(int).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Integer> q=NumericRangeQuery.newIntRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in right open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, Integer.parseInt(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Integer> q=NumericRangeQuery.newIntRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in right open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, Integer.parseInt(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}