{"path":"lucene/core/src/java/org/apache/lucene/util/StringHelper#compare(int,byte[],int,byte[],int).mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#compare(int,byte[],int,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Compares a fixed length slice of two byte arrays interpreted as\n   *  unsigned values.  Returns positive int if a &gt; b, negative\n   *  int if a &lt; b and 0 if a == b */\n  public static int compare(int count, byte[] a, int aOffset, byte[] b, int bOffset) {\n    for(int i=0;i<count;i++) {\n      int cmp = (a[aOffset+i]&0xff) - (b[bOffset+i]&0xff);\n      if (cmp != 0) {\n        return cmp;\n      }\n    }\n\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7","date":1447172780,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#compare(int,byte[],int,byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#compare(int,byte[],int,byte[],int).mjava","sourceNew":"  /** Compares a fixed length slice of two byte arrays interpreted as\n   *  big-endian unsigned values.  Returns positive int if a &gt; b,\n   *  negative int if a &lt; b and 0 if a == b */\n  public static int compare(int count, byte[] a, int aOffset, byte[] b, int bOffset) {\n    for(int i=0;i<count;i++) {\n      int cmp = (a[aOffset+i]&0xff) - (b[bOffset+i]&0xff);\n      if (cmp != 0) {\n        return cmp;\n      }\n    }\n\n    return 0;\n  }\n\n","sourceOld":"  /** Compares a fixed length slice of two byte arrays interpreted as\n   *  unsigned values.  Returns positive int if a &gt; b, negative\n   *  int if a &lt; b and 0 if a == b */\n  public static int compare(int count, byte[] a, int aOffset, byte[] b, int bOffset) {\n    for(int i=0;i<count;i++) {\n      int cmp = (a[aOffset+i]&0xff) - (b[bOffset+i]&0xff);\n      if (cmp != 0) {\n        return cmp;\n      }\n    }\n\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74abfad53a433ccd1fa4997d620a9b016f3bb24e","date":1456866481,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#compare(int,byte[],int,byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#compare(int,byte[],int,byte[],int).mjava","sourceNew":"  /** Compares a fixed length slice of two byte arrays interpreted as\n   *  big-endian unsigned values.  Returns positive int if a &gt; b,\n   *  negative int if a &lt; b and 0 if a == b */\n  public static int compare(int count, byte[] a, int aOffset, byte[] b, int bOffset) {\n    // TODO: dedup this w/ BytesRef.compareTo?\n    for(int i=0;i<count;i++) {\n      int cmp = (a[aOffset+i]&0xff) - (b[bOffset+i]&0xff);\n      if (cmp != 0) {\n        return cmp;\n      }\n    }\n\n    return 0;\n  }\n\n","sourceOld":"  /** Compares a fixed length slice of two byte arrays interpreted as\n   *  big-endian unsigned values.  Returns positive int if a &gt; b,\n   *  negative int if a &lt; b and 0 if a == b */\n  public static int compare(int count, byte[] a, int aOffset, byte[] b, int bOffset) {\n    for(int i=0;i<count;i++) {\n      int cmp = (a[aOffset+i]&0xff) - (b[bOffset+i]&0xff);\n      if (cmp != 0) {\n        return cmp;\n      }\n    }\n\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#compare(int,byte[],int,byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#compare(int,byte[],int,byte[],int).mjava","sourceNew":"  /** Compares a fixed length slice of two byte arrays interpreted as\n   *  big-endian unsigned values.  Returns positive int if a &gt; b,\n   *  negative int if a &lt; b and 0 if a == b */\n  public static int compare(int count, byte[] a, int aOffset, byte[] b, int bOffset) {\n    // TODO: dedup this w/ BytesRef.compareTo?\n    for(int i=0;i<count;i++) {\n      int cmp = (a[aOffset+i]&0xff) - (b[bOffset+i]&0xff);\n      if (cmp != 0) {\n        return cmp;\n      }\n    }\n\n    return 0;\n  }\n\n","sourceOld":"  /** Compares a fixed length slice of two byte arrays interpreted as\n   *  big-endian unsigned values.  Returns positive int if a &gt; b,\n   *  negative int if a &lt; b and 0 if a == b */\n  public static int compare(int count, byte[] a, int aOffset, byte[] b, int bOffset) {\n    for(int i=0;i<count;i++) {\n      int cmp = (a[aOffset+i]&0xff) - (b[bOffset+i]&0xff);\n      if (cmp != 0) {\n        return cmp;\n      }\n    }\n\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#compare(int,byte[],int,byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#compare(int,byte[],int,byte[],int).mjava","sourceNew":"  /** Compares a fixed length slice of two byte arrays interpreted as\n   *  big-endian unsigned values.  Returns positive int if a &gt; b,\n   *  negative int if a &lt; b and 0 if a == b \n   *  \n   * @deprecated Use FutureArrays.compareUnsigned instead.\n   */\n  @Deprecated\n  public static int compare(int count, byte[] a, int aOffset, byte[] b, int bOffset) {\n    return FutureArrays.compareUnsigned(a, aOffset, aOffset + count, b, bOffset, bOffset + count);\n  }\n\n","sourceOld":"  /** Compares a fixed length slice of two byte arrays interpreted as\n   *  big-endian unsigned values.  Returns positive int if a &gt; b,\n   *  negative int if a &lt; b and 0 if a == b */\n  public static int compare(int count, byte[] a, int aOffset, byte[] b, int bOffset) {\n    // TODO: dedup this w/ BytesRef.compareTo?\n    for(int i=0;i<count;i++) {\n      int cmp = (a[aOffset+i]&0xff) - (b[bOffset+i]&0xff);\n      if (cmp != 0) {\n        return cmp;\n      }\n    }\n\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#compare(int,byte[],int,byte[],int).mjava","sourceNew":null,"sourceOld":"  /** Compares a fixed length slice of two byte arrays interpreted as\n   *  big-endian unsigned values.  Returns positive int if a &gt; b,\n   *  negative int if a &lt; b and 0 if a == b \n   *  \n   * @deprecated Use FutureArrays.compareUnsigned instead.\n   */\n  @Deprecated\n  public static int compare(int count, byte[] a, int aOffset, byte[] b, int bOffset) {\n    return FutureArrays.compareUnsigned(a, aOffset, aOffset + count, b, bOffset, bOffset + count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74abfad53a433ccd1fa4997d620a9b016f3bb24e":["dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7"],"456d7e7092cb043c740b4674301660ee8abc26fe":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["456d7e7092cb043c740b4674301660ee8abc26fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7","74abfad53a433ccd1fa4997d620a9b016f3bb24e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"74abfad53a433ccd1fa4997d620a9b016f3bb24e":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"456d7e7092cb043c740b4674301660ee8abc26fe":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["456d7e7092cb043c740b4674301660ee8abc26fe"],"dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7":["74abfad53a433ccd1fa4997d620a9b016f3bb24e","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}