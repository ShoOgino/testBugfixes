{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockDocsEnum#advance(int).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene84SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene84SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n          // even if freqBuffer were not read from the previous block, we will mark them as read,\n          // as we don't need to skip the previous block freqBuffer in refillDocs,\n          // as we have already positioned docIn where in needs to be.\n          isFreqsRead = true;\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      long doc;\n      while (true) {\n        doc = docBuffer[docBufferUpto];\n        docUpto++;\n\n        if (doc >= target) {\n          break;\n        }\n        if (++docBufferUpto == BLOCK_SIZE) {\n          return this.doc = NO_MORE_DOCS;\n        }\n      }\n\n      docBufferUpto++;\n      return this.doc = (int) doc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7929304b72348a1793ae27d1330906d254c9a35b","date":1574356812,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene84SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene84SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto >= blockUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          blockUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n          // even if freqBuffer were not read from the previous block, we will mark them as read,\n          // as we don't need to skip the previous block freqBuffer in refillDocs,\n          // as we have already positioned docIn where in needs to be.\n          isFreqsRead = true;\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      long doc;\n      while (true) {\n        doc = docBuffer[docBufferUpto];\n\n        if (doc >= target) {\n          break;\n        }\n        ++docBufferUpto;\n      }\n\n      docBufferUpto++;\n      return this.doc = (int) doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene84SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene84SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n          // even if freqBuffer were not read from the previous block, we will mark them as read,\n          // as we don't need to skip the previous block freqBuffer in refillDocs,\n          // as we have already positioned docIn where in needs to be.\n          isFreqsRead = true;\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      long doc;\n      while (true) {\n        doc = docBuffer[docBufferUpto];\n        docUpto++;\n\n        if (doc >= target) {\n          break;\n        }\n        if (++docBufferUpto == BLOCK_SIZE) {\n          return this.doc = NO_MORE_DOCS;\n        }\n      }\n\n      docBufferUpto++;\n      return this.doc = (int) doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc14e137818594bcbcbf926a33166d47dd01eb84","date":1574357590,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene84SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene84SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n          // even if freqBuffer were not read from the previous block, we will mark them as read,\n          // as we don't need to skip the previous block freqBuffer in refillDocs,\n          // as we have already positioned docIn where in needs to be.\n          isFreqsRead = true;\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      long doc;\n      while (true) {\n        doc = docBuffer[docBufferUpto];\n        docUpto++;\n\n        if (doc >= target) {\n          break;\n        }\n        if (++docBufferUpto == BLOCK_SIZE) {\n          return this.doc = NO_MORE_DOCS;\n        }\n      }\n\n      docBufferUpto++;\n      return this.doc = (int) doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene84SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene84SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto >= blockUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          blockUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n          // even if freqBuffer were not read from the previous block, we will mark them as read,\n          // as we don't need to skip the previous block freqBuffer in refillDocs,\n          // as we have already positioned docIn where in needs to be.\n          isFreqsRead = true;\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      long doc;\n      while (true) {\n        doc = docBuffer[docBufferUpto];\n\n        if (doc >= target) {\n          break;\n        }\n        ++docBufferUpto;\n      }\n\n      docBufferUpto++;\n      return this.doc = (int) doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82c18db6c80aa0ba70c03fe917526cf5071b9ad","date":1574358730,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene84SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene84SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto >= blockUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          blockUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n          // even if freqBuffer were not read from the previous block, we will mark them as read,\n          // as we don't need to skip the previous block freqBuffer in refillDocs,\n          // as we have already positioned docIn where in needs to be.\n          isFreqsRead = true;\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      long doc;\n      while (true) {\n        doc = docBuffer[docBufferUpto];\n\n        if (doc >= target) {\n          break;\n        }\n        ++docBufferUpto;\n      }\n\n      docBufferUpto++;\n      return this.doc = (int) doc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene84SkipReader(docIn.clone(),\n                                           MAX_SKIP_LEVELS,\n                                           indexHasPos,\n                                           indexHasOffsets,\n                                           indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene84SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n          // even if freqBuffer were not read from the previous block, we will mark them as read,\n          // as we don't need to skip the previous block freqBuffer in refillDocs,\n          // as we have already positioned docIn where in needs to be.\n          isFreqsRead = true;\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      long doc;\n      while (true) {\n        doc = docBuffer[docBufferUpto];\n        docUpto++;\n\n        if (doc >= target) {\n          break;\n        }\n        if (++docBufferUpto == BLOCK_SIZE) {\n          return this.doc = NO_MORE_DOCS;\n        }\n      }\n\n      docBufferUpto++;\n      return this.doc = (int) doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc14e137818594bcbcbf926a33166d47dd01eb84":["7929304b72348a1793ae27d1330906d254c9a35b"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7929304b72348a1793ae27d1330906d254c9a35b":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d82c18db6c80aa0ba70c03fe917526cf5071b9ad":["bc14e137818594bcbcbf926a33166d47dd01eb84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d82c18db6c80aa0ba70c03fe917526cf5071b9ad"]},"commit2Childs":{"bc14e137818594bcbcbf926a33166d47dd01eb84":["d82c18db6c80aa0ba70c03fe917526cf5071b9ad"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["7929304b72348a1793ae27d1330906d254c9a35b"],"7929304b72348a1793ae27d1330906d254c9a35b":["bc14e137818594bcbcbf926a33166d47dd01eb84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"d82c18db6c80aa0ba70c03fe917526cf5071b9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}