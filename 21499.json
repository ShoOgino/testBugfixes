{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.ValueSourceQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"dd6be878365e339c75cc43ad7d5df95ab4ea21e5","date":1435762101,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.ValueSourceQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false);\n\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            approximation = fastMatchWeight.scorer(context);\n            if (approximation == null) {\n              return null;\n            }\n          }\n\n          final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return range.accept(values.doubleVal(approximation.docID()));\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.ValueSourceQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.ValueSourceQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false);\n\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            approximation = fastMatchWeight.scorer(context);\n            if (approximation == null) {\n              return null;\n            }\n          }\n\n          final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return range.accept(values.doubleVal(approximation.docID()));\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false);\n\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            approximation = fastMatchWeight.scorer(context);\n            if (approximation == null) {\n              return null;\n            }\n          }\n\n          final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return range.accept(values.doubleVal(approximation.docID()));\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.ValueSourceQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.ValueSourceQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false);\n\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return range.accept(values.doubleVal(approximation.docID()));\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false);\n\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            approximation = fastMatchWeight.scorer(context);\n            if (approximation == null) {\n              return null;\n            }\n          }\n\n          final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return range.accept(values.doubleVal(approximation.docID()));\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.ValueSourceQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return range.accept(values.doubleVal(approximation.docID()));\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false);\n\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return range.accept(values.doubleVal(approximation.docID()));\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange.ValueSourceQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false);\n\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return range.accept(values.doubleVal(approximation.docID()));\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}