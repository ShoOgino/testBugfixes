{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#init(IndexInput).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#init(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    CodecUtil.checkHeader(termsIn, PulsingPostingsWriter.CODEC,\n      PulsingPostingsWriter.VERSION_START, PulsingPostingsWriter.VERSION_START);\n    maxPositions = termsIn.readVInt();\n    wrappedPostingsReader.init(termsIn);\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    CodecUtil.checkHeader(termsIn, PulsingPostingsWriter.CODEC,\n      PulsingPostingsWriter.VERSION_START, PulsingPostingsWriter.VERSION_START);\n    maxPositions = termsIn.readVInt();\n    wrappedPostingsReader.init(termsIn);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#init(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    version = CodecUtil.checkHeader(termsIn, PulsingPostingsWriter.CODEC,\n                                    PulsingPostingsWriter.VERSION_START, \n                                    PulsingPostingsWriter.VERSION_CURRENT);\n    maxPositions = termsIn.readVInt();\n    wrappedPostingsReader.init(termsIn);\n    if (wrappedPostingsReader instanceof PulsingPostingsReader || \n        version < PulsingPostingsWriter.VERSION_META_ARRAY) {\n      fields = null;\n    } else {\n      fields = new TreeMap<Integer, Integer>();\n      String summaryFileName = IndexFileNames.segmentFileName(segmentState.segmentInfo.name, segmentState.segmentSuffix, PulsingPostingsWriter.SUMMARY_EXTENSION);\n      IndexInput in = null;\n      try { \n        in = segmentState.directory.openInput(summaryFileName, segmentState.context);\n        CodecUtil.checkHeader(in, PulsingPostingsWriter.CODEC, version, \n                              PulsingPostingsWriter.VERSION_CURRENT);\n        int numField = in.readVInt();\n        for (int i = 0; i < numField; i++) {\n          int fieldNum = in.readVInt();\n          int longsSize = in.readVInt();\n          fields.put(fieldNum, longsSize);\n        }\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    CodecUtil.checkHeader(termsIn, PulsingPostingsWriter.CODEC,\n      PulsingPostingsWriter.VERSION_START, PulsingPostingsWriter.VERSION_START);\n    maxPositions = termsIn.readVInt();\n    wrappedPostingsReader.init(termsIn);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#init(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    version = CodecUtil.checkHeader(termsIn, PulsingPostingsWriter.CODEC,\n                                    PulsingPostingsWriter.VERSION_START, \n                                    PulsingPostingsWriter.VERSION_CURRENT);\n    maxPositions = termsIn.readVInt();\n    wrappedPostingsReader.init(termsIn);\n    if (wrappedPostingsReader instanceof PulsingPostingsReader || \n        version < PulsingPostingsWriter.VERSION_META_ARRAY) {\n      fields = null;\n    } else {\n      fields = new TreeMap<Integer, Integer>();\n      String summaryFileName = IndexFileNames.segmentFileName(segmentState.segmentInfo.name, segmentState.segmentSuffix, PulsingPostingsWriter.SUMMARY_EXTENSION);\n      IndexInput in = null;\n      try { \n        in = segmentState.directory.openInput(summaryFileName, segmentState.context);\n        CodecUtil.checkHeader(in, PulsingPostingsWriter.CODEC, version, \n                              PulsingPostingsWriter.VERSION_CURRENT);\n        int numField = in.readVInt();\n        for (int i = 0; i < numField; i++) {\n          int fieldNum = in.readVInt();\n          int longsSize = in.readVInt();\n          fields.put(fieldNum, longsSize);\n        }\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    CodecUtil.checkHeader(termsIn, PulsingPostingsWriter.CODEC,\n      PulsingPostingsWriter.VERSION_START, PulsingPostingsWriter.VERSION_START);\n    maxPositions = termsIn.readVInt();\n    wrappedPostingsReader.init(termsIn);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#init(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    version = CodecUtil.checkHeader(termsIn, PulsingPostingsWriter.CODEC,\n                                    PulsingPostingsWriter.VERSION_START, \n                                    PulsingPostingsWriter.VERSION_CURRENT);\n    maxPositions = termsIn.readVInt();\n    wrappedPostingsReader.init(termsIn);\n    if (wrappedPostingsReader instanceof PulsingPostingsReader || \n        version < PulsingPostingsWriter.VERSION_META_ARRAY) {\n      fields = null;\n    } else {\n      fields = new TreeMap<>();\n      String summaryFileName = IndexFileNames.segmentFileName(segmentState.segmentInfo.name, segmentState.segmentSuffix, PulsingPostingsWriter.SUMMARY_EXTENSION);\n      IndexInput in = null;\n      try { \n        in = segmentState.directory.openInput(summaryFileName, segmentState.context);\n        CodecUtil.checkHeader(in, PulsingPostingsWriter.CODEC, version, \n                              PulsingPostingsWriter.VERSION_CURRENT);\n        int numField = in.readVInt();\n        for (int i = 0; i < numField; i++) {\n          int fieldNum = in.readVInt();\n          int longsSize = in.readVInt();\n          fields.put(fieldNum, longsSize);\n        }\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    version = CodecUtil.checkHeader(termsIn, PulsingPostingsWriter.CODEC,\n                                    PulsingPostingsWriter.VERSION_START, \n                                    PulsingPostingsWriter.VERSION_CURRENT);\n    maxPositions = termsIn.readVInt();\n    wrappedPostingsReader.init(termsIn);\n    if (wrappedPostingsReader instanceof PulsingPostingsReader || \n        version < PulsingPostingsWriter.VERSION_META_ARRAY) {\n      fields = null;\n    } else {\n      fields = new TreeMap<Integer, Integer>();\n      String summaryFileName = IndexFileNames.segmentFileName(segmentState.segmentInfo.name, segmentState.segmentSuffix, PulsingPostingsWriter.SUMMARY_EXTENSION);\n      IndexInput in = null;\n      try { \n        in = segmentState.directory.openInput(summaryFileName, segmentState.context);\n        CodecUtil.checkHeader(in, PulsingPostingsWriter.CODEC, version, \n                              PulsingPostingsWriter.VERSION_CURRENT);\n        int numField = in.readVInt();\n        for (int i = 0; i < numField; i++) {\n          int fieldNum = in.readVInt();\n          int longsSize = in.readVInt();\n          fields.put(fieldNum, longsSize);\n        }\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbaae1c00d39df2c872bbe043af26d02d3818313","date":1409657064,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#init(IndexInput).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    version = CodecUtil.checkHeader(termsIn, PulsingPostingsWriter.CODEC,\n                                    PulsingPostingsWriter.VERSION_START, \n                                    PulsingPostingsWriter.VERSION_CURRENT);\n    maxPositions = termsIn.readVInt();\n    wrappedPostingsReader.init(termsIn);\n    if (wrappedPostingsReader instanceof PulsingPostingsReader || \n        version < PulsingPostingsWriter.VERSION_META_ARRAY) {\n      fields = null;\n    } else {\n      fields = new TreeMap<>();\n      String summaryFileName = IndexFileNames.segmentFileName(segmentState.segmentInfo.name, segmentState.segmentSuffix, PulsingPostingsWriter.SUMMARY_EXTENSION);\n      IndexInput in = null;\n      try { \n        in = segmentState.directory.openInput(summaryFileName, segmentState.context);\n        CodecUtil.checkHeader(in, PulsingPostingsWriter.CODEC, version, \n                              PulsingPostingsWriter.VERSION_CURRENT);\n        int numField = in.readVInt();\n        for (int i = 0; i < numField; i++) {\n          int fieldNum = in.readVInt();\n          int longsSize = in.readVInt();\n          fields.put(fieldNum, longsSize);\n        }\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f948dd442d23baa6cbb28daf77c8db78b351329":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fbaae1c00d39df2c872bbe043af26d02d3818313"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}