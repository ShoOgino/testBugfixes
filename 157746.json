{"path":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9eed5547b2f58afdc475cc06312622f5bcf220c2","date":1284156494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator<Integer>() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Integer value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator<Integer>() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Integer value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator<Integer>() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), fieldname);\n       return this;\n     }\n\n     @Override\n     public Integer value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator<Integer>() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Integer value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator<Integer>() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), fieldname);\n       return this;\n     }\n\n     @Override\n     public Integer value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator<Integer>() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n       return this;\n     }\n\n     @Override\n     public Integer value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator<Integer>() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), fieldname);\n       return this;\n     }\n\n     @Override\n     public Integer value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator<Integer>() {\n\n     FieldCache.DocTermsIndex idIndex;\n     private final int[] values = new int[numHits];\n     private final BytesRef tempBR = new BytesRef();\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       int ord = idIndex.getOrd(doc);\n       if (ord == 0) {\n         return 0;\n       } else {\n         BytesRef id = idIndex.lookup(ord, tempBR);\n         Integer prio = priority.get(id);\n         return prio == null ? 0 : prio.intValue();\n       }\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n       idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), fieldname);\n       return this;\n     }\n\n     @Override\n     public Integer value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"323f871ffe96b871d8c534a614be60751bb023c2":["9eed5547b2f58afdc475cc06312622f5bcf220c2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["323f871ffe96b871d8c534a614be60751bb023c2"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","9eed5547b2f58afdc475cc06312622f5bcf220c2"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["323f871ffe96b871d8c534a614be60751bb023c2","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9eed5547b2f58afdc475cc06312622f5bcf220c2","323f871ffe96b871d8c534a614be60751bb023c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9eed5547b2f58afdc475cc06312622f5bcf220c2":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","323f871ffe96b871d8c534a614be60751bb023c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9eed5547b2f58afdc475cc06312622f5bcf220c2"],"323f871ffe96b871d8c534a614be60751bb023c2":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9eed5547b2f58afdc475cc06312622f5bcf220c2":["323f871ffe96b871d8c534a614be60751bb023c2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}