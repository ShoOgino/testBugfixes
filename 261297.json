{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#asTwoPhaseIterator().mjava","commits":[{"id":"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5","date":1429083443,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#asTwoPhaseIterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    final TwoPhaseIterator in = this.in.asTwoPhaseIterator();\n    if (in == null) {\n      return null;\n    }\n    final DocIdSetIterator inApproximation = in.approximation();\n    assert inApproximation.docID() == doc;\n    final DocIdSetIterator assertingApproximation = new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return inApproximation.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        final int nextDoc = inApproximation.nextDoc();\n        assert nextDoc > doc : \"backwards advance from: \" + doc + \" to: \" + nextDoc;\n        if (nextDoc == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == nextDoc;\n        return nextDoc;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        assert target > doc : \"target must be > docID(), got \" + target + \" <= \" + doc;\n        final int advanced = inApproximation.advance(target);\n        assert advanced >= target : \"backwards advance from: \" + target + \" to: \" + advanced;\n        if (advanced == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == advanced;\n        return advanced;\n      }\n\n      @Override\n      public long cost() {\n        return inApproximation.cost();\n      }\n\n    };\n    return new TwoPhaseIterator(assertingApproximation) {\n      @Override\n      public boolean matches() throws IOException {\n        assert state == IteratorState.APPROXIMATING;\n        final boolean matches = in.matches();\n        if (matches) {\n          assert AssertingScorer.this.in.docID() == inApproximation.docID() : \"Approximation and scorer don't advance synchronously\";\n          doc = inApproximation.docID();\n          state = IteratorState.ITERATING;\n        }\n        return matches;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    final TwoPhaseIterator in = this.in.asTwoPhaseIterator();\n    if (in == null) {\n      return null;\n    }\n    final DocIdSetIterator inApproximation = in.approximation();\n    assert inApproximation.docID() == doc;\n    final DocIdSetIterator assertingApproximation = new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return inApproximation.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        final int nextDoc = inApproximation.nextDoc();\n        assert nextDoc > doc : \"backwards advance from: \" + doc + \" to: \" + nextDoc;\n        if (nextDoc == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == nextDoc;\n        return doc = nextDoc;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        assert target > doc : \"target must be > docID(), got \" + target + \" <= \" + doc;\n        final int advanced = inApproximation.advance(target);\n        assert advanced >= target : \"backwards advance from: \" + target + \" to: \" + advanced;\n        if (advanced == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == advanced;\n        return doc = advanced;\n      }\n\n      @Override\n      public long cost() {\n        return inApproximation.cost();\n      }\n\n    };\n    return new TwoPhaseIterator(assertingApproximation) {\n      @Override\n      public boolean matches() throws IOException {\n        assert state == IteratorState.APPROXIMATING;\n        final boolean matches = in.matches();\n        if (matches) {\n          assert AssertingScorer.this.in.docID() == inApproximation.docID() : \"Approximation and scorer don't advance synchronously\";\n          doc = inApproximation.docID();\n          state = IteratorState.ITERATING;\n        }\n        return matches;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    final TwoPhaseIterator in = this.in.asTwoPhaseIterator();\n    if (in == null) {\n      return null;\n    }\n    final DocIdSetIterator inApproximation = in.approximation();\n    assert inApproximation.docID() == doc;\n    final DocIdSetIterator assertingApproximation = new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return inApproximation.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        final int nextDoc = inApproximation.nextDoc();\n        assert nextDoc > doc : \"backwards advance from: \" + doc + \" to: \" + nextDoc;\n        if (nextDoc == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == nextDoc;\n        return nextDoc;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        assert target > doc : \"target must be > docID(), got \" + target + \" <= \" + doc;\n        final int advanced = inApproximation.advance(target);\n        assert advanced >= target : \"backwards advance from: \" + target + \" to: \" + advanced;\n        if (advanced == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == advanced;\n        return advanced;\n      }\n\n      @Override\n      public long cost() {\n        return inApproximation.cost();\n      }\n\n    };\n    return new TwoPhaseIterator(assertingApproximation) {\n      @Override\n      public boolean matches() throws IOException {\n        assert state == IteratorState.APPROXIMATING;\n        final boolean matches = in.matches();\n        if (matches) {\n          assert AssertingScorer.this.in.docID() == inApproximation.docID() : \"Approximation and scorer don't advance synchronously\";\n          doc = inApproximation.docID();\n          state = IteratorState.ITERATING;\n        }\n        return matches;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    final TwoPhaseIterator in = this.in.asTwoPhaseIterator();\n    if (in == null) {\n      return null;\n    }\n    final DocIdSetIterator inApproximation = in.approximation();\n    assert inApproximation.docID() == doc;\n    final DocIdSetIterator assertingApproximation = new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return inApproximation.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        final int nextDoc = inApproximation.nextDoc();\n        assert nextDoc > doc : \"backwards advance from: \" + doc + \" to: \" + nextDoc;\n        if (nextDoc == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == nextDoc;\n        return doc = nextDoc;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        assert target > doc : \"target must be > docID(), got \" + target + \" <= \" + doc;\n        final int advanced = inApproximation.advance(target);\n        assert advanced >= target : \"backwards advance from: \" + target + \" to: \" + advanced;\n        if (advanced == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == advanced;\n        return doc = advanced;\n      }\n\n      @Override\n      public long cost() {\n        return inApproximation.cost();\n      }\n\n    };\n    return new TwoPhaseIterator(assertingApproximation) {\n      @Override\n      public boolean matches() throws IOException {\n        assert state == IteratorState.APPROXIMATING;\n        final boolean matches = in.matches();\n        if (matches) {\n          assert AssertingScorer.this.in.docID() == inApproximation.docID() : \"Approximation and scorer don't advance synchronously\";\n          doc = inApproximation.docID();\n          state = IteratorState.ITERATING;\n        }\n        return matches;\n      }\n\n      @Override\n      public float matchCost() {\n        float matchCost = in.matchCost();\n        assert ! Float.isNaN(matchCost);\n        assert matchCost >= 0;\n        return matchCost;\n      }\n\n      @Override\n      public String toString() {\n        return \"AssertingScorer@asTwoPhaseIterator(\" + in + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    final TwoPhaseIterator in = this.in.asTwoPhaseIterator();\n    if (in == null) {\n      return null;\n    }\n    final DocIdSetIterator inApproximation = in.approximation();\n    assert inApproximation.docID() == doc;\n    final DocIdSetIterator assertingApproximation = new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return inApproximation.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        final int nextDoc = inApproximation.nextDoc();\n        assert nextDoc > doc : \"backwards advance from: \" + doc + \" to: \" + nextDoc;\n        if (nextDoc == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == nextDoc;\n        return doc = nextDoc;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        assert target > doc : \"target must be > docID(), got \" + target + \" <= \" + doc;\n        final int advanced = inApproximation.advance(target);\n        assert advanced >= target : \"backwards advance from: \" + target + \" to: \" + advanced;\n        if (advanced == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == advanced;\n        return doc = advanced;\n      }\n\n      @Override\n      public long cost() {\n        return inApproximation.cost();\n      }\n\n    };\n    return new TwoPhaseIterator(assertingApproximation) {\n      @Override\n      public boolean matches() throws IOException {\n        assert state == IteratorState.APPROXIMATING;\n        final boolean matches = in.matches();\n        if (matches) {\n          assert AssertingScorer.this.in.docID() == inApproximation.docID() : \"Approximation and scorer don't advance synchronously\";\n          doc = inApproximation.docID();\n          state = IteratorState.ITERATING;\n        }\n        return matches;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#twoPhaseIterator().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    final TwoPhaseIterator in = this.in.twoPhaseIterator();\n    if (in == null) {\n      return null;\n    }\n    final DocIdSetIterator inApproximation = in.approximation();\n    assert inApproximation.docID() == doc;\n    final DocIdSetIterator assertingApproximation = new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return inApproximation.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        final int nextDoc = inApproximation.nextDoc();\n        assert nextDoc > doc : \"backwards advance from: \" + doc + \" to: \" + nextDoc;\n        if (nextDoc == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == nextDoc;\n        return doc = nextDoc;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        assert target > doc : \"target must be > docID(), got \" + target + \" <= \" + doc;\n        final int advanced = inApproximation.advance(target);\n        assert advanced >= target : \"backwards advance from: \" + target + \" to: \" + advanced;\n        if (advanced == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == advanced;\n        return doc = advanced;\n      }\n\n      @Override\n      public long cost() {\n        return inApproximation.cost();\n      }\n\n    };\n    return new TwoPhaseIterator(assertingApproximation) {\n      @Override\n      public boolean matches() throws IOException {\n        assert state == IteratorState.APPROXIMATING;\n        final boolean matches = in.matches();\n        if (matches) {\n          assert AssertingScorer.this.in.iterator().docID() == inApproximation.docID() : \"Approximation and scorer don't advance synchronously\";\n          doc = inApproximation.docID();\n          state = IteratorState.ITERATING;\n        }\n        return matches;\n      }\n\n      @Override\n      public float matchCost() {\n        float matchCost = in.matchCost();\n        assert ! Float.isNaN(matchCost);\n        assert matchCost >= 0;\n        return matchCost;\n      }\n\n      @Override\n      public String toString() {\n        return \"AssertingScorer@asTwoPhaseIterator(\" + in + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    final TwoPhaseIterator in = this.in.asTwoPhaseIterator();\n    if (in == null) {\n      return null;\n    }\n    final DocIdSetIterator inApproximation = in.approximation();\n    assert inApproximation.docID() == doc;\n    final DocIdSetIterator assertingApproximation = new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return inApproximation.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        final int nextDoc = inApproximation.nextDoc();\n        assert nextDoc > doc : \"backwards advance from: \" + doc + \" to: \" + nextDoc;\n        if (nextDoc == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == nextDoc;\n        return doc = nextDoc;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n        assert target > doc : \"target must be > docID(), got \" + target + \" <= \" + doc;\n        final int advanced = inApproximation.advance(target);\n        assert advanced >= target : \"backwards advance from: \" + target + \" to: \" + advanced;\n        if (advanced == NO_MORE_DOCS) {\n          state = IteratorState.FINISHED;\n        } else {\n          state = IteratorState.APPROXIMATING;\n        }\n        assert inApproximation.docID() == advanced;\n        return doc = advanced;\n      }\n\n      @Override\n      public long cost() {\n        return inApproximation.cost();\n      }\n\n    };\n    return new TwoPhaseIterator(assertingApproximation) {\n      @Override\n      public boolean matches() throws IOException {\n        assert state == IteratorState.APPROXIMATING;\n        final boolean matches = in.matches();\n        if (matches) {\n          assert AssertingScorer.this.in.docID() == inApproximation.docID() : \"Approximation and scorer don't advance synchronously\";\n          doc = inApproximation.docID();\n          state = IteratorState.ITERATING;\n        }\n        return matches;\n      }\n\n      @Override\n      public float matchCost() {\n        float matchCost = in.matchCost();\n        assert ! Float.isNaN(matchCost);\n        assert matchCost >= 0;\n        return matchCost;\n      }\n\n      @Override\n      public String toString() {\n        return \"AssertingScorer@asTwoPhaseIterator(\" + in + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5"],"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}