{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef]).mjava","sourceNew":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<BytesRef> builder, FST<BytesRef> subIndex) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<BytesRef>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","sourceOld":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<BytesRef> builder, FST<BytesRef> subIndex) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<BytesRef>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef]).mjava","sourceNew":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<BytesRef> builder, FST<BytesRef> subIndex) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","sourceOld":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<BytesRef> builder, FST<BytesRef> subIndex) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<BytesRef>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef]).mjava","sourceNew":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<BytesRef> builder, FST<BytesRef> subIndex) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","sourceOld":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<BytesRef> builder, FST<BytesRef> subIndex) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#append(Builder[BytesRef],FST[BytesRef]).mjava","sourceNew":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<BytesRef> builder, FST<BytesRef> subIndex) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","sourceOld":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<BytesRef> builder, FST<BytesRef> subIndex) throws IOException {\n      final BytesRefFSTEnum<BytesRef> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<BytesRef> indexEnt;\n      while((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), indexEnt.output);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}