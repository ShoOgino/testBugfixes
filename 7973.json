{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","commits":[{"id":"00e1c8e1340d9e31d2c6bee5f72d9040ce569049","date":1431584404,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"/dev/null","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return getQueryParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n      \n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        return response.toString();\n      }\n    };\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37c278ca040d2744716f7e38d054b0fb9b5e98c7","date":1431670265,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return getQueryParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n      \n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        return response.toString();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return getQueryParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n      \n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        return response.toString();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e5ed7a25d398206f319adac2cc92b45d64ae46","date":1433809767,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return getQueryParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n      \n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return getQueryParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n      \n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        return response.toString();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return getQueryParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return getQueryParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n      \n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad9908836000c5ea3bdea96886dac2a72235053f","date":1445014625,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return getQueryParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":["486b3da20d42f20e6dc81e6240976ce139d7182b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b9e52dc3261e61fb422a343ba4e6df9a9fab88e6","date":1448994587,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(solrReq.getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85784a21c6101aadd8d5b3d9dfed51279fbd43d9","date":1458237890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return handler;\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(solrReq.getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(solrReq.getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(solrReq.getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return handler;\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(solrReq.getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(solrReq.getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return handler;\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(solrReq.getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1214bb624eb41181e5c8e260e0050c7e973ba0f4","date":1487943042,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(solrReq == null ? null : solrReq.getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(solrReq.getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf","date":1487979822,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(solrReq.getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(solrReq == null ? null : solrReq.getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":["486b3da20d42f20e6dc81e6240976ce139d7182b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"486b3da20d42f20e6dc81e6240976ce139d7182b","date":1494238810,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return null == solrReq ? null : solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(solrReq.getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":["ad9908836000c5ea3bdea96886dac2a72235053f","b61ef53ee9899b83a89bf97542c28a4cfd0a64bf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return null == solrReq ? null : solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(solrReq.getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    for (String collection : getCollectionsList()) {\n      collectionRequests.add(new CollectionRequest(collection));\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n\n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return null == solrReq ? null : solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    if (getCollectionsList() != null) {\n      for (String collection : getCollectionsList()) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n    \n    // Handle the case when it's a /select request and collections are specified as a param\n    if(resource.equals(\"/select\") && params.get(\"collection\") != null) {\n      collectionRequests.clear();\n      for(String collection:params.get(\"collection\").split(\",\")) {\n        collectionRequests.add(new CollectionRequest(collection));\n      }\n    }\n    \n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    // There's no collection explicitly mentioned, let's try and extract it from the core if one exists for\n    // the purpose of processing this request.\n    if (getCore() != null && (getCollectionsList() == null || getCollectionsList().size() == 0)) {\n      collectionRequests.add(new CollectionRequest(getCore().getCoreDescriptor().getCollectionName()));\n    }\n\n    if (getQueryParams().get(COLLECTION_PROP) != null)\n      collectionRequests.add(new CollectionRequest(getQueryParams().get(COLLECTION_PROP)));\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return null == solrReq ? null : solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96a40e7df78bbd3a3fcc50819359d6ce811755f2","date":1579797423,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    for (String collection : getCollectionsList()) {\n      collectionRequests.add(new CollectionRequest(collection));\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n\n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return null == solrReq ? null : solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration<String> getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    for (String collection : getCollectionsList()) {\n      collectionRequests.add(new CollectionRequest(collection));\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n\n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return null == solrReq ? null : solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ef011344cb9d79a273b9cfe096c5ecc5de84f58","date":1593208852,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    for (String collection : getCollectionsList()) {\n      collectionRequests.add(new CollectionRequest(collection));\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n\n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return null == solrReq ? null : solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n\n      @Override\n      public Enumeration<String> getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n\n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n\n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    for (String collection : getCollectionsList()) {\n      collectionRequests.add(new CollectionRequest(collection));\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n\n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return null == solrReq ? null : solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n      \n      @Override\n      public Enumeration<String> getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n      \n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n        \n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e0ac06a3dde3a146042d8eb8820dc45326e9263","date":1594139870,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getAuthCtx().mjava","sourceNew":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    for (String collection : getCollectionsList()) {\n      collectionRequests.add(new CollectionRequest(collection));\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n\n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return null == solrReq ? null : solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getUserName() {\n        return getReq().getRemoteUser();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n\n      @Override\n      public Enumeration<String> getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n\n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n\n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","sourceOld":"  private AuthorizationContext getAuthCtx() {\n\n    String resource = getPath();\n\n    SolrParams params = getQueryParams();\n    final ArrayList<CollectionRequest> collectionRequests = new ArrayList<>();\n    for (String collection : getCollectionsList()) {\n      collectionRequests.add(new CollectionRequest(collection));\n    }\n\n    // Extract collection name from the params in case of a Collection Admin request\n    if (getPath().equals(\"/admin/collections\")) {\n      if (CREATE.isEqual(params.get(\"action\"))||\n          RELOAD.isEqual(params.get(\"action\"))||\n          DELETE.isEqual(params.get(\"action\")))\n        collectionRequests.add(new CollectionRequest(params.get(\"name\")));\n      else if (params.get(COLLECTION_PROP) != null)\n        collectionRequests.add(new CollectionRequest(params.get(COLLECTION_PROP)));\n    }\n\n    // Populate the request type if the request is select or update\n    if(requestType == RequestType.UNKNOWN) {\n      if(resource.startsWith(\"/select\") || resource.startsWith(\"/get\"))\n        requestType = RequestType.READ;\n      if(resource.startsWith(\"/update\"))\n        requestType = RequestType.WRITE;\n    }\n\n    return new AuthorizationContext() {\n      @Override\n      public SolrParams getParams() {\n        return null == solrReq ? null : solrReq.getParams();\n      }\n\n      @Override\n      public Principal getUserPrincipal() {\n        return getReq().getUserPrincipal();\n      }\n\n      @Override\n      public String getHttpHeader(String s) {\n        return getReq().getHeader(s);\n      }\n\n      @Override\n      public Enumeration<String> getHeaderNames() {\n        return getReq().getHeaderNames();\n      }\n\n      @Override\n      public List<CollectionRequest> getCollectionRequests() {\n        return collectionRequests;\n      }\n\n      @Override\n      public RequestType getRequestType() {\n        return requestType;\n      }\n\n      public String getResource() {\n        return path;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return getReq().getMethod();\n      }\n\n      @Override\n      public Object getHandler() {\n        return _getHandler();\n      }\n\n      @Override\n      public String toString() {\n        StringBuilder response = new StringBuilder(\"userPrincipal: [\").append(getUserPrincipal()).append(\"]\")\n            .append(\" type: [\").append(requestType.toString()).append(\"], collections: [\");\n        for (CollectionRequest collectionRequest : collectionRequests) {\n          response.append(collectionRequest.collectionName).append(\", \");\n        }\n        if(collectionRequests.size() > 0)\n          response.delete(response.length() - 1, response.length());\n\n        response.append(\"], Path: [\").append(resource).append(\"]\");\n        response.append(\" path : \").append(path).append(\" params :\").append(getParams());\n        return response.toString();\n      }\n\n      @Override\n      public String getRemoteAddr() {\n        return getReq().getRemoteAddr();\n      }\n\n      @Override\n      public String getRemoteHost() {\n        return getReq().getRemoteHost();\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["b5e5ed7a25d398206f319adac2cc92b45d64ae46"],"b9e52dc3261e61fb422a343ba4e6df9a9fab88e6":["ad9908836000c5ea3bdea96886dac2a72235053f"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["486b3da20d42f20e6dc81e6240976ce139d7182b"],"ad9908836000c5ea3bdea96886dac2a72235053f":["6bdcb86c29922edae9a14852e636303bc52df094"],"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["b9e52dc3261e61fb422a343ba4e6df9a9fab88e6"],"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf":["1214bb624eb41181e5c8e260e0050c7e973ba0f4"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["3ef011344cb9d79a273b9cfe096c5ecc5de84f58"],"96a40e7df78bbd3a3fcc50819359d6ce811755f2":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"b5e5ed7a25d398206f319adac2cc92b45d64ae46":["37c278ca040d2744716f7e38d054b0fb9b5e98c7"],"1214bb624eb41181e5c8e260e0050c7e973ba0f4":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf","486b3da20d42f20e6dc81e6240976ce139d7182b"],"37c278ca040d2744716f7e38d054b0fb9b5e98c7":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"486b3da20d42f20e6dc81e6240976ce139d7182b":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3ef011344cb9d79a273b9cfe096c5ecc5de84f58":["96a40e7df78bbd3a3fcc50819359d6ce811755f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["ad9908836000c5ea3bdea96886dac2a72235053f"],"b9e52dc3261e61fb422a343ba4e6df9a9fab88e6":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"ad9908836000c5ea3bdea96886dac2a72235053f":["b9e52dc3261e61fb422a343ba4e6df9a9fab88e6"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["96a40e7df78bbd3a3fcc50819359d6ce811755f2"],"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf":["e9017cf144952056066919f1ebc7897ff9bd71b1","486b3da20d42f20e6dc81e6240976ce139d7182b"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","1214bb624eb41181e5c8e260e0050c7e973ba0f4"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5e5ed7a25d398206f319adac2cc92b45d64ae46":["6bdcb86c29922edae9a14852e636303bc52df094"],"96a40e7df78bbd3a3fcc50819359d6ce811755f2":["3ef011344cb9d79a273b9cfe096c5ecc5de84f58"],"1214bb624eb41181e5c8e260e0050c7e973ba0f4":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"37c278ca040d2744716f7e38d054b0fb9b5e98c7":["b5e5ed7a25d398206f319adac2cc92b45d64ae46"],"486b3da20d42f20e6dc81e6240976ce139d7182b":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"3ef011344cb9d79a273b9cfe096c5ecc5de84f58":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["37c278ca040d2744716f7e38d054b0fb9b5e98c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}