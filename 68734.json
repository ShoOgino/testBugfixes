{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","commits":[{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getLabel(int).mjava","sourceNew":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","sourceNew":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}