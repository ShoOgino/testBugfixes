{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#collect(int).mjava","commits":[{"id":"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d","date":1382570352,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"    public void collect(int docId) throws IOException {\n      int globalDoc = docId+this.docBase;\n      int ord = values.getOrd(globalDoc);\n      if(ord > -1) {\n        float score = scorer.score();\n        if(score > scores[ord]) {\n          ords[ord] = globalDoc;\n          scores[ord] = score;\n        }\n      } else if (this.collapsedSet.fastGet(globalDoc)) {\n        //The doc is elevated so score does not matter\n        //We just want to be sure it doesn't fall into the null policy\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        float score = scorer.score();\n        if(score > nullScore) {\n          nullScore = score;\n          nullDoc = globalDoc;\n        }\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        collapsedSet.fastSet(globalDoc);\n        nullScores.add(scorer.score());\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int docId) throws IOException {\n      int globalDoc = docId+this.docBase;\n      int ord = values.getOrd(globalDoc);\n      if(ord > -1) {\n        float score = scorer.score();\n        if(score > scores[ord]) {\n          ords[ord] = globalDoc;\n          scores[ord] = score;\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //The doc is elevated so score does not matter\n        //We just want to be sure it doesn't fall into the null policy\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        float score = scorer.score();\n        if(score > nullScore) {\n          nullScore = score;\n          nullDoc = globalDoc;\n        }\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        collapsedSet.set(globalDoc);\n        nullScores.add(scorer.score());\n      }\n    }\n\n","sourceOld":"    public void collect(int docId) throws IOException {\n      int globalDoc = docId+this.docBase;\n      int ord = values.getOrd(globalDoc);\n      if(ord > -1) {\n        float score = scorer.score();\n        if(score > scores[ord]) {\n          ords[ord] = globalDoc;\n          scores[ord] = score;\n        }\n      } else if (this.collapsedSet.fastGet(globalDoc)) {\n        //The doc is elevated so score does not matter\n        //We just want to be sure it doesn't fall into the null policy\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        float score = scorer.score();\n        if(score > nullScore) {\n          nullScore = score;\n          nullDoc = globalDoc;\n        }\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        collapsedSet.fastSet(globalDoc);\n        nullScores.add(scorer.score());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a72d053a3654ff5cb7da6c761dfbfbea4258aa5","date":1396311813,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int docId) throws IOException {\n      int globalDoc = docId+this.docBase;\n      int ord = values.getOrd(globalDoc);\n\n      if(ord > -1) {\n        float score = scorer.score();\n        if(score > scores[ord]) {\n          ords[ord] = globalDoc;\n          scores[ord] = score;\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //The doc is elevated so score does not matter\n        //We just want to be sure it doesn't fall into the null policy\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        float score = scorer.score();\n        if(score > nullScore) {\n          nullScore = score;\n          nullDoc = globalDoc;\n        }\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        collapsedSet.set(globalDoc);\n        nullScores.add(scorer.score());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int docId) throws IOException {\n      int globalDoc = docId+this.docBase;\n      int ord = values.getOrd(globalDoc);\n      if(ord > -1) {\n        float score = scorer.score();\n        if(score > scores[ord]) {\n          ords[ord] = globalDoc;\n          scores[ord] = score;\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //The doc is elevated so score does not matter\n        //We just want to be sure it doesn't fall into the null policy\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        float score = scorer.score();\n        if(score > nullScore) {\n          nullScore = score;\n          nullDoc = globalDoc;\n        }\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        collapsedSet.set(globalDoc);\n        nullScores.add(scorer.score());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int docId) throws IOException {\n      int globalDoc = docId+this.docBase;\n      int ord = values.getOrd(globalDoc);\n\n      if(ord > -1) {\n        float score = scorer.score();\n        if(score > scores[ord]) {\n          ords[ord] = globalDoc;\n          scores[ord] = score;\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //The doc is elevated so score does not matter\n        //We just want to be sure it doesn't fall into the null policy\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        float score = scorer.score();\n        if(score > nullScore) {\n          nullScore = score;\n          nullDoc = globalDoc;\n        }\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        collapsedSet.set(globalDoc);\n        nullScores.add(scorer.score());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int docId) throws IOException {\n      int globalDoc = docId+this.docBase;\n      int ord = values.getOrd(globalDoc);\n      if(ord > -1) {\n        float score = scorer.score();\n        if(score > scores[ord]) {\n          ords[ord] = globalDoc;\n          scores[ord] = score;\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //The doc is elevated so score does not matter\n        //We just want to be sure it doesn't fall into the null policy\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        float score = scorer.score();\n        if(score > nullScore) {\n          nullScore = score;\n          nullDoc = globalDoc;\n        }\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        collapsedSet.set(globalDoc);\n        nullScores.add(scorer.score());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdScoreCollector#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int contextDoc) throws IOException {\n      int globalDoc = contextDoc+this.docBase;\n      int ord = -1;\n      if(this.ordinalMap != null) {\n        //Handle ordinalMapping case\n        ord = segmentValues.getOrd(contextDoc);\n        if(ord > -1) {\n          ord = (int)segmentOrdinalMap.get(ord);\n        }\n      } else {\n        //Handle top Level FieldCache or Single Segment Case\n        ord = segmentValues.getOrd(globalDoc);\n      }\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostOrds.add(ord);\n        return;\n      }\n\n      if(ord > -1) {\n        float score = scorer.score();\n        if(score > scores[ord]) {\n          ords[ord] = globalDoc;\n          scores[ord] = score;\n        }\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        float score = scorer.score();\n        if(score > nullScore) {\n          nullScore = score;\n          nullDoc = globalDoc;\n        }\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        collapsedSet.set(globalDoc);\n        nullScores.add(scorer.score());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int docId) throws IOException {\n      int globalDoc = docId+this.docBase;\n      int ord = values.getOrd(globalDoc);\n\n      if(ord > -1) {\n        float score = scorer.score();\n        if(score > scores[ord]) {\n          ords[ord] = globalDoc;\n          scores[ord] = score;\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //The doc is elevated so score does not matter\n        //We just want to be sure it doesn't fall into the null policy\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        float score = scorer.score();\n        if(score > nullScore) {\n          nullScore = score;\n          nullDoc = globalDoc;\n        }\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        collapsedSet.set(globalDoc);\n        nullScores.add(scorer.score());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","0a72d053a3654ff5cb7da6c761dfbfbea4258aa5"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["0a72d053a3654ff5cb7da6c761dfbfbea4258aa5"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"0a72d053a3654ff5cb7da6c761dfbfbea4258aa5":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["5eb2511ababf862ea11e10761c70ee560cd84510","0a72d053a3654ff5cb7da6c761dfbfbea4258aa5"],"0a72d053a3654ff5cb7da6c761dfbfbea4258aa5":["5eb2511ababf862ea11e10761c70ee560cd84510","8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}