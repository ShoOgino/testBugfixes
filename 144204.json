{"path":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<NamedList>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldTypes() != null)  {\n      for (String fieldTypeName : request.getFieldTypes()) {\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n      }\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldNames() != null)  {\n      for (String fieldName : request.getFieldNames()) {\n        FieldType fieldType = schema.getFieldType(fieldName);\n        fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n      }\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<NamedList>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldTypes() != null)  {\n      for (String fieldTypeName : request.getFieldTypes()) {\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n      }\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldNames() != null)  {\n      for (String fieldName : request.getFieldNames()) {\n        FieldType fieldType = schema.getFieldType(fieldName);\n        fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n      }\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<NamedList>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldTypes() != null)  {\n      for (String fieldTypeName : request.getFieldTypes()) {\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n      }\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldNames() != null)  {\n      for (String fieldName : request.getFieldNames()) {\n        FieldType fieldType = schema.getFieldType(fieldName);\n        fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n      }\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<NamedList>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldTypes() != null)  {\n      for (String fieldTypeName : request.getFieldTypes()) {\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n      }\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldNames() != null)  {\n      for (String fieldName : request.getFieldNames()) {\n        FieldType fieldType = schema.getFieldType(fieldName);\n        fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n      }\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<NamedList>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldTypes() != null)  {\n      for (String fieldTypeName : request.getFieldTypes()) {\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n      }\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldNames() != null)  {\n      for (String fieldName : request.getFieldNames()) {\n        FieldType fieldType = schema.getFieldType(fieldName);\n        fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n      }\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<NamedList>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldTypes() != null)  {\n      for (String fieldTypeName : request.getFieldTypes()) {\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n      }\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldNames() != null)  {\n      for (String fieldName : request.getFieldNames()) {\n        FieldType fieldType = schema.getFieldType(fieldName);\n        fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n      }\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<>();\n    if (request.getFieldTypes() != null)  {\n      for (String fieldTypeName : request.getFieldTypes()) {\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n      }\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<>();\n    if (request.getFieldNames() != null)  {\n      for (String fieldName : request.getFieldNames()) {\n        FieldType fieldType = schema.getFieldType(fieldName);\n        fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n      }\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<NamedList>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldTypes() != null)  {\n      for (String fieldTypeName : request.getFieldTypes()) {\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n      }\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<NamedList>();\n    if (request.getFieldNames() != null)  {\n      for (String fieldName : request.getFieldNames()) {\n        FieldType fieldType = schema.getFieldType(fieldName);\n        fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n      }\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#handleAnalysisRequest(FieldAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<>();\n    if (request.getFieldTypes() != null)  {\n      for (String fieldTypeName : request.getFieldTypes()) {\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n      }\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<>();\n    if (request.getFieldNames() != null)  {\n      for (String fieldName : request.getFieldNames()) {\n        FieldType fieldType = schema.getFieldType(fieldName);\n        fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n      }\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved analysis request and returns the analysis breakdown response as a named list.\n   *\n   * @param request The request to handle.\n   * @param schema  The index schema.\n   *\n   * @return The analysis breakdown as a named list.\n   */\n  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request, IndexSchema schema) {\n    NamedList<NamedList> analysisResults = new SimpleOrderedMap<>();\n\n    NamedList<NamedList> fieldTypeAnalysisResults = new SimpleOrderedMap<>();\n    if (request.getFieldTypes() != null)  {\n      for (String fieldTypeName : request.getFieldTypes()) {\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        fieldTypeAnalysisResults.add(fieldTypeName, analyzeValues(request, fieldType, null));\n      }\n    }\n\n    NamedList<NamedList> fieldNameAnalysisResults = new SimpleOrderedMap<>();\n    if (request.getFieldNames() != null)  {\n      for (String fieldName : request.getFieldNames()) {\n        FieldType fieldType = schema.getFieldType(fieldName);\n        fieldNameAnalysisResults.add(fieldName, analyzeValues(request, fieldType, fieldName));\n      }\n    }\n\n    analysisResults.add(\"field_types\", fieldTypeAnalysisResults);\n    analysisResults.add(\"field_names\", fieldNameAnalysisResults);\n\n    return analysisResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}