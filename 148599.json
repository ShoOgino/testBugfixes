{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,LeafReader,PrintStream,DocValuesStatus).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,LeafReader,PrintStream,DocValuesStatus).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkDocValues(FieldInfo fi, LeafReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = reader.getDocsWithField(fi.name);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != reader.maxDoc()) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + reader.maxDoc());\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, reader, reader.getSortedNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name), docsWithField);\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","date":1425345513,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,LeafReader,PrintStream,DocValuesStatus).mjava","sourceNew":null,"sourceOld":"  private static void checkDocValues(FieldInfo fi, LeafReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = reader.getDocsWithField(fi.name);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != reader.maxDoc()) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + reader.maxDoc());\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, reader, reader.getSortedNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name), docsWithField);\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,LeafReader,PrintStream,DocValuesStatus).mjava","sourceNew":null,"sourceOld":"  private static void checkDocValues(FieldInfo fi, LeafReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = reader.getDocsWithField(fi.name);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != reader.maxDoc()) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + reader.maxDoc());\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, reader, reader.getSortedNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name), docsWithField);\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c9fb5f46e264daf5ba3860defe623a89d202dd87","8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"]},"commit2Childs":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}