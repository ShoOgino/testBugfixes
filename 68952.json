{"path":"src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","commits":[{"id":"61af939f4c10286fd8beaa0124064437b7ac44c5","date":1214514846,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    AddUpdateCommand cmd = new AddUpdateCommand();\n    cmd.overwriteCommitted = true;\n    cmd.overwritePending = true;\n    cmd.allowDups = false;\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 1000 and the maxBufferedDocs is 2, so there should be 500 segments (498 segs each w/ 2 docs, and 1 segment with 1 doc)\n    for (int i = 0; i < 999; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.UN_TOKENIZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.TOKENIZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    updater.commit(cmtCmd);\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 500);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(true);\n    cmtCmd.maxOptimizeSegments = 250;\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 250);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1741e98a02ac0687e2d06e364e38c223d5a2bef3","date":1214846945,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","pathOld":"src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","sourceNew":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    AddUpdateCommand cmd = new AddUpdateCommand();\n    cmd.overwriteCommitted = true;\n    cmd.overwritePending = true;\n    cmd.allowDups = false;\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 1000 and the maxBufferedDocs is 2, so there should be 500 segments (498 segs each w/ 2 docs, and 1 segment with 1 doc)\n    for (int i = 0; i < 999; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.UN_TOKENIZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.TOKENIZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 500);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(true);\n    cmtCmd.maxOptimizeSegments = 250;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 250);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n  }\n\n","sourceOld":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    AddUpdateCommand cmd = new AddUpdateCommand();\n    cmd.overwriteCommitted = true;\n    cmd.overwritePending = true;\n    cmd.allowDups = false;\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 1000 and the maxBufferedDocs is 2, so there should be 500 segments (498 segs each w/ 2 docs, and 1 segment with 1 doc)\n    for (int i = 0; i < 999; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.UN_TOKENIZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.TOKENIZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    updater.commit(cmtCmd);\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 500);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(true);\n    cmtCmd.maxOptimizeSegments = 250;\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 250);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"996afc556b65379390d9951600f1fce863570c0e","date":1217365058,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","pathOld":"src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","sourceNew":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    AddUpdateCommand cmd = new AddUpdateCommand();\n    cmd.overwriteCommitted = true;\n    cmd.overwritePending = true;\n    cmd.allowDups = false;\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.UN_TOKENIZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.TOKENIZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n  }\n\n","sourceOld":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    AddUpdateCommand cmd = new AddUpdateCommand();\n    cmd.overwriteCommitted = true;\n    cmd.overwritePending = true;\n    cmd.allowDups = false;\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 1000 and the maxBufferedDocs is 2, so there should be 500 segments (498 segs each w/ 2 docs, and 1 segment with 1 doc)\n    for (int i = 0; i < 999; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.UN_TOKENIZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.TOKENIZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 500);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(true);\n    cmtCmd.maxOptimizeSegments = 250;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 250);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","pathOld":"src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","sourceNew":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    AddUpdateCommand cmd = new AddUpdateCommand();\n    cmd.overwriteCommitted = true;\n    cmd.overwritePending = true;\n    cmd.allowDups = false;\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.ANALYZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n  }\n\n","sourceOld":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    AddUpdateCommand cmd = new AddUpdateCommand();\n    cmd.overwriteCommitted = true;\n    cmd.overwritePending = true;\n    cmd.allowDups = false;\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.UN_TOKENIZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.TOKENIZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","pathOld":"src/test/org/apache/solr/update/DirectUpdateHandlerOptimizeTest#testOptimize().mjava","sourceNew":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    AddUpdateCommand cmd = new AddUpdateCommand();\n    cmd.overwriteCommitted = true;\n    cmd.overwritePending = true;\n    cmd.allowDups = false;\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.ANALYZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n  }\n\n","sourceOld":"  public void testOptimize() throws Exception {\n    SolrCore core = h.getCore();\n\n    UpdateHandler updater = core.getUpdateHandler();\n    AddUpdateCommand cmd = new AddUpdateCommand();\n    cmd.overwriteCommitted = true;\n    cmd.overwritePending = true;\n    cmd.allowDups = false;\n    //add just under the merge factor, so no segments are merged\n    //the merge factor is 100 and the maxBufferedDocs is 2, so there should be 50 segments\n    for (int i = 0; i < 99; i++) {\n      // Add a valid document\n      cmd.doc = new Document();\n      cmd.doc.add(new Field(\"id\", \"id_\" + i, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      cmd.doc.add(new Field(\"subject\", \"subject_\" + i, Field.Store.NO, Field.Index.ANALYZED));\n      updater.addDoc(cmd);\n    }\n\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);  // commit twice to give systems such as windows a chance to delete the old files\n\n    String indexDir = core.getIndexDir();\n    assertNumSegments(indexDir, 50);\n\n    //now do an optimize\n    cmtCmd = new CommitUpdateCommand(true);\n    cmtCmd.maxOptimizeSegments = 25;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 25);\n\n    cmtCmd.maxOptimizeSegments = -1;\n    try {\n      updater.commit(cmtCmd);\n      assertTrue(false);\n    } catch (IllegalArgumentException e) {\n    }\n    cmtCmd.maxOptimizeSegments = 1;\n    updater.commit(cmtCmd);\n    updater.commit(cmtCmd);\n    assertNumSegments(indexDir, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"996afc556b65379390d9951600f1fce863570c0e":["1741e98a02ac0687e2d06e364e38c223d5a2bef3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["996afc556b65379390d9951600f1fce863570c0e"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"1741e98a02ac0687e2d06e364e38c223d5a2bef3":["61af939f4c10286fd8beaa0124064437b7ac44c5"],"61af939f4c10286fd8beaa0124064437b7ac44c5":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"996afc556b65379390d9951600f1fce863570c0e":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["61af939f4c10286fd8beaa0124064437b7ac44c5"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"1741e98a02ac0687e2d06e364e38c223d5a2bef3":["996afc556b65379390d9951600f1fce863570c0e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"61af939f4c10286fd8beaa0124064437b7ac44c5":["1741e98a02ac0687e2d06e364e38c223d5a2bef3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}