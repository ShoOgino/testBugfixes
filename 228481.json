{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/Token#getValue().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/Token#getValue().mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/Token#getValue().mjava","sourceNew":"  /**\n   * An optional attribute value of the Token.\n   * Tokens which are not used as syntactic sugar will often contain\n   * meaningful values that will be used later on by the compiler or\n   * interpreter. This attribute value is often different from the image.\n   * Any subclass of Token that actually wants to return a non-null value can\n   * override this method as appropriate.\n   */\n  public Object getValue() {\n    return null;\n  }\n\n","sourceOld":"  /**\n   * An optional attribute value of the Token.\n   * Tokens which are not used as syntactic sugar will often contain\n   * meaningful values that will be used later on by the compiler or\n   * interpreter. This attribute value is often different from the image.\n   * Any subclass of Token that actually wants to return a non-null value can\n   * override this method as appropriate.\n   */\n  public Object getValue() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f03d60547476e008d3d993cd26872c1157f19cf","date":1270899773,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/Token#getValue().mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/Token#getValue().mjava","sourceNew":"  /**\r\n   * An optional attribute value of the Token.\r\n   * Tokens which are not used as syntactic sugar will often contain\r\n   * meaningful values that will be used later on by the compiler or\r\n   * interpreter. This attribute value is often different from the image.\r\n   * Any subclass of Token that actually wants to return a non-null value can\r\n   * override this method as appropriate.\r\n   */\r\n  public Object getValue() {\r\n    return null;\r\n  }\r\n\n","sourceOld":"  /**\n   * An optional attribute value of the Token.\n   * Tokens which are not used as syntactic sugar will often contain\n   * meaningful values that will be used later on by the compiler or\n   * interpreter. This attribute value is often different from the image.\n   * Any subclass of Token that actually wants to return a non-null value can\n   * override this method as appropriate.\n   */\n  public Object getValue() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b","date":1270900166,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/Token#getValue().mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/Token#getValue().mjava","sourceNew":"  /**\n   * An optional attribute value of the Token.\n   * Tokens which are not used as syntactic sugar will often contain\n   * meaningful values that will be used later on by the compiler or\n   * interpreter. This attribute value is often different from the image.\n   * Any subclass of Token that actually wants to return a non-null value can\n   * override this method as appropriate.\n   */\n  public Object getValue() {\n    return null;\n  }\n\n","sourceOld":"  /**\r\n   * An optional attribute value of the Token.\r\n   * Tokens which are not used as syntactic sugar will often contain\r\n   * meaningful values that will be used later on by the compiler or\r\n   * interpreter. This attribute value is often different from the image.\r\n   * Any subclass of Token that actually wants to return a non-null value can\r\n   * override this method as appropriate.\r\n   */\r\n  public Object getValue() {\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/Token#getValue().mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/Token#getValue().mjava","sourceNew":"  /**\n   * An optional attribute value of the Token.\n   * Tokens which are not used as syntactic sugar will often contain\n   * meaningful values that will be used later on by the compiler or\n   * interpreter. This attribute value is often different from the image.\n   * Any subclass of Token that actually wants to return a non-null value can\n   * override this method as appropriate.\n   */\n  public Object getValue() {\n    return null;\n  }\n\n","sourceOld":"  /**\n   * An optional attribute value of the Token.\n   * Tokens which are not used as syntactic sugar will often contain\n   * meaningful values that will be used later on by the compiler or\n   * interpreter. This attribute value is often different from the image.\n   * Any subclass of Token that actually wants to return a non-null value can\n   * override this method as appropriate.\n   */\n  public Object getValue() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["1f03d60547476e008d3d993cd26872c1157f19cf"],"1f03d60547476e008d3d993cd26872c1157f19cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"1f03d60547476e008d3d993cd26872c1157f19cf":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f03d60547476e008d3d993cd26872c1157f19cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}