{"path":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","sourceNew":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","sourceNew":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","bugFix":["893d07555f01912f57b453a320e4d46363a31b50"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","sourceNew":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9574fd7667d776b150040d29c4ca217a0d726ac","date":1344007238,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","sourceNew":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   *  <b>NOTE:</b> divisor settings &gt; 1 do not apply to all PostingsFormat\n   *  implementations, including the default one in this release. It only makes\n   *  sense for terms indexes that can efficiently re-sample terms at load time.\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","sourceNew":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   *  <b>NOTE:</b> divisor settings &gt; 1 do not apply to all PostingsFormat\n   *  implementations, including the default one in this release. It only makes\n   *  sense for terms indexes that can efficiently re-sample terms at load time.\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","sourceNew":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   *  <b>NOTE:</b> divisor settings &gt; 1 do not apply to all PostingsFormat\n   *  implementations, including the default one in this release. It only makes\n   *  sense for terms indexes that can efficiently re-sample terms at load time.\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","sourceNew":null,"sourceOld":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   *  <b>NOTE:</b> divisor settings &gt; 1 do not apply to all PostingsFormat\n   *  implementations, including the default one in this release. It only makes\n   *  sense for terms indexes that can efficiently re-sample terms at load time.\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,int).mjava","sourceNew":null,"sourceOld":"  /** Expert: Returns a IndexReader reading the index in the given\n   *  Directory with the given termInfosIndexDivisor.\n   * @param directory the index directory\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriterConfig#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   *  <b>NOTE:</b> divisor settings &gt; 1 do not apply to all PostingsFormat\n   *  implementations, including the default one in this release. It only makes\n   *  sense for terms indexes that can efficiently re-sample terms at load time.\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final Directory directory, int termInfosIndexDivisor) throws IOException {\n    return StandardDirectoryReader.open(directory, null, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9574fd7667d776b150040d29c4ca217a0d726ac":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a45bec74b98f6fc05f52770cfb425739e6563960":["e9574fd7667d776b150040d29c4ca217a0d726ac"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["e9574fd7667d776b150040d29c4ca217a0d726ac"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","e9574fd7667d776b150040d29c4ca217a0d726ac"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","e9574fd7667d776b150040d29c4ca217a0d726ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"]},"commit2Childs":{"e9574fd7667d776b150040d29c4ca217a0d726ac":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["e9574fd7667d776b150040d29c4ca217a0d726ac","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}