{"path":"src/test-deprecated/org/apache/lucene/search/SampleComparable#getComparatorSource().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/search/SampleComparable#getComparatorSource().mjava","pathOld":"/dev/null","sourceNew":"  public static SortComparatorSource getComparatorSource () {\n    return new SortComparatorSource () {\n      public ScoreDocComparator newComparator (final IndexReader reader, String fieldname)\n      throws IOException {\n        final String field = fieldname.intern ();\n        final TermEnum enumerator = reader.terms (new Term (fieldname, \"\"));\n        try {\n          return new ScoreDocComparator () {\n            protected Comparable[] cachedValues = fillCache (reader, enumerator, field);\n\n            public int compare (ScoreDoc i, ScoreDoc j) {\n              return cachedValues[i.doc].compareTo (cachedValues[j.doc]);\n            }\n\n            public Comparable sortValue (ScoreDoc i) {\n              return cachedValues[i.doc];\n            }\n\n            public int sortType () {\n              return SortField.CUSTOM;\n            }\n          };\n        } finally {\n          enumerator.close ();\n        }\n      }\n\n      /**\n       * Returns an array of objects which represent that natural order\n       * of the term values in the given field.\n       *\n       * @param reader     Terms are in this index.\n       * @param enumerator Use this to get the term values and TermDocs.\n       * @param fieldname  Comparables should be for this field.\n       * @return Array of objects representing natural order of terms in field.\n       * @throws IOException If an error occurs reading the index.\n       */\n      protected Comparable[] fillCache (IndexReader reader, TermEnum enumerator, String fieldname)\n      throws IOException {\n        final String field = fieldname.intern ();\n        Comparable[] retArray = new Comparable[reader.maxDoc ()];\n        if (retArray.length > 0) {\n          TermDocs termDocs = reader.termDocs ();\n          try {\n            if (enumerator.term () == null) {\n              throw new RuntimeException (\"no terms in field \" + field);\n            }\n            do {\n              Term term = enumerator.term ();\n              if (term.field () != field) break;\n              Comparable termval = getComparable (term.text ());\n              termDocs.seek (enumerator);\n              while (termDocs.next ()) {\n                retArray[termDocs.doc ()] = termval;\n              }\n            } while (enumerator.next ());\n          } finally {\n            termDocs.close ();\n          }\n        }\n        return retArray;\n      }\n\n      Comparable getComparable (String termtext) {\n        return new SampleComparable (termtext);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/search/SampleComparable#getComparatorSource().mjava","sourceNew":null,"sourceOld":"  public static SortComparatorSource getComparatorSource () {\n    return new SortComparatorSource () {\n      public ScoreDocComparator newComparator (final IndexReader reader, String fieldname)\n      throws IOException {\n        final String field = fieldname.intern ();\n        final TermEnum enumerator = reader.terms (new Term (fieldname, \"\"));\n        try {\n          return new ScoreDocComparator () {\n            protected Comparable[] cachedValues = fillCache (reader, enumerator, field);\n\n            public int compare (ScoreDoc i, ScoreDoc j) {\n              return cachedValues[i.doc].compareTo (cachedValues[j.doc]);\n            }\n\n            public Comparable sortValue (ScoreDoc i) {\n              return cachedValues[i.doc];\n            }\n\n            public int sortType () {\n              return SortField.CUSTOM;\n            }\n          };\n        } finally {\n          enumerator.close ();\n        }\n      }\n\n      /**\n       * Returns an array of objects which represent that natural order\n       * of the term values in the given field.\n       *\n       * @param reader     Terms are in this index.\n       * @param enumerator Use this to get the term values and TermDocs.\n       * @param fieldname  Comparables should be for this field.\n       * @return Array of objects representing natural order of terms in field.\n       * @throws IOException If an error occurs reading the index.\n       */\n      protected Comparable[] fillCache (IndexReader reader, TermEnum enumerator, String fieldname)\n      throws IOException {\n        final String field = fieldname.intern ();\n        Comparable[] retArray = new Comparable[reader.maxDoc ()];\n        if (retArray.length > 0) {\n          TermDocs termDocs = reader.termDocs ();\n          try {\n            if (enumerator.term () == null) {\n              throw new RuntimeException (\"no terms in field \" + field);\n            }\n            do {\n              Term term = enumerator.term ();\n              if (term.field () != field) break;\n              Comparable termval = getComparable (term.text ());\n              termDocs.seek (enumerator);\n              while (termDocs.next ()) {\n                retArray[termDocs.doc ()] = termval;\n              }\n            } while (enumerator.next ());\n          } finally {\n            termDocs.close ();\n          }\n        }\n        return retArray;\n      }\n\n      Comparable getComparable (String termtext) {\n        return new SampleComparable (termtext);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5b5461affe637a07375542c763a4805300802be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}