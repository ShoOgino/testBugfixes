{"path":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygon().mjava","commits":[{"id":"86979a945891cffd49f9634fac5d16ebfe47c541","date":1459704804,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygon().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestPolygon#testMultiPolygon().mjava","sourceNew":"  /** Three boxes, an island inside a hole inside a shape */\n  public void testMultiPolygon() {\n    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    Polygon polygons[] = new Polygon[] { outer, island };\n    \n    // contains(point)\n    assertTrue(Polygon.contains(polygons, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, -6, 6)); // in the hole\n    assertTrue(Polygon.contains(polygons, -25, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, -51, 51)); // in the ocean\n    \n    // contains(box): this can conservatively return false\n    assertTrue(Polygon.contains(polygons, -2, 2, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, 6, 7, 6, 7)); // in the hole\n    assertTrue(Polygon.contains(polygons, 24, 25, 24, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, 51, 52, 51, 52)); // in the ocean\n    assertFalse(Polygon.contains(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertFalse(Polygon.contains(polygons, 49, 51, 49, 51)); // overlapping the mainland\n    assertFalse(Polygon.contains(polygons, 9, 11, 9, 11)); // overlapping the hole\n    assertFalse(Polygon.contains(polygons, 5, 6, 5, 6)); // overlapping the island\n\n    // crosses(box): this can conservatively return true\n    assertTrue(Polygon.crosses(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertTrue(Polygon.crosses(polygons, 49, 51, 49, 51)); // overlapping the mainland and ocean\n    assertTrue(Polygon.crosses(polygons, 9, 11, 9, 11)); // overlapping the hole and mainland\n    assertTrue(Polygon.crosses(polygons, 5, 6, 5, 6)); // overlapping the island\n  }\n\n","sourceOld":"  /** Three boxes, an island inside a hole inside a shape */\n  public void testMultiPolygon() {\n    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    Polygon polygons[] = new Polygon[] { outer, island };\n    \n    // contains(point)\n    assertTrue(Polygon.contains(polygons, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, -6, 6)); // in the hole\n    assertTrue(Polygon.contains(polygons, -25, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, -51, 51)); // in the ocean\n    \n    // contains(box): this can conservatively return false\n    assertTrue(Polygon.contains(polygons, -2, 2, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, 6, 7, 6, 7)); // in the hole\n    assertTrue(Polygon.contains(polygons, 24, 25, 24, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, 51, 52, 51, 52)); // in the ocean\n    assertFalse(Polygon.contains(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertFalse(Polygon.contains(polygons, 49, 51, 49, 51)); // overlapping the mainland\n    assertFalse(Polygon.contains(polygons, 9, 11, 9, 11)); // overlapping the hole\n    assertFalse(Polygon.contains(polygons, 5, 6, 5, 6)); // overlapping the island\n\n    // crosses(box): this can conservatively return true\n    assertTrue(Polygon.crosses(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertTrue(Polygon.crosses(polygons, 49, 51, 49, 51)); // overlapping the mainland and ocean\n    assertTrue(Polygon.crosses(polygons, 9, 11, 9, 11)); // overlapping the hole and mainland\n    assertTrue(Polygon.crosses(polygons, 5, 6, 5, 6)); // overlapping the island\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82235a501cff963da53cb98d86009e33e15cf47f","date":1459788663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygon().mjava","sourceNew":"  /** Three boxes, an island inside a hole inside a shape */\n  public void testMultiPolygon() {\n    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    Polygon polygons[] = new Polygon[] { outer, island };\n    \n    // contains(point)\n    assertTrue(Polygon.contains(polygons, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, -6, 6)); // in the hole\n    assertTrue(Polygon.contains(polygons, -25, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, -51, 51)); // in the ocean\n    \n    // relate(box): this can conservatively return CELL_CROSSES_QUERY\n    assertEquals(Relation.CELL_INSIDE_QUERY, Polygon.relate(polygons, -2, 2, -2, 2)); // on the island\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, Polygon.relate(polygons, 6, 7, 6, 7)); // in the hole\n    assertEquals(Relation.CELL_INSIDE_QUERY, Polygon.relate(polygons, 24, 25, 24, 25)); // on the mainland\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, Polygon.relate(polygons, 51, 52, 51, 52)); // in the ocean\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, 49, 51, 49, 51)); // overlapping the mainland\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, 9, 11, 9, 11)); // overlapping the hole\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, 5, 6, 5, 6)); // overlapping the island\n  }\n\n","sourceOld":"  /** Three boxes, an island inside a hole inside a shape */\n  public void testMultiPolygon() {\n    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    Polygon polygons[] = new Polygon[] { outer, island };\n    \n    // contains(point)\n    assertTrue(Polygon.contains(polygons, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, -6, 6)); // in the hole\n    assertTrue(Polygon.contains(polygons, -25, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, -51, 51)); // in the ocean\n    \n    // contains(box): this can conservatively return false\n    assertTrue(Polygon.contains(polygons, -2, 2, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, 6, 7, 6, 7)); // in the hole\n    assertTrue(Polygon.contains(polygons, 24, 25, 24, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, 51, 52, 51, 52)); // in the ocean\n    assertFalse(Polygon.contains(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertFalse(Polygon.contains(polygons, 49, 51, 49, 51)); // overlapping the mainland\n    assertFalse(Polygon.contains(polygons, 9, 11, 9, 11)); // overlapping the hole\n    assertFalse(Polygon.contains(polygons, 5, 6, 5, 6)); // overlapping the island\n\n    // crosses(box): this can conservatively return true\n    assertTrue(Polygon.crosses(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertTrue(Polygon.crosses(polygons, 49, 51, 49, 51)); // overlapping the mainland and ocean\n    assertTrue(Polygon.crosses(polygons, 9, 11, 9, 11)); // overlapping the hole and mainland\n    assertTrue(Polygon.crosses(polygons, 5, 6, 5, 6)); // overlapping the island\n  }\n\n","bugFix":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygon().mjava","sourceNew":"  /** Three boxes, an island inside a hole inside a shape */\n  public void testMultiPolygon() {\n    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    Polygon polygons[] = new Polygon[] { outer, island };\n    \n    // contains(point)\n    assertTrue(Polygon.contains(polygons, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, -6, 6)); // in the hole\n    assertTrue(Polygon.contains(polygons, -25, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, -51, 51)); // in the ocean\n    \n    // relate(box): this can conservatively return CELL_CROSSES_QUERY\n    assertEquals(Relation.CELL_INSIDE_QUERY, Polygon.relate(polygons, -2, 2, -2, 2)); // on the island\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, Polygon.relate(polygons, 6, 7, 6, 7)); // in the hole\n    assertEquals(Relation.CELL_INSIDE_QUERY, Polygon.relate(polygons, 24, 25, 24, 25)); // on the mainland\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, Polygon.relate(polygons, 51, 52, 51, 52)); // in the ocean\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, 49, 51, 49, 51)); // overlapping the mainland\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, 9, 11, 9, 11)); // overlapping the hole\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, 5, 6, 5, 6)); // overlapping the island\n  }\n\n","sourceOld":"  /** Three boxes, an island inside a hole inside a shape */\n  public void testMultiPolygon() {\n    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    Polygon polygons[] = new Polygon[] { outer, island };\n    \n    // contains(point)\n    assertTrue(Polygon.contains(polygons, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, -6, 6)); // in the hole\n    assertTrue(Polygon.contains(polygons, -25, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, -51, 51)); // in the ocean\n    \n    // contains(box): this can conservatively return false\n    assertTrue(Polygon.contains(polygons, -2, 2, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, 6, 7, 6, 7)); // in the hole\n    assertTrue(Polygon.contains(polygons, 24, 25, 24, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, 51, 52, 51, 52)); // in the ocean\n    assertFalse(Polygon.contains(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertFalse(Polygon.contains(polygons, 49, 51, 49, 51)); // overlapping the mainland\n    assertFalse(Polygon.contains(polygons, 9, 11, 9, 11)); // overlapping the hole\n    assertFalse(Polygon.contains(polygons, 5, 6, 5, 6)); // overlapping the island\n\n    // crosses(box): this can conservatively return true\n    assertTrue(Polygon.crosses(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertTrue(Polygon.crosses(polygons, 49, 51, 49, 51)); // overlapping the mainland and ocean\n    assertTrue(Polygon.crosses(polygons, 9, 11, 9, 11)); // overlapping the hole and mainland\n    assertTrue(Polygon.crosses(polygons, 5, 6, 5, 6)); // overlapping the island\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testMultiPolygon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygon().mjava","sourceNew":"  /** Three boxes, an island inside a hole inside a shape */\n  public void testMultiPolygon() {\n    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    Polygon2D polygon = Polygon2D.create(outer, island);\n    \n    // contains(point)\n    assertTrue(polygon.contains(-2, 2)); // on the island\n    assertFalse(polygon.contains(-6, 6)); // in the hole\n    assertTrue(polygon.contains(-25, 25)); // on the mainland\n    assertFalse(polygon.contains(-51, 51)); // in the ocean\n    \n    // relate(box): this can conservatively return CELL_CROSSES_QUERY\n    assertEquals(Relation.CELL_INSIDE_QUERY, polygon.relate(-2, 2, -2, 2)); // on the island\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, polygon.relate(6, 7, 6, 7)); // in the hole\n    assertEquals(Relation.CELL_INSIDE_QUERY, polygon.relate(24, 25, 24, 25)); // on the mainland\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, polygon.relate(51, 52, 51, 52)); // in the ocean\n    assertEquals(Relation.CELL_CROSSES_QUERY, polygon.relate(-60, 60, -60, 60)); // enclosing us completely\n    assertEquals(Relation.CELL_CROSSES_QUERY, polygon.relate(49, 51, 49, 51)); // overlapping the mainland\n    assertEquals(Relation.CELL_CROSSES_QUERY, polygon.relate(9, 11, 9, 11)); // overlapping the hole\n    assertEquals(Relation.CELL_CROSSES_QUERY, polygon.relate(5, 6, 5, 6)); // overlapping the island\n  }\n\n","sourceOld":"  /** Three boxes, an island inside a hole inside a shape */\n  public void testMultiPolygon() {\n    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    Polygon polygons[] = new Polygon[] { outer, island };\n    \n    // contains(point)\n    assertTrue(Polygon.contains(polygons, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, -6, 6)); // in the hole\n    assertTrue(Polygon.contains(polygons, -25, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, -51, 51)); // in the ocean\n    \n    // relate(box): this can conservatively return CELL_CROSSES_QUERY\n    assertEquals(Relation.CELL_INSIDE_QUERY, Polygon.relate(polygons, -2, 2, -2, 2)); // on the island\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, Polygon.relate(polygons, 6, 7, 6, 7)); // in the hole\n    assertEquals(Relation.CELL_INSIDE_QUERY, Polygon.relate(polygons, 24, 25, 24, 25)); // on the mainland\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, Polygon.relate(polygons, 51, 52, 51, 52)); // in the ocean\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, 49, 51, 49, 51)); // overlapping the mainland\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, 9, 11, 9, 11)); // overlapping the hole\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, 5, 6, 5, 6)); // overlapping the island\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testMultiPolygon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygon().mjava","sourceNew":"  /** Three boxes, an island inside a hole inside a shape */\n  public void testMultiPolygon() {\n    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    Polygon2D polygon = Polygon2D.create(outer, island);\n    \n    // contains(point)\n    assertTrue(polygon.contains(-2, 2)); // on the island\n    assertFalse(polygon.contains(-6, 6)); // in the hole\n    assertTrue(polygon.contains(-25, 25)); // on the mainland\n    assertFalse(polygon.contains(-51, 51)); // in the ocean\n    \n    // relate(box): this can conservatively return CELL_CROSSES_QUERY\n    assertEquals(Relation.CELL_INSIDE_QUERY, polygon.relate(-2, 2, -2, 2)); // on the island\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, polygon.relate(6, 7, 6, 7)); // in the hole\n    assertEquals(Relation.CELL_INSIDE_QUERY, polygon.relate(24, 25, 24, 25)); // on the mainland\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, polygon.relate(51, 52, 51, 52)); // in the ocean\n    assertEquals(Relation.CELL_CROSSES_QUERY, polygon.relate(-60, 60, -60, 60)); // enclosing us completely\n    assertEquals(Relation.CELL_CROSSES_QUERY, polygon.relate(49, 51, 49, 51)); // overlapping the mainland\n    assertEquals(Relation.CELL_CROSSES_QUERY, polygon.relate(9, 11, 9, 11)); // overlapping the hole\n    assertEquals(Relation.CELL_CROSSES_QUERY, polygon.relate(5, 6, 5, 6)); // overlapping the island\n  }\n\n","sourceOld":"  /** Three boxes, an island inside a hole inside a shape */\n  public void testMultiPolygon() {\n    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    Polygon polygons[] = new Polygon[] { outer, island };\n    \n    // contains(point)\n    assertTrue(Polygon.contains(polygons, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, -6, 6)); // in the hole\n    assertTrue(Polygon.contains(polygons, -25, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, -51, 51)); // in the ocean\n    \n    // relate(box): this can conservatively return CELL_CROSSES_QUERY\n    assertEquals(Relation.CELL_INSIDE_QUERY, Polygon.relate(polygons, -2, 2, -2, 2)); // on the island\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, Polygon.relate(polygons, 6, 7, 6, 7)); // in the hole\n    assertEquals(Relation.CELL_INSIDE_QUERY, Polygon.relate(polygons, 24, 25, 24, 25)); // on the mainland\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, Polygon.relate(polygons, 51, 52, 51, 52)); // in the ocean\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, 49, 51, 49, 51)); // overlapping the mainland\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, 9, 11, 9, 11)); // overlapping the hole\n    assertEquals(Relation.CELL_CROSSES_QUERY, Polygon.relate(polygons, 5, 6, 5, 6)); // overlapping the island\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82235a501cff963da53cb98d86009e33e15cf47f":["86979a945891cffd49f9634fac5d16ebfe47c541"],"86979a945891cffd49f9634fac5d16ebfe47c541":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["86979a945891cffd49f9634fac5d16ebfe47c541","82235a501cff963da53cb98d86009e33e15cf47f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["82235a501cff963da53cb98d86009e33e15cf47f","925fce43f3bac029d912b9b7de03c789e258a333"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["82235a501cff963da53cb98d86009e33e15cf47f"]},"commit2Childs":{"82235a501cff963da53cb98d86009e33e15cf47f":["09af2c9610ce53a4b25fd99344299b40318a4a1a","f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"86979a945891cffd49f9634fac5d16ebfe47c541":["82235a501cff963da53cb98d86009e33e15cf47f","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86979a945891cffd49f9634fac5d16ebfe47c541"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}