{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","pathOld":"/dev/null","sourceNew":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(new BytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["651a27b35167c2ea81f87f4749722e52b7d5b750","651a27b35167c2ea81f87f4749722e52b7d5b750","651a27b35167c2ea81f87f4749722e52b7d5b750","651a27b35167c2ea81f87f4749722e52b7d5b750","651a27b35167c2ea81f87f4749722e52b7d5b750","651a27b35167c2ea81f87f4749722e52b7d5b750"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","pathOld":"/dev/null","sourceNew":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(new BytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","pathOld":"/dev/null","sourceNew":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(new BytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(new BytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(new BytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(new BytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0","date":1301994806,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","sourceNew":null,"sourceOld":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","sourceNew":null,"sourceOld":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["56da903869515527852ee21ea7ef7bfe414cd40d","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0":["56da903869515527852ee21ea7ef7bfe414cd40d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"962d04139994fce5193143ef35615499a9a96d78":["868da859b43505d9d2a023bfeae6dd0c795f5295","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","a3776dccca01c11e7046323cfad46a3b4a471233","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["962d04139994fce5193143ef35615499a9a96d78"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["56da903869515527852ee21ea7ef7bfe414cd40d","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}