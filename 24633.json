{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(GENERATION, indexGen.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","bugFix":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(GENERATION, indexGen.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(GENERATION, indexGen.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new HttpPost(masterUrl);\n      //the method is command=filecontent\n      \n      List<BasicNameValuePair> formparams = new ArrayList<BasicNameValuePair>();\n\n      formparams.add(new BasicNameValuePair(COMMAND, CMD_GET_FILE));\n\n      //add the version to download. This is used to reserve the download\n      formparams.add(new BasicNameValuePair(GENERATION, indexGen.toString()));\n      if (isConf) {\n        //set cf instead of file for config file\n        formparams.add(new BasicNameValuePair(CONF_FILE_SHORT, fileName));\n      } else {\n        formparams.add(new BasicNameValuePair(FILE, fileName));\n      }\n      if (useInternal) {\n        formparams.add(new BasicNameValuePair(COMPRESSION, \"true\"));\n      }\n      if (useExternal) {\n        formparams.add(new BasicNameValuePair(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        formparams.add(new BasicNameValuePair(CHECKSUM, \"true\"));\n      //wt=filestream this is a custom protocol\n      formparams.add(new BasicNameValuePair(\"wt\", FILE_STREAM));\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        formparams.add(new BasicNameValuePair(OFFSET, \"\" + bytesDownloaded));\n      }\n      \n      UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\n      post.setEntity(entity);\n\n      HttpResponse response = myHttpClient.execute(post);\n      InputStream is = response.getEntity().getContent();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(GENERATION, indexGen.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2425308ebcd91b538a601df94ae1551ccaab2bb","date":1340702883,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      SolrServer s = new HttpSolrServer(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"internal\"); \n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n        // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n        // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n      \n\n      NamedList response;\n      InputStream is = null;\n      try {\n        QueryRequest req = new QueryRequest(params);\n        response = s.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Throwable t) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", t);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new HttpPost(masterUrl);\n      //the method is command=filecontent\n      \n      List<BasicNameValuePair> formparams = new ArrayList<BasicNameValuePair>();\n\n      formparams.add(new BasicNameValuePair(COMMAND, CMD_GET_FILE));\n\n      //add the version to download. This is used to reserve the download\n      formparams.add(new BasicNameValuePair(GENERATION, indexGen.toString()));\n      if (isConf) {\n        //set cf instead of file for config file\n        formparams.add(new BasicNameValuePair(CONF_FILE_SHORT, fileName));\n      } else {\n        formparams.add(new BasicNameValuePair(FILE, fileName));\n      }\n      if (useInternal) {\n        formparams.add(new BasicNameValuePair(COMPRESSION, \"true\"));\n      }\n      if (useExternal) {\n        formparams.add(new BasicNameValuePair(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        formparams.add(new BasicNameValuePair(CHECKSUM, \"true\"));\n      //wt=filestream this is a custom protocol\n      formparams.add(new BasicNameValuePair(\"wt\", FILE_STREAM));\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        formparams.add(new BasicNameValuePair(OFFSET, \"\" + bytesDownloaded));\n      }\n      \n      UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\n      post.setEntity(entity);\n\n      HttpResponse response = myHttpClient.execute(post);\n      InputStream is = response.getEntity().getContent();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","9f6b79013f14f939d4bc18ac09c457d1d1796fd2","9f6b79013f14f939d4bc18ac09c457d1d1796fd2","9f6b79013f14f939d4bc18ac09c457d1d1796fd2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      SolrServer s = new HttpSolrServer(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"internal\"); \n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n        // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n        // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n      \n\n      NamedList response;\n      InputStream is = null;\n      try {\n        QueryRequest req = new QueryRequest(params);\n        response = s.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Throwable t) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", t);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new HttpPost(masterUrl);\n      //the method is command=filecontent\n      \n      List<BasicNameValuePair> formparams = new ArrayList<BasicNameValuePair>();\n\n      formparams.add(new BasicNameValuePair(COMMAND, CMD_GET_FILE));\n\n      //add the version to download. This is used to reserve the download\n      formparams.add(new BasicNameValuePair(GENERATION, indexGen.toString()));\n      if (isConf) {\n        //set cf instead of file for config file\n        formparams.add(new BasicNameValuePair(CONF_FILE_SHORT, fileName));\n      } else {\n        formparams.add(new BasicNameValuePair(FILE, fileName));\n      }\n      if (useInternal) {\n        formparams.add(new BasicNameValuePair(COMPRESSION, \"true\"));\n      }\n      if (useExternal) {\n        formparams.add(new BasicNameValuePair(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        formparams.add(new BasicNameValuePair(CHECKSUM, \"true\"));\n      //wt=filestream this is a custom protocol\n      formparams.add(new BasicNameValuePair(\"wt\", FILE_STREAM));\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        formparams.add(new BasicNameValuePair(OFFSET, \"\" + bytesDownloaded));\n      }\n      \n      UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\n      post.setEntity(entity);\n\n      HttpResponse response = myHttpClient.execute(post);\n      InputStream is = response.getEntity().getContent();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f6b79013f14f939d4bc18ac09c457d1d1796fd2","date":1346830387,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      SolrServer s = new HttpSolrServer(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\"); \n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n        // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n        // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n      \n\n      NamedList response;\n      InputStream is = null;\n      try {\n        QueryRequest req = new QueryRequest(params);\n        response = s.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Throwable t) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", t);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      SolrServer s = new HttpSolrServer(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"internal\"); \n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n        // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n        // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n      \n\n      NamedList response;\n      InputStream is = null;\n      try {\n        QueryRequest req = new QueryRequest(params);\n        response = s.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Throwable t) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", t);\n      }\n    }\n\n","bugFix":["f2425308ebcd91b538a601df94ae1551ccaab2bb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":6,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      SolrServer s = new HttpSolrServer(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\"); \n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n        // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n        // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n      \n\n      NamedList response;\n      InputStream is = null;\n      try {\n        QueryRequest req = new QueryRequest(params);\n        response = s.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Throwable t) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", t);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      SolrServer s = new HttpSolrServer(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\"); \n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n        // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n        // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n      \n\n      NamedList response;\n      InputStream is = null;\n      try {\n        QueryRequest req = new QueryRequest(params);\n        response = s.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Throwable t) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.LocalFsFileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      SolrServer s = new HttpSolrServer(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\"); \n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n        // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n        // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n      \n\n      NamedList response;\n      InputStream is = null;\n      try {\n        QueryRequest req = new QueryRequest(params);\n        response = s.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Throwable t) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", t);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      SolrServer s = new HttpSolrServer(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\"); \n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n        // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n        // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n      \n\n      NamedList response;\n      InputStream is = null;\n      try {\n        QueryRequest req = new QueryRequest(params);\n        response = s.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Throwable t) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":6,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      SolrServer s = new HttpSolrServer(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\"); \n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n        // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n        // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n      \n\n      NamedList response;\n      InputStream is = null;\n      try {\n        QueryRequest req = new QueryRequest(params);\n        response = s.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Throwable t) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", t);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      SolrServer s = new HttpSolrServer(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\"); \n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n        // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n        // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n      \n\n      NamedList response;\n      InputStream is = null;\n      try {\n        QueryRequest req = new QueryRequest(params);\n        response = s.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Throwable t) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.LocalFsFileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      SolrServer s = new HttpSolrServer(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\"); \n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n        // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n        // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n      \n\n      NamedList response;\n      InputStream is = null;\n      try {\n        QueryRequest req = new QueryRequest(params);\n        response = s.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Throwable t) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", t);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      SolrServer s = new HttpSolrServer(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\"); \n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n        // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n        // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n      \n\n      NamedList response;\n      InputStream is = null;\n      try {\n        QueryRequest req = new QueryRequest(params);\n        response = s.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Throwable t) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      try {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      } finally {\n        client.shutdown();\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\"); \n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n        // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n        // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n      \n\n      NamedList response;\n      InputStream is = null;\n      \n      HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      try {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      } finally {\n        client.shutdown();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null);  //XXX use shardhandler\n      try {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      } finally {\n        client.shutdown();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":5,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["c26f00b574427b55127e869b935845554afde1fa"],"9f6b79013f14f939d4bc18ac09c457d1d1796fd2":["f2425308ebcd91b538a601df94ae1551ccaab2bb"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["9f6b79013f14f939d4bc18ac09c457d1d1796fd2"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["cc3b13b430571c2e169f98fe38e1e7666f88522d","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["9f6b79013f14f939d4bc18ac09c457d1d1796fd2","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"c26f00b574427b55127e869b935845554afde1fa":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"9f6b79013f14f939d4bc18ac09c457d1d1796fd2":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["f2425308ebcd91b538a601df94ae1551ccaab2bb","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["dea8e36e8c36d610840396c282a5affe3f722f4e","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["9f6b79013f14f939d4bc18ac09c457d1d1796fd2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","817882884229bace7dc5d1b75f6b0e4aa1e47122","fe33227f6805edab2036cbb80645cc4e2d1fa424","5b6fdfce35d0adb18836cf8711abe487a934df33","a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}