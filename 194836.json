{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int termNumber = fcsi.binarySearchLookup(terms[i], spare);\n      if (termNumber > 0) {\n        bits.set(termNumber);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        return bits.get(fcsi.getOrd(doc));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int termNumber = fcsi.binarySearchLookup(terms[i], spare);\n      if (termNumber > 0) {\n        bits.set(termNumber);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        return bits.get(fcsi.getOrd(doc));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f7cc7c185412da66c1d0089d9e75da01329a00","date":1353364851,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.binarySearchLookup(terms[i], spare);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int termNumber = fcsi.binarySearchLookup(terms[i], spare);\n      if (termNumber > 0) {\n        bits.set(termNumber);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        return bits.get(fcsi.getOrd(doc));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final SortedDocValues fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.getValueCount());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.lookupTerm(terms[i], spare);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.binarySearchLookup(terms[i], spare);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b","date":1359664357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final SortedDocValues fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.getValueCount());\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.lookupTerm(terms[i]);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final SortedDocValues fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.getValueCount());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.lookupTerm(terms[i], spare);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final SortedDocValues fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.getValueCount());\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.lookupTerm(terms[i]);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final FieldCache.DocTermsIndex fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.numOrd());\n    final BytesRef spare = new BytesRef();\n    for (int i=0;i<terms.length;i++) {\n      int termNumber = fcsi.binarySearchLookup(terms[i], spare);\n      if (termNumber > 0) {\n        bits.set(termNumber);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        return bits.get(fcsi.getOrd(doc));\n      }\n    };\n  }\n\n","bugFix":["6620df8541b174097b1133a4fc370adb2e570524","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final SortedDocValues fcsi = DocValues.getSorted(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.getValueCount());\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.lookupTerm(terms[i]);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final SortedDocValues fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.getValueCount());\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.lookupTerm(terms[i]);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final SortedDocValues fcsi = DocValues.getSorted(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.getValueCount());\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.lookupTerm(terms[i]);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final SortedDocValues fcsi = DocValues.getSorted(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.getValueCount());\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.lookupTerm(terms[i]);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final SortedDocValues fcsi = DocValues.getSorted(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.getValueCount());\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.lookupTerm(terms[i]);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final SortedDocValues fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.getValueCount());\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.lookupTerm(terms[i]);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheTermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final SortedDocValues fcsi = DocValues.getSorted(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.getValueCount());\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.lookupTerm(terms[i]);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final SortedDocValues fcsi = getFieldCache().getTermsIndex(context.reader(), field);\n    final FixedBitSet bits = new FixedBitSet(fcsi.getValueCount());\n    for (int i=0;i<terms.length;i++) {\n      int ord = fcsi.lookupTerm(terms[i]);\n      if (ord >= 0) {\n        bits.set(ord);\n      }\n    }\n    return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n      @Override\n      protected final boolean matchDoc(int doc) {\n        int ord = fcsi.getOrd(doc);\n        if (ord == -1) {\n          // missing\n          return false;\n        } else {\n          return bits.get(ord);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9274621789ce990dbfef455dabdf026bb3184821":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["d4d69c535930b5cce125cff868d40f6373dc27d4","9274621789ce990dbfef455dabdf026bb3184821"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["29f7cc7c185412da66c1d0089d9e75da01329a00"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"56572ec06f1407c066d6b7399413178b33176cd8":["d4d69c535930b5cce125cff868d40f6373dc27d4","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","29f7cc7c185412da66c1d0089d9e75da01329a00"],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["9274621789ce990dbfef455dabdf026bb3184821"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}