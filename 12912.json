{"path":"solr/test-framework/src/java/org/apache/solr/cloud/StoppableSearchThread#run().mjava","commits":[{"id":"98287baa2c8d136e801f366a73e27a23285b7b98","date":1427241813,"type":0,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/StoppableSearchThread#run().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void run() {\n    Random random = LuceneTestCase.random();\n    int numSearches = 0;\n\n    while (true && !stop) {\n      numSearches++;\n      try {\n        //to come to the aid of their country.\n        cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n      } catch (Exception e) {\n        System.err.println(\"QUERY REQUEST FAILED:\");\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE:\");\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        queryFails.incrementAndGet();\n      }\n      try {\n        Thread.sleep(random.nextInt(4000) + 300);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    log.info(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/StoppableSearchThread#run().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void run() {\n    Random random = LuceneTestCase.random();\n    int numSearches = 0;\n\n    while (true && !stop) {\n      numSearches++;\n      try {\n        //to come to the aid of their country.\n        cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n      } catch (Exception e) {\n        System.err.println(\"QUERY REQUEST FAILED:\");\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE:\");\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        queryFails.incrementAndGet();\n      }\n      try {\n        Thread.sleep(random.nextInt(4000) + 300);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    log.info(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/StoppableSearchThread#run().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/StoppableSearchThread#run().mjava","sourceNew":"  @Override\n  public void run() {\n    Random random = LuceneTestCase.random();\n    int numSearches = 0;\n\n    while (!stop) {\n      numSearches++;\n      try {\n        //to come to the aid of their country.\n        cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n      } catch (Exception e) {\n        System.err.println(\"QUERY REQUEST FAILED:\");\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE:\");\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        queryFails.incrementAndGet();\n      }\n      try {\n        Thread.sleep(random.nextInt(4000) + 300);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    log.info(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    Random random = LuceneTestCase.random();\n    int numSearches = 0;\n\n    while (true && !stop) {\n      numSearches++;\n      try {\n        //to come to the aid of their country.\n        cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n      } catch (Exception e) {\n        System.err.println(\"QUERY REQUEST FAILED:\");\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE:\");\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        queryFails.incrementAndGet();\n      }\n      try {\n        Thread.sleep(random.nextInt(4000) + 300);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    log.info(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/StoppableSearchThread#run().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/StoppableSearchThread#run().mjava","sourceNew":"  @Override\n  public void run() {\n    Random random = LuceneTestCase.random();\n    int numSearches = 0;\n\n    while (!stop) {\n      numSearches++;\n      try {\n        //to come to the aid of their country.\n        cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n      } catch (Exception e) {\n        System.err.println(\"QUERY REQUEST FAILED:\");\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE:\");\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        queryFails.incrementAndGet();\n      }\n      try {\n        Thread.sleep(random.nextInt(4000) + 300);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    log.info(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    Random random = LuceneTestCase.random();\n    int numSearches = 0;\n\n    while (true && !stop) {\n      numSearches++;\n      try {\n        //to come to the aid of their country.\n        cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n      } catch (Exception e) {\n        System.err.println(\"QUERY REQUEST FAILED:\");\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE:\");\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        queryFails.incrementAndGet();\n      }\n      try {\n        Thread.sleep(random.nextInt(4000) + 300);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    log.info(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/StoppableSearchThread#run().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/StoppableSearchThread#run().mjava","sourceNew":"  @Override\n  public void run() {\n    Random random = LuceneTestCase.random();\n    int numSearches = 0;\n\n    while (!stop) {\n      numSearches++;\n      try {\n        //to come to the aid of their country.\n        cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n      } catch (Exception e) {\n        System.err.println(\"QUERY REQUEST FAILED:\");\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE:\");\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        queryFails.incrementAndGet();\n      }\n      try {\n        Thread.sleep(random.nextInt(4000) + 300);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    log.info(\"num searches done: {} with {} fails\", numSearches, queryFails);\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    Random random = LuceneTestCase.random();\n    int numSearches = 0;\n\n    while (!stop) {\n      numSearches++;\n      try {\n        //to come to the aid of their country.\n        cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n      } catch (Exception e) {\n        System.err.println(\"QUERY REQUEST FAILED:\");\n        e.printStackTrace();\n        if (e instanceof SolrServerException) {\n          System.err.println(\"ROOT CAUSE:\");\n          ((SolrServerException) e).getRootCause().printStackTrace();\n        }\n        queryFails.incrementAndGet();\n      }\n      try {\n        Thread.sleep(random.nextInt(4000) + 300);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n\n    log.info(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["98287baa2c8d136e801f366a73e27a23285b7b98","61c45e99cf6676da48f19d7511c73712ad39402b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","98287baa2c8d136e801f366a73e27a23285b7b98"],"61c45e99cf6676da48f19d7511c73712ad39402b":["98287baa2c8d136e801f366a73e27a23285b7b98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98287baa2c8d136e801f366a73e27a23285b7b98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","98287baa2c8d136e801f366a73e27a23285b7b98"],"98287baa2c8d136e801f366a73e27a23285b7b98":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","61c45e99cf6676da48f19d7511c73712ad39402b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}