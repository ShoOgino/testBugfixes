{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","commits":[{"id":"1ab30d275f8bc9cc015c44bc2932d17cc0bf9d85","date":1400530193,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"/dev/null","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene46\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1228ae01d4947434af33f754465a583fb93c23e5","date":1400530612,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":null,"sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene46\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73cb3e2c71d5364fdb924c39cf9d7d1a25991413","date":1400838672,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"/dev/null","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene46\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene49\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene46\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["73cb3e2c71d5364fdb924c39cf9d7d1a25991413"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene49\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene49\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene410\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene49\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // ensure we produce enough of our exceptions\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene410\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene410\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77a95c23448dfb3fc21d84c41e9f1c72266a9c5b","date":1409387174,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // ensure we produce enough of our exceptions\n      dir.setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene410\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // ensure we produce enough of our exceptions\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene410\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // ensure we produce enough of our exceptions\n      dir.setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene410\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // ensure we produce enough of our exceptions\n      dir.setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene410\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      int failCount;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        // Need to throw exc three times so the logic in\n        // SegmentInfos.FindSegmentsFile \"really believes\" us:\n        if (failCount >= 3) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failCount++;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"941b7027a51547b0a38d711bc08ec354f9e2e4a7","date":1411394279,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // ensure we produce enough of our exceptions\n      dir.setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // ensure we produce enough of our exceptions\n      dir.setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene410\"));\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // ensure we produce enough of our exceptions\n      dir.setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // ensure we produce enough of our exceptions\n      dir.setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // ensure we produce enough of our exceptions\n      dir.setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // ensure we produce enough of our exceptions\n      dir.setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    expectThrows(FakeIOException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    try {\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      //System.out.println(\"got \" + r2);\n      fail(\"didn't hit exception\");\n    } catch (FakeIOException fio) {\n      // expected\n    }\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["73cb3e2c71d5364fdb924c39cf9d7d1a25991413"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    expectThrows(FakeIOException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.count(new TermQuery(new Term(\"id\", \"id\"))));\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    expectThrows(FakeIOException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    expectThrows(FakeIOException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.count(new TermQuery(new Term(\"id\", \"id\"))));\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    expectThrows(FakeIOException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new TermQuery(new Term(\"id\", \"id\")), 1).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2916966cc9815e973c01452a0d76c98c5e0d0926","date":1577444040,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        if (callStackContainsAnyOf(\"readLiveDocs\")) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: now fail; exc:\");\n            new Throwable().printStackTrace(System.out);\n          }\n          failed = true;\n          throw new FakeIOException();\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    expectThrows(FakeIOException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.count(new TermQuery(new Term(\"id\", \"id\"))));\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    expectThrows(FakeIOException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.count(new TermQuery(new Term(\"id\", \"id\"))));\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec73c5617c177b1d81ddfe04bbff1d08fccecc","date":1577456244,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testOverDecRefDuringReopen().mjava","sourceNew":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        if (callStackContainsAnyOf(\"readLiveDocs\")) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: now fail; exc:\");\n            new Throwable().printStackTrace(System.out);\n          }\n          failed = true;\n          throw new FakeIOException();\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    expectThrows(FakeIOException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.count(new TermQuery(new Term(\"id\", \"id\"))));\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOverDecRefDuringReopen() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"id\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"id2\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // Open reader w/ one segment w/ 2 docs:\n    DirectoryReader r = DirectoryReader.open(dir);\n\n    // Delete 1 doc from the segment:\n    //System.out.println(\"TEST: now delete\");\n    w.deleteDocuments(new Term(\"id\", \"id\"));\n    //System.out.println(\"TEST: now commit\");\n    w.commit();\n\n    // Fail when reopen tries to open the live docs file:\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n\n      boolean failed;\n\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (failed) {\n          return;\n        }\n        //System.out.println(\"failOn: \");\n        //new Throwable().printStackTrace(System.out);\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readLiveDocs\".equals(trace[i].getMethodName())) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now fail; exc:\");\n              new Throwable().printStackTrace(System.out);\n            }\n            failed = true;\n            throw new FakeIOException();\n          }\n        }\n      }\n    });\n\n    // Now reopen:\n    //System.out.println(\"TEST: now reopen\");\n    expectThrows(FakeIOException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n    \n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.count(new TermQuery(new Term(\"id\", \"id\"))));\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a207d19eac354d649c3f0e2cce070017c78125e":["941b7027a51547b0a38d711bc08ec354f9e2e4a7","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["941b7027a51547b0a38d711bc08ec354f9e2e4a7","b470f36a9372c97283360b1304eacbde22df6c0d"],"05fe562aa248790944d43cdd478f512572835ba0":["5a207d19eac354d649c3f0e2cce070017c78125e"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["470eaac3a77cf637b62126a5408b178d7be93eb1"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["77a95c23448dfb3fc21d84c41e9f1c72266a9c5b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["05fe562aa248790944d43cdd478f512572835ba0","470eaac3a77cf637b62126a5408b178d7be93eb1"],"77a95c23448dfb3fc21d84c41e9f1c72266a9c5b":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"b470f36a9372c97283360b1304eacbde22df6c0d":["941b7027a51547b0a38d711bc08ec354f9e2e4a7","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"73cb3e2c71d5364fdb924c39cf9d7d1a25991413":["1228ae01d4947434af33f754465a583fb93c23e5"],"1228ae01d4947434af33f754465a583fb93c23e5":["1ab30d275f8bc9cc015c44bc2932d17cc0bf9d85"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["73cb3e2c71d5364fdb924c39cf9d7d1a25991413"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["941b7027a51547b0a38d711bc08ec354f9e2e4a7"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["05fe562aa248790944d43cdd478f512572835ba0"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"1ab30d275f8bc9cc015c44bc2932d17cc0bf9d85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":["470eaac3a77cf637b62126a5408b178d7be93eb1","2916966cc9815e973c01452a0d76c98c5e0d0926"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2916966cc9815e973c01452a0d76c98c5e0d0926"],"941b7027a51547b0a38d711bc08ec354f9e2e4a7":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"]},"commit2Childs":{"5a207d19eac354d649c3f0e2cce070017c78125e":["05fe562aa248790944d43cdd478f512572835ba0"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"05fe562aa248790944d43cdd478f512572835ba0":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["77a95c23448dfb3fc21d84c41e9f1c72266a9c5b"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["941b7027a51547b0a38d711bc08ec354f9e2e4a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"77a95c23448dfb3fc21d84c41e9f1c72266a9c5b":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ab30d275f8bc9cc015c44bc2932d17cc0bf9d85"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"73cb3e2c71d5364fdb924c39cf9d7d1a25991413":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"1228ae01d4947434af33f754465a583fb93c23e5":["73cb3e2c71d5364fdb924c39cf9d7d1a25991413"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["2916966cc9815e973c01452a0d76c98c5e0d0926","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","94ec73c5617c177b1d81ddfe04bbff1d08fccecc"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"1ab30d275f8bc9cc015c44bc2932d17cc0bf9d85":["1228ae01d4947434af33f754465a583fb93c23e5"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":[],"941b7027a51547b0a38d711bc08ec354f9e2e4a7":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}