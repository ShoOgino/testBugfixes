{"path":"solr/core/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d0561cea94adff1867218e77bb763c7583be279","date":1324334341,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationComparatorSource#newComparator(String,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      private final int[] values = new int[numHits];\n      private int bottomVal;\n      private TermsEnum termsEnum;\n      private DocsEnum docsEnum;\n      Set<String> seen = new HashSet<String>(elevations.ids.size());\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        if (ordSet.size() > 0) {\n          int slot = ordSet.find(doc);\n          if (slot >= 0) {\n            BytesRef id = termValues[slot];\n            Integer prio = elevations.priority.get(id);\n            return prio == null ? 0 : prio.intValue();\n          }\n        }\n        return 0;\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        //convert the ids to Lucene doc ids, the ordSet and termValues needs to be the same size as the number of elevation docs we have\n        ordSet.clear();\n        Fields fields = context.reader.fields();\n        Terms terms = fields.terms(fieldname);\n        termsEnum = terms.iterator(termsEnum);\n        BytesRef term = new BytesRef();\n\n        for (String id : elevations.ids) {\n          term.copyChars(id);\n          if (seen.contains(id) == false  && termsEnum.seekExact(term, false)) {\n            docsEnum = termsEnum.docs(null, docsEnum, false);\n            if (docsEnum != null) {\n              int docId = docsEnum.nextDoc();\n              termValues[ordSet.put(docId)] = BytesRef.deepCopyOf(term);\n              seen.add(id);\n            }\n          }\n        }\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d0561cea94adff1867218e77bb763c7583be279":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d0561cea94adff1867218e77bb763c7583be279"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1d0561cea94adff1867218e77bb763c7583be279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1d0561cea94adff1867218e77bb763c7583be279":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}