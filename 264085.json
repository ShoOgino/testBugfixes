{"path":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","commits":[{"id":"561c2351baf6dd64061addef891359954c1a7faa","date":1462788487,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    String people = \"people\";\n    int numPeopleShards;\n    createCollection(people, atLeast(1), numPeopleShards = atLeast(2), numPeopleShards);\n\n    \n    String depts = \"departments\";\n    int numDeptsShards;\n    createCollection(depts, atLeast(1), numDeptsShards = atLeast(2), numDeptsShards);\n\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cloudClient.request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    String people = \"people\";\n    int numPeopleShards;\n    createCollection(people, atLeast(1), numPeopleShards = atLeast(2), numPeopleShards);\n\n    \n    String depts = \"departments\";\n    int numDeptsShards;\n    createCollection(depts, atLeast(1), numDeptsShards = atLeast(2), numDeptsShards);\n\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cloudClient.request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7295879e227fa2d015ecbef682499d10d151fc2","date":1463171030,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    final String people = \"people\";\n    createCollection(people, 2, 1, 10);\n\n    \n    final String depts = \"departments\";\n    createCollection(depts, 2, 1, 10);\n\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cloudClient.request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    String people = \"people\";\n    int numPeopleShards;\n    createCollection(people, atLeast(1), numPeopleShards = atLeast(2), numPeopleShards);\n\n    \n    String depts = \"departments\";\n    int numDeptsShards;\n    createCollection(depts, atLeast(1), numDeptsShards = atLeast(2), numDeptsShards);\n\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cloudClient.request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    final String people = \"people\";\n    createCollection(people, 2, 1, 10);\n\n    \n    final String depts = \"departments\";\n    createCollection(depts, 2, 1, 10);\n\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cloudClient.request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    String people = \"people\";\n    int numPeopleShards;\n    createCollection(people, atLeast(1), numPeopleShards = atLeast(2), numPeopleShards);\n\n    \n    String depts = \"departments\";\n    int numDeptsShards;\n    createCollection(depts, atLeast(1), numDeptsShards = atLeast(2), numDeptsShards);\n\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cloudClient.request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    final String people = \"people\";\n    createCollection(people, 2, 1, 10);\n\n    \n    final String depts = \"departments\";\n    createCollection(depts, 2, 1, 10);\n\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cloudClient.request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da83c90417e805f2b355afc2d79f4d2b2ce27469","date":1464346037,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(client.request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    final String people = \"people\";\n    createCollection(people, 2, 1, 10);\n\n    \n    final String depts = \"departments\";\n    createCollection(depts, 2, 1, 10);\n\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cloudClient.request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a95b7b666da79218aa9365b9d9adcb42351ee3","date":1464382787,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(client.request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    final String people = \"people\";\n    createCollection(people, 2, 1, 10);\n\n    \n    final String depts = \"departments\";\n    createCollection(depts, 2, 1, 10);\n\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cloudClient.request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    final String people = \"people\";\n    createCollection(people, 2, 1, 10);\n\n    \n    final String depts = \"departments\";\n    createCollection(depts, 2, 1, 10);\n\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cloudClient.request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc22052be612d5e8dea026ce83d2e52a99c504eb","date":1482651391,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\"+(differentUniqueId?\",id:notid\":\"\"),\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          differentUniqueId ? \"depts.distrib.singlePass\":\"notnecessary\",\"true\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\",\n          random().nextBoolean()?\"depts.wt\":\"whatever\",anyWt(),\n          random().nextBoolean()?\"wt\":\"whatever\",anyWt()}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      int engineerCount = 0;\n      int supportCount = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          String actual = (String) deptDoc.get(\"text_t\");\n          assertTrue(deptDoc + \"should be either \"+engineering +\" or \"+support,\n              (engineering.equals(actual) && ++engineerCount>0) || \n                   (support.equals(actual) && ++supportCount>0));\n        }\n      }\n      assertEquals(hits.toString(), engineerCount, supportCount); \n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\"+(differentUniqueId?\",id:notid\":\"\"),\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          differentUniqueId ? \"depts.distrib.singlePass\":\"notnecessary\",\"true\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\",\n          random().nextBoolean()?\"depts.wt\":\"whatever\",anyWt(),\n          random().nextBoolean()?\"wt\":\"whatever\",anyWt()}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      int engineerCount = 0;\n      int supportCount = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          String actual = (String) deptDoc.get(\"text_t\");\n          assertTrue(deptDoc + \"should be either \"+engineering +\" or \"+support,\n              (engineering.equals(actual) && ++engineerCount>0) || \n                   (support.equals(actual) && ++supportCount>0));\n        }\n      }\n      assertEquals(hits.toString(), engineerCount, supportCount); \n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\",\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      Map<String,String> engText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys develop stuff\");\n        }\n      };\n      Map<String,String> suppText = new HashMap<String,String>() {\n        { put(\"text_t\", \"These guys help customers\");\n        }\n      };\n      \n      int engineer = 0;\n      int support = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          assertTrue(deptDoc + \"should be either \"+engText +\" or \"+suppText,\n              (engText.equals(deptDoc) && ++engineer>0) || \n                   (suppText.equals(deptDoc) && ++support>0));\n        }\n      }\n      assertEquals(hits.toString(), engineer, support); \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0acd5cf26e179fa6c0650a6348a8913718fc98a7","date":1523271967,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws Exception {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    final ModifiableSolrParams params = params(\n        new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\",\n            \"rows\",\"\" + peopleMultiplier,\n            \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\",\n            \"depts.fl\",\"text_t\"+(differentUniqueId?\",id:notid\":\"\"),\n            \"depts.indent\",\"true\",\n            \"depts.collection\",\"departments\",\n            differentUniqueId ? \"depts.distrib.singlePass\":\"notnecessary\",\"true\",\n            \"depts.rows\",\"\"+(deptMultiplier*2),\n            \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\",\n            random().nextBoolean()?\"depts.wt\":\"whatever\",anyWt(),\n            random().nextBoolean()?\"wt\":\"whatever\",anyWt()});\n\n    final SolrDocumentList hits;\n    {\n      final QueryRequest qr = new QueryRequest(params);\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people+\",\"+depts));\n      hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      int engineerCount = 0;\n      int supportCount = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          String actual = (String) deptDoc.get(\"text_t\");\n          assertTrue(deptDoc + \"should be either \"+engineering +\" or \"+support,\n              (engineering.equals(actual) && ++engineerCount>0) || \n                   (support.equals(actual) && ++supportCount>0));\n        }\n      }\n      assertEquals(hits.toString(), engineerCount, supportCount); \n    }\n\n    params.set(\"wt\", \"json\");\n    final URL node = new URL(cluster.getRandomJetty(random()).getBaseUrl().toString()\n     +\"/\"+people+\"/select\"+params.toQueryString());\n\n    try(final InputStream jsonResponse = node.openStream()){\n      final ByteArrayOutputStream outBuffer = new ByteArrayOutputStream();\n      IOUtils.copy(jsonResponse, outBuffer);\n\n      final Object expected = ((SolrDocumentList) hits.get(0).getFieldValue(\"depts\")).get(0).get(\"text_t\");\n      final String err = JSONTestUtil.match(\"/response/docs/[0]/depts/docs/[0]/text_t\"\n          ,outBuffer.toString(Charset.forName(\"UTF-8\").toString()),\n          \"\\\"\"+expected+\"\\\"\");\n      assertNull(err,err);\n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\"+(differentUniqueId?\",id:notid\":\"\"),\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          differentUniqueId ? \"depts.distrib.singlePass\":\"notnecessary\",\"true\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\",\n          random().nextBoolean()?\"depts.wt\":\"whatever\",anyWt(),\n          random().nextBoolean()?\"wt\":\"whatever\",anyWt()}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      int engineerCount = 0;\n      int supportCount = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          String actual = (String) deptDoc.get(\"text_t\");\n          assertTrue(deptDoc + \"should be either \"+engineering +\" or \"+support,\n              (engineering.equals(actual) && ++engineerCount>0) || \n                   (support.equals(actual) && ++supportCount>0));\n        }\n      }\n      assertEquals(hits.toString(), engineerCount, supportCount); \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws Exception {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    final ModifiableSolrParams params = params(\n        new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\",\n            \"rows\",\"\" + peopleMultiplier,\n            \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\",\n            \"depts.fl\",\"text_t\"+(differentUniqueId?\",id:notid\":\"\"),\n            \"depts.indent\",\"true\",\n            \"depts.collection\",\"departments\",\n            differentUniqueId ? \"depts.distrib.singlePass\":\"notnecessary\",\"true\",\n            \"depts.rows\",\"\"+(deptMultiplier*2),\n            \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\",\n            random().nextBoolean()?\"depts.wt\":\"whatever\",anyWt(),\n            random().nextBoolean()?\"wt\":\"whatever\",anyWt()});\n\n    final SolrDocumentList hits;\n    {\n      final QueryRequest qr = new QueryRequest(params);\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people+\",\"+depts));\n      hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      int engineerCount = 0;\n      int supportCount = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          String actual = (String) deptDoc.get(\"text_t\");\n          assertTrue(deptDoc + \"should be either \"+engineering +\" or \"+support,\n              (engineering.equals(actual) && ++engineerCount>0) || \n                   (support.equals(actual) && ++supportCount>0));\n        }\n      }\n      assertEquals(hits.toString(), engineerCount, supportCount); \n    }\n\n    params.set(\"wt\", \"json\");\n    final URL node = new URL(cluster.getRandomJetty(random()).getBaseUrl().toString()\n     +\"/\"+people+\"/select\"+params.toQueryString());\n\n    try(final InputStream jsonResponse = node.openStream()){\n      final ByteArrayOutputStream outBuffer = new ByteArrayOutputStream();\n      IOUtils.copy(jsonResponse, outBuffer);\n\n      final Object expected = ((SolrDocumentList) hits.get(0).getFieldValue(\"depts\")).get(0).get(\"text_t\");\n      final String err = JSONTestUtil.match(\"/response/docs/[0]/depts/docs/[0]/text_t\"\n          ,outBuffer.toString(Charset.forName(\"UTF-8\").toString()),\n          \"\\\"\"+expected+\"\\\"\");\n      assertNull(err,err);\n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws SolrServerException, IOException {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    {\n     \n      final QueryRequest  qr = new QueryRequest(params(\n          new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n          \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n          \"rows\",\"\" + peopleMultiplier,\n          \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n          \"depts.fl\",\"text_t\"+(differentUniqueId?\",id:notid\":\"\"),\n          \"depts.indent\",\"true\",\n          \"depts.collection\",\"departments\",\n          differentUniqueId ? \"depts.distrib.singlePass\":\"notnecessary\",\"true\",\n          \"depts.rows\",\"\"+(deptMultiplier*2),\n          \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\",\n          random().nextBoolean()?\"depts.wt\":\"whatever\",anyWt(),\n          random().nextBoolean()?\"wt\":\"whatever\",anyWt()}));\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people));\n      final SolrDocumentList hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      int engineerCount = 0;\n      int supportCount = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          String actual = (String) deptDoc.get(\"text_t\");\n          assertTrue(deptDoc + \"should be either \"+engineering +\" or \"+support,\n              (engineering.equals(actual) && ++engineerCount>0) || \n                   (support.equals(actual) && ++supportCount>0));\n        }\n      }\n      assertEquals(hits.toString(), engineerCount, supportCount); \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fa84c7e2108236b696387b4bc6767919f26e315","date":1523343905,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws Exception {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    final ModifiableSolrParams params = params(\n        new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\",\n            \"rows\",\"\" + peopleMultiplier,\n            \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\",\n            \"depts.fl\",\"text_t\"+(differentUniqueId?\",id:notid\":\"\"),\n            \"depts.sort\", \"dept_id_i desc\",\n            \"depts.indent\",\"true\",\n            \"depts.collection\",\"departments\",\n            differentUniqueId ? \"depts.distrib.singlePass\":\"notnecessary\",\"true\",\n            \"depts.rows\",\"\"+(deptMultiplier*2),\n            \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\",\n            random().nextBoolean()?\"depts.wt\":\"whatever\",anyWt(),\n            random().nextBoolean()?\"wt\":\"whatever\",anyWt()});\n\n    final SolrDocumentList hits;\n    {\n      final QueryRequest qr = new QueryRequest(params);\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people+\",\"+depts));\n      hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      int engineerCount = 0;\n      int supportCount = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          String actual = (String) deptDoc.get(\"text_t\");\n          assertTrue(deptDoc + \"should be either \"+engineering +\" or \"+support,\n              (engineering.equals(actual) && ++engineerCount>0) || \n                   (support.equals(actual) && ++supportCount>0));\n        }\n      }\n      assertEquals(hits.toString(), engineerCount, supportCount); \n    }\n\n    params.set(\"wt\", \"json\");\n    final URL node = new URL(cluster.getRandomJetty(random()).getBaseUrl().toString()\n     +\"/\"+people+\"/select\"+params.toQueryString());\n\n    try(final InputStream jsonResponse = node.openStream()){\n      final ByteArrayOutputStream outBuffer = new ByteArrayOutputStream();\n      IOUtils.copy(jsonResponse, outBuffer);\n\n      final Object expected = ((SolrDocumentList) hits.get(0).getFieldValue(\"depts\")).get(0).get(\"text_t\");\n      final String err = JSONTestUtil.match(\"/response/docs/[0]/depts/docs/[0]/text_t\"\n          ,outBuffer.toString(Charset.forName(\"UTF-8\").toString()),\n          \"\\\"\"+expected+\"\\\"\");\n      assertNull(err,err);\n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws Exception {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    final ModifiableSolrParams params = params(\n        new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\",\n            \"rows\",\"\" + peopleMultiplier,\n            \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\",\n            \"depts.fl\",\"text_t\"+(differentUniqueId?\",id:notid\":\"\"),\n            \"depts.indent\",\"true\",\n            \"depts.collection\",\"departments\",\n            differentUniqueId ? \"depts.distrib.singlePass\":\"notnecessary\",\"true\",\n            \"depts.rows\",\"\"+(deptMultiplier*2),\n            \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\",\n            random().nextBoolean()?\"depts.wt\":\"whatever\",anyWt(),\n            random().nextBoolean()?\"wt\":\"whatever\",anyWt()});\n\n    final SolrDocumentList hits;\n    {\n      final QueryRequest qr = new QueryRequest(params);\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people+\",\"+depts));\n      hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      int engineerCount = 0;\n      int supportCount = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          String actual = (String) deptDoc.get(\"text_t\");\n          assertTrue(deptDoc + \"should be either \"+engineering +\" or \"+support,\n              (engineering.equals(actual) && ++engineerCount>0) || \n                   (support.equals(actual) && ++supportCount>0));\n        }\n      }\n      assertEquals(hits.toString(), engineerCount, supportCount); \n    }\n\n    params.set(\"wt\", \"json\");\n    final URL node = new URL(cluster.getRandomJetty(random()).getBaseUrl().toString()\n     +\"/\"+people+\"/select\"+params.toQueryString());\n\n    try(final InputStream jsonResponse = node.openStream()){\n      final ByteArrayOutputStream outBuffer = new ByteArrayOutputStream();\n      IOUtils.copy(jsonResponse, outBuffer);\n\n      final Object expected = ((SolrDocumentList) hits.get(0).getFieldValue(\"depts\")).get(0).get(\"text_t\");\n      final String err = JSONTestUtil.match(\"/response/docs/[0]/depts/docs/[0]/text_t\"\n          ,outBuffer.toString(Charset.forName(\"UTF-8\").toString()),\n          \"\\\"\"+expected+\"\\\"\");\n      assertNull(err,err);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"431c2627ab600554864fa78f5e76abef81faa42d","date":1523357854,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformerDistrib#test().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws Exception {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    final ModifiableSolrParams params = params(\n        new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\",\n            \"rows\",\"\" + peopleMultiplier,\n            \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\",\n            \"depts.fl\",\"text_t\"+(differentUniqueId?\",id:notid\":\"\"),\n            \"depts.sort\", \"dept_id_i desc\",\n            \"depts.indent\",\"true\",\n            \"depts.collection\",\"departments\",\n            differentUniqueId ? \"depts.distrib.singlePass\":\"notnecessary\",\"true\",\n            \"depts.rows\",\"\"+(deptMultiplier*2),\n            \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\",\n            random().nextBoolean()?\"depts.wt\":\"whatever\",anyWt(),\n            random().nextBoolean()?\"wt\":\"whatever\",anyWt()});\n\n    final SolrDocumentList hits;\n    {\n      final QueryRequest qr = new QueryRequest(params);\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people+\",\"+depts));\n      hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      int engineerCount = 0;\n      int supportCount = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          String actual = (String) deptDoc.get(\"text_t\");\n          assertTrue(deptDoc + \"should be either \"+engineering +\" or \"+support,\n              (engineering.equals(actual) && ++engineerCount>0) || \n                   (support.equals(actual) && ++supportCount>0));\n        }\n      }\n      assertEquals(hits.toString(), engineerCount, supportCount); \n    }\n\n    params.set(\"wt\", \"json\");\n    final URL node = new URL(cluster.getRandomJetty(random()).getBaseUrl().toString()\n     +\"/\"+people+\"/select\"+params.toQueryString());\n\n    try(final InputStream jsonResponse = node.openStream()){\n      final ByteArrayOutputStream outBuffer = new ByteArrayOutputStream();\n      IOUtils.copy(jsonResponse, outBuffer);\n\n      final Object expected = ((SolrDocumentList) hits.get(0).getFieldValue(\"depts\")).get(0).get(\"text_t\");\n      final String err = JSONTestUtil.match(\"/response/docs/[0]/depts/docs/[0]/text_t\"\n          ,outBuffer.toString(Charset.forName(\"UTF-8\").toString()),\n          \"\\\"\"+expected+\"\\\"\");\n      assertNull(err,err);\n    }\n    \n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  @Test\n  public void test() throws Exception {\n    int peopleMultiplier = atLeast(1);\n    int deptMultiplier = atLeast(1);\n    \n    createIndex(people, peopleMultiplier, depts, deptMultiplier);\n    \n    Random random1 = random();\n    \n    final ModifiableSolrParams params = params(\n        new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"*,depts:[subquery \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\",\n            \"rows\",\"\" + peopleMultiplier,\n            \"depts.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\",\n            \"depts.fl\",\"text_t\"+(differentUniqueId?\",id:notid\":\"\"),\n            \"depts.indent\",\"true\",\n            \"depts.collection\",\"departments\",\n            differentUniqueId ? \"depts.distrib.singlePass\":\"notnecessary\",\"true\",\n            \"depts.rows\",\"\"+(deptMultiplier*2),\n            \"depts.logParamsList\",\"q,fl,rows,row.dept_ss_dv\",\n            random().nextBoolean()?\"depts.wt\":\"whatever\",anyWt(),\n            random().nextBoolean()?\"wt\":\"whatever\",anyWt()});\n\n    final SolrDocumentList hits;\n    {\n      final QueryRequest qr = new QueryRequest(params);\n      final QueryResponse  rsp = new QueryResponse();\n      rsp.setResponse(cluster.getSolrClient().request(qr, people+\",\"+depts));\n      hits = rsp.getResults();\n      \n      assertEquals(peopleMultiplier, hits.getNumFound());\n      \n      int engineerCount = 0;\n      int supportCount = 0;\n      \n      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {\n        SolrDocument doc = hits.get(res);\n        assertEquals(\"dave\", doc.getFieldValue(\"name_s_dv\"));\n        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue(\"depts\");\n        assertEquals(\"dave works in both depts \"+rsp,\n            deptMultiplier * 2, relDepts.getNumFound());\n        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {\n          SolrDocument deptDoc = relDepts.get(deptN);\n          String actual = (String) deptDoc.get(\"text_t\");\n          assertTrue(deptDoc + \"should be either \"+engineering +\" or \"+support,\n              (engineering.equals(actual) && ++engineerCount>0) || \n                   (support.equals(actual) && ++supportCount>0));\n        }\n      }\n      assertEquals(hits.toString(), engineerCount, supportCount); \n    }\n\n    params.set(\"wt\", \"json\");\n    final URL node = new URL(cluster.getRandomJetty(random()).getBaseUrl().toString()\n     +\"/\"+people+\"/select\"+params.toQueryString());\n\n    try(final InputStream jsonResponse = node.openStream()){\n      final ByteArrayOutputStream outBuffer = new ByteArrayOutputStream();\n      IOUtils.copy(jsonResponse, outBuffer);\n\n      final Object expected = ((SolrDocumentList) hits.get(0).getFieldValue(\"depts\")).get(0).get(\"text_t\");\n      final String err = JSONTestUtil.match(\"/response/docs/[0]/depts/docs/[0]/text_t\"\n          ,outBuffer.toString(Charset.forName(\"UTF-8\").toString()),\n          \"\\\"\"+expected+\"\\\"\");\n      assertNull(err,err);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fa84c7e2108236b696387b4bc6767919f26e315":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"d7295879e227fa2d015ecbef682499d10d151fc2":["561c2351baf6dd64061addef891359954c1a7faa"],"0acd5cf26e179fa6c0650a6348a8913718fc98a7":["cc22052be612d5e8dea026ce83d2e52a99c504eb"],"0ad30c6a479e764150a3316e57263319775f1df2":["561c2351baf6dd64061addef891359954c1a7faa","d7295879e227fa2d015ecbef682499d10d151fc2"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["d470c8182e92b264680e34081b75e70a9f2b3c89","d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"cc22052be612d5e8dea026ce83d2e52a99c504eb":["d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cc22052be612d5e8dea026ce83d2e52a99c504eb"],"da8a02bef7458089240404614139b53c9f875ec7":["d470c8182e92b264680e34081b75e70a9f2b3c89","d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["cc22052be612d5e8dea026ce83d2e52a99c504eb","0acd5cf26e179fa6c0650a6348a8913718fc98a7"],"da83c90417e805f2b355afc2d79f4d2b2ce27469":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"],"d6a95b7b666da79218aa9365b9d9adcb42351ee3":["da83c90417e805f2b355afc2d79f4d2b2ce27469"],"561c2351baf6dd64061addef891359954c1a7faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"431c2627ab600554864fa78f5e76abef81faa42d":["d58e44159788900f4a2113b84463dc3fbbf80f20","1fa84c7e2108236b696387b4bc6767919f26e315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["431c2627ab600554864fa78f5e76abef81faa42d"]},"commit2Childs":{"1fa84c7e2108236b696387b4bc6767919f26e315":["431c2627ab600554864fa78f5e76abef81faa42d"],"d7295879e227fa2d015ecbef682499d10d151fc2":["0ad30c6a479e764150a3316e57263319775f1df2"],"0acd5cf26e179fa6c0650a6348a8913718fc98a7":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cc22052be612d5e8dea026ce83d2e52a99c504eb":["0acd5cf26e179fa6c0650a6348a8913718fc98a7","f03e4bed5023ec3ef93a771b8888cae991cf448d","d58e44159788900f4a2113b84463dc3fbbf80f20"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5b8ee93140fd0efef7e101786e3ed5160a700b5f","da8a02bef7458089240404614139b53c9f875ec7","da83c90417e805f2b355afc2d79f4d2b2ce27469"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"da8a02bef7458089240404614139b53c9f875ec7":[],"d58e44159788900f4a2113b84463dc3fbbf80f20":["1fa84c7e2108236b696387b4bc6767919f26e315","431c2627ab600554864fa78f5e76abef81faa42d"],"da83c90417e805f2b355afc2d79f4d2b2ce27469":["d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed","561c2351baf6dd64061addef891359954c1a7faa"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"561c2351baf6dd64061addef891359954c1a7faa":["d7295879e227fa2d015ecbef682499d10d151fc2","0ad30c6a479e764150a3316e57263319775f1df2","e66a459d38c1c4a2f97128433dab546f683a9fed"],"d6a95b7b666da79218aa9365b9d9adcb42351ee3":["5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cc22052be612d5e8dea026ce83d2e52a99c504eb","da8a02bef7458089240404614139b53c9f875ec7"],"431c2627ab600554864fa78f5e76abef81faa42d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5b8ee93140fd0efef7e101786e3ed5160a700b5f","f03e4bed5023ec3ef93a771b8888cae991cf448d","da8a02bef7458089240404614139b53c9f875ec7","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}