{"path":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","commits":[{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = new SlowMultiReaderWrapper(IndexReader.open(writer));\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = new SlowMultiReaderWrapper(IndexReader.open(writer));\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = new SlowMultiReaderWrapper(IndexReader.open(writer));\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = new SlowMultiReaderWrapper(IndexReader.open(writer));\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = new SlowMultiReaderWrapper(IndexReader.open(writer));\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = new SlowMultiReaderWrapper(IndexReader.open(writer));\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,SimilarityProvider,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, SimilarityProvider similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarityProvider(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarityProvider(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53a31399f2471493d67b19a95c028a74e0113b6a"],"c8323d210478d76a02372693d254b69aac614689":["51c34a3639838887e7997850b6be80f838a4d6f7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"51c34a3639838887e7997850b6be80f838a4d6f7":["53a31399f2471493d67b19a95c028a74e0113b6a"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51c34a3639838887e7997850b6be80f838a4d6f7"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["c8323d210478d76a02372693d254b69aac614689"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","51c34a3639838887e7997850b6be80f838a4d6f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"c8323d210478d76a02372693d254b69aac614689":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"51c34a3639838887e7997850b6be80f838a4d6f7":["c8323d210478d76a02372693d254b69aac614689","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","51c34a3639838887e7997850b6be80f838a4d6f7"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","53a31399f2471493d67b19a95c028a74e0113b6a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}