{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","commits":[{"id":"29191e6ce86bfcd231cd069834a87833fa4079c1","date":1228333111,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","pathOld":"/dev/null","sourceNew":"\tprivate void testRangeSplit(final TrieUtils variant) throws Exception {\n\t\tString field=\"ascfield\"+variant.TRIE_BITS;\n\t\t// 50 random tests, the tests may also return 0 results, if min>max, but this is ok\n\t\tfor (int i=0; i<50; i++) {\n\t\t\tlong lower=(long)(rnd.nextDouble()*10000L);\n\t\t\tlong upper=(long)(rnd.nextDouble()*10000L);\n\t\t\tif (lower>upper) {\n\t\t\t\tlong a=lower; lower=upper; upper=a;\n\t\t\t}\n\t\t\tTrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n\t\t\tTopDocs tTopDocs = searcher.search(tq, 1);\n\t\t\tassertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3766097c9c41a30d67e9b548c62d017abf8e07ac","date":1228770465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","sourceNew":"\tprivate void testRangeSplit(final TrieUtils variant) throws Exception {\n\t\tString field=\"ascfield\"+variant.TRIE_BITS;\n\t\t// 50 random tests\n\t\tfor (int i=0; i<50; i++) {\n\t\t\tlong lower=(long)(rnd.nextDouble()*10000L);\n\t\t\tlong upper=(long)(rnd.nextDouble()*10000L);\n\t\t\tif (lower>upper) {\n\t\t\t\tlong a=lower; lower=upper; upper=a;\n\t\t\t}\n\t\t\tTrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n\t\t\tTopDocs tTopDocs = searcher.search(tq, 1);\n\t\t\tassertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n\t\t}\n\t}\n\n","sourceOld":"\tprivate void testRangeSplit(final TrieUtils variant) throws Exception {\n\t\tString field=\"ascfield\"+variant.TRIE_BITS;\n\t\t// 50 random tests, the tests may also return 0 results, if min>max, but this is ok\n\t\tfor (int i=0; i<50; i++) {\n\t\t\tlong lower=(long)(rnd.nextDouble()*10000L);\n\t\t\tlong upper=(long)(rnd.nextDouble()*10000L);\n\t\t\tif (lower>upper) {\n\t\t\t\tlong a=lower; lower=upper; upper=a;\n\t\t\t}\n\t\t\tTrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n\t\t\tTopDocs tTopDocs = searcher.search(tq, 1);\n\t\t\tassertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef14ec05032a847f9ce1820055c6c29f72d771a","date":1231669514,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","sourceNew":"  private void testRangeSplit(final TrieUtils variant) throws Exception {\n    String field=\"ascfield\"+variant.TRIE_BITS;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L);\n      long upper=(long)(rnd.nextDouble()*10000L);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n    }\n  }\n\n","sourceOld":"\tprivate void testRangeSplit(final TrieUtils variant) throws Exception {\n\t\tString field=\"ascfield\"+variant.TRIE_BITS;\n\t\t// 50 random tests\n\t\tfor (int i=0; i<50; i++) {\n\t\t\tlong lower=(long)(rnd.nextDouble()*10000L);\n\t\t\tlong upper=(long)(rnd.nextDouble()*10000L);\n\t\t\tif (lower>upper) {\n\t\t\t\tlong a=lower; lower=upper; upper=a;\n\t\t\t}\n\t\t\tTrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n\t\t\tTopDocs tTopDocs = searcher.search(tq, 1);\n\t\t\tassertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91724d755098f0c856c612bf56d1edc31044a82","date":1233069324,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","sourceNew":"  private void testRangeSplit(final TrieUtils variant) throws Exception {\n    String field=\"ascfield\"+variant.TRIE_BITS;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L);\n      long upper=(long)(rnd.nextDouble()*10000L);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", tTopDocs.totalHits, upper-lower-1 );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(final TrieUtils variant) throws Exception {\n    String field=\"ascfield\"+variant.TRIE_BITS;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L);\n      long upper=(long)(rnd.nextDouble()*10000L);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36c3797ee2069992b0d349c3929f0b96ebb88cd0","date":1233695129,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","sourceNew":"  private void testRangeSplit(final TrieUtils variant) throws Exception {\n    String field=\"ascfield\"+variant.TRIE_BITS;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L);\n      long upper=(long)(rnd.nextDouble()*10000L);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, Math.max(upper-lower+1, 0) );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", tTopDocs.totalHits, Math.max(upper-lower-1, 0) );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(final TrieUtils variant) throws Exception {\n    String field=\"ascfield\"+variant.TRIE_BITS;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L);\n      long upper=(long)(rnd.nextDouble()*10000L);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", tTopDocs.totalHits, upper-lower-1 );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dae7d336e7d4f571ff817ac1a0cdba6d71a4888","date":1233695231,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","sourceNew":"  private void testRangeSplit(final TrieUtils variant) throws Exception {\n    String field=\"ascfield\"+variant.TRIE_BITS;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L);\n      long upper=(long)(rnd.nextDouble()*10000L);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", tTopDocs.totalHits, Math.max(upper-lower-1, 0) );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(final TrieUtils variant) throws Exception {\n    String field=\"ascfield\"+variant.TRIE_BITS;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L);\n      long upper=(long)(rnd.nextDouble()*10000L);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, Math.max(upper-lower+1, 0) );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", tTopDocs.totalHits, Math.max(upper-lower-1, 0) );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","sourceNew":"  private void testRangeSplit(final TrieUtils variant) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"ascfield\"+variant.TRIE_BITS;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L);\n      long upper=(long)(rnd.nextDouble()*10000L);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", tTopDocs.totalHits, Math.max(upper-lower-1, 0) );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(final TrieUtils variant) throws Exception {\n    String field=\"ascfield\"+variant.TRIE_BITS;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L);\n      long upper=(long)(rnd.nextDouble()*10000L);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", tTopDocs.totalHits, Math.max(upper-lower-1, 0) );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":6,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeFilter#testRangeSplit(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\r\n    final Random rnd=newRandom();\r\n    String field=\"ascfield\"+precisionStep;\r\n    // 50 random tests\r\n    for (int i=0; i<50; i++) {\r\n      int lower=(int)(rnd.nextDouble()*noDocs - noDocs/2);\r\n      int upper=(int)(rnd.nextDouble()*noDocs - noDocs/2);\r\n      if (lower>upper) {\r\n        int a=lower; lower=upper; upper=a;\r\n      }\r\n      // test inclusive range\r\n      Query tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, true).asQuery();\r\n      TopDocs tTopDocs = searcher.search(tq, 1);\r\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\r\n      // test exclusive range\r\n      tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, false).asQuery();\r\n      tTopDocs = searcher.search(tq, 1);\r\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\r\n      // test left exclusive range\r\n      tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, true).asQuery();\r\n      tTopDocs = searcher.search(tq, 1);\r\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\r\n      // test right exclusive range\r\n      tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, false).asQuery();\r\n      tTopDocs = searcher.search(tq, 1);\r\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\r\n    }\r\n  }\r\n\n","sourceOld":"  private void testRangeSplit(final TrieUtils variant) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"ascfield\"+variant.TRIE_BITS;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L);\n      long upper=(long)(rnd.nextDouble()*10000L);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", tTopDocs.totalHits, Math.max(upper-lower-1, 0) );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeFilter#testRangeSplit(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"ascfield\"+precisionStep;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*noDocs - noDocs/2);\n      long upper=(long)(rnd.nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), true, true).asQuery();\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), false, false).asQuery();\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), false, true).asQuery();\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), true, false).asQuery();\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(final TrieUtils variant) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"ascfield\"+variant.TRIE_BITS;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L);\n      long upper=(long)(rnd.nextDouble()*10000L);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", tTopDocs.totalHits, Math.max(upper-lower-1, 0) );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["5dae7d336e7d4f571ff817ac1a0cdba6d71a4888"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cb1066f2afe9450585d0d10063ea4450085236f1"],"e91724d755098f0c856c612bf56d1edc31044a82":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36c3797ee2069992b0d349c3929f0b96ebb88cd0":["e91724d755098f0c856c612bf56d1edc31044a82"],"5dae7d336e7d4f571ff817ac1a0cdba6d71a4888":["36c3797ee2069992b0d349c3929f0b96ebb88cd0"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e91724d755098f0c856c612bf56d1edc31044a82":["36c3797ee2069992b0d349c3929f0b96ebb88cd0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"36c3797ee2069992b0d349c3929f0b96ebb88cd0":["5dae7d336e7d4f571ff817ac1a0cdba6d71a4888"],"5dae7d336e7d4f571ff817ac1a0cdba6d71a4888":["cb1066f2afe9450585d0d10063ea4450085236f1"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["e91724d755098f0c856c612bf56d1edc31044a82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}