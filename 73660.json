{"path":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an enumeration of all the documents which contain\n    <code>Term</code>. For each document, the document number, the frequency of\n    the term in that document is also provided, for use in search scoring.\n    Thus, this method implements the mapping:\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n    </ul>\n    <p>The enumeration is ordered by document number.  Each document number\n    is greater than all that precede it in the enumeration. */\n  abstract public TermDocs termDocs(Term t) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa8e9c04efb8c20778e66542a1d177eb9ab77d2","date":1011633132,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n    <code>term</code>. For each document, the document number, the frequency of\n    the term in that document is also provided, for use in search scoring.\n    Thus, this method implements the mapping:\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n    </ul>\n    <p>The enumeration is ordered by document number.  Each document number\n    is greater than all that precede it in the enumeration. */\n  public TermDocs termDocs(Term term) throws IOException {\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n    <code>Term</code>. For each document, the document number, the frequency of\n    the term in that document is also provided, for use in search scoring.\n    Thus, this method implements the mapping:\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n    </ul>\n    <p>The enumeration is ordered by document number.  Each document number\n    is greater than all that precede it in the enumeration. */\n  abstract public TermDocs termDocs(Term t) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbb14e9adf67f0e8fb9cc55a25a71063c230338","date":1051751355,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n    <code>term</code>. For each document, the document number, the frequency of\n    the term in that document is also provided, for use in search scoring.\n    Thus, this method implements the mapping:\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n    </ul>\n    <p>The enumeration is ordered by document number.  Each document number\n    is greater than all that precede it in the enumeration.\n  */\n  public TermDocs termDocs(Term term) throws IOException {\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n    <code>term</code>. For each document, the document number, the frequency of\n    the term in that document is also provided, for use in search scoring.\n    Thus, this method implements the mapping:\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n    </ul>\n    <p>The enumeration is ordered by document number.  Each document number\n    is greater than all that precede it in the enumeration. */\n  public TermDocs termDocs(Term term) throws IOException {\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   <code>term</code>. For each document, the document number, the frequency of\n   the term in that document is also provided, for use in search scoring.\n   Thus, this method implements the mapping:\n   <p><ul>\n   Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   </ul>\n   <p>The enumeration is ordered by document number.  Each document number\n   is greater than all that precede it in the enumeration.\n   */\n  public TermDocs termDocs(Term term) throws IOException {\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n    <code>term</code>. For each document, the document number, the frequency of\n    the term in that document is also provided, for use in search scoring.\n    Thus, this method implements the mapping:\n    <p><ul>\n    Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n    </ul>\n    <p>The enumeration is ordered by document number.  Each document number\n    is greater than all that precede it in the enumeration.\n  */\n  public TermDocs termDocs(Term term) throws IOException {\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6","date":1117912671,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>. For each document, the document number, the frequency of\n   * the term in that document is also provided, for use in search scoring.\n   * Thus, this method implements the mapping:\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   * </ul>\n   * <p>The enumeration is ordered by document number.  Each document number\n   * is greater than all that precede it in the enumeration.\n   */\n  public TermDocs termDocs(Term term) throws IOException {\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n   <code>term</code>. For each document, the document number, the frequency of\n   the term in that document is also provided, for use in search scoring.\n   Thus, this method implements the mapping:\n   <p><ul>\n   Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   </ul>\n   <p>The enumeration is ordered by document number.  Each document number\n   is greater than all that precede it in the enumeration.\n   */\n  public TermDocs termDocs(Term term) throws IOException {\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","bugFix":null,"bugIntro":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>. For each document, the document number, the frequency of\n   * the term in that document is also provided, for use in search scoring.\n   * Thus, this method implements the mapping:\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   * </ul>\n   * <p>The enumeration is ordered by document number.  Each document number\n   * is greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermDocs termDocs(Term term) throws IOException {\n    ensureOpen();\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>. For each document, the document number, the frequency of\n   * the term in that document is also provided, for use in search scoring.\n   * Thus, this method implements the mapping:\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   * </ul>\n   * <p>The enumeration is ordered by document number.  Each document number\n   * is greater than all that precede it in the enumeration.\n   */\n  public TermDocs termDocs(Term term) throws IOException {\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"512366c273bec3211f7d36ef75e58e3d32a06e26","date":1232894323,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>. For each document, the document number, the frequency of\n   * the term in that document is also provided, for use in\n   * search scoring.  If term is null, then all non-deleted\n   * docs are returned with freq=1.\n   * Thus, this method implements the mapping:\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   * </ul>\n   * <p>The enumeration is ordered by document number.  Each document number\n   * is greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermDocs termDocs(Term term) throws IOException {\n    ensureOpen();\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>. For each document, the document number, the frequency of\n   * the term in that document is also provided, for use in search scoring.\n   * Thus, this method implements the mapping:\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   * </ul>\n   * <p>The enumeration is ordered by document number.  Each document number\n   * is greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermDocs termDocs(Term term) throws IOException {\n    ensureOpen();\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","bugFix":["ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>. For each document, the document number, the frequency of\n   * the term in that document is also provided, for use in\n   * search scoring.  If term is null, then all non-deleted\n   * docs are returned with freq=1.\n   * Thus, this method implements the mapping:\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   * </ul>\n   * <p>The enumeration is ordered by document number.  Each document number\n   * is greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermDocs termDocs(Term term) throws IOException {\n    ensureOpen();\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>. For each document, the document number, the frequency of\n   * the term in that document is also provided, for use in\n   * search scoring.  If term is null, then all non-deleted\n   * docs are returned with freq=1.\n   * Thus, this method implements the mapping:\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   * </ul>\n   * <p>The enumeration is ordered by document number.  Each document number\n   * is greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermDocs termDocs(Term term) throws IOException {\n    ensureOpen();\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"512366c273bec3211f7d36ef75e58e3d32a06e26":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["6dbb14e9adf67f0e8fb9cc55a25a71063c230338"],"6dbb14e9adf67f0e8fb9cc55a25a71063c230338":["9fa8e9c04efb8c20778e66542a1d177eb9ab77d2"],"9fa8e9c04efb8c20778e66542a1d177eb9ab77d2":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["512366c273bec3211f7d36ef75e58e3d32a06e26"]},"commit2Childs":{"512366c273bec3211f7d36ef75e58e3d32a06e26":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6"],"6dbb14e9adf67f0e8fb9cc55a25a71063c230338":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"9fa8e9c04efb8c20778e66542a1d177eb9ab77d2":["6dbb14e9adf67f0e8fb9cc55a25a71063c230338"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["9fa8e9c04efb8c20778e66542a1d177eb9ab77d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}