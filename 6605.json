{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testNoParents().mjava","commits":[{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testNoParents().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNoParents() throws Exception {\n    // TODO: when OrdinalPolicy is on CLP, index the NO_PARENTS categories into\n    // their own dimension, and avoid this index creation\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(2);\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetIndexingParams fip = new FacetIndexingParams() {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy() {\n        return OrdinalPolicy.NO_PARENTS;\n      }\n    };\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    ObjectToIntMap<CategoryPath> expCounts = newCounts();\n\n    // index few docs with categories, not sharing parents.\n    int numDocs = atLeast(10);\n    final CategoryPath cpc = new CategoryPath(\"L1\", \"L2\", \"L3\");\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n      CategoryPath cpa = CATEGORIES_A[random().nextInt(NUM_CHILDREN_CP_A)];\n      CategoryPath cpb = CATEGORIES_B[random().nextInt(NUM_CHILDREN_CP_B)];\n      categories.add(cpa);\n      categories.add(cpb);\n      categories.add(cpc);\n      expCounts.put(cpa, expCounts.get(cpa) + 1);\n      expCounts.put(cpb, expCounts.get(cpb) + 1);\n      facetFields.addFields(doc, categories);\n      indexWriter.addDocument(doc);\n    }\n    expCounts.put(CP_A, numDocs);\n    expCounts.put(CP_B, numDocs);\n    for (int i = 0; i < cpc.length; i++) {\n      expCounts.put(cpc.subpath(i+1), numDocs);\n    }\n    \n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B), new CountFacetRequest(cpc.subpath(1), 10));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 3, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, expCounts.get(root.label), (int) root.value);\n      assertEquals(\"invalid residue\", 0, (int) root.residue);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, expCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testNoParents().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNoParents() throws Exception {\n    // TODO: when OrdinalPolicy is on CLP, index the NO_PARENTS categories into\n    // their own dimension, and avoid this index creation\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(2);\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetIndexingParams fip = new FacetIndexingParams() {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy() {\n        return OrdinalPolicy.NO_PARENTS;\n      }\n    };\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    ObjectToIntMap<CategoryPath> expCounts = newCounts();\n\n    // index few docs with categories, not sharing parents.\n    int numDocs = atLeast(10);\n    final CategoryPath cpc = new CategoryPath(\"L1\", \"L2\", \"L3\");\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n      CategoryPath cpa = CATEGORIES_A[random().nextInt(NUM_CHILDREN_CP_A)];\n      CategoryPath cpb = CATEGORIES_B[random().nextInt(NUM_CHILDREN_CP_B)];\n      categories.add(cpa);\n      categories.add(cpb);\n      categories.add(cpc);\n      expCounts.put(cpa, expCounts.get(cpa) + 1);\n      expCounts.put(cpb, expCounts.get(cpb) + 1);\n      facetFields.addFields(doc, categories);\n      indexWriter.addDocument(doc);\n    }\n    expCounts.put(CP_A, numDocs);\n    expCounts.put(CP_B, numDocs);\n    for (int i = 0; i < cpc.length; i++) {\n      expCounts.put(cpc.subpath(i+1), numDocs);\n    }\n    \n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B), new CountFacetRequest(cpc.subpath(1), 10));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 3, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, expCounts.get(root.label), (int) root.value);\n      assertEquals(\"invalid residue\", 0, (int) root.residue);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, expCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dae862628c7a5275e1ff00ff3bc9803dedf124a9","date":1358939646,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testNoParents().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testNoParents().mjava","sourceNew":"  @Test\n  public void testNoParents() throws Exception {\n    // TODO: when OrdinalPolicy is on CLP, index the NO_PARENTS categories into\n    // their own dimension, and avoid this index creation\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(2);\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetIndexingParams fip = new FacetIndexingParams() {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy() {\n        return OrdinalPolicy.NO_PARENTS;\n      }\n    };\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    ObjectToIntMap<CategoryPath> expCounts = newCounts();\n\n    // index few docs with categories, not sharing parents.\n    int numDocs = atLeast(10);\n    final CategoryPath cpc = new CategoryPath(\"L1\", \"L2\", \"L3\");\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n      CategoryPath cpa = CATEGORIES_A[random().nextInt(NUM_CHILDREN_CP_A)];\n      CategoryPath cpb = CATEGORIES_B[random().nextInt(NUM_CHILDREN_CP_B)];\n      categories.add(cpa);\n      categories.add(cpb);\n      categories.add(cpc);\n      expCounts.put(cpa, expCounts.get(cpa) + 1);\n      expCounts.put(cpb, expCounts.get(cpb) + 1);\n      facetFields.addFields(doc, categories);\n      indexWriter.addDocument(doc);\n    }\n    expCounts.put(CP_A, numDocs);\n    expCounts.put(CP_B, numDocs);\n    for (int i = 0; i < cpc.length; i++) {\n      expCounts.put(cpc.subpath(i+1), numDocs);\n    }\n    \n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B), new CountFacetRequest(cpc.subpath(1), 10));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 3, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, expCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, expCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testNoParents() throws Exception {\n    // TODO: when OrdinalPolicy is on CLP, index the NO_PARENTS categories into\n    // their own dimension, and avoid this index creation\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(2);\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetIndexingParams fip = new FacetIndexingParams() {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy() {\n        return OrdinalPolicy.NO_PARENTS;\n      }\n    };\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    ObjectToIntMap<CategoryPath> expCounts = newCounts();\n\n    // index few docs with categories, not sharing parents.\n    int numDocs = atLeast(10);\n    final CategoryPath cpc = new CategoryPath(\"L1\", \"L2\", \"L3\");\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n      CategoryPath cpa = CATEGORIES_A[random().nextInt(NUM_CHILDREN_CP_A)];\n      CategoryPath cpb = CATEGORIES_B[random().nextInt(NUM_CHILDREN_CP_B)];\n      categories.add(cpa);\n      categories.add(cpb);\n      categories.add(cpc);\n      expCounts.put(cpa, expCounts.get(cpa) + 1);\n      expCounts.put(cpb, expCounts.get(cpb) + 1);\n      facetFields.addFields(doc, categories);\n      indexWriter.addDocument(doc);\n    }\n    expCounts.put(CP_A, numDocs);\n    expCounts.put(CP_B, numDocs);\n    for (int i = 0; i < cpc.length; i++) {\n      expCounts.put(cpc.subpath(i+1), numDocs);\n    }\n    \n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B), new CountFacetRequest(cpc.subpath(1), 10));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 3, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, expCounts.get(root.label), (int) root.value);\n      assertEquals(\"invalid residue\", 0, (int) root.residue);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, expCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66644845192a1c92d87d5324cc0b5af16ad31b42","date":1358970583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testNoParents().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testNoParents().mjava","sourceNew":"  @Test\n  public void testNoParents() throws Exception {\n    // TODO: when OrdinalPolicy is on CLP, index the NO_PARENTS categories into\n    // their own dimension, and avoid this index creation\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(2);\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetIndexingParams fip = new FacetIndexingParams() {\n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return new CategoryListParams() {\n          @Override\n          public OrdinalPolicy getOrdinalPolicy() {\n            return OrdinalPolicy.NO_PARENTS;\n          }\n        };\n      }\n    };\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    ObjectToIntMap<CategoryPath> expCounts = newCounts();\n\n    // index few docs with categories, not sharing parents.\n    int numDocs = atLeast(10);\n    final CategoryPath cpc = new CategoryPath(\"L1\", \"L2\", \"L3\");\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n      CategoryPath cpa = CATEGORIES_A[random().nextInt(NUM_CHILDREN_CP_A)];\n      CategoryPath cpb = CATEGORIES_B[random().nextInt(NUM_CHILDREN_CP_B)];\n      categories.add(cpa);\n      categories.add(cpb);\n      categories.add(cpc);\n      expCounts.put(cpa, expCounts.get(cpa) + 1);\n      expCounts.put(cpb, expCounts.get(cpb) + 1);\n      facetFields.addFields(doc, categories);\n      indexWriter.addDocument(doc);\n    }\n    expCounts.put(CP_A, numDocs);\n    expCounts.put(CP_B, numDocs);\n    for (int i = 0; i < cpc.length; i++) {\n      expCounts.put(cpc.subpath(i+1), numDocs);\n    }\n    \n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B), new CountFacetRequest(cpc.subpath(1), 10));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 3, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, expCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, expCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testNoParents() throws Exception {\n    // TODO: when OrdinalPolicy is on CLP, index the NO_PARENTS categories into\n    // their own dimension, and avoid this index creation\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(2);\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetIndexingParams fip = new FacetIndexingParams() {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy() {\n        return OrdinalPolicy.NO_PARENTS;\n      }\n    };\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    ObjectToIntMap<CategoryPath> expCounts = newCounts();\n\n    // index few docs with categories, not sharing parents.\n    int numDocs = atLeast(10);\n    final CategoryPath cpc = new CategoryPath(\"L1\", \"L2\", \"L3\");\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n      CategoryPath cpa = CATEGORIES_A[random().nextInt(NUM_CHILDREN_CP_A)];\n      CategoryPath cpb = CATEGORIES_B[random().nextInt(NUM_CHILDREN_CP_B)];\n      categories.add(cpa);\n      categories.add(cpb);\n      categories.add(cpc);\n      expCounts.put(cpa, expCounts.get(cpa) + 1);\n      expCounts.put(cpb, expCounts.get(cpb) + 1);\n      facetFields.addFields(doc, categories);\n      indexWriter.addDocument(doc);\n    }\n    expCounts.put(CP_A, numDocs);\n    expCounts.put(CP_B, numDocs);\n    for (int i = 0; i < cpc.length; i++) {\n      expCounts.put(cpc.subpath(i+1), numDocs);\n    }\n    \n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B), new CountFacetRequest(cpc.subpath(1), 10));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 3, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, expCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, expCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d","date":1359020450,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testNoParents().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testNoParents().mjava","sourceNew":"  @Test\n  public void testNoParents() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_C, NUM_CHILDREN_CP_C), \n        new CountFacetRequest(CP_D, NUM_CHILDREN_CP_D));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", fsp.facetRequests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, allExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, allExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  @Test\n  public void testNoParents() throws Exception {\n    // TODO: when OrdinalPolicy is on CLP, index the NO_PARENTS categories into\n    // their own dimension, and avoid this index creation\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(2);\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetIndexingParams fip = new FacetIndexingParams() {\n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return new CategoryListParams() {\n          @Override\n          public OrdinalPolicy getOrdinalPolicy() {\n            return OrdinalPolicy.NO_PARENTS;\n          }\n        };\n      }\n    };\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    ObjectToIntMap<CategoryPath> expCounts = newCounts();\n\n    // index few docs with categories, not sharing parents.\n    int numDocs = atLeast(10);\n    final CategoryPath cpc = new CategoryPath(\"L1\", \"L2\", \"L3\");\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n      CategoryPath cpa = CATEGORIES_A[random().nextInt(NUM_CHILDREN_CP_A)];\n      CategoryPath cpb = CATEGORIES_B[random().nextInt(NUM_CHILDREN_CP_B)];\n      categories.add(cpa);\n      categories.add(cpb);\n      categories.add(cpc);\n      expCounts.put(cpa, expCounts.get(cpa) + 1);\n      expCounts.put(cpb, expCounts.get(cpb) + 1);\n      facetFields.addFields(doc, categories);\n      indexWriter.addDocument(doc);\n    }\n    expCounts.put(CP_A, numDocs);\n    expCounts.put(CP_B, numDocs);\n    for (int i = 0; i < cpc.length; i++) {\n      expCounts.put(cpc.subpath(i+1), numDocs);\n    }\n    \n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B), new CountFacetRequest(cpc.subpath(1), 10));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 3, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, expCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, expCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testNoParents().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testNoParents().mjava","sourceNew":"  @Test\n  public void testNoParents() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_C, NUM_CHILDREN_CP_C), \n        new CountFacetRequest(CP_D, NUM_CHILDREN_CP_D));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", fsp.facetRequests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, allExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, allExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  @Test\n  public void testNoParents() throws Exception {\n    // TODO: when OrdinalPolicy is on CLP, index the NO_PARENTS categories into\n    // their own dimension, and avoid this index creation\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(2);\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetIndexingParams fip = new FacetIndexingParams() {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy() {\n        return OrdinalPolicy.NO_PARENTS;\n      }\n    };\n    FacetFields facetFields = new FacetFields(taxoWriter, fip);\n    ObjectToIntMap<CategoryPath> expCounts = newCounts();\n\n    // index few docs with categories, not sharing parents.\n    int numDocs = atLeast(10);\n    final CategoryPath cpc = new CategoryPath(\"L1\", \"L2\", \"L3\");\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n      CategoryPath cpa = CATEGORIES_A[random().nextInt(NUM_CHILDREN_CP_A)];\n      CategoryPath cpb = CATEGORIES_B[random().nextInt(NUM_CHILDREN_CP_B)];\n      categories.add(cpa);\n      categories.add(cpb);\n      categories.add(cpc);\n      expCounts.put(cpa, expCounts.get(cpa) + 1);\n      expCounts.put(cpb, expCounts.get(cpb) + 1);\n      facetFields.addFields(doc, categories);\n      indexWriter.addDocument(doc);\n    }\n    expCounts.put(CP_A, numDocs);\n    expCounts.put(CP_B, numDocs);\n    for (int i = 0; i < cpc.length; i++) {\n      expCounts.put(cpc.subpath(i+1), numDocs);\n    }\n    \n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B), new CountFacetRequest(cpc.subpath(1), 10));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 3, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, expCounts.get(root.label), (int) root.value);\n      assertEquals(\"invalid residue\", 0, (int) root.residue);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, expCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#testNoParents().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testNoParents().mjava","sourceNew":"  @Test\n  public void testNoParents() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_C, NUM_CHILDREN_CP_C), \n        new CountFacetRequest(CP_D, NUM_CHILDREN_CP_D));\n    FacetsCollector fc = FacetsCollector.create(randomAccumulator(fsp, indexReader, taxoReader));\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", fsp.facetRequests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, allExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, allExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  @Test\n  public void testNoParents() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(CP_C, NUM_CHILDREN_CP_C), \n        new CountFacetRequest(CP_D, NUM_CHILDREN_CP_D));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", fsp.facetRequests.size(), facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, allExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, allExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dae862628c7a5275e1ff00ff3bc9803dedf124a9":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["dae862628c7a5275e1ff00ff3bc9803dedf124a9"],"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d":["66644845192a1c92d87d5324cc0b5af16ad31b42"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cc0a6cdc2cfb2407dce68d524fb63993c0209a2d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["07155cdd910937cdf6877e48884d5782845c8b8b","cc0a6cdc2cfb2407dce68d524fb63993c0209a2d"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["dae862628c7a5275e1ff00ff3bc9803dedf124a9","07155cdd910937cdf6877e48884d5782845c8b8b"],"dae862628c7a5275e1ff00ff3bc9803dedf124a9":["66644845192a1c92d87d5324cc0b5af16ad31b42"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["cc0a6cdc2cfb2407dce68d524fb63993c0209a2d"],"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d":["571abba77e55fea386a38c0024f72ffa5b37a9ad","b2d5244a676b83c2d551c3746e8181588ba619e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}