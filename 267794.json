{"path":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#writeSkipData(int,IndexOutput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !curStorePayloads;\n\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta << 1 | 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      freqIndex[level].mark();\n      freqIndex[level].write(skipBuffer, false);\n    }\n    docIndex[level].mark();\n    docIndex[level].write(skipBuffer, false);\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      posIndex[level].mark();\n      posIndex[level].write(skipBuffer, false);\n      if (curStorePayloads) {\n        skipBuffer.writeVInt((int) (curPayloadPointer - lastSkipPayloadPointer[level]));\n      }\n    }\n\n    lastSkipDoc[level] = curDoc;\n    lastSkipPayloadPointer[level] = curPayloadPointer;\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !curStorePayloads;\n\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta << 1 | 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      freqIndex[level].mark();\n      freqIndex[level].write(skipBuffer, false);\n    }\n    docIndex[level].mark();\n    docIndex[level].write(skipBuffer, false);\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      posIndex[level].mark();\n      posIndex[level].write(skipBuffer, false);\n      if (curStorePayloads) {\n        skipBuffer.writeVInt((int) (curPayloadPointer - lastSkipPayloadPointer[level]));\n      }\n    }\n\n    lastSkipDoc[level] = curDoc;\n    lastSkipPayloadPointer[level] = curPayloadPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !curStorePayloads;\n\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta << 1 | 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      freqIndex[level].mark();\n      freqIndex[level].write(skipBuffer, false);\n    }\n    docIndex[level].mark();\n    docIndex[level].write(skipBuffer, false);\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      posIndex[level].mark();\n      posIndex[level].write(skipBuffer, false);\n      if (curStorePayloads) {\n        skipBuffer.writeVInt((int) (curPayloadPointer - lastSkipPayloadPointer[level]));\n      }\n    }\n\n    lastSkipDoc[level] = curDoc;\n    lastSkipPayloadPointer[level] = curPayloadPointer;\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !curStorePayloads;\n\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta << 1 | 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      freqIndex[level].mark();\n      freqIndex[level].write(skipBuffer, false);\n    }\n    docIndex[level].mark();\n    docIndex[level].write(skipBuffer, false);\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      posIndex[level].mark();\n      posIndex[level].write(skipBuffer, false);\n      if (curStorePayloads) {\n        skipBuffer.writeVInt((int) (curPayloadPointer - lastSkipPayloadPointer[level]));\n      }\n    }\n\n    lastSkipDoc[level] = curDoc;\n    lastSkipPayloadPointer[level] = curPayloadPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}