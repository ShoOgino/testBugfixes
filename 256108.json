{"path":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#initialize(Directory,String,FieldInfos,int,boolean).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#initialize(Directory,String,FieldInfos,int,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#initialize(Directory,String,FieldInfos,int,boolean).mjava","sourceNew":"  private void initialize(Directory directory, String segment, FieldInfos fis,\n                          int interval, boolean isi) throws IOException {\n    indexInterval = interval;\n    fieldInfos = fis;\n    isIndex = isi;\n    output = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\",\n        (isIndex ? Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION\n            : Lucene3xPostingsFormat.TERMS_EXTENSION)), IOContext.DEFAULT);\n    boolean success = false;\n    try {\n    output.writeInt(FORMAT_CURRENT);              // write format\n    output.writeLong(0);                          // leave space for size\n    output.writeInt(indexInterval);               // write indexInterval\n    output.writeInt(skipInterval);                // write skipInterval\n    output.writeInt(maxSkipLevels);               // write maxSkipLevels\n    assert initUTF16Results();\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          IOUtils.closeWhileHandlingException(output);\n        } catch (IOException e) {\n          // cannot happen since we suppress exceptions\n          throw new RuntimeException(e);\n        }\n\n        try {\n          directory.deleteFile(IndexFileNames.segmentFileName(segment, \"\",\n              (isIndex ? Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION\n                  : Lucene3xPostingsFormat.TERMS_EXTENSION)));\n        } catch (IOException ignored) {\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void initialize(Directory directory, String segment, FieldInfos fis,\n                          int interval, boolean isi) throws IOException {\n    indexInterval = interval;\n    fieldInfos = fis;\n    isIndex = isi;\n    output = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\",\n        (isIndex ? PreFlexCodec.TERMS_INDEX_EXTENSION\n            : PreFlexCodec.TERMS_EXTENSION)), IOContext.DEFAULT);\n    boolean success = false;\n    try {\n    output.writeInt(FORMAT_CURRENT);              // write format\n    output.writeLong(0);                          // leave space for size\n    output.writeInt(indexInterval);               // write indexInterval\n    output.writeInt(skipInterval);                // write skipInterval\n    output.writeInt(maxSkipLevels);               // write maxSkipLevels\n    assert initUTF16Results();\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          IOUtils.closeWhileHandlingException(output);\n        } catch (IOException e) {\n          // cannot happen since we suppress exceptions\n          throw new RuntimeException(e);\n        }\n\n        try {\n          directory.deleteFile(IndexFileNames.segmentFileName(segment, \"\",\n              (isIndex ? PreFlexCodec.TERMS_INDEX_EXTENSION\n                  : PreFlexCodec.TERMS_EXTENSION)));\n        } catch (IOException ignored) {\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c5b735f3b39a5cdb52150bb4ff36a95e8c9407f","date":1321569152,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#initialize(Directory,String,FieldInfos,int,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#initialize(Directory,String,FieldInfos,int,boolean).mjava","sourceNew":"  private void initialize(Directory directory, String segment, FieldInfos fis,\n                          int interval, boolean isi) throws IOException {\n    indexInterval = interval;\n    fieldInfos = fis;\n    isIndex = isi;\n    output = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\",\n        (isIndex ? Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION\n            : Lucene3xPostingsFormat.TERMS_EXTENSION)), IOContext.DEFAULT);\n    boolean success = false;\n    try {\n      output.writeInt(FORMAT_CURRENT);              // write format\n      output.writeLong(0);                          // leave space for size\n      output.writeInt(indexInterval);               // write indexInterval\n      output.writeInt(skipInterval);                // write skipInterval\n      output.writeInt(maxSkipLevels);               // write maxSkipLevels\n      assert initUTF16Results();\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n\n        try {\n          directory.deleteFile(IndexFileNames.segmentFileName(segment, \"\",\n              (isIndex ? Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION\n                  : Lucene3xPostingsFormat.TERMS_EXTENSION)));\n        } catch (IOException ignored) {\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void initialize(Directory directory, String segment, FieldInfos fis,\n                          int interval, boolean isi) throws IOException {\n    indexInterval = interval;\n    fieldInfos = fis;\n    isIndex = isi;\n    output = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\",\n        (isIndex ? Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION\n            : Lucene3xPostingsFormat.TERMS_EXTENSION)), IOContext.DEFAULT);\n    boolean success = false;\n    try {\n    output.writeInt(FORMAT_CURRENT);              // write format\n    output.writeLong(0);                          // leave space for size\n    output.writeInt(indexInterval);               // write indexInterval\n    output.writeInt(skipInterval);                // write skipInterval\n    output.writeInt(maxSkipLevels);               // write maxSkipLevels\n    assert initUTF16Results();\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          IOUtils.closeWhileHandlingException(output);\n        } catch (IOException e) {\n          // cannot happen since we suppress exceptions\n          throw new RuntimeException(e);\n        }\n\n        try {\n          directory.deleteFile(IndexFileNames.segmentFileName(segment, \"\",\n              (isIndex ? Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION\n                  : Lucene3xPostingsFormat.TERMS_EXTENSION)));\n        } catch (IOException ignored) {\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/TermInfosWriter#initialize(Directory,String,FieldInfos,int,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#initialize(Directory,String,FieldInfos,int,boolean).mjava","sourceNew":"  private void initialize(Directory directory, String segment, FieldInfos fis,\n                          int interval, boolean isi) throws IOException {\n    indexInterval = interval;\n    fieldInfos = fis;\n    isIndex = isi;\n    output = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\",\n        (isIndex ? Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION\n            : Lucene3xPostingsFormat.TERMS_EXTENSION)), IOContext.DEFAULT);\n    boolean success = false;\n    try {\n      output.writeInt(FORMAT_CURRENT);              // write format\n      output.writeLong(0);                          // leave space for size\n      output.writeInt(indexInterval);               // write indexInterval\n      output.writeInt(skipInterval);                // write skipInterval\n      output.writeInt(maxSkipLevels);               // write maxSkipLevels\n      assert initUTF16Results();\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n\n        try {\n          directory.deleteFile(IndexFileNames.segmentFileName(segment, \"\",\n              (isIndex ? Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION\n                  : Lucene3xPostingsFormat.TERMS_EXTENSION)));\n        } catch (IOException ignored) {\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void initialize(Directory directory, String segment, FieldInfos fis,\n                          int interval, boolean isi) throws IOException {\n    indexInterval = interval;\n    fieldInfos = fis;\n    isIndex = isi;\n    output = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\",\n        (isIndex ? Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION\n            : Lucene3xPostingsFormat.TERMS_EXTENSION)), IOContext.DEFAULT);\n    boolean success = false;\n    try {\n      output.writeInt(FORMAT_CURRENT);              // write format\n      output.writeLong(0);                          // leave space for size\n      output.writeInt(indexInterval);               // write indexInterval\n      output.writeInt(skipInterval);                // write skipInterval\n      output.writeInt(maxSkipLevels);               // write maxSkipLevels\n      assert initUTF16Results();\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n\n        try {\n          directory.deleteFile(IndexFileNames.segmentFileName(segment, \"\",\n              (isIndex ? Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION\n                  : Lucene3xPostingsFormat.TERMS_EXTENSION)));\n        } catch (IOException ignored) {\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c5b735f3b39a5cdb52150bb4ff36a95e8c9407f":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["9c5b735f3b39a5cdb52150bb4ff36a95e8c9407f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["9c5b735f3b39a5cdb52150bb4ff36a95e8c9407f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"9c5b735f3b39a5cdb52150bb4ff36a95e8c9407f":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}