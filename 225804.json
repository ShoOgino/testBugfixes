{"path":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newRangeQuery(String,byte[],byte[]).mjava","commits":[{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newRangeQuery(String,byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a range query for binary values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newRangeQuery(String, byte[][], byte[][])} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be {@code null}\n   * @param upperValue upper portion of the range (inclusive). must not be {@code null}\n   * @throws IllegalArgumentException if {@code field} is null, if {@code lowerValue} is null,\n   *                                  or if {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, byte[] lowerValue, byte[] upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return newRangeQuery(field, new byte[][] {lowerValue}, new byte[][] {upperValue});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newRangeQuery(String,byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a range query for binary values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newRangeQuery(String, byte[][], byte[][])} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be {@code null}\n   * @param upperValue upper portion of the range (inclusive). must not be {@code null}\n   * @throws IllegalArgumentException if {@code field} is null, if {@code lowerValue} is null,\n   *                                  or if {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, byte[] lowerValue, byte[] upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return newRangeQuery(field, new byte[][] {lowerValue}, new byte[][] {upperValue});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newRangeQuery(String,byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a range query for binary values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newRangeQuery(String, byte[][], byte[][])} instead.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be {@code null}\n   * @param upperValue upper portion of the range (inclusive). must not be {@code null}\n   * @throws IllegalArgumentException if {@code field} is null, if {@code lowerValue} is null,\n   *                                  or if {@code upperValue} is null\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, byte[] lowerValue, byte[] upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return newRangeQuery(field, new byte[][] {lowerValue}, new byte[][] {upperValue});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}