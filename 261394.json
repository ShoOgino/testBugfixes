{"path":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxIdleTime().mjava","commits":[{"id":"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","date":1568645407,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxIdleTime().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMaxIdleTime() throws Exception {\n    int IDLE_TIME_SEC = 600;\n    long IDLE_TIME_NS = TimeUnit.NANOSECONDS.convert(IDLE_TIME_SEC, TimeUnit.SECONDS);\n    LRUCache<String, Accountable> cache = new LRUCache<>();\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxIdleTime\", \"\" + IDLE_TIME_SEC);\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    cache.setSyntheticEntries(true);\n    for (int i = 0; i < 4; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(4, cache.size());\n    long currentTime = TimeSource.NANO_TIME.getEpochTimeNs();\n    cache.putCacheValue(\"4\", new LRUCache.CacheValue<>(new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    }, currentTime - IDLE_TIME_NS * 2));\n    assertEquals(4, cache.size());\n    assertNull(cache.get(\"4\"));\n    Map<String, Object> stats = cache.getMetricsMap().getValue();\n    assertEquals(1, ((Number)stats.get(\"evictionsIdleTime\")).intValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxIdleTime().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxIdleTime().mjava","sourceNew":"  @Test\n  public void testMaxIdleTime() throws Exception {\n    int IDLE_TIME_SEC = 600;\n    long IDLE_TIME_NS = TimeUnit.NANOSECONDS.convert(IDLE_TIME_SEC, TimeUnit.SECONDS);\n    LRUCache<String, Accountable> cache = new LRUCache<>();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    cache.initializeMetrics(solrMetricsContext, scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxIdleTime\", \"\" + IDLE_TIME_SEC);\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    cache.setSyntheticEntries(true);\n    for (int i = 0; i < 4; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(4, cache.size());\n    long currentTime = TimeSource.NANO_TIME.getEpochTimeNs();\n    cache.putCacheValue(\"4\", new LRUCache.CacheValue<>(new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    }, currentTime - IDLE_TIME_NS * 2));\n    assertEquals(4, cache.size());\n    assertNull(cache.get(\"4\"));\n    Map<String, Object> stats = cache.getMetricsMap().getValue();\n    assertEquals(1, ((Number)stats.get(\"evictionsIdleTime\")).intValue());\n  }\n\n","sourceOld":"  @Test\n  public void testMaxIdleTime() throws Exception {\n    int IDLE_TIME_SEC = 600;\n    long IDLE_TIME_NS = TimeUnit.NANOSECONDS.convert(IDLE_TIME_SEC, TimeUnit.SECONDS);\n    LRUCache<String, Accountable> cache = new LRUCache<>();\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxIdleTime\", \"\" + IDLE_TIME_SEC);\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    cache.setSyntheticEntries(true);\n    for (int i = 0; i < 4; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(4, cache.size());\n    long currentTime = TimeSource.NANO_TIME.getEpochTimeNs();\n    cache.putCacheValue(\"4\", new LRUCache.CacheValue<>(new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    }, currentTime - IDLE_TIME_NS * 2));\n    assertEquals(4, cache.size());\n    assertNull(cache.get(\"4\"));\n    Map<String, Object> stats = cache.getMetricsMap().getValue();\n    assertEquals(1, ((Number)stats.get(\"evictionsIdleTime\")).intValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestLRUCache#testMaxIdleTime().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testMaxIdleTime() throws Exception {\n    int IDLE_TIME_SEC = 600;\n    long IDLE_TIME_NS = TimeUnit.NANOSECONDS.convert(IDLE_TIME_SEC, TimeUnit.SECONDS);\n    LRUCache<String, Accountable> cache = new LRUCache<>();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    cache.initializeMetrics(solrMetricsContext, scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxIdleTime\", \"\" + IDLE_TIME_SEC);\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    cache.setSyntheticEntries(true);\n    for (int i = 0; i < 4; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(4, cache.size());\n    long currentTime = TimeSource.NANO_TIME.getEpochTimeNs();\n    cache.putCacheValue(\"4\", new LRUCache.CacheValue<>(new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    }, currentTime - IDLE_TIME_NS * 2));\n    assertEquals(4, cache.size());\n    assertNull(cache.get(\"4\"));\n    Map<String, Object> stats = cache.getMetricsMap().getValue();\n    assertEquals(1, ((Number)stats.get(\"evictionsIdleTime\")).intValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d7d3943904804560937e6239effeebda0f920e4":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["4d7d3943904804560937e6239effeebda0f920e4"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}