{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6d0f38037e0125421d8e737992d511b5567b26","date":1329215236,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44549822b9113925bd45e53c1e0028ab2e1d1d7f","date":1330898600,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":["48ac7cad6e13e58e631e431ea26e8d4c8756f63a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b6d24a43afa23be4e3a366300f50af467daef1d","date":1331119216,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    initRandom();\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    initRandom();\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cf17bea86a5acbc573c72be7efa0e720bd44b3a","date":1332840630,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    initRandom();\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    initRandom();\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final boolean v = random().nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (v) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    LuceneTestCase.useNoMemoryExpensiveCodec =\n        targetClass.isAnnotationPresent(UseNoMemoryExpensiveCodec.class);\n    if (useNoMemoryExpensiveCodec) {\n        System.err.println(\"NOTE: Using no memory expensive codecs (Memory, SimpleText) for \" +\n            targetClass.getSimpleName() + \".\");\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random().nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random(), useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random()) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random()) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    initRandom();\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n    \n    savedInfoStream = InfoStream.getDefault();\n    if (INFOSTREAM) {\n      // consume random for consistency\n      random.nextBoolean();\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (random.nextBoolean()) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random.nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":["7c7d4195d2838330e4e86a6c09f67dcca69cce98"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ca7411778e8c348c6c98ce745b7a7b69998a4de","date":1334764705,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final boolean v = random().nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (v) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    LuceneTestCase.useNoMemoryExpensiveCodec =\n        targetClass.isAnnotationPresent(UseNoMemoryExpensiveCodec.class);\n    if (useNoMemoryExpensiveCodec) {\n        System.err.println(\"NOTE: Using no memory expensive codecs (Memory, SimpleText) for \" +\n            targetClass.getSimpleName() + \".\");\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random().nextInt(10);\n    System.out.println(\"randomVal: \" + randomVal);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random(), useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random()) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random()) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final boolean v = random().nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (v) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    LuceneTestCase.useNoMemoryExpensiveCodec =\n        targetClass.isAnnotationPresent(UseNoMemoryExpensiveCodec.class);\n    if (useNoMemoryExpensiveCodec) {\n        System.err.println(\"NOTE: Using no memory expensive codecs (Memory, SimpleText) for \" +\n            targetClass.getSimpleName() + \".\");\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random().nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random(), useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random()) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random()) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d6122fb7003472460e2b1bbd090f2ddb8efaf84","date":1334764918,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final boolean v = random().nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (v) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    LuceneTestCase.useNoMemoryExpensiveCodec =\n        targetClass.isAnnotationPresent(UseNoMemoryExpensiveCodec.class);\n    if (useNoMemoryExpensiveCodec) {\n        System.err.println(\"NOTE: Using no memory expensive codecs (Memory, SimpleText) for \" +\n            targetClass.getSimpleName() + \".\");\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random().nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random(), useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random()) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random()) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final boolean v = random().nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (v) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    LuceneTestCase.useNoMemoryExpensiveCodec =\n        targetClass.isAnnotationPresent(UseNoMemoryExpensiveCodec.class);\n    if (useNoMemoryExpensiveCodec) {\n        System.err.println(\"NOTE: Using no memory expensive codecs (Memory, SimpleText) for \" +\n            targetClass.getSimpleName() + \".\");\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random().nextInt(10);\n    System.out.println(\"randomVal: \" + randomVal);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random(), useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random()) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random()) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c7d4195d2838330e4e86a6c09f67dcca69cce98","date":1335392293,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final boolean v = random().nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (v) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    LuceneTestCase.useNoMemoryExpensiveCodec =\n        targetClass.isAnnotationPresent(UseNoMemoryExpensiveCodec.class);\n    if (useNoMemoryExpensiveCodec) {\n        System.err.println(\"NOTE: Using no memory expensive codecs (Memory, SimpleText) for \" +\n            targetClass.getSimpleName() + \".\");\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random().nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random(), useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n\n    // Initialize locale/ timezone.\n    TEST_LOCALE = System.getProperty(\"tests.locale\", \"random\");\n    TEST_TIMEZONE = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether TEST_LOCALE was specified or not).\n    Locale randomLocale = randomLocale(random());\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final boolean v = random().nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (v) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    LuceneTestCase.useNoMemoryExpensiveCodec =\n        targetClass.isAnnotationPresent(UseNoMemoryExpensiveCodec.class);\n    if (useNoMemoryExpensiveCodec) {\n        System.err.println(\"NOTE: Using no memory expensive codecs (Memory, SimpleText) for \" +\n            targetClass.getSimpleName() + \".\");\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random().nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random(), useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random()) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random()) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n    testsFailed = false;\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b323509539b8f72944f18209655b8333d1fc63dc","date":1336762459,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final boolean v = random().nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (v) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    LuceneTestCase.useNoMemoryExpensiveCodec =\n        targetClass.isAnnotationPresent(UseNoMemoryExpensiveCodec.class);\n    if (useNoMemoryExpensiveCodec) {\n        System.err.println(\"NOTE: Using no memory expensive codecs (Memory, SimpleText) for \" +\n            targetClass.getSimpleName() + \".\");\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random().nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !useNoMemoryExpensiveCodec)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random(), useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n\n    // Initialize locale/ timezone.\n    TEST_LOCALE = System.getProperty(\"tests.locale\", \"random\");\n    TEST_TIMEZONE = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether TEST_LOCALE was specified or not).\n    Locale randomLocale = randomLocale(random());\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final boolean v = random().nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (v) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    LuceneTestCase.useNoMemoryExpensiveCodec =\n        targetClass.isAnnotationPresent(UseNoMemoryExpensiveCodec.class);\n    if (useNoMemoryExpensiveCodec) {\n        System.err.println(\"NOTE: Using no memory expensive codecs (Memory, SimpleText) for \" +\n            targetClass.getSimpleName() + \".\");\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random().nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random(), useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n\n    // Initialize locale/ timezone.\n    TEST_LOCALE = System.getProperty(\"tests.locale\", \"random\");\n    TEST_TIMEZONE = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether TEST_LOCALE was specified or not).\n    Locale randomLocale = randomLocale(random());\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75b4d037d2c8fd7d68c07be61d25c0260cf8091e","date":1336829560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final boolean v = random().nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (v) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs = new HashSet<String>(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    } else {\n      avoidCodecs = null;\n    }\n    \n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random().nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random(), avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n\n    // Initialize locale/ timezone.\n    TEST_LOCALE = System.getProperty(\"tests.locale\", \"random\");\n    TEST_TIMEZONE = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether TEST_LOCALE was specified or not).\n    Locale randomLocale = randomLocale(random());\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final boolean v = random().nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (v) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    LuceneTestCase.useNoMemoryExpensiveCodec =\n        targetClass.isAnnotationPresent(UseNoMemoryExpensiveCodec.class);\n    if (useNoMemoryExpensiveCodec) {\n        System.err.println(\"NOTE: Using no memory expensive codecs (Memory, SimpleText) for \" +\n            targetClass.getSimpleName() + \".\");\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random().nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2)) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !useNoMemoryExpensiveCodec)) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8)) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random(), useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n\n    // Initialize locale/ timezone.\n    TEST_LOCALE = System.getProperty(\"tests.locale\", \"random\");\n    TEST_TIMEZONE = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether TEST_LOCALE was specified or not).\n    Locale randomLocale = randomLocale(random());\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":["197be891529ba2dea8287e2251906be9533dc8ea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","sourceOld":"  @BeforeClass\n  static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final boolean v = random().nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (v) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs = new HashSet<String>(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    } else {\n      avoidCodecs = null;\n    }\n    \n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random().nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random(), avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n\n    // Initialize locale/ timezone.\n    TEST_LOCALE = System.getProperty(\"tests.locale\", \"random\");\n    TEST_TIMEZONE = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether TEST_LOCALE was specified or not).\n    Locale randomLocale = randomLocale(random());\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":["197be891529ba2dea8287e2251906be9533dc8ea"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5cf17bea86a5acbc573c72be7efa0e720bd44b3a":["1b6d24a43afa23be4e3a366300f50af467daef1d"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","1b6d24a43afa23be4e3a366300f50af467daef1d"],"1e6d0f38037e0125421d8e737992d511b5567b26":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["1e6d0f38037e0125421d8e737992d511b5567b26","44549822b9113925bd45e53c1e0028ab2e1d1d7f"],"7c7d4195d2838330e4e86a6c09f67dcca69cce98":["4d6122fb7003472460e2b1bbd090f2ddb8efaf84"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44549822b9113925bd45e53c1e0028ab2e1d1d7f":["1e6d0f38037e0125421d8e737992d511b5567b26"],"1ca7411778e8c348c6c98ce745b7a7b69998a4de":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["b323509539b8f72944f18209655b8333d1fc63dc"],"1b6d24a43afa23be4e3a366300f50af467daef1d":["44549822b9113925bd45e53c1e0028ab2e1d1d7f"],"4d6122fb7003472460e2b1bbd090f2ddb8efaf84":["1ca7411778e8c348c6c98ce745b7a7b69998a4de"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b323509539b8f72944f18209655b8333d1fc63dc":["7c7d4195d2838330e4e86a6c09f67dcca69cce98"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5cf17bea86a5acbc573c72be7efa0e720bd44b3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5da0b42730b6b99b31389ef94cb97384e83b9ede"]},"commit2Childs":{"5cf17bea86a5acbc573c72be7efa0e720bd44b3a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["38e3b736c7ca086d61b7dbb841c905ee115490da"],"1e6d0f38037e0125421d8e737992d511b5567b26":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","44549822b9113925bd45e53c1e0028ab2e1d1d7f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1e6d0f38037e0125421d8e737992d511b5567b26"],"7c7d4195d2838330e4e86a6c09f67dcca69cce98":["b323509539b8f72944f18209655b8333d1fc63dc"],"44549822b9113925bd45e53c1e0028ab2e1d1d7f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","1b6d24a43afa23be4e3a366300f50af467daef1d"],"1ca7411778e8c348c6c98ce745b7a7b69998a4de":["4d6122fb7003472460e2b1bbd090f2ddb8efaf84"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"1b6d24a43afa23be4e3a366300f50af467daef1d":["5cf17bea86a5acbc573c72be7efa0e720bd44b3a","38e3b736c7ca086d61b7dbb841c905ee115490da"],"4d6122fb7003472460e2b1bbd090f2ddb8efaf84":["7c7d4195d2838330e4e86a6c09f67dcca69cce98"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b323509539b8f72944f18209655b8333d1fc63dc":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["1ca7411778e8c348c6c98ce745b7a7b69998a4de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}