{"path":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String],Map).mjava","commits":[{"id":"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","date":1293213108,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String],Map).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","sourceNew":"  @Override\n  public void writeDocList(String name, final DocList ids, Set<String> fields, Map otherFields) throws IOException\n  {\n    this.writeDocuments( name, new DocumentListInfo()\n    {\n      public int getCount() {\n        return ids.size();\n      }\n\n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = req.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","sourceOld":"  public final void writeDocList(String name, final DocList ids, Set<String> fields) throws IOException \n  {\n    this.writeDocuments( name, new DocumentListInfo() \n    {  \n      public int getCount() {\n        return ids.size();\n      }\n      \n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = request.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String],Map).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","sourceNew":"  @Override\n  public void writeDocList(String name, final DocList ids, Set<String> fields, Map otherFields) throws IOException\n  {\n    this.writeDocuments( name, new DocumentListInfo()\n    {\n      public int getCount() {\n        return ids.size();\n      }\n\n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = req.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","sourceOld":"  public final void writeDocList(String name, final DocList ids, Set<String> fields) throws IOException \n  {\n    this.writeDocuments( name, new DocumentListInfo() \n    {  \n      public int getCount() {\n        return ids.size();\n      }\n      \n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = request.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeDocList(String name, final DocList ids, Set<String> fields, Map otherFields) throws IOException\n  {\n    this.writeDocuments( name, new DocumentListInfo()\n    {\n      public int getCount() {\n        return ids.size();\n      }\n\n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = req.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeDocList(String name, final DocList ids, Set<String> fields, Map otherFields) throws IOException\n  {\n    this.writeDocuments( name, new DocumentListInfo()\n    {\n      public int getCount() {\n        return ids.size();\n      }\n\n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = req.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeDocList(String name, final DocList ids, Set<String> fields, Map otherFields) throws IOException\n  {\n    this.writeDocuments( name, new DocumentListInfo()\n    {\n      public int getCount() {\n        return ids.size();\n      }\n\n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = req.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeDocList(String name, final DocList ids, Set<String> fields, Map otherFields) throws IOException\n  {\n    this.writeDocuments( name, new DocumentListInfo()\n    {\n      public int getCount() {\n        return ids.size();\n      }\n\n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = req.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","6aedf81f068e430dec27d94310415cc6ff52731c"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","6aedf81f068e430dec27d94310415cc6ff52731c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6aedf81f068e430dec27d94310415cc6ff52731c":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aedf81f068e430dec27d94310415cc6ff52731c"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","6aedf81f068e430dec27d94310415cc6ff52731c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}