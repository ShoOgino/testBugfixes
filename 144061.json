{"path":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#collectionCreateSearchDeleteTwice().mjava","commits":[{"id":"5719bfb2650ba43855e20564d39873bbbdc7f02c","date":1500676092,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#collectionCreateSearchDeleteTwice().mjava","pathOld":"/dev/null","sourceNew":"  public void collectionCreateSearchDeleteTwice() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    for (int i = 0 ; i < 2 ; ++i) {\n      // create collection\n      createCollection(collectionName);\n\n      // check that there's no left-over state\n      assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // modify/query collection\n      new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n      QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n      assertEquals(1, rsp.getResults().getNumFound());\n\n      // delete the collection\n      CollectionAdminRequest.deleteCollection(collectionName).process(client);\n      AbstractDistribZkTestBase.waitForCollectionToDisappear\n          (collectionName, client.getZkStateReader(), true, true, 330);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#collectionCreateSearchDeleteTwice().mjava","pathOld":"/dev/null","sourceNew":"  public void collectionCreateSearchDeleteTwice() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    for (int i = 0 ; i < 2 ; ++i) {\n      // create collection\n      createCollection(collectionName);\n\n      // check that there's no left-over state\n      assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // modify/query collection\n      new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n      QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n      assertEquals(1, rsp.getResults().getNumFound());\n\n      // delete the collection\n      CollectionAdminRequest.deleteCollection(collectionName).process(client);\n      AbstractDistribZkTestBase.waitForCollectionToDisappear\n          (collectionName, client.getZkStateReader(), true, true, 330);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#collectionCreateSearchDeleteTwice().mjava","pathOld":"/dev/null","sourceNew":"  public void collectionCreateSearchDeleteTwice() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    for (int i = 0 ; i < 2 ; ++i) {\n      // create collection\n      createCollection(collectionName);\n\n      // check that there's no left-over state\n      assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // modify/query collection\n      new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n      QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n      assertEquals(1, rsp.getResults().getNumFound());\n\n      // delete the collection\n      CollectionAdminRequest.deleteCollection(collectionName).process(client);\n      AbstractDistribZkTestBase.waitForCollectionToDisappear\n          (collectionName, client.getZkStateReader(), true, true, 330);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#collectionCreateSearchDeleteTwice().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#collectionCreateSearchDeleteTwice().mjava","sourceNew":"  public void collectionCreateSearchDeleteTwice() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    for (int i = 0 ; i < 2 ; ++i) {\n      // create collection\n      createCollection(collectionName);\n\n      // check that there's no left-over state\n      assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // modify/query collection\n      Thread.sleep(100); // not everyone is up to date just because we waited to make sure one was - pause a moment\n      new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n      QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n      assertEquals(1, rsp.getResults().getNumFound());\n\n      // delete the collection\n     cluster.deleteAllCollections();\n    }\n  }\n\n","sourceOld":"  public void collectionCreateSearchDeleteTwice() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    for (int i = 0 ; i < 2 ; ++i) {\n      // create collection\n      createCollection(collectionName);\n\n      // check that there's no left-over state\n      assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // modify/query collection\n      new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n      QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n      assertEquals(1, rsp.getResults().getNumFound());\n\n      // delete the collection\n      CollectionAdminRequest.deleteCollection(collectionName).process(client);\n      AbstractDistribZkTestBase.waitForCollectionToDisappear\n          (collectionName, client.getZkStateReader(), true, true, 330);\n    }\n  }\n\n","bugFix":["5719bfb2650ba43855e20564d39873bbbdc7f02c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a52341299179de5479672f7cf518bf4b173f34b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"a52341299179de5479672f7cf518bf4b173f34b3":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}