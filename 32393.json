{"path":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoMatch().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoMatch().mjava","sourceNew":"  public void testNoMatch() throws Exception {\n    PayloadTermQuery query = new PayloadTermQuery(new Term(PayloadHelper.FIELD, \"junk\"),\n            new MaxPayloadFunction());\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 0, hits.totalHits == 0);\n\n  }\n\n","sourceOld":"  public void testNoMatch() throws Exception {\n    PayloadTermQuery query = new PayloadTermQuery(new Term(PayloadHelper.FIELD, \"junk\"),\n            new MaxPayloadFunction());\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 0, hits.totalHits == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoMatch().mjava","sourceNew":"  public void testNoMatch() throws Exception {\n    PayloadTermQuery query = new PayloadTermQuery(new Term(PayloadHelper.FIELD, \"junk\"),\n            new MaxPayloadFunction());\n    TopDocs hits = searcher.search(query, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 0, hits.totalHits == 0);\n\n  }\n\n","sourceOld":"  public void testNoMatch() throws Exception {\n    PayloadTermQuery query = new PayloadTermQuery(new Term(PayloadHelper.FIELD, \"junk\"),\n            new MaxPayloadFunction());\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 0, hits.totalHits == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73561ba4c64c1aea2ba4b3873f80b9b2a2946816","date":1438618499,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoMatch().mjava","sourceNew":"  public void testNoMatch() throws Exception {\n    SpanQuery query = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.FIELD, \"junk\")),\n            new MaxPayloadFunction());\n    TopDocs hits = searcher.search(query, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 0, hits.totalHits == 0);\n\n  }\n\n","sourceOld":"  public void testNoMatch() throws Exception {\n    PayloadTermQuery query = new PayloadTermQuery(new Term(PayloadHelper.FIELD, \"junk\"),\n            new MaxPayloadFunction());\n    TopDocs hits = searcher.search(query, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 0, hits.totalHits == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadTermQuery#testNoMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoMatch().mjava","sourceNew":"  public void testNoMatch() throws Exception {\n    SpanQuery query = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.FIELD, \"junk\")),\n            new MaxPayloadFunction());\n    TopDocs hits = searcher.search(query, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 0, hits.totalHits == 0);\n\n  }\n\n","sourceOld":"  public void testNoMatch() throws Exception {\n    SpanQuery query = new PayloadScoreQuery(new SpanTermQuery(new Term(PayloadHelper.FIELD, \"junk\")),\n            new MaxPayloadFunction());\n    TopDocs hits = searcher.search(query, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 0, hits.totalHits == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["73561ba4c64c1aea2ba4b3873f80b9b2a2946816"],"73561ba4c64c1aea2ba4b3873f80b9b2a2946816":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73561ba4c64c1aea2ba4b3873f80b9b2a2946816":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["73561ba4c64c1aea2ba4b3873f80b9b2a2946816"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}