{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#booleanScorer(LeafReaderContext,Bits).mjava","commits":[{"id":"a18a03f140cbd3f78694787c9f98cf452aab7b7f","date":1423241474,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#booleanScorer(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  /** Try to build a boolean scorer for this weight. Returns null if {@link BooleanScorer}\n   *  cannot be used. */\n  // pkg-private for forcing use of BooleanScorer in tests\n  BooleanScorer booleanScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.clauses().iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      BulkScorer subScorer = w.bulkScorer(context, acceptDocs);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        // TODO: there are some cases where BooleanScorer\n        // would handle conjunctions faster than\n        // BooleanScorer2...\n        return null;\n      } else if (c.isProhibited()) {\n        // TODO: there are some cases where BooleanScorer could do this faster\n        return null;\n      } else {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.minNrShouldMatch > optional.size()) {\n      return null;\n    }\n\n    return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, query.minNrShouldMatch));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eebe1eb6c118902a9d33eaecaa4cbaf63ae3513","date":1430308154,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#booleanScorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#booleanScorer(LeafReaderContext,Bits).mjava","sourceNew":"  /** Try to build a boolean scorer for this weight. Returns null if {@link BooleanScorer}\n   *  cannot be used. */\n  // pkg-private for forcing use of BooleanScorer in tests\n  BooleanScorer booleanScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.clauses().iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      BulkScorer subScorer = w.bulkScorer(context, acceptDocs);\n      \n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        // TODO: there are some cases where BooleanScorer\n        // would handle conjunctions faster than\n        // BooleanScorer2...\n        return null;\n      } else if (c.isProhibited()) {\n        // TODO: there are some cases where BooleanScorer could do this faster\n        return null;\n      } else {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.minNrShouldMatch > optional.size()) {\n      return null;\n    }\n\n    return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, query.minNrShouldMatch), needsScores);\n  }\n\n","sourceOld":"  /** Try to build a boolean scorer for this weight. Returns null if {@link BooleanScorer}\n   *  cannot be used. */\n  // pkg-private for forcing use of BooleanScorer in tests\n  BooleanScorer booleanScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.clauses().iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      BulkScorer subScorer = w.bulkScorer(context, acceptDocs);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        // TODO: there are some cases where BooleanScorer\n        // would handle conjunctions faster than\n        // BooleanScorer2...\n        return null;\n      } else if (c.isProhibited()) {\n        // TODO: there are some cases where BooleanScorer could do this faster\n        return null;\n      } else {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.minNrShouldMatch > optional.size()) {\n      return null;\n    }\n\n    return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, query.minNrShouldMatch));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#booleanScorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#booleanScorer(LeafReaderContext,Bits).mjava","sourceNew":"  /** Try to build a boolean scorer for this weight. Returns null if {@link BooleanScorer}\n   *  cannot be used. */\n  // pkg-private for forcing use of BooleanScorer in tests\n  BooleanScorer booleanScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      BulkScorer subScorer = w.bulkScorer(context, acceptDocs);\n      \n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        // TODO: there are some cases where BooleanScorer\n        // would handle conjunctions faster than\n        // BooleanScorer2...\n        return null;\n      } else if (c.isProhibited()) {\n        // TODO: there are some cases where BooleanScorer could do this faster\n        return null;\n      } else {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, query.getMinimumNumberShouldMatch()), needsScores);\n  }\n\n","sourceOld":"  /** Try to build a boolean scorer for this weight. Returns null if {@link BooleanScorer}\n   *  cannot be used. */\n  // pkg-private for forcing use of BooleanScorer in tests\n  BooleanScorer booleanScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.clauses().iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      BulkScorer subScorer = w.bulkScorer(context, acceptDocs);\n      \n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        // TODO: there are some cases where BooleanScorer\n        // would handle conjunctions faster than\n        // BooleanScorer2...\n        return null;\n      } else if (c.isProhibited()) {\n        // TODO: there are some cases where BooleanScorer could do this faster\n        return null;\n      } else {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.minNrShouldMatch > optional.size()) {\n      return null;\n    }\n\n    return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, query.minNrShouldMatch), needsScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#booleanScorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#booleanScorer(LeafReaderContext,Bits).mjava","sourceNew":"  /** Try to build a boolean scorer for this weight. Returns null if {@link BooleanScorer}\n   *  cannot be used. */\n  // pkg-private for forcing use of BooleanScorer in tests\n  BooleanScorer booleanScorer(LeafReaderContext context) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      BulkScorer subScorer = w.bulkScorer(context);\n      \n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        // TODO: there are some cases where BooleanScorer\n        // would handle conjunctions faster than\n        // BooleanScorer2...\n        return null;\n      } else if (c.isProhibited()) {\n        // TODO: there are some cases where BooleanScorer could do this faster\n        return null;\n      } else {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, query.getMinimumNumberShouldMatch()), needsScores);\n  }\n\n","sourceOld":"  /** Try to build a boolean scorer for this weight. Returns null if {@link BooleanScorer}\n   *  cannot be used. */\n  // pkg-private for forcing use of BooleanScorer in tests\n  BooleanScorer booleanScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    List<BulkScorer> optional = new ArrayList<BulkScorer>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      BulkScorer subScorer = w.bulkScorer(context, acceptDocs);\n      \n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        // TODO: there are some cases where BooleanScorer\n        // would handle conjunctions faster than\n        // BooleanScorer2...\n        return null;\n      } else if (c.isProhibited()) {\n        // TODO: there are some cases where BooleanScorer could do this faster\n        return null;\n      } else {\n        optional.add(subScorer);\n      }\n    }\n\n    if (optional.size() == 0) {\n      return null;\n    }\n\n    if (query.getMinimumNumberShouldMatch() > optional.size()) {\n      return null;\n    }\n\n    return new BooleanScorer(this, disableCoord, maxCoord, optional, Math.max(1, query.getMinimumNumberShouldMatch()), needsScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["9eebe1eb6c118902a9d33eaecaa4cbaf63ae3513"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"9eebe1eb6c118902a9d33eaecaa4cbaf63ae3513":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9eebe1eb6c118902a9d33eaecaa4cbaf63ae3513":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["9eebe1eb6c118902a9d33eaecaa4cbaf63ae3513"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}