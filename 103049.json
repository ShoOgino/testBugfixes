{"path":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#MultiLevelSkipListReader(IndexInput,int,int,int).mjava","commits":[{"id":"e06babaa3e8b78433266149d50d1500ba941652c","date":1344293820,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#MultiLevelSkipListReader(IndexInput,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  // nocommit made protected from public\n  protected MultiLevelSkipListReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, int skipMultiplier) {\n    this.skipStream = new IndexInput[maxSkipLevels];\n    this.skipPointer = new long[maxSkipLevels];\n    this.childPointer = new long[maxSkipLevels];\n    this.numSkipped = new int[maxSkipLevels];\n    this.maxNumberOfSkipLevels = maxSkipLevels;\n    this.skipInterval = new int[maxSkipLevels];\n    this.skipMultiplier = skipMultiplier;\n    this.skipStream [0]= skipStream;\n    this.inputIsBuffered = (skipStream instanceof BufferedIndexInput);\n    this.skipInterval[0] = skipInterval;\n    for (int i = 1; i < maxSkipLevels; i++) {\n      // cache skip intervals\n      this.skipInterval[i] = this.skipInterval[i - 1] * skipMultiplier;\n    }\n    skipDoc = new int[maxSkipLevels];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3aebee6cb78722e5bc6e2baced39db7a5412eb","date":1345028634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#MultiLevelSkipListReader(IndexInput,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#MultiLevelSkipListReader(IndexInput,int,int,int).mjava","sourceNew":"  protected MultiLevelSkipListReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, int skipMultiplier) {\n    this.skipStream = new IndexInput[maxSkipLevels];\n    this.skipPointer = new long[maxSkipLevels];\n    this.childPointer = new long[maxSkipLevels];\n    this.numSkipped = new int[maxSkipLevels];\n    this.maxNumberOfSkipLevels = maxSkipLevels;\n    this.skipInterval = new int[maxSkipLevels];\n    this.skipMultiplier = skipMultiplier;\n    this.skipStream [0]= skipStream;\n    this.inputIsBuffered = (skipStream instanceof BufferedIndexInput);\n    this.skipInterval[0] = skipInterval;\n    for (int i = 1; i < maxSkipLevels; i++) {\n      // cache skip intervals\n      this.skipInterval[i] = this.skipInterval[i - 1] * skipMultiplier;\n    }\n    skipDoc = new int[maxSkipLevels];\n  }\n\n","sourceOld":"  // nocommit made protected from public\n  protected MultiLevelSkipListReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, int skipMultiplier) {\n    this.skipStream = new IndexInput[maxSkipLevels];\n    this.skipPointer = new long[maxSkipLevels];\n    this.childPointer = new long[maxSkipLevels];\n    this.numSkipped = new int[maxSkipLevels];\n    this.maxNumberOfSkipLevels = maxSkipLevels;\n    this.skipInterval = new int[maxSkipLevels];\n    this.skipMultiplier = skipMultiplier;\n    this.skipStream [0]= skipStream;\n    this.inputIsBuffered = (skipStream instanceof BufferedIndexInput);\n    this.skipInterval[0] = skipInterval;\n    for (int i = 1; i < maxSkipLevels; i++) {\n      // cache skip intervals\n      this.skipInterval[i] = this.skipInterval[i - 1] * skipMultiplier;\n    }\n    skipDoc = new int[maxSkipLevels];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#MultiLevelSkipListReader(IndexInput,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  protected MultiLevelSkipListReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, int skipMultiplier) {\n    this.skipStream = new IndexInput[maxSkipLevels];\n    this.skipPointer = new long[maxSkipLevels];\n    this.childPointer = new long[maxSkipLevels];\n    this.numSkipped = new int[maxSkipLevels];\n    this.maxNumberOfSkipLevels = maxSkipLevels;\n    this.skipInterval = new int[maxSkipLevels];\n    this.skipMultiplier = skipMultiplier;\n    this.skipStream [0]= skipStream;\n    this.inputIsBuffered = (skipStream instanceof BufferedIndexInput);\n    this.skipInterval[0] = skipInterval;\n    for (int i = 1; i < maxSkipLevels; i++) {\n      // cache skip intervals\n      this.skipInterval[i] = this.skipInterval[i - 1] * skipMultiplier;\n    }\n    skipDoc = new int[maxSkipLevels];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#MultiLevelSkipListReader(IndexInput,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  protected MultiLevelSkipListReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, int skipMultiplier) {\n    this.skipStream = new IndexInput[maxSkipLevels];\n    this.skipPointer = new long[maxSkipLevels];\n    this.childPointer = new long[maxSkipLevels];\n    this.numSkipped = new int[maxSkipLevels];\n    this.maxNumberOfSkipLevels = maxSkipLevels;\n    this.skipInterval = new int[maxSkipLevels];\n    this.skipMultiplier = skipMultiplier;\n    this.skipStream [0]= skipStream;\n    this.inputIsBuffered = (skipStream instanceof BufferedIndexInput);\n    this.skipInterval[0] = skipInterval;\n    for (int i = 1; i < maxSkipLevels; i++) {\n      // cache skip intervals\n      this.skipInterval[i] = this.skipInterval[i - 1] * skipMultiplier;\n    }\n    skipDoc = new int[maxSkipLevels];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#MultiLevelSkipListReader(IndexInput,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#MultiLevelSkipListReader(IndexInput,int,int,int).mjava","sourceNew":"  /** Creates a {@code MultiLevelSkipListReader}. */\n  protected MultiLevelSkipListReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, int skipMultiplier) {\n    this.skipStream = new IndexInput[maxSkipLevels];\n    this.skipPointer = new long[maxSkipLevels];\n    this.childPointer = new long[maxSkipLevels];\n    this.numSkipped = new int[maxSkipLevels];\n    this.maxNumberOfSkipLevels = maxSkipLevels;\n    this.skipInterval = new int[maxSkipLevels];\n    this.skipMultiplier = skipMultiplier;\n    this.skipStream [0]= skipStream;\n    this.inputIsBuffered = (skipStream instanceof BufferedIndexInput);\n    this.skipInterval[0] = skipInterval;\n    for (int i = 1; i < maxSkipLevels; i++) {\n      // cache skip intervals\n      this.skipInterval[i] = this.skipInterval[i - 1] * skipMultiplier;\n    }\n    skipDoc = new int[maxSkipLevels];\n  }\n\n","sourceOld":"  protected MultiLevelSkipListReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, int skipMultiplier) {\n    this.skipStream = new IndexInput[maxSkipLevels];\n    this.skipPointer = new long[maxSkipLevels];\n    this.childPointer = new long[maxSkipLevels];\n    this.numSkipped = new int[maxSkipLevels];\n    this.maxNumberOfSkipLevels = maxSkipLevels;\n    this.skipInterval = new int[maxSkipLevels];\n    this.skipMultiplier = skipMultiplier;\n    this.skipStream [0]= skipStream;\n    this.inputIsBuffered = (skipStream instanceof BufferedIndexInput);\n    this.skipInterval[0] = skipInterval;\n    for (int i = 1; i < maxSkipLevels; i++) {\n      // cache skip intervals\n      this.skipInterval[i] = this.skipInterval[i - 1] * skipMultiplier;\n    }\n    skipDoc = new int[maxSkipLevels];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c924ed848363114bc21dd13c3a1953c42aefb554","date":1586956211,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#MultiLevelSkipListReader(IndexInput,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#MultiLevelSkipListReader(IndexInput,int,int,int).mjava","sourceNew":"  /** Creates a {@code MultiLevelSkipListReader}. */\n  protected MultiLevelSkipListReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, int skipMultiplier) {\n    this.skipStream = new IndexInput[maxSkipLevels];\n    this.skipPointer = new long[maxSkipLevels];\n    this.childPointer = new long[maxSkipLevels];\n    this.numSkipped = new int[maxSkipLevels];\n    this.maxNumberOfSkipLevels = maxSkipLevels;\n    this.skipInterval = new int[maxSkipLevels];\n    this.skipMultiplier = skipMultiplier;\n    this.skipStream [0]= skipStream;\n    this.skipInterval[0] = skipInterval;\n    for (int i = 1; i < maxSkipLevels; i++) {\n      // cache skip intervals\n      this.skipInterval[i] = this.skipInterval[i - 1] * skipMultiplier;\n    }\n    skipDoc = new int[maxSkipLevels];\n  }\n\n","sourceOld":"  /** Creates a {@code MultiLevelSkipListReader}. */\n  protected MultiLevelSkipListReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, int skipMultiplier) {\n    this.skipStream = new IndexInput[maxSkipLevels];\n    this.skipPointer = new long[maxSkipLevels];\n    this.childPointer = new long[maxSkipLevels];\n    this.numSkipped = new int[maxSkipLevels];\n    this.maxNumberOfSkipLevels = maxSkipLevels;\n    this.skipInterval = new int[maxSkipLevels];\n    this.skipMultiplier = skipMultiplier;\n    this.skipStream [0]= skipStream;\n    this.inputIsBuffered = (skipStream instanceof BufferedIndexInput);\n    this.skipInterval[0] = skipInterval;\n    for (int i = 1; i < maxSkipLevels; i++) {\n      // cache skip intervals\n      this.skipInterval[i] = this.skipInterval[i - 1] * skipMultiplier;\n    }\n    skipDoc = new int[maxSkipLevels];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"c924ed848363114bc21dd13c3a1953c42aefb554":["519435fc0d6082a1b8081f9492b714f716877437"],"519435fc0d6082a1b8081f9492b714f716877437":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3aebee6cb78722e5bc6e2baced39db7a5412eb"],"e06babaa3e8b78433266149d50d1500ba941652c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c924ed848363114bc21dd13c3a1953c42aefb554"],"dc3aebee6cb78722e5bc6e2baced39db7a5412eb":["e06babaa3e8b78433266149d50d1500ba941652c"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"c924ed848363114bc21dd13c3a1953c42aefb554":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"519435fc0d6082a1b8081f9492b714f716877437":["c924ed848363114bc21dd13c3a1953c42aefb554"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e06babaa3e8b78433266149d50d1500ba941652c"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","519435fc0d6082a1b8081f9492b714f716877437"],"e06babaa3e8b78433266149d50d1500ba941652c":["dc3aebee6cb78722e5bc6e2baced39db7a5412eb"],"dc3aebee6cb78722e5bc6e2baced39db7a5412eb":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}