{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","sourceNew":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","sourceNew":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","sourceNew":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","date":1345037674,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","sourceNew":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n      directoryFactory.release(getDirectory());\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":["058801f8673d53a5abac8088204860ec29a40f0d","ab20a04a303d3d2a5078076f4633e0482d643cc0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","sourceNew":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n      directoryFactory.release(getDirectory());\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","sourceNew":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n      directoryFactory.release(getDirectory());\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf","date":1355382810,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","sourceNew":"  @Override\n  public void rollback() throws IOException {\n    try {\n      while (true) {\n        try {\n          super.rollback();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        }\n        break;\n      }\n    } finally {\n      isClosed = true;\n      directoryFactory.release(getDirectory());\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n      directoryFactory.release(getDirectory());\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":["ab20a04a303d3d2a5078076f4633e0482d643cc0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","sourceNew":"  @Override\n  public void rollback() throws IOException {\n    try {\n      while (true) {\n        try {\n          super.rollback();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        }\n        break;\n      }\n    } finally {\n      isClosed = true;\n      directoryFactory.release(getDirectory());\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void rollback() throws IOException {\n    try {\n      super.rollback();\n    } finally {\n      isClosed = true;\n      directoryFactory.release(getDirectory());\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","sourceNew":"  @Override\n  public void rollback() throws IOException {\n    Directory dir = getDirectory();\n    try {\n      while (true) {\n        try {\n          super.rollback();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        }\n        break;\n      }\n    } finally {\n      isClosed = true;\n      directoryFactory.release(dir);\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void rollback() throws IOException {\n    try {\n      while (true) {\n        try {\n          super.rollback();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        }\n        break;\n      }\n    } finally {\n      isClosed = true;\n      directoryFactory.release(getDirectory());\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"bugIntro":["ab20a04a303d3d2a5078076f4633e0482d643cc0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab20a04a303d3d2a5078076f4633e0482d643cc0","date":1398201811,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","sourceNew":"  @Override\n  public void rollback() throws IOException {\n    log.debug(\"Rollback Writer \" + name);\n    try {\n      super.rollback();\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      log.error(\"Exception rolling back IndexWriter\", t);\n    } finally {\n      cleanup();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void rollback() throws IOException {\n    Directory dir = getDirectory();\n    try {\n      while (true) {\n        try {\n          super.rollback();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        }\n        break;\n      }\n    } finally {\n      isClosed = true;\n      directoryFactory.release(dir);\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":["eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf","8aa1e8f6e0c5cd91a3e972bbcabf1f88301b5e64","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","058801f8673d53a5abac8088204860ec29a40f0d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","sourceNew":"  @Override\n  public void rollback() throws IOException {\n    log.debug(\"Rollback Writer \" + name);\n    try {\n      super.rollback();\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      log.error(\"Exception rolling back IndexWriter\", t);\n    } finally {\n      cleanup();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void rollback() throws IOException {\n    Directory dir = getDirectory();\n    try {\n      while (true) {\n        try {\n          super.rollback();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        }\n        break;\n      }\n    } finally {\n      isClosed = true;\n      directoryFactory.release(dir);\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#rollback().mjava","sourceNew":"  @Override\n  public void rollback() throws IOException {\n    log.debug(\"Rollback Writer {}\", name);\n    try {\n      super.rollback();\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      log.error(\"Exception rolling back IndexWriter\", t);\n    } finally {\n      cleanup();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void rollback() throws IOException {\n    log.debug(\"Rollback Writer \" + name);\n    try {\n      super.rollback();\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      log.error(\"Exception rolling back IndexWriter\", t);\n    } finally {\n      cleanup();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf"],"740d649f013f07efbeb73ca854f106c60166e7c0":["ab20a04a303d3d2a5078076f4633e0482d643cc0"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["058801f8673d53a5abac8088204860ec29a40f0d","ab20a04a303d3d2a5078076f4633e0482d643cc0"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["c26f00b574427b55127e869b935845554afde1fa","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"ab20a04a303d3d2a5078076f4633e0482d643cc0":["058801f8673d53a5abac8088204860ec29a40f0d"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["c26f00b574427b55127e869b935845554afde1fa"],"058801f8673d53a5abac8088204860ec29a40f0d":["eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf"],"eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["c26f00b574427b55127e869b935845554afde1fa","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"c26f00b574427b55127e869b935845554afde1fa":["616c1830142ff5c1ddedec1ed898733b73c8e23b","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"ab20a04a303d3d2a5078076f4633e0482d643cc0":["740d649f013f07efbeb73ca854f106c60166e7c0","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","616c1830142ff5c1ddedec1ed898733b73c8e23b","eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"058801f8673d53a5abac8088204860ec29a40f0d":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","ab20a04a303d3d2a5078076f4633e0482d643cc0"],"eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","058801f8673d53a5abac8088204860ec29a40f0d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}