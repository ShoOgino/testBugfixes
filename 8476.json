{"path":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","commits":[{"id":"e0eacdfc94f700086189bb44f7f73ed9cfd85c75","date":1095252623,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","pathOld":"/dev/null","sourceNew":"  /** The value of the field in Binary, or null.  If null, the Reader or\n     String value is used.  Exactly one of stringValue(), readerValue() and\n     binaryValue() must be set. */\n  public byte[] binaryValue() { return binaryValue; }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3d038c41e70424a134ef69a524f3cc0fb40d854","date":1096548028,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","pathOld":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","sourceNew":"  /** The value of the field in Binary, or null.  If null, the Reader or\n   * String value is used.  Exactly one of stringValue(), readerValue() and\n   * binaryValue() must be set. */\n  public byte[] binaryValue()   { try { return (byte[])fieldsData; } catch (ClassCastException ignore) { return null; } }\n\n","sourceOld":"  /** The value of the field in Binary, or null.  If null, the Reader or\n     String value is used.  Exactly one of stringValue(), readerValue() and\n     binaryValue() must be set. */\n  public byte[] binaryValue() { return binaryValue; }\n\n","bugFix":null,"bugIntro":["b68d694ed166e54434863ebd8d1350d4630c216a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b68d694ed166e54434863ebd8d1350d4630c216a","date":1131593043,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","pathOld":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","sourceNew":"  /** The value of the field in Binary, or null.  If null, the Reader or\n   * String value is used.  Exactly one of stringValue(), readerValue() and\n   * binaryValue() must be set. */\n  public byte[] binaryValue()   { return fieldsData instanceof byte[] ? (byte[])fieldsData : null; }\n\n","sourceOld":"  /** The value of the field in Binary, or null.  If null, the Reader or\n   * String value is used.  Exactly one of stringValue(), readerValue() and\n   * binaryValue() must be set. */\n  public byte[] binaryValue()   { try { return (byte[])fieldsData; } catch (ClassCastException ignore) { return null; } }\n\n","bugFix":["b3d038c41e70424a134ef69a524f3cc0fb40d854"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42579622cc27f9908e64f29fa1130bfc28306009","date":1177874771,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","pathOld":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","sourceNew":"  /** The value of the field in Binary, or null.  If null, the Reader value,\n   * String value, or TokenStream value is used. Exactly one of stringValue(), \n   * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n  public byte[] binaryValue()   { return fieldsData instanceof byte[] ? (byte[])fieldsData : null; }\n\n","sourceOld":"  /** The value of the field in Binary, or null.  If null, the Reader or\n   * String value is used.  Exactly one of stringValue(), readerValue() and\n   * binaryValue() must be set. */\n  public byte[] binaryValue()   { return fieldsData instanceof byte[] ? (byte[])fieldsData : null; }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b8bbb8821e38be1de1192f7c7428e7dc8036a5","date":1205276030,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","pathOld":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","sourceNew":"  /** The value of the field in Binary, or null.  If null, the Reader value,\n   * String value, or TokenStream value is used. Exactly one of stringValue(), \n   * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n  public byte[] binaryValue()   { return isBinary ? (byte[])fieldsData : null; }\n\n","sourceOld":"  /** The value of the field in Binary, or null.  If null, the Reader value,\n   * String value, or TokenStream value is used. Exactly one of stringValue(), \n   * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n  public byte[] binaryValue()   { return fieldsData instanceof byte[] ? (byte[])fieldsData : null; }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d7203a8194ca217ec527231120df075e9bec237","date":1219055463,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","pathOld":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","sourceNew":"  /** The value of the field in Binary, or null.  If null, the Reader value,\n   * String value, or TokenStream value is used. Exactly one of stringValue(), \n   * readerValue(), getBinaryValue(), and tokenStreamValue() must be set.\n   * @deprecated This method must allocate a new byte[] if\n   * the {@link AbstractField#getBinaryOffset()} is non-zero\n   * or {@link AbstractField#getBinaryLength()} is not the\n   * full length of the byte[]. Please use {@link\n   * AbstractField#getBinaryValue()} instead, which simply\n   * returns the byte[].\n   */ \n  public byte[] binaryValue() {\n    if (!isBinary)\n      return null;\n    final byte[] data = (byte[]) fieldsData;\n    if (binaryOffset == 0 && data.length == binaryLength)\n      return data; //Optimization\n    \n    final byte[] ret = new byte[binaryLength];\n    System.arraycopy(data, binaryOffset, ret, 0, binaryLength);\n    return ret;    \n  }\n\n","sourceOld":"  /** The value of the field in Binary, or null.  If null, the Reader value,\n   * String value, or TokenStream value is used. Exactly one of stringValue(), \n   * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n  public byte[] binaryValue()   { return isBinary ? (byte[])fieldsData : null; }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb38e9df66981cbc64d27be81176659de4823526","date":1245712006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","pathOld":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","sourceNew":"  /** The value of the field in Binary, or null.  If null, the Reader value,\n   * or String value is used. Exactly one of stringValue(),\n   * readerValue(), and getBinaryValue() must be set.\n   * @deprecated This method must allocate a new byte[] if\n   * the {@link AbstractField#getBinaryOffset()} is non-zero\n   * or {@link AbstractField#getBinaryLength()} is not the\n   * full length of the byte[]. Please use {@link\n   * AbstractField#getBinaryValue()} instead, which simply\n   * returns the byte[].\n   */ \n  public byte[] binaryValue() {\n    if (!isBinary)\n      return null;\n    final byte[] data = (byte[]) fieldsData;\n    if (binaryOffset == 0 && data.length == binaryLength)\n      return data; //Optimization\n    \n    final byte[] ret = new byte[binaryLength];\n    System.arraycopy(data, binaryOffset, ret, 0, binaryLength);\n    return ret;    \n  }\n\n","sourceOld":"  /** The value of the field in Binary, or null.  If null, the Reader value,\n   * String value, or TokenStream value is used. Exactly one of stringValue(), \n   * readerValue(), getBinaryValue(), and tokenStreamValue() must be set.\n   * @deprecated This method must allocate a new byte[] if\n   * the {@link AbstractField#getBinaryOffset()} is non-zero\n   * or {@link AbstractField#getBinaryLength()} is not the\n   * full length of the byte[]. Please use {@link\n   * AbstractField#getBinaryValue()} instead, which simply\n   * returns the byte[].\n   */ \n  public byte[] binaryValue() {\n    if (!isBinary)\n      return null;\n    final byte[] data = (byte[]) fieldsData;\n    if (binaryOffset == 0 && data.length == binaryLength)\n      return data; //Optimization\n    \n    final byte[] ret = new byte[binaryLength];\n    System.arraycopy(data, binaryOffset, ret, 0, binaryLength);\n    return ret;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f44f07aa147c21735d6c43bafa4fde560d0362e1","date":1255024926,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/Field#binaryValue().mjava","sourceNew":null,"sourceOld":"  /** The value of the field in Binary, or null.  If null, the Reader value,\n   * or String value is used. Exactly one of stringValue(),\n   * readerValue(), and getBinaryValue() must be set.\n   * @deprecated This method must allocate a new byte[] if\n   * the {@link AbstractField#getBinaryOffset()} is non-zero\n   * or {@link AbstractField#getBinaryLength()} is not the\n   * full length of the byte[]. Please use {@link\n   * AbstractField#getBinaryValue()} instead, which simply\n   * returns the byte[].\n   */ \n  public byte[] binaryValue() {\n    if (!isBinary)\n      return null;\n    final byte[] data = (byte[]) fieldsData;\n    if (binaryOffset == 0 && data.length == binaryLength)\n      return data; //Optimization\n    \n    final byte[] ret = new byte[binaryLength];\n    System.arraycopy(data, binaryOffset, ret, 0, binaryLength);\n    return ret;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["cb38e9df66981cbc64d27be81176659de4823526"],"7d7203a8194ca217ec527231120df075e9bec237":["10b8bbb8821e38be1de1192f7c7428e7dc8036a5"],"b68d694ed166e54434863ebd8d1350d4630c216a":["b3d038c41e70424a134ef69a524f3cc0fb40d854"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb38e9df66981cbc64d27be81176659de4823526":["7d7203a8194ca217ec527231120df075e9bec237"],"e0eacdfc94f700086189bb44f7f73ed9cfd85c75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10b8bbb8821e38be1de1192f7c7428e7dc8036a5":["42579622cc27f9908e64f29fa1130bfc28306009"],"42579622cc27f9908e64f29fa1130bfc28306009":["b68d694ed166e54434863ebd8d1350d4630c216a"],"b3d038c41e70424a134ef69a524f3cc0fb40d854":["e0eacdfc94f700086189bb44f7f73ed9cfd85c75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f44f07aa147c21735d6c43bafa4fde560d0362e1"]},"commit2Childs":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d7203a8194ca217ec527231120df075e9bec237":["cb38e9df66981cbc64d27be81176659de4823526"],"b68d694ed166e54434863ebd8d1350d4630c216a":["42579622cc27f9908e64f29fa1130bfc28306009"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0eacdfc94f700086189bb44f7f73ed9cfd85c75"],"cb38e9df66981cbc64d27be81176659de4823526":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"e0eacdfc94f700086189bb44f7f73ed9cfd85c75":["b3d038c41e70424a134ef69a524f3cc0fb40d854"],"10b8bbb8821e38be1de1192f7c7428e7dc8036a5":["7d7203a8194ca217ec527231120df075e9bec237"],"42579622cc27f9908e64f29fa1130bfc28306009":["10b8bbb8821e38be1de1192f7c7428e7dc8036a5"],"b3d038c41e70424a134ef69a524f3cc0fb40d854":["b68d694ed166e54434863ebd8d1350d4630c216a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}