{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":null,"sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}