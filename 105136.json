{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#doSetNextReader(LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#doSetNextReader(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n    groupFieldTermIndex = DocValues.getSorted(context.reader(), groupField);\n    countFieldTermIndex = DocValues.getSorted(context.reader(), countField);\n    ordSet.clear();\n    for (GroupCount group : groups) {\n      int groupOrd = group.groupValue == null ? -1 : groupFieldTermIndex.lookupTerm(group.groupValue);\n      if (group.groupValue != null && groupOrd < 0) {\n        continue;\n      }\n\n      groupCounts[ordSet.put(groupOrd)] = group;\n      group.ords = new int[group.uniqueValues.size()];\n      Arrays.fill(group.ords, -2);\n      int i = 0;\n      for (BytesRef value : group.uniqueValues) {\n        int countOrd = value == null ? -1 : countFieldTermIndex.lookupTerm(value);\n        if (value == null || countOrd >= 0) {\n          group.ords[i++] = countOrd;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#doSetNextReader(LeafReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#doSetNextReader(LeafReaderContext).mjava","sourceNew":"  @Override\n  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n    groupFieldTermIndex = DocValues.getSorted(context.reader(), groupField);\n    countFieldTermIndex = DocValues.getSorted(context.reader(), countField);\n    ordSet.clear();\n    for (TermGroupCount group : groups) {\n      int groupOrd = group.groupValue == null ? -1 : groupFieldTermIndex.lookupTerm(group.groupValue);\n      if (group.groupValue != null && groupOrd < 0) {\n        continue;\n      }\n\n      groupCounts[ordSet.put(groupOrd)] = group;\n      group.ords = new int[group.uniqueValues.size()];\n      Arrays.fill(group.ords, -2);\n      int i = 0;\n      for (BytesRef value : group.uniqueValues) {\n        int countOrd = value == null ? -1 : countFieldTermIndex.lookupTerm(value);\n        if (value == null || countOrd >= 0) {\n          group.ords[i++] = countOrd;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n    groupFieldTermIndex = DocValues.getSorted(context.reader(), groupField);\n    countFieldTermIndex = DocValues.getSorted(context.reader(), countField);\n    ordSet.clear();\n    for (GroupCount group : groups) {\n      int groupOrd = group.groupValue == null ? -1 : groupFieldTermIndex.lookupTerm(group.groupValue);\n      if (group.groupValue != null && groupOrd < 0) {\n        continue;\n      }\n\n      groupCounts[ordSet.put(groupOrd)] = group;\n      group.ords = new int[group.uniqueValues.size()];\n      Arrays.fill(group.ords, -2);\n      int i = 0;\n      for (BytesRef value : group.uniqueValues) {\n        int countOrd = value == null ? -1 : countFieldTermIndex.lookupTerm(value);\n        if (value == null || countOrd >= 0) {\n          group.ords[i++] = countOrd;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#doSetNextReader(LeafReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#doSetNextReader(LeafReaderContext).mjava","sourceNew":"  @Override\n  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n    groupFieldTermIndex = DocValues.getSorted(context.reader(), groupField);\n    countFieldTermIndex = DocValues.getSorted(context.reader(), countField);\n    ordSet.clear();\n    for (TermGroupCount group : groups) {\n      int groupOrd = group.groupValue == null ? -1 : groupFieldTermIndex.lookupTerm(group.groupValue);\n      if (group.groupValue != null && groupOrd < 0) {\n        continue;\n      }\n\n      groupCounts[ordSet.put(groupOrd)] = group;\n      group.ords = new int[group.uniqueValues.size()];\n      Arrays.fill(group.ords, -2);\n      int i = 0;\n      for (BytesRef value : group.uniqueValues) {\n        int countOrd = value == null ? -1 : countFieldTermIndex.lookupTerm(value);\n        if (value == null || countOrd >= 0) {\n          group.ords[i++] = countOrd;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n    groupFieldTermIndex = DocValues.getSorted(context.reader(), groupField);\n    countFieldTermIndex = DocValues.getSorted(context.reader(), countField);\n    ordSet.clear();\n    for (GroupCount group : groups) {\n      int groupOrd = group.groupValue == null ? -1 : groupFieldTermIndex.lookupTerm(group.groupValue);\n      if (group.groupValue != null && groupOrd < 0) {\n        continue;\n      }\n\n      groupCounts[ordSet.put(groupOrd)] = group;\n      group.ords = new int[group.uniqueValues.size()];\n      Arrays.fill(group.ords, -2);\n      int i = 0;\n      for (BytesRef value : group.uniqueValues) {\n        int countOrd = value == null ? -1 : countFieldTermIndex.lookupTerm(value);\n        if (value == null || countOrd >= 0) {\n          group.ords[i++] = countOrd;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#doSetNextReader(LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n    groupFieldTermIndex = DocValues.getSorted(context.reader(), groupField);\n    countFieldTermIndex = DocValues.getSorted(context.reader(), countField);\n    ordSet.clear();\n    for (TermGroupCount group : groups) {\n      int groupOrd = group.groupValue == null ? -1 : groupFieldTermIndex.lookupTerm(group.groupValue);\n      if (group.groupValue != null && groupOrd < 0) {\n        continue;\n      }\n\n      groupCounts[ordSet.put(groupOrd)] = group;\n      group.ords = new int[group.uniqueValues.size()];\n      Arrays.fill(group.ords, -2);\n      int i = 0;\n      for (BytesRef value : group.uniqueValues) {\n        int countOrd = value == null ? -1 : countFieldTermIndex.lookupTerm(value);\n        if (value == null || countOrd >= 0) {\n          group.ords[i++] = countOrd;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#doSetNextReader(LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n    groupFieldTermIndex = DocValues.getSorted(context.reader(), groupField);\n    countFieldTermIndex = DocValues.getSorted(context.reader(), countField);\n    ordSet.clear();\n    for (TermGroupCount group : groups) {\n      int groupOrd = group.groupValue == null ? -1 : groupFieldTermIndex.lookupTerm(group.groupValue);\n      if (group.groupValue != null && groupOrd < 0) {\n        continue;\n      }\n\n      groupCounts[ordSet.put(groupOrd)] = group;\n      group.ords = new int[group.uniqueValues.size()];\n      Arrays.fill(group.ords, -2);\n      int i = 0;\n      for (BytesRef value : group.uniqueValues) {\n        int countOrd = value == null ? -1 : countFieldTermIndex.lookupTerm(value);\n        if (value == null || countOrd >= 0) {\n          group.ords[i++] = countOrd;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["20e94e61fe5291647346b70437617e6b6c370408"],"20e94e61fe5291647346b70437617e6b6c370408":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["c9fb5f46e264daf5ba3860defe623a89d202dd87","20e94e61fe5291647346b70437617e6b6c370408"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"20e94e61fe5291647346b70437617e6b6c370408":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}