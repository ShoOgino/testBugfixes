{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","commits":[{"id":"dc4cbb07b89a0942261a14579fdfc607af58137c","date":1331160678,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result = collector.mergeSegmentResults(offset + limit, mincount, orderByCount);\n\n    NamedList<Integer> facetCounts = new NamedList<Integer>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries = result.getFacetEntries(offset, limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      String facetDisplayValue = facetEntry.getValue().utf8ToString();\n      facetCounts.add(facetDisplayValue, facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3685dcafc9195b0631414aa4d422f788479e62b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42e1b0cf9b2851ecd8545a56fbd01d4f9ee6d03d","date":1331161558,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result = collector.mergeSegmentResults(offset + limit, mincount, orderByCount);\n\n    CharsRef charsRef = new CharsRef();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<Integer>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries = result.getFacetEntries(offset, limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result = collector.mergeSegmentResults(offset + limit, mincount, orderByCount);\n\n    NamedList<Integer> facetCounts = new NamedList<Integer>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries = result.getFacetEntries(offset, limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      String facetDisplayValue = facetEntry.getValue().utf8ToString();\n      facetCounts.add(facetDisplayValue, facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result = collector.mergeSegmentResults(offset + limit, mincount, orderByCount);\n\n    CharsRef charsRef = new CharsRef();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<Integer>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries = result.getFacetEntries(offset, limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3685dcafc9195b0631414aa4d422f788479e62b7","date":1364492243,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRef charsRef = new CharsRef();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<Integer>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result = collector.mergeSegmentResults(offset + limit, mincount, orderByCount);\n\n    CharsRef charsRef = new CharsRef();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<Integer>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries = result.getFacetEntries(offset, limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":["dc4cbb07b89a0942261a14579fdfc607af58137c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRef charsRef = new CharsRef();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRef charsRef = new CharsRef();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<Integer>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e8b89f40d84573f3342b8fee0d8ff5408444c7e","date":1400051147,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // its a single-valued numeric field: we must currently create insanity :(\n      // there isnt a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n          AtomicReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRef charsRef = new CharsRef();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRef charsRef = new CharsRef();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":["7de000bbb5f66603221a528f0fe972afe72a6b97","c487301885230cc0dace89dc10bcb055560e047b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // its a single-valued numeric field: we must currently create insanity :(\n      // there isnt a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n          AtomicReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRef charsRef = new CharsRef();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRef charsRef = new CharsRef();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // its a single-valued numeric field: we must currently create insanity :(\n      // there isnt a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n          AtomicReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRef charsRef = new CharsRef();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRef charsRef = new CharsRef();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // its a single-valued numeric field: we must currently create insanity :(\n      // there isnt a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n          AtomicReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // its a single-valued numeric field: we must currently create insanity :(\n      // there isnt a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n          AtomicReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRef charsRef = new CharsRef();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":["42e1b0cf9b2851ecd8545a56fbd01d4f9ee6d03d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // its a single-valued numeric field: we must currently create insanity :(\n      // there isnt a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // its a single-valued numeric field: we must currently create insanity :(\n      // there isnt a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n          AtomicReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":["7de000bbb5f66603221a528f0fe972afe72a6b97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // its a single-valued numeric field: we must currently create insanity :(\n      // there isnt a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":["7de000bbb5f66603221a528f0fe972afe72a6b97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new MatchAllDocsQuery(), base.getTopFilter(), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"52c5280f6286c7546ab75b72c663f7bb1dc10e96","date":1427372570,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             String contains,\n                                             boolean ignoreCase) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    BytesRef containsRef = contains != null ? new BytesRef(contains) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we do contains earlier than this to make it more efficient?\n      if (containsRef != null && !StringHelper.contains(facetEntry.getValue(), containsRef, ignoreCase)) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String).mjava","sourceNew":null,"sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBR = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBR, 128);\n    \n    SchemaField sf = searcher.getSchema().getFieldOrNull(groupField);\n    \n    if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n      // it's a single-valued numeric field: we must currently create insanity :(\n      // there isn't a GroupedFacetCollector that works on numerics right now...\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), new FilterCollector(collector) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          LeafReader insane = Insanity.wrapInsanity(context.reader(), groupField);\n          return in.getLeafCollector(insane.getContext());\n        }\n      });\n    } else {\n      searcher.search(new FilteredQuery(new MatchAllDocsQuery(), base.getTopFilter()), collector);\n    }\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42e1b0cf9b2851ecd8545a56fbd01d4f9ee6d03d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3685dcafc9195b0631414aa4d422f788479e62b7"],"dc4cbb07b89a0942261a14579fdfc607af58137c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"7e8b89f40d84573f3342b8fee0d8ff5408444c7e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7e8b89f40d84573f3342b8fee0d8ff5408444c7e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42e1b0cf9b2851ecd8545a56fbd01d4f9ee6d03d":["dc4cbb07b89a0942261a14579fdfc607af58137c"],"3685dcafc9195b0631414aa4d422f788479e62b7":["42e1b0cf9b2851ecd8545a56fbd01d4f9ee6d03d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["52c5280f6286c7546ab75b72c663f7bb1dc10e96"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7e8b89f40d84573f3342b8fee0d8ff5408444c7e","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"dc4cbb07b89a0942261a14579fdfc607af58137c":["42e1b0cf9b2851ecd8545a56fbd01d4f9ee6d03d"],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e8b89f40d84573f3342b8fee0d8ff5408444c7e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","dc4cbb07b89a0942261a14579fdfc607af58137c"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["52c5280f6286c7546ab75b72c663f7bb1dc10e96","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"42e1b0cf9b2851ecd8545a56fbd01d4f9ee6d03d":["38e3b736c7ca086d61b7dbb841c905ee115490da","3685dcafc9195b0631414aa4d422f788479e62b7"],"3685dcafc9195b0631414aa4d422f788479e62b7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","56572ec06f1407c066d6b7399413178b33176cd8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}