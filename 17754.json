{"path":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testEqualsAndHash().mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testEqualsAndHash().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testEqualsAndHash().mjava","sourceNew":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test1\", 4, 10L, 20L, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test2\", 4, 10L, 20L, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test3\", 4, 10L, 20L, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test4\", 4, 10L, 20L, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test5\", 4, 10L, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test6\", 4, null, 20L, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test9\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test9\", 8, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test10a\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test10b\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test11\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test11\", 4, 20L, 10L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test13\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n     // difference to int range is tested in TestNumericRangeQuery32\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test1\", 4, 10L, 20L, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test2\", 4, 10L, 20L, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test3\", 4, 10L, 20L, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test4\", 4, 10L, 20L, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test5\", 4, 10L, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test6\", 4, null, 20L, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test9\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test9\", 8, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test10a\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test10b\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test11\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test11\", 4, 20L, 10L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test13\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n     // difference to int range is tested in TestNumericRangeQuery32\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testEqualsAndHash().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testEqualsAndHash().mjava","sourceNew":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test1\", 4, 10L, 20L, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test2\", 4, 10L, 20L, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test3\", 4, 10L, 20L, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test4\", 4, 10L, 20L, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test5\", 4, 10L, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test6\", 4, null, 20L, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test9\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test9\", 8, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test10a\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test10b\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test11\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test11\", 4, 20L, 10L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test13\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n     // difference to int range is tested in TestNumericRangeQuery32\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test1\", 4, 10L, 20L, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test2\", 4, 10L, 20L, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test3\", 4, 10L, 20L, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test4\", 4, 10L, 20L, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test5\", 4, 10L, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test6\", 4, null, 20L, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test9\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test9\", 8, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test10a\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test10b\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test11\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test11\", 4, 20L, 10L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test13\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n     // difference to int range is tested in TestNumericRangeQuery32\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testEqualsAndHash().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testEqualsAndHash().mjava","sourceNew":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test1\", 4, 10L, 20L, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test2\", 4, 10L, 20L, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test3\", 4, 10L, 20L, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test4\", 4, 10L, 20L, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test5\", 4, 10L, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test6\", 4, null, 20L, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test9\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test9\", 8, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test10a\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test10b\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test11\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test11\", 4, 20L, 10L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test13\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n     // difference to int range is tested in TestNumericRangeQuery32\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test1\", 4, 10L, 20L, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test2\", 4, 10L, 20L, false, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test3\", 4, 10L, 20L, true, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test4\", 4, 10L, 20L, false, false));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test5\", 4, 10L, null, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test6\", 4, null, 20L, true, true));\n    QueryUtils.checkHashEquals(LegacyNumericRangeQuery.newLongRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      LegacyNumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test9\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test9\", 8, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test10a\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test10b\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test11\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test11\", 4, 20L, 10L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, false, true)\n    );\n    QueryUtils.checkUnequal(\n      LegacyNumericRangeQuery.newLongRange(\"test13\", 4, 10L, 20L, true, true),\n      LegacyNumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n     // difference to int range is tested in TestNumericRangeQuery32\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}