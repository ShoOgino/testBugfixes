{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      //System.out.println(\"TEST i=\" + i + \" re=\" + re);\n      final LightAutomaton a = BasicOperations.determinize(re.toLightAutomaton());\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStringsLight rx = new AutomatonTestUtil.RandomAcceptedStringsLight(a);\n      for(int j=0;j<ITER2;j++) {\n        //System.out.println(\"TEST: j=\" + j);\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          //a.writeDot(\"adot\");\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      //System.out.println(\"TEST i=\" + i + \" re=\" + re);\n      final LightAutomaton a = BasicOperations.determinize(re.toLightAutomaton());\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        //System.out.println(\"TEST: j=\" + j);\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          //a.writeDot(\"adot\");\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      //System.out.println(\"TEST i=\" + i + \" re=\" + re);\n      final LightAutomaton a = BasicOperations.determinize(re.toLightAutomaton());\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStringsLight rx = new AutomatonTestUtil.RandomAcceptedStringsLight(a);\n      for(int j=0;j<ITER2;j++) {\n        //System.out.println(\"TEST: j=\" + j);\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          //a.writeDot(\"adot\");\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      //System.out.println(\"TEST i=\" + i + \" re=\" + re);\n      final Automaton a = Operations.determinize(re.toAutomaton());\n      assertFalse(Operations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        //System.out.println(\"TEST: j=\" + j);\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          //a.writeDot(\"adot\");\n          assertTrue(Operations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      //System.out.println(\"TEST i=\" + i + \" re=\" + re);\n      final LightAutomaton a = BasicOperations.determinize(re.toLightAutomaton());\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        //System.out.println(\"TEST: j=\" + j);\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          //a.writeDot(\"adot\");\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      //System.out.println(\"TEST i=\" + i + \" re=\" + re);\n      final Automaton a = Operations.determinize(re.toAutomaton());\n      assertFalse(Operations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        //System.out.println(\"TEST: j=\" + j);\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          //a.writeDot(\"adot\");\n          assertTrue(Operations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random());\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}