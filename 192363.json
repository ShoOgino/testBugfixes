{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isEmpty(LightAutomaton).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isEmpty(LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(LightAutomaton a) {\n    return a.isAccept(0) == false && a.getNumTransitions(0) == 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isEmpty(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isEmpty(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(LightAutomaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(LightAutomaton a) {\n    return a.isAccept(0) == false && a.getNumTransitions(0) == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#isEmpty(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isEmpty(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(Automaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(LightAutomaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}