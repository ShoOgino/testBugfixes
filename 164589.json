{"path":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineBasicMiniMRTest#setupClass().mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineBasicMiniMRTest#setupClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    LuceneTestCase.assumeTrue(\n        \"Currently this test can only be run without the lucene test security policy in place\",\n        System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n    \n    LuceneTestCase.assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_CONF_DIR, solrHomeDirectory);\n    \n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    MRUnitBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\");\n    \n    System.setProperty(\"hadoop.log.dir\", new File(solrHomeDirectory, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 1;\n    int dataNodes = 2;\n//    String proxyUser = System.getProperty(\"user.name\");\n//    String proxyGroup = \"g\";\n//    StringBuilder sb = new StringBuilder();\n//    sb.append(\"127.0.0.1,localhost\");\n//    for (InetAddress i : InetAddress.getAllByName(InetAddress.getLocalHost().getHostName())) {\n//      sb.append(\",\").append(i.getCanonicalHostName());\n//    }\n    \n    createTempDir();\n    new File(dataDir, \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir.getPath() + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n    conf.set(\"testWorkDir\", dataDir.getPath() + File.separator +  \"testWorkDir\");\n\n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"), FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"), FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"), FsPermission.valueOf(\"-rwx------\"));\n    String nnURI = fileSystem.getUri().toString();\n    int numDirs = 1;\n    String[] racks = null;\n    String[] hosts = null;\n\n    mrCluster = new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks, hosts, null, conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["da59c6d3748d1a2a9d1a58a69f70383622d68379"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"408dc7b6a106b3cdf24fc9833fe653ab1ef74e41","date":1386085336,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineBasicMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineBasicMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n        \"Currently this test can only be run without the lucene test security policy in place\",\n        System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n    \n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_CONF_DIR, solrHomeDirectory);\n    \n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    MRUnitBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\");\n    \n    System.setProperty(\"hadoop.log.dir\", new File(solrHomeDirectory, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 1;\n    int dataNodes = 2;\n//    String proxyUser = System.getProperty(\"user.name\");\n//    String proxyGroup = \"g\";\n//    StringBuilder sb = new StringBuilder();\n//    sb.append(\"127.0.0.1,localhost\");\n//    for (InetAddress i : InetAddress.getAllByName(InetAddress.getLocalHost().getHostName())) {\n//      sb.append(\",\").append(i.getCanonicalHostName());\n//    }\n    \n    createTempDir();\n    new File(dataDir, \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir.getPath() + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n    conf.set(\"testWorkDir\", dataDir.getPath() + File.separator +  \"testWorkDir\");\n\n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"), FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"), FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"), FsPermission.valueOf(\"-rwx------\"));\n    String nnURI = fileSystem.getUri().toString();\n    int numDirs = 1;\n    String[] racks = null;\n    String[] hosts = null;\n\n    mrCluster = new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks, hosts, null, conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    LuceneTestCase.assumeTrue(\n        \"Currently this test can only be run without the lucene test security policy in place\",\n        System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n    \n    LuceneTestCase.assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_CONF_DIR, solrHomeDirectory);\n    \n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    MRUnitBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\");\n    \n    System.setProperty(\"hadoop.log.dir\", new File(solrHomeDirectory, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 1;\n    int dataNodes = 2;\n//    String proxyUser = System.getProperty(\"user.name\");\n//    String proxyGroup = \"g\";\n//    StringBuilder sb = new StringBuilder();\n//    sb.append(\"127.0.0.1,localhost\");\n//    for (InetAddress i : InetAddress.getAllByName(InetAddress.getLocalHost().getHostName())) {\n//      sb.append(\",\").append(i.getCanonicalHostName());\n//    }\n    \n    createTempDir();\n    new File(dataDir, \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir.getPath() + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n    conf.set(\"testWorkDir\", dataDir.getPath() + File.separator +  \"testWorkDir\");\n\n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"), FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"), FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"), FsPermission.valueOf(\"-rwx------\"));\n    String nnURI = fileSystem.getUri().toString();\n    int numDirs = 1;\n    String[] racks = null;\n    String[] hosts = null;\n\n    mrCluster = new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks, hosts, null, conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":["da59c6d3748d1a2a9d1a58a69f70383622d68379"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineBasicMiniMRTest#setupClass().mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineBasicMiniMRTest#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n        \"Currently this test can only be run without the lucene test security policy in place\",\n        System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n    \n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_CONF_DIR, solrHomeDirectory);\n    \n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    MRUnitBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\");\n    \n    System.setProperty(\"hadoop.log.dir\", new File(solrHomeDirectory, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 1;\n    int dataNodes = 2;\n//    String proxyUser = System.getProperty(\"user.name\");\n//    String proxyGroup = \"g\";\n//    StringBuilder sb = new StringBuilder();\n//    sb.append(\"127.0.0.1,localhost\");\n//    for (InetAddress i : InetAddress.getAllByName(InetAddress.getLocalHost().getHostName())) {\n//      sb.append(\",\").append(i.getCanonicalHostName());\n//    }\n    \n    createTempDir();\n    new File(dataDir, \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir.getPath() + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n    conf.set(\"testWorkDir\", dataDir.getPath() + File.separator +  \"testWorkDir\");\n\n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"), FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"), FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"), FsPermission.valueOf(\"-rwx------\"));\n    String nnURI = fileSystem.getUri().toString();\n    int numDirs = 1;\n    String[] racks = null;\n    String[] hosts = null;\n\n    mrCluster = new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks, hosts, null, conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    assumeTrue(\n        \"Currently this test can only be run without the lucene test security policy in place\",\n        System.getProperty(\"java.security.manager\", \"\").equals(\"\"));\n    \n    assumeFalse(\"HDFS tests were disabled by -Dtests.disableHdfs\",\n        Boolean.parseBoolean(System.getProperty(\"tests.disableHdfs\", \"false\")));\n    \n    assumeFalse(\"FIXME: This test fails under Java 8 due to the Saxon dependency - see SOLR-1301\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assumeFalse(\"FIXME: This test fails under J9 due to the Saxon dependency - see SOLR-1301\", System.getProperty(\"java.vm.info\", \"<?>\").contains(\"IBM J9\"));\n    \n    AbstractZkTestCase.SOLRHOME = solrHomeDirectory;\n    FileUtils.copyDirectory(MINIMR_CONF_DIR, solrHomeDirectory);\n    \n    tempDir = TEMP_DIR + \"/test-morphlines-\" + System.currentTimeMillis();\n    new File(tempDir).mkdirs();\n    FileUtils.copyFile(new File(RESOURCES_DIR + \"/custom-mimetypes.xml\"), new File(tempDir + \"/custom-mimetypes.xml\"));\n    \n    MRUnitBase.setupMorphline(tempDir, \"test-morphlines/solrCellDocumentTypes\");\n    \n    System.setProperty(\"hadoop.log.dir\", new File(solrHomeDirectory, \"logs\").getAbsolutePath());\n    \n    int taskTrackers = 1;\n    int dataNodes = 2;\n//    String proxyUser = System.getProperty(\"user.name\");\n//    String proxyGroup = \"g\";\n//    StringBuilder sb = new StringBuilder();\n//    sb.append(\"127.0.0.1,localhost\");\n//    for (InetAddress i : InetAddress.getAllByName(InetAddress.getLocalHost().getHostName())) {\n//      sb.append(\",\").append(i.getCanonicalHostName());\n//    }\n    \n    createTempDir();\n    new File(dataDir, \"nm-local-dirs\").mkdirs();\n    \n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    \n    System.setProperty(\"test.build.dir\", dataDir + File.separator + \"hdfs\" + File.separator + \"test-build-dir\");\n    System.setProperty(\"test.build.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"build\");\n    System.setProperty(\"test.cache.data\", dataDir + File.separator + \"hdfs\" + File.separator + \"cache\");\n\n    JobConf conf = new JobConf();\n    conf.set(\"dfs.block.access.token.enable\", \"false\");\n    conf.set(\"dfs.permissions\", \"true\");\n    conf.set(\"hadoop.security.authentication\", \"simple\");\n    conf.set(YarnConfiguration.NM_LOCAL_DIRS, dataDir.getPath() + File.separator +  \"nm-local-dirs\");\n    conf.set(YarnConfiguration.DEFAULT_NM_LOG_DIRS, dataDir + File.separator +  \"nm-logs\");\n    conf.set(\"testWorkDir\", dataDir.getPath() + File.separator +  \"testWorkDir\");\n\n    dfsCluster = new MiniDFSCluster(conf, dataNodes, true, null);\n    FileSystem fileSystem = dfsCluster.getFileSystem();\n    fileSystem.mkdirs(new Path(\"/tmp\"));\n    fileSystem.mkdirs(new Path(\"/user\"));\n    fileSystem.mkdirs(new Path(\"/hadoop/mapred/system\"));\n    fileSystem.setPermission(new Path(\"/tmp\"), FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/user\"), FsPermission.valueOf(\"-rwxrwxrwx\"));\n    fileSystem.setPermission(new Path(\"/hadoop/mapred/system\"), FsPermission.valueOf(\"-rwx------\"));\n    String nnURI = fileSystem.getUri().toString();\n    int numDirs = 1;\n    String[] racks = null;\n    String[] hosts = null;\n\n    mrCluster = new MiniMRCluster(0, 0, taskTrackers, nnURI, numDirs, racks, hosts, null, conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["408dc7b6a106b3cdf24fc9833fe653ab1ef74e41"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"408dc7b6a106b3cdf24fc9833fe653ab1ef74e41":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["408dc7b6a106b3cdf24fc9833fe653ab1ef74e41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"408dc7b6a106b3cdf24fc9833fe653ab1ef74e41":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}