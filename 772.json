{"path":"src/test/org/apache/solr/analysis/TestTrimFilter#testTrim().mjava","commits":[{"id":"fa271a738c74b4551a7a964f75cb5fc19f80dc79","date":1168391918,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestTrimFilter#testTrim().mjava","pathOld":"/dev/null","sourceNew":"  public void testTrim() throws Exception {\n    TokenStream ts = new TrimFilter\n      (new IterTokenStream(new Token(\" a \", 1, 5),\n                           new Token(\"b   \",6,10),\n                           new Token(\"cCc\",11,15),\n                           new Token(\"   \",16,20)));\n\n    assertEquals(\"a\", ts.next().termText());\n    assertEquals(\"b\", ts.next().termText());\n    assertEquals(\"cCc\", ts.next().termText());\n    assertEquals(\"\", ts.next().termText());\n    assertNull(ts.next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de4d615b00f60dce1293e87276b0685ce0f0d621","date":1179940685,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestTrimFilter#testTrim().mjava","pathOld":"src/test/org/apache/solr/analysis/TestTrimFilter#testTrim().mjava","sourceNew":"  public void testTrim() throws Exception {\n    TokenStream ts = new TrimFilter\n      (new IterTokenStream(new Token(\" a \", 1, 5),\n                           new Token(\"b   \",6,10),\n                           new Token(\"cCc\",11,15),\n                           new Token(\"   \",16,20)), false );\n\n    assertEquals(\"a\", ts.next().termText());\n    assertEquals(\"b\", ts.next().termText());\n    assertEquals(\"cCc\", ts.next().termText());\n    assertEquals(\"\", ts.next().termText());\n    assertNull(ts.next());\n    \n    ts = new TrimFilter( new IterTokenStream(\n           new Token(\" a\", 0,2),\n           new Token(\"b \", 0,2),\n           new Token(\" c \",0,3),\n           new Token(\"   \",0,3)), true );\n    \n    List<Token> expect = tokens( \"a,1,1,2 b,1,0,1 c,1,1,2 ,1,3,3\" );\n    List<Token> real = getTokens(ts);\n    for( Token t : expect ) {\n      System.out.println( \"TEST:\" + t );\n    }\n    for( Token t : real ) {\n      System.out.println( \"REAL:\" + t );\n    }\n    assertTokEqualOff( expect, real );\n  }\n\n","sourceOld":"  public void testTrim() throws Exception {\n    TokenStream ts = new TrimFilter\n      (new IterTokenStream(new Token(\" a \", 1, 5),\n                           new Token(\"b   \",6,10),\n                           new Token(\"cCc\",11,15),\n                           new Token(\"   \",16,20)));\n\n    assertEquals(\"a\", ts.next().termText());\n    assertEquals(\"b\", ts.next().termText());\n    assertEquals(\"cCc\", ts.next().termText());\n    assertEquals(\"\", ts.next().termText());\n    assertNull(ts.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe8ae1ed027200f075b0de9f264776fa32c4862f","date":1207066219,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestTrimFilter#testTrim().mjava","pathOld":"src/test/org/apache/solr/analysis/TestTrimFilter#testTrim().mjava","sourceNew":"  public void testTrim() throws Exception {\n    TokenStream ts = new TrimFilter\n      (new IterTokenStream(new Token(\" a \", 1, 5),\n                           new Token(\"b   \",6,10),\n                           new Token(\"cCc\",11,15),\n                           new Token(\"   \",16,20)), false );\n\n    Token token = ts.next();\n    assertEquals(\"a\", new String(token.termBuffer(), 0, token.termLength()));\n    token = ts.next();\n    assertEquals(\"b\", new String(token.termBuffer(), 0, token.termLength()));\n    token = ts.next();\n    assertEquals(\"cCc\", new String(token.termBuffer(), 0, token.termLength()));\n    token = ts.next();\n    assertEquals(\"\", new String(token.termBuffer(), 0, token.termLength()));\n    token = ts.next();\n    assertNull(token);\n    \n    ts = new TrimFilter( new IterTokenStream(\n           new Token(\" a\", 0,2),\n           new Token(\"b \", 0,2),\n           new Token(\" c \",0,3),\n           new Token(\"   \",0,3)), true );\n    \n    List<Token> expect = tokens( \"a,1,1,2 b,1,0,1 c,1,1,2 ,1,3,3\" );\n    List<Token> real = getTokens(ts);\n    for( Token t : expect ) {\n      System.out.println( \"TEST:\" + t );\n    }\n    for( Token t : real ) {\n      System.out.println( \"REAL:\" + t );\n    }\n    assertTokEqualOff( expect, real );\n  }\n\n","sourceOld":"  public void testTrim() throws Exception {\n    TokenStream ts = new TrimFilter\n      (new IterTokenStream(new Token(\" a \", 1, 5),\n                           new Token(\"b   \",6,10),\n                           new Token(\"cCc\",11,15),\n                           new Token(\"   \",16,20)), false );\n\n    assertEquals(\"a\", ts.next().termText());\n    assertEquals(\"b\", ts.next().termText());\n    assertEquals(\"cCc\", ts.next().termText());\n    assertEquals(\"\", ts.next().termText());\n    assertNull(ts.next());\n    \n    ts = new TrimFilter( new IterTokenStream(\n           new Token(\" a\", 0,2),\n           new Token(\"b \", 0,2),\n           new Token(\" c \",0,3),\n           new Token(\"   \",0,3)), true );\n    \n    List<Token> expect = tokens( \"a,1,1,2 b,1,0,1 c,1,1,2 ,1,3,3\" );\n    List<Token> real = getTokens(ts);\n    for( Token t : expect ) {\n      System.out.println( \"TEST:\" + t );\n    }\n    for( Token t : real ) {\n      System.out.println( \"REAL:\" + t );\n    }\n    assertTokEqualOff( expect, real );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"252b5e659a9ec7711b788d4bb0ab3b5093982cc4","date":1252415228,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestTrimFilter#testTrim().mjava","pathOld":"src/test/org/apache/solr/analysis/TestTrimFilter#testTrim().mjava","sourceNew":"  public void testTrim() throws Exception {\n    char[] a = \" a \".toCharArray();\n    char[] b = \"b   \".toCharArray();\n    char[] ccc = \"cCc\".toCharArray();\n    char[] whitespace = \"   \".toCharArray();\n    char[] empty = \"\".toCharArray();\n    TokenStream ts = new TrimFilter\n            (new IterTokenStream(new Token(a, 0, a.length, 1, 5),\n                    new Token(b, 0, b.length, 6, 10),\n                    new Token(ccc, 0, ccc.length, 11, 15),\n                    new Token(whitespace, 0, whitespace.length, 16, 20),\n                    new Token(empty, 0, empty.length, 21, 21)), false);\n\n    TermAttribute token;\n    assertTrue(ts.incrementToken());\n    token = (TermAttribute) ts.getAttribute(TermAttribute.class);\n    assertEquals(\"a\", new String(token.termBuffer(), 0, token.termLength()));\n    assertTrue(ts.incrementToken());\n    assertEquals(\"b\", new String(token.termBuffer(), 0, token.termLength()));\n    assertTrue(ts.incrementToken());\n    assertEquals(\"cCc\", new String(token.termBuffer(), 0, token.termLength()));\n    assertTrue(ts.incrementToken());\n    assertEquals(\"\", new String(token.termBuffer(), 0, token.termLength()));\n    assertTrue(ts.incrementToken());\n    assertEquals(\"\", new String(token.termBuffer(), 0, token.termLength()));\n    assertFalse(ts.incrementToken());\n\n    a = \" a\".toCharArray();\n    b = \"b \".toCharArray();\n    ccc = \" c \".toCharArray();\n    whitespace = \"   \".toCharArray();\n    ts = new TrimFilter(new IterTokenStream(\n            new Token(a, 0, a.length, 0, 2),\n            new Token(b, 0, b.length, 0, 2),\n            new Token(ccc, 0, ccc.length, 0, 3),\n            new Token(whitespace, 0, whitespace.length, 0, 3)), true);\n    \n    List<Token> expect = tokens(\"a,1,1,2 b,1,0,1 c,1,1,2 ,1,3,3\");\n    List<Token> real = getTokens(ts);\n    for (Token t : expect) {\n      System.out.println(\"TEST:\" + t);\n    }\n    for (Token t : real) {\n      System.out.println(\"REAL:\" + t);\n    }\n    assertTokEqualOff(expect, real);\n  }\n\n","sourceOld":"  public void testTrim() throws Exception {\n    TokenStream ts = new TrimFilter\n      (new IterTokenStream(new Token(\" a \", 1, 5),\n                           new Token(\"b   \",6,10),\n                           new Token(\"cCc\",11,15),\n                           new Token(\"   \",16,20)), false );\n\n    Token token = ts.next();\n    assertEquals(\"a\", new String(token.termBuffer(), 0, token.termLength()));\n    token = ts.next();\n    assertEquals(\"b\", new String(token.termBuffer(), 0, token.termLength()));\n    token = ts.next();\n    assertEquals(\"cCc\", new String(token.termBuffer(), 0, token.termLength()));\n    token = ts.next();\n    assertEquals(\"\", new String(token.termBuffer(), 0, token.termLength()));\n    token = ts.next();\n    assertNull(token);\n    \n    ts = new TrimFilter( new IterTokenStream(\n           new Token(\" a\", 0,2),\n           new Token(\"b \", 0,2),\n           new Token(\" c \",0,3),\n           new Token(\"   \",0,3)), true );\n    \n    List<Token> expect = tokens( \"a,1,1,2 b,1,0,1 c,1,1,2 ,1,3,3\" );\n    List<Token> real = getTokens(ts);\n    for( Token t : expect ) {\n      System.out.println( \"TEST:\" + t );\n    }\n    for( Token t : real ) {\n      System.out.println( \"REAL:\" + t );\n    }\n    assertTokEqualOff( expect, real );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestTrimFilter#testTrim().mjava","pathOld":"src/test/org/apache/solr/analysis/TestTrimFilter#testTrim().mjava","sourceNew":"  public void testTrim() throws Exception {\n    char[] a = \" a \".toCharArray();\n    char[] b = \"b   \".toCharArray();\n    char[] ccc = \"cCc\".toCharArray();\n    char[] whitespace = \"   \".toCharArray();\n    char[] empty = \"\".toCharArray();\n    TrimFilterFactory factory = new TrimFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"updateOffsets\", \"false\");\n    factory.init(args);\n    TokenStream ts = factory.create(new IterTokenStream(new Token(a, 0, a.length, 1, 5),\n                    new Token(b, 0, b.length, 6, 10),\n                    new Token(ccc, 0, ccc.length, 11, 15),\n                    new Token(whitespace, 0, whitespace.length, 16, 20),\n                    new Token(empty, 0, empty.length, 21, 21)));\n\n    assertTokenStreamContents(ts, new String[] { \"a\", \"b\", \"cCc\", \"\", \"\"});\n\n    a = \" a\".toCharArray();\n    b = \"b \".toCharArray();\n    ccc = \" c \".toCharArray();\n    whitespace = \"   \".toCharArray();\n    factory = new TrimFilterFactory();\n    args = new HashMap<String,String>();\n    args.put(\"updateOffsets\", \"true\");\n    factory.init(args);\n    ts = factory.create(new IterTokenStream(\n            new Token(a, 0, a.length, 0, 2),\n            new Token(b, 0, b.length, 0, 2),\n            new Token(ccc, 0, ccc.length, 0, 3),\n            new Token(whitespace, 0, whitespace.length, 0, 3)));\n    \n    assertTokenStreamContents(ts, \n        new String[] { \"a\", \"b\", \"c\", \"\" },\n        new int[] { 1, 0, 1, 3 },\n        new int[] { 2, 1, 2, 3 },\n        new int[] { 1, 1, 1, 1 });\n  }\n\n","sourceOld":"  public void testTrim() throws Exception {\n    char[] a = \" a \".toCharArray();\n    char[] b = \"b   \".toCharArray();\n    char[] ccc = \"cCc\".toCharArray();\n    char[] whitespace = \"   \".toCharArray();\n    char[] empty = \"\".toCharArray();\n    TokenStream ts = new TrimFilter\n            (new IterTokenStream(new Token(a, 0, a.length, 1, 5),\n                    new Token(b, 0, b.length, 6, 10),\n                    new Token(ccc, 0, ccc.length, 11, 15),\n                    new Token(whitespace, 0, whitespace.length, 16, 20),\n                    new Token(empty, 0, empty.length, 21, 21)), false);\n\n    TermAttribute token;\n    assertTrue(ts.incrementToken());\n    token = (TermAttribute) ts.getAttribute(TermAttribute.class);\n    assertEquals(\"a\", new String(token.termBuffer(), 0, token.termLength()));\n    assertTrue(ts.incrementToken());\n    assertEquals(\"b\", new String(token.termBuffer(), 0, token.termLength()));\n    assertTrue(ts.incrementToken());\n    assertEquals(\"cCc\", new String(token.termBuffer(), 0, token.termLength()));\n    assertTrue(ts.incrementToken());\n    assertEquals(\"\", new String(token.termBuffer(), 0, token.termLength()));\n    assertTrue(ts.incrementToken());\n    assertEquals(\"\", new String(token.termBuffer(), 0, token.termLength()));\n    assertFalse(ts.incrementToken());\n\n    a = \" a\".toCharArray();\n    b = \"b \".toCharArray();\n    ccc = \" c \".toCharArray();\n    whitespace = \"   \".toCharArray();\n    ts = new TrimFilter(new IterTokenStream(\n            new Token(a, 0, a.length, 0, 2),\n            new Token(b, 0, b.length, 0, 2),\n            new Token(ccc, 0, ccc.length, 0, 3),\n            new Token(whitespace, 0, whitespace.length, 0, 3)), true);\n    \n    List<Token> expect = tokens(\"a,1,1,2 b,1,0,1 c,1,1,2 ,1,3,3\");\n    List<Token> real = getTokens(ts);\n    for (Token t : expect) {\n      System.out.println(\"TEST:\" + t);\n    }\n    for (Token t : real) {\n      System.out.println(\"REAL:\" + t);\n    }\n    assertTokEqualOff(expect, real);\n  }\n\n","bugFix":null,"bugIntro":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestTrimFilter#testTrim().mjava","pathOld":"src/test/org/apache/solr/analysis/TestTrimFilter#testTrim().mjava","sourceNew":"  public void testTrim() throws Exception {\n    char[] a = \" a \".toCharArray();\n    char[] b = \"b   \".toCharArray();\n    char[] ccc = \"cCc\".toCharArray();\n    char[] whitespace = \"   \".toCharArray();\n    char[] empty = \"\".toCharArray();\n    TrimFilterFactory factory = new TrimFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"updateOffsets\", \"false\");\n    factory.init(args);\n    TokenStream ts = factory.create(new IterTokenStream(new Token(a, 0, a.length, 1, 5),\n                    new Token(b, 0, b.length, 6, 10),\n                    new Token(ccc, 0, ccc.length, 11, 15),\n                    new Token(whitespace, 0, whitespace.length, 16, 20),\n                    new Token(empty, 0, empty.length, 21, 21)));\n\n    assertTokenStreamContents(ts, new String[] { \"a\", \"b\", \"cCc\", \"\", \"\"});\n\n    a = \" a\".toCharArray();\n    b = \"b \".toCharArray();\n    ccc = \" c \".toCharArray();\n    whitespace = \"   \".toCharArray();\n    factory = new TrimFilterFactory();\n    args = new HashMap<String,String>();\n    args.put(\"updateOffsets\", \"true\");\n    factory.init(args);\n    ts = factory.create(new IterTokenStream(\n            new Token(a, 0, a.length, 0, 2),\n            new Token(b, 0, b.length, 0, 2),\n            new Token(ccc, 0, ccc.length, 0, 3),\n            new Token(whitespace, 0, whitespace.length, 0, 3)));\n    \n    assertTokenStreamContents(ts, \n        new String[] { \"a\", \"b\", \"c\", \"\" },\n        new int[] { 1, 0, 1, 3 },\n        new int[] { 2, 1, 2, 3 },\n        new int[] { 1, 1, 1, 1 });\n  }\n\n","sourceOld":"  public void testTrim() throws Exception {\n    char[] a = \" a \".toCharArray();\n    char[] b = \"b   \".toCharArray();\n    char[] ccc = \"cCc\".toCharArray();\n    char[] whitespace = \"   \".toCharArray();\n    char[] empty = \"\".toCharArray();\n    TrimFilterFactory factory = new TrimFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"updateOffsets\", \"false\");\n    factory.init(args);\n    TokenStream ts = factory.create(new IterTokenStream(new Token(a, 0, a.length, 1, 5),\n                    new Token(b, 0, b.length, 6, 10),\n                    new Token(ccc, 0, ccc.length, 11, 15),\n                    new Token(whitespace, 0, whitespace.length, 16, 20),\n                    new Token(empty, 0, empty.length, 21, 21)));\n\n    assertTokenStreamContents(ts, new String[] { \"a\", \"b\", \"cCc\", \"\", \"\"});\n\n    a = \" a\".toCharArray();\n    b = \"b \".toCharArray();\n    ccc = \" c \".toCharArray();\n    whitespace = \"   \".toCharArray();\n    factory = new TrimFilterFactory();\n    args = new HashMap<String,String>();\n    args.put(\"updateOffsets\", \"true\");\n    factory.init(args);\n    ts = factory.create(new IterTokenStream(\n            new Token(a, 0, a.length, 0, 2),\n            new Token(b, 0, b.length, 0, 2),\n            new Token(ccc, 0, ccc.length, 0, 3),\n            new Token(whitespace, 0, whitespace.length, 0, 3)));\n    \n    assertTokenStreamContents(ts, \n        new String[] { \"a\", \"b\", \"c\", \"\" },\n        new int[] { 1, 0, 1, 3 },\n        new int[] { 2, 1, 2, 3 },\n        new int[] { 1, 1, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["de4d615b00f60dce1293e87276b0685ce0f0d621"],"de4d615b00f60dce1293e87276b0685ce0f0d621":["fa271a738c74b4551a7a964f75cb5fc19f80dc79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"252b5e659a9ec7711b788d4bb0ab3b5093982cc4":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["252b5e659a9ec7711b788d4bb0ab3b5093982cc4"],"fa271a738c74b4551a7a964f75cb5fc19f80dc79":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["252b5e659a9ec7711b788d4bb0ab3b5093982cc4"],"de4d615b00f60dce1293e87276b0685ce0f0d621":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fa271a738c74b4551a7a964f75cb5fc19f80dc79"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"252b5e659a9ec7711b788d4bb0ab3b5093982cc4":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"fa271a738c74b4551a7a964f75cb5fc19f80dc79":["de4d615b00f60dce1293e87276b0685ce0f0d621"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}