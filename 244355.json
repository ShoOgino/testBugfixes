{"path":"src/test-deprecated/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"/dev/null","sourceNew":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(Field.Keyword(\"category\", categories[i]));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      IndexReader reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      \n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, true, false);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    BooleanQuery bq1 = null;\n    if (rw1 instanceof BooleanQuery) {\n      bq1 = (BooleanQuery) rw1;\n    }\n\n    BooleanQuery bq2 = null;\n    if (rw2 instanceof BooleanQuery) {\n        bq2 = (BooleanQuery) rw2;\n    } else {\n      fail(\"Rewrite\");\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", bq1.getClauses().length,\n                 bq2.getClauses().length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":null,"sourceOld":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(Field.Keyword(\"category\", categories[i]));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      IndexReader reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      \n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, true, false);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    BooleanQuery bq1 = null;\n    if (rw1 instanceof BooleanQuery) {\n      bq1 = (BooleanQuery) rw1;\n    }\n\n    BooleanQuery bq2 = null;\n    if (rw2 instanceof BooleanQuery) {\n        bq2 = (BooleanQuery) rw2;\n    } else {\n      fail(\"Rewrite\");\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", bq1.getClauses().length,\n                 bq2.getClauses().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5b5461affe637a07375542c763a4805300802be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}