{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoLatitudeZone#getRelationship(GeoShape).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoLatitudeZone#getRelationship(GeoShape).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoLatitudeZone#getRelationship(GeoShape).mjava","sourceNew":"  @Override\n  public int getRelationship(final GeoShape path) {\n    final int insideRectangle = isShapeInsideBBox(path);\n    if (insideRectangle == SOME_INSIDE)\n      return OVERLAPS;\n\n    final boolean topBoundaryInsideShape = path.isWithin(topBoundaryPoint);\n    final boolean bottomBoundaryInsideShape = path.isWithin(bottomBoundaryPoint);\n\n    if (topBoundaryInsideShape && !bottomBoundaryInsideShape ||\n        !topBoundaryInsideShape && bottomBoundaryInsideShape)\n      return OVERLAPS;\n\n    final boolean insideShape = topBoundaryInsideShape && bottomBoundaryInsideShape;\n\n    if (insideRectangle == ALL_INSIDE && insideShape)\n      return OVERLAPS;\n\n    // Second, the shortcut of seeing whether endpoints are in/out is not going to\n    // work with no area endpoints.  So we rely entirely on intersections.\n\n    if (path.intersects(topPlane, planePoints, bottomPlane) ||\n        path.intersects(bottomPlane, planePoints, topPlane))\n      return OVERLAPS;\n\n    // There is another case for latitude zones only.  This is when the boundaries of the shape all fit\n    // within the zone, but the shape includes areas outside the zone crossing a pole.\n    // In this case, the above \"overlaps\" check is insufficient.  We also need to check a point on either boundary\n    // whether it is within the shape.  If both such points are within, then CONTAINS is the right answer.  If\n    // one such point is within, then OVERLAPS is the right answer.\n\n    if (insideShape)\n      return CONTAINS;\n\n    if (insideRectangle == ALL_INSIDE)\n      return WITHIN;\n\n    return DISJOINT;\n  }\n\n","sourceOld":"  @Override\n  public int getRelationship(final GeoShape path) {\n    final int insideRectangle = isShapeInsideBBox(path);\n    if (insideRectangle == SOME_INSIDE)\n      return OVERLAPS;\n\n    final boolean topBoundaryInsideShape = path.isWithin(topBoundaryPoint);\n    final boolean bottomBoundaryInsideShape = path.isWithin(bottomBoundaryPoint);\n\n    if (topBoundaryInsideShape && !bottomBoundaryInsideShape ||\n        !topBoundaryInsideShape && bottomBoundaryInsideShape)\n      return OVERLAPS;\n\n    final boolean insideShape = topBoundaryInsideShape && bottomBoundaryInsideShape;\n\n    if (insideRectangle == ALL_INSIDE && insideShape)\n      return OVERLAPS;\n\n    // Second, the shortcut of seeing whether endpoints are in/out is not going to\n    // work with no area endpoints.  So we rely entirely on intersections.\n\n    if (path.intersects(topPlane, planePoints, bottomPlane) ||\n        path.intersects(bottomPlane, planePoints, topPlane))\n      return OVERLAPS;\n\n    // There is another case for latitude zones only.  This is when the boundaries of the shape all fit\n    // within the zone, but the shape includes areas outside the zone crossing a pole.\n    // In this case, the above \"overlaps\" check is insufficient.  We also need to check a point on either boundary\n    // whether it is within the shape.  If both such points are within, then CONTAINS is the right answer.  If\n    // one such point is within, then OVERLAPS is the right answer.\n\n    if (insideShape)\n      return CONTAINS;\n\n    if (insideRectangle == ALL_INSIDE)\n      return WITHIN;\n\n    return DISJOINT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705","date":1501767131,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoLatitudeZone#getRelationship(GeoShape).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int getRelationship(final GeoShape path) {\n    final int insideRectangle = isShapeInsideBBox(path);\n    if (insideRectangle == SOME_INSIDE)\n      return OVERLAPS;\n\n    final boolean topBoundaryInsideShape = path.isWithin(topBoundaryPoint);\n    final boolean bottomBoundaryInsideShape = path.isWithin(bottomBoundaryPoint);\n\n    if (topBoundaryInsideShape && !bottomBoundaryInsideShape ||\n        !topBoundaryInsideShape && bottomBoundaryInsideShape)\n      return OVERLAPS;\n\n    final boolean insideShape = topBoundaryInsideShape && bottomBoundaryInsideShape;\n\n    if (insideRectangle == ALL_INSIDE && insideShape)\n      return OVERLAPS;\n\n    // Second, the shortcut of seeing whether endpoints are in/out is not going to\n    // work with no area endpoints.  So we rely entirely on intersections.\n\n    if (path.intersects(topPlane, planePoints, bottomPlane) ||\n        path.intersects(bottomPlane, planePoints, topPlane))\n      return OVERLAPS;\n\n    // There is another case for latitude zones only.  This is when the boundaries of the shape all fit\n    // within the zone, but the shape includes areas outside the zone crossing a pole.\n    // In this case, the above \"overlaps\" check is insufficient.  We also need to check a point on either boundary\n    // whether it is within the shape.  If both such points are within, then CONTAINS is the right answer.  If\n    // one such point is within, then OVERLAPS is the right answer.\n\n    if (insideShape)\n      return CONTAINS;\n\n    if (insideRectangle == ALL_INSIDE)\n      return WITHIN;\n\n    return DISJOINT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoLatitudeZone#getRelationship(GeoShape).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int getRelationship(final GeoShape path) {\n    final int insideRectangle = isShapeInsideBBox(path);\n    if (insideRectangle == SOME_INSIDE)\n      return OVERLAPS;\n\n    final boolean topBoundaryInsideShape = path.isWithin(topBoundaryPoint);\n    final boolean bottomBoundaryInsideShape = path.isWithin(bottomBoundaryPoint);\n\n    if (topBoundaryInsideShape && !bottomBoundaryInsideShape ||\n        !topBoundaryInsideShape && bottomBoundaryInsideShape)\n      return OVERLAPS;\n\n    final boolean insideShape = topBoundaryInsideShape && bottomBoundaryInsideShape;\n\n    if (insideRectangle == ALL_INSIDE && insideShape)\n      return OVERLAPS;\n\n    // Second, the shortcut of seeing whether endpoints are in/out is not going to\n    // work with no area endpoints.  So we rely entirely on intersections.\n\n    if (path.intersects(topPlane, planePoints, bottomPlane) ||\n        path.intersects(bottomPlane, planePoints, topPlane))\n      return OVERLAPS;\n\n    // There is another case for latitude zones only.  This is when the boundaries of the shape all fit\n    // within the zone, but the shape includes areas outside the zone crossing a pole.\n    // In this case, the above \"overlaps\" check is insufficient.  We also need to check a point on either boundary\n    // whether it is within the shape.  If both such points are within, then CONTAINS is the right answer.  If\n    // one such point is within, then OVERLAPS is the right answer.\n\n    if (insideShape)\n      return CONTAINS;\n\n    if (insideRectangle == ALL_INSIDE)\n      return WITHIN;\n\n    return DISJOINT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["b4e444678504caf66a8060b1d514383aa4feac0c","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4e444678504caf66a8060b1d514383aa4feac0c":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}