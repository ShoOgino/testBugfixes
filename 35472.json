{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadVarIntsField(FieldInfo).mjava","commits":[{"id":"db5a3aeba34624ea274f34df5691d40ca25f2b67","date":1358965297,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadVarIntsField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private NumericDocValues loadVarIntsField(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                                   Lucene40DocValuesFormat.VAR_INTS_VERSION_START, \n                                   Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n      byte header = input.readByte();\n      if (header == Lucene40DocValuesFormat.VAR_INTS_FIXED_64) {\n        int maxDoc = state.segmentInfo.getDocCount();\n        final long values[] = new long[maxDoc];\n        for (int i = 0; i < values.length; i++) {\n          values[i] = input.readLong();\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return values[docID];\n          }\n        };\n      } else if (header == Lucene40DocValuesFormat.VAR_INTS_PACKED) {\n        final long minValue = input.readLong();\n        final long defaultValue = input.readLong();\n        final PackedInts.Reader reader = PackedInts.getReader(input);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            final long value = reader.get(docID);\n            if (value == defaultValue) {\n              return 0;\n            } else {\n              return minValue + value;\n            }\n          }\n        };\n      } else {\n        throw new CorruptIndexException(\"invalid VAR_INTS header byte: \" + header + \" (resource=\" + input + \")\");\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1982459c2ac4916bf3c0644b801f0cb3e4ee159f","date":1359034079,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadVarIntsField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  private NumericDocValues loadVarIntsField(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                                   Lucene40DocValuesFormat.VAR_INTS_VERSION_START, \n                                   Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n      byte header = input.readByte();\n      if (header == Lucene40DocValuesFormat.VAR_INTS_FIXED_64) {\n        int maxDoc = state.segmentInfo.getDocCount();\n        final long values[] = new long[maxDoc];\n        for (int i = 0; i < values.length; i++) {\n          values[i] = input.readLong();\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return values[docID];\n          }\n        };\n      } else if (header == Lucene40DocValuesFormat.VAR_INTS_PACKED) {\n        final long minValue = input.readLong();\n        final long defaultValue = input.readLong();\n        final PackedInts.Reader reader = PackedInts.getReader(input);\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            final long value = reader.get(docID);\n            if (value == defaultValue) {\n              return 0;\n            } else {\n              return minValue + value;\n            }\n          }\n        };\n      } else {\n        throw new CorruptIndexException(\"invalid VAR_INTS header byte: \" + header + \" (resource=\" + input + \")\");\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db5a3aeba34624ea274f34df5691d40ca25f2b67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":["db5a3aeba34624ea274f34df5691d40ca25f2b67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"db5a3aeba34624ea274f34df5691d40ca25f2b67":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db5a3aeba34624ea274f34df5691d40ca25f2b67","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}