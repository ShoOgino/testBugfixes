{"path":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","commits":[{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n    \n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.contains(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    // TODO: could easily figure out size for SolrDocument if needed...\n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n\n      if (pseudoFields !=null && pseudoFields.size()>0) {\n        writeMap(null,pseudoFields,true,first);\n      }\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n    \n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n    \n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.contains(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n    \n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n    \n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b8f53f044f3fc5ec057048909b900ac58202cbb","date":1303507157,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n    \n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n    \n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n    \n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n    \n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["6aedf81f068e430dec27d94310415cc6ff52731c"],"c26f00b574427b55127e869b935845554afde1fa":["1b8f53f044f3fc5ec057048909b900ac58202cbb","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","1b8f53f044f3fc5ec057048909b900ac58202cbb"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","1b8f53f044f3fc5ec057048909b900ac58202cbb"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"a3776dccca01c11e7046323cfad46a3b4a471233":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","1b8f53f044f3fc5ec057048909b900ac58202cbb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1b8f53f044f3fc5ec057048909b900ac58202cbb"],"6aedf81f068e430dec27d94310415cc6ff52731c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"1b8f53f044f3fc5ec057048909b900ac58202cbb":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"]},"commit2Childs":{"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233","1b8f53f044f3fc5ec057048909b900ac58202cbb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","6aedf81f068e430dec27d94310415cc6ff52731c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6aedf81f068e430dec27d94310415cc6ff52731c":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"1b8f53f044f3fc5ec057048909b900ac58202cbb":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}