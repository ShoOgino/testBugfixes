{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException, IOException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException, IOException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException, IOException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException, IOException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException, IOException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException, IOException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException, IOException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException, IOException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938e4fd7b1e4b34da1650edba7471764bbfaefde","date":1344033248,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      checkClosed();\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      checkClosed();\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      checkClosed();\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d","date":1344892928,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      if (isClosed) {\n        break;\n      }\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      checkClosed();\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1764a3d38fa1de1ac5474f293b8d32da723a409e","date":1344907887,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      wait(500);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      if (isClosed) {\n        break;\n      }\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      wait(500);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      checkClosed();\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      wait(500);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = waitForConnection;\n    while (!connected && left > 0) {\n      wait(left);\n      checkClosed();\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.info(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      }\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.info(\"Client is connected to ZooKeeper\");\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      wait(500);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.info(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      }\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.info(\"Client is connected to ZooKeeper\");\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws InterruptedException, TimeoutException {\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      wait(500);\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44e7a433bcde006012d6f8cd8a1db402bd9da2b7","date":1391655696,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.info(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.info(\"Client is connected to ZooKeeper\");\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.info(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      }\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.info(\"Client is connected to ZooKeeper\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.info(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForConnection, TimeUnit.MILLISECONDS);\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.nanoTime();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.info(\"Client is connected to ZooKeeper\");\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.info(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.currentTimeMillis() + waitForConnection;\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.currentTimeMillis();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.info(\"Client is connected to ZooKeeper\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.debug(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForConnection, TimeUnit.MILLISECONDS);\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.nanoTime();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.info(\"Client is connected to ZooKeeper\");\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.info(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForConnection, TimeUnit.MILLISECONDS);\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.nanoTime();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.info(\"Client is connected to ZooKeeper\");\n  }\n\n","bugFix":null,"bugIntro":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aac63b614f11eae7300a15a1ec9d8bee1e057e3b","date":1474972984,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.debug(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForConnection, TimeUnit.MILLISECONDS);\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.nanoTime();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.debug(\"Client is connected to ZooKeeper\");\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.debug(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForConnection, TimeUnit.MILLISECONDS);\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.nanoTime();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.info(\"Client is connected to ZooKeeper\");\n  }\n\n","bugFix":null,"bugIntro":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.debug(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForConnection, TimeUnit.MILLISECONDS);\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.nanoTime();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.debug(\"Client is connected to ZooKeeper\");\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.info(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForConnection, TimeUnit.MILLISECONDS);\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.nanoTime();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.info(\"Client is connected to ZooKeeper\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.debug(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForConnection, TimeUnit.MILLISECONDS);\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.nanoTime();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.debug(\"Client is connected to ZooKeeper\");\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.info(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForConnection, TimeUnit.MILLISECONDS);\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.nanoTime();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.info(\"Client is connected to ZooKeeper\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.debug(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForConnection, TimeUnit.MILLISECONDS);\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed()) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.nanoTime();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.debug(\"Client is connected to ZooKeeper\");\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.debug(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForConnection, TimeUnit.MILLISECONDS);\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.nanoTime();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.debug(\"Client is connected to ZooKeeper\");\n  }\n\n","bugFix":["7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bbb0b5c5101d175049b4ced1462f4c266d32fc63","date":1559534216,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#waitForConnected(long).mjava","sourceNew":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.info(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForConnection, TimeUnit.MILLISECONDS);\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed()) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.nanoTime();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.info(\"Client is connected to ZooKeeper\");\n  }\n\n","sourceOld":"  public synchronized void waitForConnected(long waitForConnection)\n      throws TimeoutException {\n    log.debug(\"Waiting for client to connect to ZooKeeper\");\n    long expire = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForConnection, TimeUnit.MILLISECONDS);\n    long left = 1;\n    while (!connected && left > 0) {\n      if (isClosed()) {\n        break;\n      }\n      try {\n        wait(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      left = expire - System.nanoTime();\n    }\n    if (!connected) {\n      throw new TimeoutException(\"Could not connect to ZooKeeper \" + zkServerAddress + \" within \" + waitForConnection + \" ms\");\n    }\n    log.debug(\"Client is connected to ZooKeeper\");\n  }\n\n","bugFix":["aac63b614f11eae7300a15a1ec9d8bee1e057e3b","962cd4f5e313777f35da8f521265323e84184929"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["8fd5be977c105554c6a7b68afcdbc511439723ab","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"938e4fd7b1e4b34da1650edba7471764bbfaefde":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["d6f074e73200c07d54f242d3880a8da5a35ff97b","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","938e4fd7b1e4b34da1650edba7471764bbfaefde"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["fd5bc858b8426d40bbe90b94120ead37c77d7954","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["44e7a433bcde006012d6f8cd8a1db402bd9da2b7"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["1764a3d38fa1de1ac5474f293b8d32da723a409e"],"7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d":["938e4fd7b1e4b34da1650edba7471764bbfaefde"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["fd5bc858b8426d40bbe90b94120ead37c77d7954","aac63b614f11eae7300a15a1ec9d8bee1e057e3b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","938e4fd7b1e4b34da1650edba7471764bbfaefde"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"bbb0b5c5101d175049b4ced1462f4c266d32fc63":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"aac63b614f11eae7300a15a1ec9d8bee1e057e3b":["962cd4f5e313777f35da8f521265323e84184929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"44e7a433bcde006012d6f8cd8a1db402bd9da2b7":["6013b4c7388f1627659c8f96c44abd10a294d3a6"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["aac63b614f11eae7300a15a1ec9d8bee1e057e3b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"938e4fd7b1e4b34da1650edba7471764bbfaefde":["8fd5be977c105554c6a7b68afcdbc511439723ab","7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["962cd4f5e313777f35da8f521265323e84184929","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["05a14b2611ead08655a2b2bdc61632eb31316e57","44e7a433bcde006012d6f8cd8a1db402bd9da2b7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d":["1764a3d38fa1de1ac5474f293b8d32da723a409e"],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["938e4fd7b1e4b34da1650edba7471764bbfaefde","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"aac63b614f11eae7300a15a1ec9d8bee1e057e3b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bbb0b5c5101d175049b4ced1462f4c266d32fc63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"44e7a433bcde006012d6f8cd8a1db402bd9da2b7":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","05a14b2611ead08655a2b2bdc61632eb31316e57","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}