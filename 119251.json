{"path":"solr/core/src/test/org/apache/solr/core/TestConfig#testCacheEnablingDisabling().mjava","commits":[{"id":"dc809283a68a1108c6c8f7adc03ceec7a1475ad5","date":1484044538,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testCacheEnablingDisabling().mjava","pathOld":"/dev/null","sourceNew":" @Test\n public void testCacheEnablingDisabling() throws Exception {\n   // ensure if cache is not defined in the config then cache is disabled \n   SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   // enable all the caches via system properties and verify \n   System.setProperty(\"filterCache.enabled\", \"true\");\n   System.setProperty(\"queryResultCache.enabled\", \"true\");\n   System.setProperty(\"documentCache.enabled\", \"true\");\n   sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-cache-enable-disable.xml\", null);\n   assertNotNull(sc.filterCacheConfig);\n   assertNotNull(sc.queryResultCacheConfig);\n   assertNotNull(sc.documentCacheConfig);\n   \n   // disable all the caches via system properties and verify\n   System.setProperty(\"filterCache.enabled\", \"false\");\n   System.setProperty(\"queryResultCache.enabled\", \"false\");\n   System.setProperty(\"documentCache.enabled\", \"false\");\n   sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-cache-enable-disable.xml\", null);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   System.clearProperty(\"filterCache.enabled\");\n   System.clearProperty(\"queryResultCache.enabled\");\n   System.clearProperty(\"documentCache.enabled\");\n }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testCacheEnablingDisabling().mjava","pathOld":"/dev/null","sourceNew":" @Test\n public void testCacheEnablingDisabling() throws Exception {\n   // ensure if cache is not defined in the config then cache is disabled \n   SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   // enable all the caches via system properties and verify \n   System.setProperty(\"filterCache.enabled\", \"true\");\n   System.setProperty(\"queryResultCache.enabled\", \"true\");\n   System.setProperty(\"documentCache.enabled\", \"true\");\n   sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-cache-enable-disable.xml\", null);\n   assertNotNull(sc.filterCacheConfig);\n   assertNotNull(sc.queryResultCacheConfig);\n   assertNotNull(sc.documentCacheConfig);\n   \n   // disable all the caches via system properties and verify\n   System.setProperty(\"filterCache.enabled\", \"false\");\n   System.setProperty(\"queryResultCache.enabled\", \"false\");\n   System.setProperty(\"documentCache.enabled\", \"false\");\n   sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-cache-enable-disable.xml\", null);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   System.clearProperty(\"filterCache.enabled\");\n   System.clearProperty(\"queryResultCache.enabled\");\n   System.clearProperty(\"documentCache.enabled\");\n }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96","date":1576143009,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testCacheEnablingDisabling().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testCacheEnablingDisabling().mjava","sourceNew":" @Test\n public void testCacheEnablingDisabling() throws Exception {\n   // ensure if cache is not defined in the config then cache is disabled \n   SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\", null, true);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   // enable all the caches via system properties and verify \n   System.setProperty(\"filterCache.enabled\", \"true\");\n   System.setProperty(\"queryResultCache.enabled\", \"true\");\n   System.setProperty(\"documentCache.enabled\", \"true\");\n   sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-cache-enable-disable.xml\", null, true);\n   assertNotNull(sc.filterCacheConfig);\n   assertNotNull(sc.queryResultCacheConfig);\n   assertNotNull(sc.documentCacheConfig);\n   \n   // disable all the caches via system properties and verify\n   System.setProperty(\"filterCache.enabled\", \"false\");\n   System.setProperty(\"queryResultCache.enabled\", \"false\");\n   System.setProperty(\"documentCache.enabled\", \"false\");\n   sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-cache-enable-disable.xml\", null, true);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   System.clearProperty(\"filterCache.enabled\");\n   System.clearProperty(\"queryResultCache.enabled\");\n   System.clearProperty(\"documentCache.enabled\");\n }\n\n","sourceOld":" @Test\n public void testCacheEnablingDisabling() throws Exception {\n   // ensure if cache is not defined in the config then cache is disabled \n   SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   // enable all the caches via system properties and verify \n   System.setProperty(\"filterCache.enabled\", \"true\");\n   System.setProperty(\"queryResultCache.enabled\", \"true\");\n   System.setProperty(\"documentCache.enabled\", \"true\");\n   sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-cache-enable-disable.xml\", null);\n   assertNotNull(sc.filterCacheConfig);\n   assertNotNull(sc.queryResultCacheConfig);\n   assertNotNull(sc.documentCacheConfig);\n   \n   // disable all the caches via system properties and verify\n   System.setProperty(\"filterCache.enabled\", \"false\");\n   System.setProperty(\"queryResultCache.enabled\", \"false\");\n   System.setProperty(\"documentCache.enabled\", \"false\");\n   sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-cache-enable-disable.xml\", null);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   System.clearProperty(\"filterCache.enabled\");\n   System.clearProperty(\"queryResultCache.enabled\");\n   System.clearProperty(\"documentCache.enabled\");\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testCacheEnablingDisabling().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testCacheEnablingDisabling().mjava","sourceNew":" @Test\n public void testCacheEnablingDisabling() throws Exception {\n   // ensure if cache is not defined in the config then cache is disabled \n   SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\", null, true);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   // enable all the caches via system properties and verify \n   System.setProperty(\"filterCache.enabled\", \"true\");\n   System.setProperty(\"queryResultCache.enabled\", \"true\");\n   System.setProperty(\"documentCache.enabled\", \"true\");\n   sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-cache-enable-disable.xml\", null, true);\n   assertNotNull(sc.filterCacheConfig);\n   assertNotNull(sc.queryResultCacheConfig);\n   assertNotNull(sc.documentCacheConfig);\n   \n   // disable all the caches via system properties and verify\n   System.setProperty(\"filterCache.enabled\", \"false\");\n   System.setProperty(\"queryResultCache.enabled\", \"false\");\n   System.setProperty(\"documentCache.enabled\", \"false\");\n   sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-cache-enable-disable.xml\", null, true);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   System.clearProperty(\"filterCache.enabled\");\n   System.clearProperty(\"queryResultCache.enabled\");\n   System.clearProperty(\"documentCache.enabled\");\n }\n\n","sourceOld":" @Test\n public void testCacheEnablingDisabling() throws Exception {\n   // ensure if cache is not defined in the config then cache is disabled \n   SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   // enable all the caches via system properties and verify \n   System.setProperty(\"filterCache.enabled\", \"true\");\n   System.setProperty(\"queryResultCache.enabled\", \"true\");\n   System.setProperty(\"documentCache.enabled\", \"true\");\n   sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-cache-enable-disable.xml\", null);\n   assertNotNull(sc.filterCacheConfig);\n   assertNotNull(sc.queryResultCacheConfig);\n   assertNotNull(sc.documentCacheConfig);\n   \n   // disable all the caches via system properties and verify\n   System.setProperty(\"filterCache.enabled\", \"false\");\n   System.setProperty(\"queryResultCache.enabled\", \"false\");\n   System.setProperty(\"documentCache.enabled\", \"false\");\n   sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-cache-enable-disable.xml\", null);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   System.clearProperty(\"filterCache.enabled\");\n   System.clearProperty(\"queryResultCache.enabled\");\n   System.clearProperty(\"documentCache.enabled\");\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testCacheEnablingDisabling().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testCacheEnablingDisabling().mjava","sourceNew":" @Test\n public void testCacheEnablingDisabling() throws Exception {\n   // ensure if cache is not defined in the config then cache is disabled \n   SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\");\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   // enable all the caches via system properties and verify \n   System.setProperty(\"filterCache.enabled\", \"true\");\n   System.setProperty(\"queryResultCache.enabled\", \"true\");\n   System.setProperty(\"documentCache.enabled\", \"true\");\n   sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-cache-enable-disable.xml\");\n   assertNotNull(sc.filterCacheConfig);\n   assertNotNull(sc.queryResultCacheConfig);\n   assertNotNull(sc.documentCacheConfig);\n   \n   // disable all the caches via system properties and verify\n   System.setProperty(\"filterCache.enabled\", \"false\");\n   System.setProperty(\"queryResultCache.enabled\", \"false\");\n   System.setProperty(\"documentCache.enabled\", \"false\");\n   sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-cache-enable-disable.xml\");\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   System.clearProperty(\"filterCache.enabled\");\n   System.clearProperty(\"queryResultCache.enabled\");\n   System.clearProperty(\"documentCache.enabled\");\n }\n\n","sourceOld":" @Test\n public void testCacheEnablingDisabling() throws Exception {\n   // ensure if cache is not defined in the config then cache is disabled \n   SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\", null, true);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   // enable all the caches via system properties and verify \n   System.setProperty(\"filterCache.enabled\", \"true\");\n   System.setProperty(\"queryResultCache.enabled\", \"true\");\n   System.setProperty(\"documentCache.enabled\", \"true\");\n   sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-cache-enable-disable.xml\", null, true);\n   assertNotNull(sc.filterCacheConfig);\n   assertNotNull(sc.queryResultCacheConfig);\n   assertNotNull(sc.documentCacheConfig);\n   \n   // disable all the caches via system properties and verify\n   System.setProperty(\"filterCache.enabled\", \"false\");\n   System.setProperty(\"queryResultCache.enabled\", \"false\");\n   System.setProperty(\"documentCache.enabled\", \"false\");\n   sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-cache-enable-disable.xml\", null, true);\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   System.clearProperty(\"filterCache.enabled\");\n   System.clearProperty(\"queryResultCache.enabled\");\n   System.clearProperty(\"documentCache.enabled\");\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6590c5560508826c2fb637ba966521ef9b6b9f1","date":1585765748,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testCacheEnablingDisabling().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testCacheEnablingDisabling().mjava","sourceNew":" @Test\n public void testCacheEnablingDisabling() throws Exception {\n   // ensure if cache is not defined in the config then cache is disabled \n   SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\");\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   //\n   assertNotNull(sc.userCacheConfigs);\n   assertEquals(Collections.<String, CacheConfig>emptyMap(), sc.userCacheConfigs);\n   \n   // enable all the core caches (and one user cache) via system properties and verify \n   System.setProperty(\"filterCache.enabled\", \"true\");\n   System.setProperty(\"queryResultCache.enabled\", \"true\");\n   System.setProperty(\"documentCache.enabled\", \"true\");\n   System.setProperty(\"user_definied_cache_XXX.enabled\",\"true\");\n   // user_definied_cache_ZZZ.enabled defaults to false in config\n   \n   sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-cache-enable-disable.xml\");\n   assertNotNull(sc.filterCacheConfig);\n   assertNotNull(sc.queryResultCacheConfig);\n   assertNotNull(sc.documentCacheConfig);\n   //\n   assertNotNull(sc.userCacheConfigs);\n   assertEquals(1, sc.userCacheConfigs.size());\n   assertNotNull(sc.userCacheConfigs.get(\"user_definied_cache_XXX\"));\n   \n   // disable all the core caches (and enable both user caches) via system properties and verify\n   System.setProperty(\"filterCache.enabled\", \"false\");\n   System.setProperty(\"queryResultCache.enabled\", \"false\");\n   System.setProperty(\"documentCache.enabled\", \"false\");\n   System.setProperty(\"user_definied_cache_XXX.enabled\",\"true\");\n   System.setProperty(\"user_definied_cache_ZZZ.enabled\",\"true\");\n\n   sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-cache-enable-disable.xml\");\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   //\n   assertNotNull(sc.userCacheConfigs);\n   assertEquals(2, sc.userCacheConfigs.size());\n   assertNotNull(sc.userCacheConfigs.get(\"user_definied_cache_XXX\"));\n   assertNotNull(sc.userCacheConfigs.get(\"user_definied_cache_ZZZ\"));\n   \n   System.clearProperty(\"user_definied_cache_XXX.enabled\");\n   System.clearProperty(\"user_definied_cache_ZZZ.enabled\");\n   System.clearProperty(\"filterCache.enabled\");\n   System.clearProperty(\"queryResultCache.enabled\");\n   System.clearProperty(\"documentCache.enabled\");\n }\n\n","sourceOld":" @Test\n public void testCacheEnablingDisabling() throws Exception {\n   // ensure if cache is not defined in the config then cache is disabled \n   SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\");\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   // enable all the caches via system properties and verify \n   System.setProperty(\"filterCache.enabled\", \"true\");\n   System.setProperty(\"queryResultCache.enabled\", \"true\");\n   System.setProperty(\"documentCache.enabled\", \"true\");\n   sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-cache-enable-disable.xml\");\n   assertNotNull(sc.filterCacheConfig);\n   assertNotNull(sc.queryResultCacheConfig);\n   assertNotNull(sc.documentCacheConfig);\n   \n   // disable all the caches via system properties and verify\n   System.setProperty(\"filterCache.enabled\", \"false\");\n   System.setProperty(\"queryResultCache.enabled\", \"false\");\n   System.setProperty(\"documentCache.enabled\", \"false\");\n   sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-cache-enable-disable.xml\");\n   assertNull(sc.filterCacheConfig);\n   assertNull(sc.queryResultCacheConfig);\n   assertNull(sc.documentCacheConfig);\n   \n   System.clearProperty(\"filterCache.enabled\");\n   System.clearProperty(\"queryResultCache.enabled\");\n   System.clearProperty(\"documentCache.enabled\");\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc809283a68a1108c6c8f7adc03ceec7a1475ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df724d84dab24a0cc54bec95a8680867adc7f171":["dc809283a68a1108c6c8f7adc03ceec7a1475ad5","ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"b6590c5560508826c2fb637ba966521ef9b6b9f1":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc809283a68a1108c6c8f7adc03ceec7a1475ad5"],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["dc809283a68a1108c6c8f7adc03ceec7a1475ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6590c5560508826c2fb637ba966521ef9b6b9f1"]},"commit2Childs":{"dc809283a68a1108c6c8f7adc03ceec7a1475ad5":["df724d84dab24a0cc54bec95a8680867adc7f171","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["b6590c5560508826c2fb637ba966521ef9b6b9f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dc809283a68a1108c6c8f7adc03ceec7a1475ad5","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"b6590c5560508826c2fb637ba966521ef9b6b9f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["df724d84dab24a0cc54bec95a8680867adc7f171","ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}