{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#getUrlFromZk(String).mjava","commits":[{"id":"0eff89b16ebd0046c839c5d02ee44500be5c7886","date":1355766557,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#getUrlFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getUrlFromZk(String).mjava","sourceNew":"  private String getUrlFromZk(String collection) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getCollectionStates().get(collection).getSlicesMap();\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not find collection:\" + collection);\n    }\n    \n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          return ZkCoreNodeProps.getCoreUrl(node.getStr(ZkStateReader.BASE_URL_PROP), collection); //new ZkCoreNodeProps(node).getCoreUrl();\n        }\n      }\n    }\n    \n    throw new RuntimeException(\"Could not find a live node for collection:\" + collection);\n  }\n\n","sourceOld":"  private String getUrlFromZk(String collection) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getCollectionStates().get(collection).getSlicesMap();\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not find collection:\" + collection);\n    }\n    \n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          return ZkCoreNodeProps.getCoreUrl(node.getStr(ZkStateReader.BASE_URL_PROP), collection); //new ZkCoreNodeProps(node).getCoreUrl();\n        }\n      }\n    }\n    \n    throw new RuntimeException(\"Could not find a live node for collection:\" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#getUrlFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getUrlFromZk(String).mjava","sourceNew":"  private String getUrlFromZk(String collection) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getCollectionStates().get(collection).getSlicesMap();\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not find collection:\" + collection);\n    }\n    \n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          return ZkCoreNodeProps.getCoreUrl(node.getStr(ZkStateReader.BASE_URL_PROP), collection); //new ZkCoreNodeProps(node).getCoreUrl();\n        }\n      }\n    }\n    \n    throw new RuntimeException(\"Could not find a live node for collection:\" + collection);\n  }\n\n","sourceOld":"  private String getUrlFromZk(String collection) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getCollectionStates().get(collection).getSlicesMap();\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not find collection:\" + collection);\n    }\n    \n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          return ZkCoreNodeProps.getCoreUrl(node.getStr(ZkStateReader.BASE_URL_PROP), collection); //new ZkCoreNodeProps(node).getCoreUrl();\n        }\n      }\n    }\n    \n    throw new RuntimeException(\"Could not find a live node for collection:\" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdc8313ba7bdaaa48ff54059d0eabff4436ab175","date":1386102048,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#getUrlFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#getUrlFromZk(String).mjava","sourceNew":"  private String getUrlFromZk(String collection) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not find collection:\" + collection);\n    }\n    \n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          return ZkCoreNodeProps.getCoreUrl(node.getStr(ZkStateReader.BASE_URL_PROP), collection); //new ZkCoreNodeProps(node).getCoreUrl();\n        }\n      }\n    }\n    \n    throw new RuntimeException(\"Could not find a live node for collection:\" + collection);\n  }\n\n","sourceOld":"  private String getUrlFromZk(String collection) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getCollectionStates().get(collection).getSlicesMap();\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not find collection:\" + collection);\n    }\n    \n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          return ZkCoreNodeProps.getCoreUrl(node.getStr(ZkStateReader.BASE_URL_PROP), collection); //new ZkCoreNodeProps(node).getCoreUrl();\n        }\n      }\n    }\n    \n    throw new RuntimeException(\"Could not find a live node for collection:\" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#getUrlFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#getUrlFromZk(String).mjava","sourceNew":"  private String getUrlFromZk(String collection) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not find collection:\" + collection);\n    }\n    \n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          return ZkCoreNodeProps.getCoreUrl(node.getStr(ZkStateReader.BASE_URL_PROP), collection); //new ZkCoreNodeProps(node).getCoreUrl();\n        }\n      }\n    }\n    \n    throw new RuntimeException(\"Could not find a live node for collection:\" + collection);\n  }\n\n","sourceOld":"  private String getUrlFromZk(String collection) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getCollectionStates().get(collection).getSlicesMap();\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not find collection:\" + collection);\n    }\n    \n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          return ZkCoreNodeProps.getCoreUrl(node.getStr(ZkStateReader.BASE_URL_PROP), collection); //new ZkCoreNodeProps(node).getCoreUrl();\n        }\n      }\n    }\n    \n    throw new RuntimeException(\"Could not find a live node for collection:\" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#getUrlFromZk(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#getUrlFromZk(String).mjava","sourceNew":"  private String getUrlFromZk(String collection) {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not find collection:\" + collection);\n    }\n    \n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          return ZkCoreNodeProps.getCoreUrl(node.getStr(ZkStateReader.BASE_URL_PROP), collection); //new ZkCoreNodeProps(node).getCoreUrl();\n        }\n      }\n    }\n    \n    throw new RuntimeException(\"Could not find a live node for collection:\" + collection);\n  }\n\n","sourceOld":"  private String getUrlFromZk(String collection) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not find collection:\" + collection);\n    }\n    \n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          return ZkCoreNodeProps.getCoreUrl(node.getStr(ZkStateReader.BASE_URL_PROP), collection); //new ZkCoreNodeProps(node).getCoreUrl();\n        }\n      }\n    }\n    \n    throw new RuntimeException(\"Could not find a live node for collection:\" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#getUrlFromZk(String).mjava","sourceNew":null,"sourceOld":"  private String getUrlFromZk(String collection) {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not find collection:\" + collection);\n    }\n    \n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          return ZkCoreNodeProps.getCoreUrl(node.getStr(ZkStateReader.BASE_URL_PROP), collection); //new ZkCoreNodeProps(node).getCoreUrl();\n        }\n      }\n    }\n    \n    throw new RuntimeException(\"Could not find a live node for collection:\" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#getUrlFromZk(String).mjava","sourceNew":null,"sourceOld":"  private String getUrlFromZk(String collection) {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not find collection:\" + collection);\n    }\n    \n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          return ZkCoreNodeProps.getCoreUrl(node.getStr(ZkStateReader.BASE_URL_PROP), collection); //new ZkCoreNodeProps(node).getCoreUrl();\n        }\n      }\n    }\n    \n    throw new RuntimeException(\"Could not find a live node for collection:\" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["bafca15d8e408346a67f4282ad1143b88023893b"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["bafca15d8e408346a67f4282ad1143b88023893b","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["0eff89b16ebd0046c839c5d02ee44500be5c7886","cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"bafca15d8e408346a67f4282ad1143b88023893b":["cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"cdc8313ba7bdaaa48ff54059d0eabff4436ab175":["0eff89b16ebd0046c839c5d02ee44500be5c7886"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"cdc8313ba7bdaaa48ff54059d0eabff4436ab175":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}