{"path":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","commits":[{"id":"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","date":1286986267,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#mileage().mjava","sourceNew":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void mileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = AbstractDataImportHandlerTestCase.createMap(\"name\", \"e\");\n    Context context = AbstractDataImportHandlerTestCase.getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    Assert.assertEquals(5, result.size());\n    Assert.assertEquals(s, result.get(\"rowdata\"));\n    Assert.assertEquals(\"26\", result.get(\"highway_mileage\"));\n    Assert.assertEquals(\"19\", result.get(\"city_mileage\"));\n    Assert.assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    Assert.assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#mileage().mjava","sourceNew":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void mileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = AbstractDataImportHandlerTestCase.createMap(\"name\", \"e\");\n    Context context = AbstractDataImportHandlerTestCase.getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    Assert.assertEquals(5, result.size());\n    Assert.assertEquals(s, result.get(\"rowdata\"));\n    Assert.assertEquals(\"26\", result.get(\"highway_mileage\"));\n    Assert.assertEquals(\"19\", result.get(\"city_mileage\"));\n    Assert.assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    Assert.assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","sourceNew":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","sourceNew":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"c26f00b574427b55127e869b935845554afde1fa":["fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}