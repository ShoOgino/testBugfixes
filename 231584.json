{"path":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","commits":[{"id":"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee","date":1421799060,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void reloadCore(boolean createNewCore) throws Exception {\n    if (createNewCore) {\n      CoreContainer cores = h.getCoreContainer();\n      SolrCore core = h.getCore();\n      String dataDir1 = core.getDataDir();\n      CoreDescriptor cd = core.getCoreDescriptor();\n      cores.unload(core.getName());\n      SolrCore createdCore = cores.create(cd);\n      assertEquals(dataDir1, createdCore.getDataDir());\n      assertEquals(createdCore, h.getCore());\n    } else {\n      h.reload();\n      // On regular reloading, wait until the new searcher is registered\n      RefCounted<SolrIndexSearcher> registeredSearcher = h.getCore().getRegisteredSearcher();\n      RefCounted<SolrIndexSearcher> newestSearcher = h.getCore().getNewestSearcher(false);;\n      while (registeredSearcher.get() != newestSearcher.get()) {\n        registeredSearcher.decref();\n        newestSearcher.decref();\n        Thread.sleep(50);\n        registeredSearcher = h.getCore().getRegisteredSearcher();\n        newestSearcher = h.getCore().getNewestSearcher(false);\n      }\n      registeredSearcher.decref();\n      newestSearcher.decref();\n    }\n    \n    assertQ(req(\"qt\", \"standard\", \n        \"q\", \"*:*\"), \n        \"//*[@numFound='11']\"\n        );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8b3e188d0bac874c98205d981a03ddeab0f3f2a","date":1421917333,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","sourceNew":"  private void reloadCore(boolean createNewCore) throws Exception {\n//    if (createNewCore) {\n      CoreContainer cores = h.getCoreContainer();\n      SolrCore core = h.getCore();\n      String dataDir1 = core.getDataDir();\n      CoreDescriptor cd = core.getCoreDescriptor();\n      cores.unload(core.getName());\n      SolrCore createdCore = cores.create(cd);\n      assertEquals(dataDir1, createdCore.getDataDir());\n      assertEquals(createdCore, h.getCore());\n//    } else {\n//      h.reload();\n//      // On regular reloading, wait until the new searcher is registered\n//      waitForWarming();\n//    }\n    \n    assertQ(req(\"qt\", \"standard\", \n        \"q\", \"*:*\"), \n        \"//*[@numFound='11']\"\n        );\n  }\n\n","sourceOld":"  private void reloadCore(boolean createNewCore) throws Exception {\n    if (createNewCore) {\n      CoreContainer cores = h.getCoreContainer();\n      SolrCore core = h.getCore();\n      String dataDir1 = core.getDataDir();\n      CoreDescriptor cd = core.getCoreDescriptor();\n      cores.unload(core.getName());\n      SolrCore createdCore = cores.create(cd);\n      assertEquals(dataDir1, createdCore.getDataDir());\n      assertEquals(createdCore, h.getCore());\n    } else {\n      h.reload();\n      // On regular reloading, wait until the new searcher is registered\n      RefCounted<SolrIndexSearcher> registeredSearcher = h.getCore().getRegisteredSearcher();\n      RefCounted<SolrIndexSearcher> newestSearcher = h.getCore().getNewestSearcher(false);;\n      while (registeredSearcher.get() != newestSearcher.get()) {\n        registeredSearcher.decref();\n        newestSearcher.decref();\n        Thread.sleep(50);\n        registeredSearcher = h.getCore().getRegisteredSearcher();\n        newestSearcher = h.getCore().getNewestSearcher(false);\n      }\n      registeredSearcher.decref();\n      newestSearcher.decref();\n    }\n    \n    assertQ(req(\"qt\", \"standard\", \n        \"q\", \"*:*\"), \n        \"//*[@numFound='11']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46a552067d28b0dd9e5716bc043c22ccf0fc044","date":1422225644,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","sourceNew":"  private void reloadCore(boolean createNewCore) throws Exception {\n    if (createNewCore) {\n      CoreContainer cores = h.getCoreContainer();\n      SolrCore core = h.getCore();\n      String dataDir1 = core.getDataDir();\n      CoreDescriptor cd = core.getCoreDescriptor();\n      cores.unload(core.getName());\n      SolrCore createdCore = cores.create(cd);\n      assertEquals(dataDir1, createdCore.getDataDir());\n      assertEquals(createdCore, h.getCore());\n    } else {\n      h.reload();\n      // On regular reloading, wait until the new searcher is registered\n      waitForWarming();\n    }\n    \n    assertQ(req(\"qt\", \"standard\", \n        \"q\", \"*:*\"), \n        \"//*[@numFound='11']\"\n        );\n  }\n\n","sourceOld":"  private void reloadCore(boolean createNewCore) throws Exception {\n//    if (createNewCore) {\n      CoreContainer cores = h.getCoreContainer();\n      SolrCore core = h.getCore();\n      String dataDir1 = core.getDataDir();\n      CoreDescriptor cd = core.getCoreDescriptor();\n      cores.unload(core.getName());\n      SolrCore createdCore = cores.create(cd);\n      assertEquals(dataDir1, createdCore.getDataDir());\n      assertEquals(createdCore, h.getCore());\n//    } else {\n//      h.reload();\n//      // On regular reloading, wait until the new searcher is registered\n//      waitForWarming();\n//    }\n    \n    assertQ(req(\"qt\", \"standard\", \n        \"q\", \"*:*\"), \n        \"//*[@numFound='11']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","sourceNew":"  private void reloadCore(boolean createNewCore) throws Exception {\n    if (createNewCore) {\n      CoreContainer cores = h.getCoreContainer();\n      SolrCore core = h.getCore();\n      String dataDir1 = core.getDataDir();\n      CoreDescriptor cd = core.getCoreDescriptor();\n      h.close();\n      createCore();\n      SolrCore createdCore = h.getCore();\n      assertEquals(dataDir1, createdCore.getDataDir());\n      assertEquals(createdCore, h.getCore());\n    } else {\n      h.reload();\n      // On regular reloading, wait until the new searcher is registered\n      waitForWarming();\n    }\n    \n    assertQ(req(\"qt\", \"standard\", \n        \"q\", \"*:*\"), \n        \"//*[@numFound='11']\"\n        );\n  }\n\n","sourceOld":"  private void reloadCore(boolean createNewCore) throws Exception {\n    if (createNewCore) {\n      CoreContainer cores = h.getCoreContainer();\n      SolrCore core = h.getCore();\n      String dataDir1 = core.getDataDir();\n      CoreDescriptor cd = core.getCoreDescriptor();\n      cores.unload(core.getName());\n      SolrCore createdCore = cores.create(cd);\n      assertEquals(dataDir1, createdCore.getDataDir());\n      assertEquals(createdCore, h.getCore());\n    } else {\n      h.reload();\n      // On regular reloading, wait until the new searcher is registered\n      waitForWarming();\n    }\n    \n    assertQ(req(\"qt\", \"standard\", \n        \"q\", \"*:*\"), \n        \"//*[@numFound='11']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","sourceNew":"  private void reloadCore(boolean createNewCore) throws Exception {\n    if (createNewCore) {\n      CoreContainer cores = h.getCoreContainer();\n      SolrCore core = h.getCore();\n      String dataDir1 = core.getDataDir();\n      CoreDescriptor cd = core.getCoreDescriptor();\n      h.close();\n      createCore();\n      SolrCore createdCore = h.getCore();\n      assertEquals(dataDir1, createdCore.getDataDir());\n      assertEquals(createdCore, h.getCore());\n    } else {\n      h.reload();\n      // On regular reloading, wait until the new searcher is registered\n      waitForWarming();\n    }\n    \n    assertQ(req(\"qt\", \"/select\",\n        \"q\", \"*:*\"), \n        \"//*[@numFound='11']\"\n        );\n  }\n\n","sourceOld":"  private void reloadCore(boolean createNewCore) throws Exception {\n    if (createNewCore) {\n      CoreContainer cores = h.getCoreContainer();\n      SolrCore core = h.getCore();\n      String dataDir1 = core.getDataDir();\n      CoreDescriptor cd = core.getCoreDescriptor();\n      h.close();\n      createCore();\n      SolrCore createdCore = h.getCore();\n      assertEquals(dataDir1, createdCore.getDataDir());\n      assertEquals(createdCore, h.getCore());\n    } else {\n      h.reload();\n      // On regular reloading, wait until the new searcher is registered\n      waitForWarming();\n    }\n    \n    assertQ(req(\"qt\", \"standard\", \n        \"q\", \"*:*\"), \n        \"//*[@numFound='11']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","sourceNew":"  private void reloadCore(boolean createNewCore) throws Exception {\n    if (createNewCore) {\n      CoreContainer cores = h.getCoreContainer();\n      SolrCore core = h.getCore();\n      String dataDir1 = core.getDataDir();\n      CoreDescriptor cd = core.getCoreDescriptor();\n      h.close();\n      createCore();\n      SolrCore createdCore = h.getCore();\n      assertEquals(dataDir1, createdCore.getDataDir());\n      assertEquals(createdCore, h.getCore());\n    } else {\n      h.reload();\n      // On regular reloading, wait until the new searcher is registered\n      waitForWarming();\n    }\n    \n    assertQ(req(\"qt\", \"/select\",\n        \"q\", \"*:*\"), \n        \"//*[@numFound='11']\"\n        );\n  }\n\n","sourceOld":"  private void reloadCore(boolean createNewCore) throws Exception {\n    if (createNewCore) {\n      CoreContainer cores = h.getCoreContainer();\n      SolrCore core = h.getCore();\n      String dataDir1 = core.getDataDir();\n      CoreDescriptor cd = core.getCoreDescriptor();\n      h.close();\n      createCore();\n      SolrCore createdCore = h.getCore();\n      assertEquals(dataDir1, createdCore.getDataDir());\n      assertEquals(createdCore, h.getCore());\n    } else {\n      h.reload();\n      // On regular reloading, wait until the new searcher is registered\n      waitForWarming();\n    }\n    \n    assertQ(req(\"qt\", \"standard\", \n        \"q\", \"*:*\"), \n        \"//*[@numFound='11']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#reloadCore(boolean).mjava","sourceNew":"  private void reloadCore(boolean createNewCore) throws Exception {\n    if (createNewCore) {\n      CoreContainer cores = h.getCoreContainer();\n      SolrCore core = h.getCore();\n      String dataDir1 = core.getDataDir();\n      CoreDescriptor cd = core.getCoreDescriptor();\n      h.close();\n      createCore();\n      SolrCore createdCore = h.getCore();\n      assertEquals(dataDir1, createdCore.getDataDir());\n      assertEquals(createdCore, h.getCore());\n    } else {\n      h.reload();\n      // On regular reloading, wait until the new searcher is registered\n      waitForWarming();\n    }\n    \n    assertQ(req(\"qt\", \"/select\",\n        \"q\", \"*:*\"), \n        \"//*[@numFound='11']\"\n        );\n  }\n\n","sourceOld":"  private void reloadCore(boolean createNewCore) throws Exception {\n    if (createNewCore) {\n      CoreContainer cores = h.getCoreContainer();\n      SolrCore core = h.getCore();\n      String dataDir1 = core.getDataDir();\n      CoreDescriptor cd = core.getCoreDescriptor();\n      h.close();\n      createCore();\n      SolrCore createdCore = h.getCore();\n      assertEquals(dataDir1, createdCore.getDataDir());\n      assertEquals(createdCore, h.getCore());\n    } else {\n      h.reload();\n      // On regular reloading, wait until the new searcher is registered\n      waitForWarming();\n    }\n    \n    assertQ(req(\"qt\", \"standard\", \n        \"q\", \"*:*\"), \n        \"//*[@numFound='11']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8b3e188d0bac874c98205d981a03ddeab0f3f2a":["d5b4a5e9cf8f26adacaf06c3101e4e43174473ee"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["c46a552067d28b0dd9e5716bc043c22ccf0fc044"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c46a552067d28b0dd9e5716bc043c22ccf0fc044":["c8b3e188d0bac874c98205d981a03ddeab0f3f2a"],"30c8e5574b55d57947e989443dfde611646530ee":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","5ff704ef91e9ae30ca59babb23ece85720701b60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"]},"commit2Childs":{"c8b3e188d0bac874c98205d981a03ddeab0f3f2a":["c46a552067d28b0dd9e5716bc043c22ccf0fc044"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5b4a5e9cf8f26adacaf06c3101e4e43174473ee"],"c46a552067d28b0dd9e5716bc043c22ccf0fc044":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee":["c8b3e188d0bac874c98205d981a03ddeab0f3f2a"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}