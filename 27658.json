{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#longToPrefixCoded(long,int).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#longToPrefixCoded(long,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link #trieCodeLong}.\n   */\n  public static String longToPrefixCoded(final long val, final int shift) {\n    if (shift>63 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63\");\n    int nChars = (63-shift)/7 + 1;\n    final char[] arr = new char[nChars+1];\n    arr[0] = (char)(SHIFT_START_LONG + shift);\n    long sortableBits = val ^ 0x8000000000000000L;\n    sortableBits >>>= shift;\n    while (nChars>=1) {\n      // Store 7 bits per character for good efficiency when UTF-8 encoding.\n      // The whole number is right-justified so that lucene can prefix-encode\n      // the terms more efficiently.\n      arr[nChars--] = (char)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    return new String(arr);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#longToPrefixCoded(long,int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#longToPrefixCoded(long,int).mjava","sourceNew":"  /**\n   * Expert: Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link LongRangeBuilder}.\n   */\n  public static String longToPrefixCoded(final long val, final int shift) {\n    if (shift>63 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63\");\n    final char[] buffer = new char[LONG_BUF_SIZE];\n    final int len = longToPrefixCoded(val, shift, buffer);\n    return new String(buffer, 0, len);\n  }\n\n","sourceOld":"  /**\n   * Expert: Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link #trieCodeLong}.\n   */\n  public static String longToPrefixCoded(final long val, final int shift) {\n    if (shift>63 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63\");\n    int nChars = (63-shift)/7 + 1;\n    final char[] arr = new char[nChars+1];\n    arr[0] = (char)(SHIFT_START_LONG + shift);\n    long sortableBits = val ^ 0x8000000000000000L;\n    sortableBits >>>= shift;\n    while (nChars>=1) {\n      // Store 7 bits per character for good efficiency when UTF-8 encoding.\n      // The whole number is right-justified so that lucene can prefix-encode\n      // the terms more efficiently.\n      arr[nChars--] = (char)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    return new String(arr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#longToPrefixCoded(long,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link LongRangeBuilder}.\n   */\n  public static String longToPrefixCoded(final long val, final int shift) {\n    if (shift>63 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63\");\n    final char[] buffer = new char[LONG_BUF_SIZE];\n    final int len = longToPrefixCoded(val, shift, buffer);\n    return new String(buffer, 0, len);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}