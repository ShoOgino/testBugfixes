{"path":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#deleteNodeRecursion(TSTNode).mjava","commits":[{"id":"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","date":1282571040,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#deleteNodeRecursion(TSTNode).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Recursively visits each node to be deleted.\n   * \n   * To delete a node, first set its data to null, then pass it into this\n   * method, then pass the node returned by this method into this method (make\n   * sure you don't delete the data of any of the nodes returned from this\n   * method!) and continue in this fashion until the node returned by this\n   * method is <code>null</code>.\n   * \n   * The TSTNode instance returned by this method will be next node to be\n   * operated on by <code>deleteNodeRecursion</code> (This emulates recursive\n   * method call while avoiding the JVM overhead normally associated with a\n   * recursive method.)\n   * \n   *@param currentNode\n   *          The node to delete.\n   *@return The next node to be called in deleteNodeRecursion.\n   */\n  private TSTNode deleteNodeRecursion(TSTNode currentNode) {\n    if (currentNode == null) {\n      return null;\n    }\n    if (currentNode.relatives[TSTNode.EQKID] != null\n            || currentNode.data != null) {\n      return null;\n    }\n    // can't delete this node if it has a non-null eq kid or data\n    TSTNode currentParent = currentNode.relatives[TSTNode.PARENT];\n    boolean lokidNull = currentNode.relatives[TSTNode.LOKID] == null;\n    boolean hikidNull = currentNode.relatives[TSTNode.HIKID] == null;\n    int childType;\n    if (currentParent.relatives[TSTNode.LOKID] == currentNode) {\n      childType = TSTNode.LOKID;\n    } else if (currentParent.relatives[TSTNode.EQKID] == currentNode) {\n      childType = TSTNode.EQKID;\n    } else if (currentParent.relatives[TSTNode.HIKID] == currentNode) {\n      childType = TSTNode.HIKID;\n    } else {\n      rootNode = null;\n      return null;\n    }\n    if (lokidNull && hikidNull) {\n      currentParent.relatives[childType] = null;\n      return currentParent;\n    }\n    if (lokidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.HIKID];\n      currentNode.relatives[TSTNode.HIKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    if (hikidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.LOKID];\n      currentNode.relatives[TSTNode.LOKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    int deltaHi = currentNode.relatives[TSTNode.HIKID].splitchar\n            - currentNode.splitchar;\n    int deltaLo = currentNode.splitchar\n            - currentNode.relatives[TSTNode.LOKID].splitchar;\n    int movingKid;\n    TSTNode targetNode;\n    if (deltaHi == deltaLo) {\n      if (Math.random() < 0.5) {\n        deltaHi++;\n      } else {\n        deltaLo++;\n      }\n    }\n    if (deltaHi > deltaLo) {\n      movingKid = TSTNode.HIKID;\n      targetNode = currentNode.relatives[TSTNode.LOKID];\n    } else {\n      movingKid = TSTNode.LOKID;\n      targetNode = currentNode.relatives[TSTNode.HIKID];\n    }\n    while (targetNode.relatives[movingKid] != null) {\n      targetNode = targetNode.relatives[movingKid];\n    }\n    targetNode.relatives[movingKid] = currentNode.relatives[movingKid];\n    currentParent.relatives[childType] = targetNode;\n    targetNode.relatives[TSTNode.PARENT] = currentParent;\n    if (!lokidNull) {\n      currentNode.relatives[TSTNode.LOKID] = null;\n    }\n    if (!hikidNull) {\n      currentNode.relatives[TSTNode.HIKID] = null;\n    }\n    return currentParent;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#deleteNodeRecursion(TSTNode).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Recursively visits each node to be deleted.\n   * \n   * To delete a node, first set its data to null, then pass it into this\n   * method, then pass the node returned by this method into this method (make\n   * sure you don't delete the data of any of the nodes returned from this\n   * method!) and continue in this fashion until the node returned by this\n   * method is <code>null</code>.\n   * \n   * The TSTNode instance returned by this method will be next node to be\n   * operated on by <code>deleteNodeRecursion</code> (This emulates recursive\n   * method call while avoiding the JVM overhead normally associated with a\n   * recursive method.)\n   * \n   *@param currentNode\n   *          The node to delete.\n   *@return The next node to be called in deleteNodeRecursion.\n   */\n  private TSTNode deleteNodeRecursion(TSTNode currentNode) {\n    if (currentNode == null) {\n      return null;\n    }\n    if (currentNode.relatives[TSTNode.EQKID] != null\n            || currentNode.data != null) {\n      return null;\n    }\n    // can't delete this node if it has a non-null eq kid or data\n    TSTNode currentParent = currentNode.relatives[TSTNode.PARENT];\n    boolean lokidNull = currentNode.relatives[TSTNode.LOKID] == null;\n    boolean hikidNull = currentNode.relatives[TSTNode.HIKID] == null;\n    int childType;\n    if (currentParent.relatives[TSTNode.LOKID] == currentNode) {\n      childType = TSTNode.LOKID;\n    } else if (currentParent.relatives[TSTNode.EQKID] == currentNode) {\n      childType = TSTNode.EQKID;\n    } else if (currentParent.relatives[TSTNode.HIKID] == currentNode) {\n      childType = TSTNode.HIKID;\n    } else {\n      rootNode = null;\n      return null;\n    }\n    if (lokidNull && hikidNull) {\n      currentParent.relatives[childType] = null;\n      return currentParent;\n    }\n    if (lokidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.HIKID];\n      currentNode.relatives[TSTNode.HIKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    if (hikidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.LOKID];\n      currentNode.relatives[TSTNode.LOKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    int deltaHi = currentNode.relatives[TSTNode.HIKID].splitchar\n            - currentNode.splitchar;\n    int deltaLo = currentNode.splitchar\n            - currentNode.relatives[TSTNode.LOKID].splitchar;\n    int movingKid;\n    TSTNode targetNode;\n    if (deltaHi == deltaLo) {\n      if (Math.random() < 0.5) {\n        deltaHi++;\n      } else {\n        deltaLo++;\n      }\n    }\n    if (deltaHi > deltaLo) {\n      movingKid = TSTNode.HIKID;\n      targetNode = currentNode.relatives[TSTNode.LOKID];\n    } else {\n      movingKid = TSTNode.LOKID;\n      targetNode = currentNode.relatives[TSTNode.HIKID];\n    }\n    while (targetNode.relatives[movingKid] != null) {\n      targetNode = targetNode.relatives[movingKid];\n    }\n    targetNode.relatives[movingKid] = currentNode.relatives[movingKid];\n    currentParent.relatives[childType] = targetNode;\n    targetNode.relatives[TSTNode.PARENT] = currentParent;\n    if (!lokidNull) {\n      currentNode.relatives[TSTNode.LOKID] = null;\n    }\n    if (!hikidNull) {\n      currentNode.relatives[TSTNode.HIKID] = null;\n    }\n    return currentParent;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#deleteNodeRecursion(TSTNode).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#deleteNodeRecursion(TSTNode).mjava","sourceNew":"  /**\n   * Recursively visits each node to be deleted.\n   * \n   * To delete a node, first set its data to null, then pass it into this\n   * method, then pass the node returned by this method into this method (make\n   * sure you don't delete the data of any of the nodes returned from this\n   * method!) and continue in this fashion until the node returned by this\n   * method is <code>null</code>.\n   * \n   * The TSTNode instance returned by this method will be next node to be\n   * operated on by <code>deleteNodeRecursion</code> (This emulates recursive\n   * method call while avoiding the JVM overhead normally associated with a\n   * recursive method.)\n   * \n   *@param currentNode\n   *          The node to delete.\n   *@return The next node to be called in deleteNodeRecursion.\n   */\n  private TSTNode deleteNodeRecursion(TSTNode currentNode) {\n    if (currentNode == null) {\n      return null;\n    }\n    if (currentNode.relatives[TSTNode.EQKID] != null\n            || currentNode.data != null) {\n      return null;\n    }\n    // can't delete this node if it has a non-null eq kid or data\n    TSTNode currentParent = currentNode.relatives[TSTNode.PARENT];\n    boolean lokidNull = currentNode.relatives[TSTNode.LOKID] == null;\n    boolean hikidNull = currentNode.relatives[TSTNode.HIKID] == null;\n    int childType;\n    if (currentParent.relatives[TSTNode.LOKID] == currentNode) {\n      childType = TSTNode.LOKID;\n    } else if (currentParent.relatives[TSTNode.EQKID] == currentNode) {\n      childType = TSTNode.EQKID;\n    } else if (currentParent.relatives[TSTNode.HIKID] == currentNode) {\n      childType = TSTNode.HIKID;\n    } else {\n      rootNode = null;\n      return null;\n    }\n    if (lokidNull && hikidNull) {\n      currentParent.relatives[childType] = null;\n      return currentParent;\n    }\n    if (lokidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.HIKID];\n      currentNode.relatives[TSTNode.HIKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    if (hikidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.LOKID];\n      currentNode.relatives[TSTNode.LOKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    int deltaHi = currentNode.relatives[TSTNode.HIKID].splitchar\n            - currentNode.splitchar;\n    int deltaLo = currentNode.splitchar\n            - currentNode.relatives[TSTNode.LOKID].splitchar;\n    int movingKid;\n    TSTNode targetNode;\n    if (deltaHi == deltaLo) {\n      if (Math.random() < 0.5) {\n        deltaHi++;\n      } else {\n        deltaLo++;\n      }\n    }\n    if (deltaHi > deltaLo) {\n      movingKid = TSTNode.HIKID;\n      targetNode = currentNode.relatives[TSTNode.LOKID];\n    } else {\n      movingKid = TSTNode.LOKID;\n      targetNode = currentNode.relatives[TSTNode.HIKID];\n    }\n    while (targetNode.relatives[movingKid] != null) {\n      targetNode = targetNode.relatives[movingKid];\n    }\n    targetNode.relatives[movingKid] = currentNode.relatives[movingKid];\n    currentParent.relatives[childType] = targetNode;\n    targetNode.relatives[TSTNode.PARENT] = currentParent;\n    if (!lokidNull) {\n      currentNode.relatives[TSTNode.LOKID] = null;\n    }\n    if (!hikidNull) {\n      currentNode.relatives[TSTNode.HIKID] = null;\n    }\n    return currentParent;\n  }\n\n","sourceOld":"  /**\n   * Recursively visits each node to be deleted.\n   * \n   * To delete a node, first set its data to null, then pass it into this\n   * method, then pass the node returned by this method into this method (make\n   * sure you don't delete the data of any of the nodes returned from this\n   * method!) and continue in this fashion until the node returned by this\n   * method is <code>null</code>.\n   * \n   * The TSTNode instance returned by this method will be next node to be\n   * operated on by <code>deleteNodeRecursion</code> (This emulates recursive\n   * method call while avoiding the JVM overhead normally associated with a\n   * recursive method.)\n   * \n   *@param currentNode\n   *          The node to delete.\n   *@return The next node to be called in deleteNodeRecursion.\n   */\n  private TSTNode deleteNodeRecursion(TSTNode currentNode) {\n    if (currentNode == null) {\n      return null;\n    }\n    if (currentNode.relatives[TSTNode.EQKID] != null\n            || currentNode.data != null) {\n      return null;\n    }\n    // can't delete this node if it has a non-null eq kid or data\n    TSTNode currentParent = currentNode.relatives[TSTNode.PARENT];\n    boolean lokidNull = currentNode.relatives[TSTNode.LOKID] == null;\n    boolean hikidNull = currentNode.relatives[TSTNode.HIKID] == null;\n    int childType;\n    if (currentParent.relatives[TSTNode.LOKID] == currentNode) {\n      childType = TSTNode.LOKID;\n    } else if (currentParent.relatives[TSTNode.EQKID] == currentNode) {\n      childType = TSTNode.EQKID;\n    } else if (currentParent.relatives[TSTNode.HIKID] == currentNode) {\n      childType = TSTNode.HIKID;\n    } else {\n      rootNode = null;\n      return null;\n    }\n    if (lokidNull && hikidNull) {\n      currentParent.relatives[childType] = null;\n      return currentParent;\n    }\n    if (lokidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.HIKID];\n      currentNode.relatives[TSTNode.HIKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    if (hikidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.LOKID];\n      currentNode.relatives[TSTNode.LOKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    int deltaHi = currentNode.relatives[TSTNode.HIKID].splitchar\n            - currentNode.splitchar;\n    int deltaLo = currentNode.splitchar\n            - currentNode.relatives[TSTNode.LOKID].splitchar;\n    int movingKid;\n    TSTNode targetNode;\n    if (deltaHi == deltaLo) {\n      if (Math.random() < 0.5) {\n        deltaHi++;\n      } else {\n        deltaLo++;\n      }\n    }\n    if (deltaHi > deltaLo) {\n      movingKid = TSTNode.HIKID;\n      targetNode = currentNode.relatives[TSTNode.LOKID];\n    } else {\n      movingKid = TSTNode.LOKID;\n      targetNode = currentNode.relatives[TSTNode.HIKID];\n    }\n    while (targetNode.relatives[movingKid] != null) {\n      targetNode = targetNode.relatives[movingKid];\n    }\n    targetNode.relatives[movingKid] = currentNode.relatives[movingKid];\n    currentParent.relatives[childType] = targetNode;\n    targetNode.relatives[TSTNode.PARENT] = currentParent;\n    if (!lokidNull) {\n      currentNode.relatives[TSTNode.LOKID] = null;\n    }\n    if (!hikidNull) {\n      currentNode.relatives[TSTNode.HIKID] = null;\n    }\n    return currentParent;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#deleteNodeRecursion(TSTNode).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#deleteNodeRecursion(TSTNode).mjava","sourceNew":"  /**\n   * Recursively visits each node to be deleted.\n   * \n   * To delete a node, first set its data to null, then pass it into this\n   * method, then pass the node returned by this method into this method (make\n   * sure you don't delete the data of any of the nodes returned from this\n   * method!) and continue in this fashion until the node returned by this\n   * method is <code>null</code>.\n   * \n   * The TSTNode instance returned by this method will be next node to be\n   * operated on by <code>deleteNodeRecursion</code> (This emulates recursive\n   * method call while avoiding the JVM overhead normally associated with a\n   * recursive method.)\n   * \n   *@param currentNode\n   *          The node to delete.\n   *@return The next node to be called in deleteNodeRecursion.\n   */\n  private TSTNode deleteNodeRecursion(TSTNode currentNode) {\n    if (currentNode == null) {\n      return null;\n    }\n    if (currentNode.relatives[TSTNode.EQKID] != null\n            || currentNode.data != null) {\n      return null;\n    }\n    // can't delete this node if it has a non-null eq kid or data\n    TSTNode currentParent = currentNode.relatives[TSTNode.PARENT];\n    boolean lokidNull = currentNode.relatives[TSTNode.LOKID] == null;\n    boolean hikidNull = currentNode.relatives[TSTNode.HIKID] == null;\n    int childType;\n    if (currentParent.relatives[TSTNode.LOKID] == currentNode) {\n      childType = TSTNode.LOKID;\n    } else if (currentParent.relatives[TSTNode.EQKID] == currentNode) {\n      childType = TSTNode.EQKID;\n    } else if (currentParent.relatives[TSTNode.HIKID] == currentNode) {\n      childType = TSTNode.HIKID;\n    } else {\n      rootNode = null;\n      return null;\n    }\n    if (lokidNull && hikidNull) {\n      currentParent.relatives[childType] = null;\n      return currentParent;\n    }\n    if (lokidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.HIKID];\n      currentNode.relatives[TSTNode.HIKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    if (hikidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.LOKID];\n      currentNode.relatives[TSTNode.LOKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    int deltaHi = currentNode.relatives[TSTNode.HIKID].splitchar\n            - currentNode.splitchar;\n    int deltaLo = currentNode.splitchar\n            - currentNode.relatives[TSTNode.LOKID].splitchar;\n    int movingKid;\n    TSTNode targetNode;\n    if (deltaHi == deltaLo) {\n      if (Math.random() < 0.5) {\n        deltaHi++;\n      } else {\n        deltaLo++;\n      }\n    }\n    if (deltaHi > deltaLo) {\n      movingKid = TSTNode.HIKID;\n      targetNode = currentNode.relatives[TSTNode.LOKID];\n    } else {\n      movingKid = TSTNode.LOKID;\n      targetNode = currentNode.relatives[TSTNode.HIKID];\n    }\n    while (targetNode.relatives[movingKid] != null) {\n      targetNode = targetNode.relatives[movingKid];\n    }\n    targetNode.relatives[movingKid] = currentNode.relatives[movingKid];\n    currentParent.relatives[childType] = targetNode;\n    targetNode.relatives[TSTNode.PARENT] = currentParent;\n    if (!lokidNull) {\n      currentNode.relatives[TSTNode.LOKID] = null;\n    }\n    if (!hikidNull) {\n      currentNode.relatives[TSTNode.HIKID] = null;\n    }\n    return currentParent;\n  }\n\n","sourceOld":"  /**\n   * Recursively visits each node to be deleted.\n   * \n   * To delete a node, first set its data to null, then pass it into this\n   * method, then pass the node returned by this method into this method (make\n   * sure you don't delete the data of any of the nodes returned from this\n   * method!) and continue in this fashion until the node returned by this\n   * method is <code>null</code>.\n   * \n   * The TSTNode instance returned by this method will be next node to be\n   * operated on by <code>deleteNodeRecursion</code> (This emulates recursive\n   * method call while avoiding the JVM overhead normally associated with a\n   * recursive method.)\n   * \n   *@param currentNode\n   *          The node to delete.\n   *@return The next node to be called in deleteNodeRecursion.\n   */\n  private TSTNode deleteNodeRecursion(TSTNode currentNode) {\n    if (currentNode == null) {\n      return null;\n    }\n    if (currentNode.relatives[TSTNode.EQKID] != null\n            || currentNode.data != null) {\n      return null;\n    }\n    // can't delete this node if it has a non-null eq kid or data\n    TSTNode currentParent = currentNode.relatives[TSTNode.PARENT];\n    boolean lokidNull = currentNode.relatives[TSTNode.LOKID] == null;\n    boolean hikidNull = currentNode.relatives[TSTNode.HIKID] == null;\n    int childType;\n    if (currentParent.relatives[TSTNode.LOKID] == currentNode) {\n      childType = TSTNode.LOKID;\n    } else if (currentParent.relatives[TSTNode.EQKID] == currentNode) {\n      childType = TSTNode.EQKID;\n    } else if (currentParent.relatives[TSTNode.HIKID] == currentNode) {\n      childType = TSTNode.HIKID;\n    } else {\n      rootNode = null;\n      return null;\n    }\n    if (lokidNull && hikidNull) {\n      currentParent.relatives[childType] = null;\n      return currentParent;\n    }\n    if (lokidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.HIKID];\n      currentNode.relatives[TSTNode.HIKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    if (hikidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.LOKID];\n      currentNode.relatives[TSTNode.LOKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    int deltaHi = currentNode.relatives[TSTNode.HIKID].splitchar\n            - currentNode.splitchar;\n    int deltaLo = currentNode.splitchar\n            - currentNode.relatives[TSTNode.LOKID].splitchar;\n    int movingKid;\n    TSTNode targetNode;\n    if (deltaHi == deltaLo) {\n      if (Math.random() < 0.5) {\n        deltaHi++;\n      } else {\n        deltaLo++;\n      }\n    }\n    if (deltaHi > deltaLo) {\n      movingKid = TSTNode.HIKID;\n      targetNode = currentNode.relatives[TSTNode.LOKID];\n    } else {\n      movingKid = TSTNode.LOKID;\n      targetNode = currentNode.relatives[TSTNode.HIKID];\n    }\n    while (targetNode.relatives[movingKid] != null) {\n      targetNode = targetNode.relatives[movingKid];\n    }\n    targetNode.relatives[movingKid] = currentNode.relatives[movingKid];\n    currentParent.relatives[childType] = targetNode;\n    targetNode.relatives[TSTNode.PARENT] = currentParent;\n    if (!lokidNull) {\n      currentNode.relatives[TSTNode.LOKID] = null;\n    }\n    if (!hikidNull) {\n      currentNode.relatives[TSTNode.HIKID] = null;\n    }\n    return currentParent;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#deleteNodeRecursion(TSTNode).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#deleteNodeRecursion(TSTNode).mjava","sourceNew":"  /**\n   * Recursively visits each node to be deleted.\n   * \n   * To delete a node, first set its data to null, then pass it into this\n   * method, then pass the node returned by this method into this method (make\n   * sure you don't delete the data of any of the nodes returned from this\n   * method!) and continue in this fashion until the node returned by this\n   * method is <code>null</code>.\n   * \n   * The TSTNode instance returned by this method will be next node to be\n   * operated on by <code>deleteNodeRecursion</code> (This emulates recursive\n   * method call while avoiding the JVM overhead normally associated with a\n   * recursive method.)\n   * \n   *@param currentNode\n   *          The node to delete.\n   *@return The next node to be called in deleteNodeRecursion.\n   */\n  private TSTNode deleteNodeRecursion(TSTNode currentNode) {\n    if (currentNode == null) {\n      return null;\n    }\n    if (currentNode.relatives[TSTNode.EQKID] != null\n            || currentNode.data != null) {\n      return null;\n    }\n    // can't delete this node if it has a non-null eq kid or data\n    TSTNode currentParent = currentNode.relatives[TSTNode.PARENT];\n    boolean lokidNull = currentNode.relatives[TSTNode.LOKID] == null;\n    boolean hikidNull = currentNode.relatives[TSTNode.HIKID] == null;\n    int childType;\n    if (currentParent.relatives[TSTNode.LOKID] == currentNode) {\n      childType = TSTNode.LOKID;\n    } else if (currentParent.relatives[TSTNode.EQKID] == currentNode) {\n      childType = TSTNode.EQKID;\n    } else if (currentParent.relatives[TSTNode.HIKID] == currentNode) {\n      childType = TSTNode.HIKID;\n    } else {\n      rootNode = null;\n      return null;\n    }\n    if (lokidNull && hikidNull) {\n      currentParent.relatives[childType] = null;\n      return currentParent;\n    }\n    if (lokidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.HIKID];\n      currentNode.relatives[TSTNode.HIKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    if (hikidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.LOKID];\n      currentNode.relatives[TSTNode.LOKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    int deltaHi = currentNode.relatives[TSTNode.HIKID].splitchar\n            - currentNode.splitchar;\n    int deltaLo = currentNode.splitchar\n            - currentNode.relatives[TSTNode.LOKID].splitchar;\n    int movingKid;\n    TSTNode targetNode;\n    if (deltaHi == deltaLo) {\n      if (Math.random() < 0.5) {\n        deltaHi++;\n      } else {\n        deltaLo++;\n      }\n    }\n    if (deltaHi > deltaLo) {\n      movingKid = TSTNode.HIKID;\n      targetNode = currentNode.relatives[TSTNode.LOKID];\n    } else {\n      movingKid = TSTNode.LOKID;\n      targetNode = currentNode.relatives[TSTNode.HIKID];\n    }\n    while (targetNode.relatives[movingKid] != null) {\n      targetNode = targetNode.relatives[movingKid];\n    }\n    targetNode.relatives[movingKid] = currentNode.relatives[movingKid];\n    currentParent.relatives[childType] = targetNode;\n    targetNode.relatives[TSTNode.PARENT] = currentParent;\n    if (!lokidNull) {\n      currentNode.relatives[TSTNode.LOKID] = null;\n    }\n    if (!hikidNull) {\n      currentNode.relatives[TSTNode.HIKID] = null;\n    }\n    return currentParent;\n  }\n\n","sourceOld":"  /**\n   * Recursively visits each node to be deleted.\n   * \n   * To delete a node, first set its data to null, then pass it into this\n   * method, then pass the node returned by this method into this method (make\n   * sure you don't delete the data of any of the nodes returned from this\n   * method!) and continue in this fashion until the node returned by this\n   * method is <code>null</code>.\n   * \n   * The TSTNode instance returned by this method will be next node to be\n   * operated on by <code>deleteNodeRecursion</code> (This emulates recursive\n   * method call while avoiding the JVM overhead normally associated with a\n   * recursive method.)\n   * \n   *@param currentNode\n   *          The node to delete.\n   *@return The next node to be called in deleteNodeRecursion.\n   */\n  private TSTNode deleteNodeRecursion(TSTNode currentNode) {\n    if (currentNode == null) {\n      return null;\n    }\n    if (currentNode.relatives[TSTNode.EQKID] != null\n            || currentNode.data != null) {\n      return null;\n    }\n    // can't delete this node if it has a non-null eq kid or data\n    TSTNode currentParent = currentNode.relatives[TSTNode.PARENT];\n    boolean lokidNull = currentNode.relatives[TSTNode.LOKID] == null;\n    boolean hikidNull = currentNode.relatives[TSTNode.HIKID] == null;\n    int childType;\n    if (currentParent.relatives[TSTNode.LOKID] == currentNode) {\n      childType = TSTNode.LOKID;\n    } else if (currentParent.relatives[TSTNode.EQKID] == currentNode) {\n      childType = TSTNode.EQKID;\n    } else if (currentParent.relatives[TSTNode.HIKID] == currentNode) {\n      childType = TSTNode.HIKID;\n    } else {\n      rootNode = null;\n      return null;\n    }\n    if (lokidNull && hikidNull) {\n      currentParent.relatives[childType] = null;\n      return currentParent;\n    }\n    if (lokidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.HIKID];\n      currentNode.relatives[TSTNode.HIKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    if (hikidNull) {\n      currentParent.relatives[childType] = currentNode.relatives[TSTNode.LOKID];\n      currentNode.relatives[TSTNode.LOKID].relatives[TSTNode.PARENT] = currentParent;\n      return currentParent;\n    }\n    int deltaHi = currentNode.relatives[TSTNode.HIKID].splitchar\n            - currentNode.splitchar;\n    int deltaLo = currentNode.splitchar\n            - currentNode.relatives[TSTNode.LOKID].splitchar;\n    int movingKid;\n    TSTNode targetNode;\n    if (deltaHi == deltaLo) {\n      if (Math.random() < 0.5) {\n        deltaHi++;\n      } else {\n        deltaLo++;\n      }\n    }\n    if (deltaHi > deltaLo) {\n      movingKid = TSTNode.HIKID;\n      targetNode = currentNode.relatives[TSTNode.LOKID];\n    } else {\n      movingKid = TSTNode.LOKID;\n      targetNode = currentNode.relatives[TSTNode.HIKID];\n    }\n    while (targetNode.relatives[movingKid] != null) {\n      targetNode = targetNode.relatives[movingKid];\n    }\n    targetNode.relatives[movingKid] = currentNode.relatives[movingKid];\n    currentParent.relatives[childType] = targetNode;\n    targetNode.relatives[TSTNode.PARENT] = currentParent;\n    if (!lokidNull) {\n      currentNode.relatives[TSTNode.LOKID] = null;\n    }\n    if (!hikidNull) {\n      currentNode.relatives[TSTNode.HIKID] = null;\n    }\n    return currentParent;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e230a61047bc041516c811baa08a7174d6f8322a":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e230a61047bc041516c811baa08a7174d6f8322a"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}