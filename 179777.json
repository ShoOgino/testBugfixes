{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits deletedDocs = MultiFields.getDeletedDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, deletedDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter, prefixLen)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter, prefixLen)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits deletedDocs = MultiFields.getDeletedDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, deletedDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter, prefixLen)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter, prefixLen)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter, prefixLen)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter, prefixLen)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter, prefixLen)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"]},"commit2Childs":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}