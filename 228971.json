{"path":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int,int).mjava","commits":[{"id":"6a2b7a4c3442f9d6e937213f4661f316485108c8","date":1304351258,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void quickSort(int lo, int hi, int maxDepth) {\n    final int diff = hi - lo;\n    if (diff <= QUICKSORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    if (compare(lo, mid) > 0) {\n      swap(lo, mid);\n    }\n\n    if (compare(mid, hi) > 0) {\n      swap(mid, hi);\n      if (compare(lo, mid) > 0) {\n        swap(lo, mid);\n      }\n    }\n    \n    int left = lo + 1;\n    int right = hi - 1;\n\n    setPivot(mid);\n    for (;;) {\n      while (comparePivot(right) < 0)\n        --right;\n\n      while (left < right && comparePivot(left) >= 0)\n        ++left;\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    // fall back to merge sort when recursion depth gets too big\n    if (maxDepth == 0) {\n      // for testing: new Exception(\"Hit recursion depth limit\").printStackTrace();\n      mergeSort(lo, left);\n      mergeSort(left + 1, hi);\n    } else {\n      --maxDepth;\n      quickSort(lo, left, maxDepth);\n      quickSort(left + 1, hi, maxDepth);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0d986f42c7320fce5b6ba6a767c160289c738a","date":1304428044,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int,int).mjava","sourceNew":"  private void quickSort(int lo, int hi, int maxDepth) {\n    // fall back to insertion when array has short length\n    final int diff = hi - lo;\n    if (diff <= QUICKSORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    // fall back to merge sort when recursion depth gets too big\n    if (--maxDepth == 0) {\n      mergeSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    if (compare(lo, mid) > 0) {\n      swap(lo, mid);\n    }\n\n    if (compare(mid, hi) > 0) {\n      swap(mid, hi);\n      if (compare(lo, mid) > 0) {\n        swap(lo, mid);\n      }\n    }\n    \n    int left = lo + 1;\n    int right = hi - 1;\n\n    setPivot(mid);\n    for (;;) {\n      while (comparePivot(right) < 0)\n        --right;\n\n      while (left < right && comparePivot(left) >= 0)\n        ++left;\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(lo, left, maxDepth);\n    quickSort(left + 1, hi, maxDepth);\n  }\n\n","sourceOld":"  private void quickSort(int lo, int hi, int maxDepth) {\n    final int diff = hi - lo;\n    if (diff <= QUICKSORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    if (compare(lo, mid) > 0) {\n      swap(lo, mid);\n    }\n\n    if (compare(mid, hi) > 0) {\n      swap(mid, hi);\n      if (compare(lo, mid) > 0) {\n        swap(lo, mid);\n      }\n    }\n    \n    int left = lo + 1;\n    int right = hi - 1;\n\n    setPivot(mid);\n    for (;;) {\n      while (comparePivot(right) < 0)\n        --right;\n\n      while (left < right && comparePivot(left) >= 0)\n        ++left;\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    // fall back to merge sort when recursion depth gets too big\n    if (maxDepth == 0) {\n      // for testing: new Exception(\"Hit recursion depth limit\").printStackTrace();\n      mergeSort(lo, left);\n      mergeSort(left + 1, hi);\n    } else {\n      --maxDepth;\n      quickSort(lo, left, maxDepth);\n      quickSort(left + 1, hi, maxDepth);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void quickSort(int lo, int hi, int maxDepth) {\n    // fall back to insertion when array has short length\n    final int diff = hi - lo;\n    if (diff <= QUICKSORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    // fall back to merge sort when recursion depth gets too big\n    if (--maxDepth == 0) {\n      mergeSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    if (compare(lo, mid) > 0) {\n      swap(lo, mid);\n    }\n\n    if (compare(mid, hi) > 0) {\n      swap(mid, hi);\n      if (compare(lo, mid) > 0) {\n        swap(lo, mid);\n      }\n    }\n    \n    int left = lo + 1;\n    int right = hi - 1;\n\n    setPivot(mid);\n    for (;;) {\n      while (comparePivot(right) < 0)\n        --right;\n\n      while (left < right && comparePivot(left) >= 0)\n        ++left;\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(lo, left, maxDepth);\n    quickSort(left + 1, hi, maxDepth);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void quickSort(int lo, int hi, int maxDepth) {\n    // fall back to insertion when array has short length\n    final int diff = hi - lo;\n    if (diff <= QUICKSORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    // fall back to merge sort when recursion depth gets too big\n    if (--maxDepth == 0) {\n      mergeSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    if (compare(lo, mid) > 0) {\n      swap(lo, mid);\n    }\n\n    if (compare(mid, hi) > 0) {\n      swap(mid, hi);\n      if (compare(lo, mid) > 0) {\n        swap(lo, mid);\n      }\n    }\n    \n    int left = lo + 1;\n    int right = hi - 1;\n\n    setPivot(mid);\n    for (;;) {\n      while (comparePivot(right) < 0)\n        --right;\n\n      while (left < right && comparePivot(left) >= 0)\n        ++left;\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(lo, left, maxDepth);\n    quickSort(left + 1, hi, maxDepth);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int,int).mjava","sourceNew":"  private void quickSort(int lo, int hi, int maxDepth) {\n    // fall back to insertion when array has short length\n    final int diff = hi - lo;\n    if (diff <= QUICKSORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    // fall back to merge sort when recursion depth gets too big\n    if (--maxDepth == 0) {\n      mergeSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    if (compare(lo, mid) > 0) {\n      swap(lo, mid);\n    }\n\n    if (compare(mid, hi) > 0) {\n      swap(mid, hi);\n      if (compare(lo, mid) > 0) {\n        swap(lo, mid);\n      }\n    }\n    \n    int left = lo + 1;\n    int right = hi - 1;\n\n    setPivot(mid);\n    for (;;) {\n      while (comparePivot(right) < 0)\n        --right;\n\n      while (left < right && comparePivot(left) >= 0)\n        ++left;\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(lo, left, maxDepth);\n    quickSort(left + 1, hi, maxDepth);\n  }\n\n","sourceOld":"  private void quickSort(int lo, int hi, int maxDepth) {\n    // fall back to insertion when array has short length\n    final int diff = hi - lo;\n    if (diff <= QUICKSORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    // fall back to merge sort when recursion depth gets too big\n    if (--maxDepth == 0) {\n      mergeSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    if (compare(lo, mid) > 0) {\n      swap(lo, mid);\n    }\n\n    if (compare(mid, hi) > 0) {\n      swap(mid, hi);\n      if (compare(lo, mid) > 0) {\n        swap(lo, mid);\n      }\n    }\n    \n    int left = lo + 1;\n    int right = hi - 1;\n\n    setPivot(mid);\n    for (;;) {\n      while (comparePivot(right) < 0)\n        --right;\n\n      while (left < right && comparePivot(left) >= 0)\n        ++left;\n\n      if (left < right) {\n        swap(left, right);\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(lo, left, maxDepth);\n    quickSort(left + 1, hi, maxDepth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2a0d986f42c7320fce5b6ba6a767c160289c738a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a0d986f42c7320fce5b6ba6a767c160289c738a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a0d986f42c7320fce5b6ba6a767c160289c738a"],"6a2b7a4c3442f9d6e937213f4661f316485108c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a0d986f42c7320fce5b6ba6a767c160289c738a":["6a2b7a4c3442f9d6e937213f4661f316485108c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","6a2b7a4c3442f9d6e937213f4661f316485108c8"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"6a2b7a4c3442f9d6e937213f4661f316485108c8":["2a0d986f42c7320fce5b6ba6a767c160289c738a"],"2a0d986f42c7320fce5b6ba6a767c160289c738a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}