{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","commits":[{"id":"b47e1512544568a22b82c96169d466fae8a4b79e","date":1354519309,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cefe924a3b76c22b7df9a075329750871699af6b","date":1409757963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":["47d5b6b2c183bf4deaffb52b7cb8dec16c8dcf0f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"949847c0040cd70a68222d526cb0da7bf6cbb3c2","date":1410997182,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":["c48871ed951104729f5e17a8ee1091b43fa18980"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","date":1414017220,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e855844395f99e31c78ed1fee322358e1c3be043","date":1417893966,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fba839b7548159227edcb740033d0f814b323d8d","date":1424455904,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b869e42fbd9c52c4728652ba51faf7266b239a6f","date":1428140988,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e453ee95e5ed4cd001de2d5d3269e25f977980f1","date":1432836708,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c48871ed951104729f5e17a8ee1091b43fa18980","date":1446564542,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      tragicEvent(oom, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":["01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63","949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"845b760a99e5f369fcd0a5d723a87b8def6a3f56","date":1521117993,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy.get() != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy.get());\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"startCommit\");\n      throw tragedy;\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy);\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"startCommit\");\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb04d6a79e860154f2a1c519790fc42f5a792915","date":1521621668,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy.get() != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy.get());\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized (this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n      } catch (Throwable t) {\n        synchronized(this) {\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n            try {\n              // Hit exception\n              deleter.decRef(filesToCommit);\n            } catch (Throwable t1) {\n              t.addSuppressed(t1);\n            } finally {\n              filesToCommit = null;\n            }\n          }\n        }\n        throw t;\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n        }\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"startCommit\");\n      throw tragedy;\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy.get() != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy.get());\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"startCommit\");\n      throw tragedy;\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy.get() != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy.get());\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized (this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n      } catch (Throwable t) {\n        synchronized(this) {\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n            try {\n              // Hit exception\n              deleter.decRef(filesToCommit);\n            } catch (Throwable t1) {\n              t.addSuppressed(t1);\n            } finally {\n              filesToCommit = null;\n            }\n          }\n        }\n        throw t;\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n        }\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"startCommit\");\n      throw tragedy;\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (tragedy.get() != null) {\n      throw new IllegalStateException(\"this writer hit an unrecoverable error; cannot commit\", tragedy.get());\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        if (lastCommitChangeCount > changeCount.get()) {\n          throw new IllegalStateException(\"lastCommitChangeCount=\" + lastCommitChangeCount + \",changeCount=\" + changeCount);\n        }\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          try {\n            deleter.decRef(filesToCommit);\n          } finally {\n            filesToCommit = null;\n          }\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"startCommit: wrote pending segments file \\\"\" + IndexFileNames.fileNameFromGeneration(IndexFileNames.PENDING_SEGMENTS, \"\", toSync.getGeneration()) + \"\\\"\");\n          }\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRefWhileHandlingException(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"startCommit\");\n      throw tragedy;\n    }\n    testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b869e42fbd9c52c4728652ba51faf7266b239a6f":["fba839b7548159227edcb740033d0f814b323d8d"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["845b760a99e5f369fcd0a5d723a87b8def6a3f56","bb04d6a79e860154f2a1c519790fc42f5a792915"],"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["28288370235ed02234a64753cdbf0c6ec096304a"],"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"cefe924a3b76c22b7df9a075329750871699af6b":["b47e1512544568a22b82c96169d466fae8a4b79e"],"fba839b7548159227edcb740033d0f814b323d8d":["e855844395f99e31c78ed1fee322358e1c3be043"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["c48871ed951104729f5e17a8ee1091b43fa18980"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b47e1512544568a22b82c96169d466fae8a4b79e"],"e453ee95e5ed4cd001de2d5d3269e25f977980f1":["b869e42fbd9c52c4728652ba51faf7266b239a6f"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["c48871ed951104729f5e17a8ee1091b43fa18980","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["c48871ed951104729f5e17a8ee1091b43fa18980","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"c48871ed951104729f5e17a8ee1091b43fa18980":["e453ee95e5ed4cd001de2d5d3269e25f977980f1"],"e855844395f99e31c78ed1fee322358e1c3be043":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb04d6a79e860154f2a1c519790fc42f5a792915":["845b760a99e5f369fcd0a5d723a87b8def6a3f56"],"b47e1512544568a22b82c96169d466fae8a4b79e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["cefe924a3b76c22b7df9a075329750871699af6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"]},"commit2Childs":{"b869e42fbd9c52c4728652ba51faf7266b239a6f":["e453ee95e5ed4cd001de2d5d3269e25f977980f1"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","bb04d6a79e860154f2a1c519790fc42f5a792915"],"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["e855844395f99e31c78ed1fee322358e1c3be043"],"cefe924a3b76c22b7df9a075329750871699af6b":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"fba839b7548159227edcb740033d0f814b323d8d":["b869e42fbd9c52c4728652ba51faf7266b239a6f"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"e453ee95e5ed4cd001de2d5d3269e25f977980f1":["c48871ed951104729f5e17a8ee1091b43fa18980"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["845b760a99e5f369fcd0a5d723a87b8def6a3f56"],"c48871ed951104729f5e17a8ee1091b43fa18980":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"e855844395f99e31c78ed1fee322358e1c3be043":["fba839b7548159227edcb740033d0f814b323d8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","b47e1512544568a22b82c96169d466fae8a4b79e"],"bb04d6a79e860154f2a1c519790fc42f5a792915":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"b47e1512544568a22b82c96169d466fae8a4b79e":["cefe924a3b76c22b7df9a075329750871699af6b","407687e67faf6e1f02a211ca078d8e3eed631027"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}