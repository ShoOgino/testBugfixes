{"path":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String encodedStream = params.get(\"stream\");\n    encodedStream = URLDecoder.decode(encodedStream, \"UTF-8\");\n    byte[] bytes = Base64.base64ToByteArray(encodedStream);\n    ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);\n    ObjectInputStream objectInputStream = new ObjectInputStream(byteStream);\n    TupleStream tupleStream = (TupleStream)objectInputStream.readObject();\n\n    int worker = params.getInt(\"workerID\");\n    int numWorkers = params.getInt(\"numWorkers\");\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.clientCache = clientCache;\n    tupleStream.setStreamContext(context);\n    rsp.add(\"tuples\", tupleStream);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String encodedStream = params.get(\"stream\");\n    encodedStream = URLDecoder.decode(encodedStream, \"UTF-8\");\n    byte[] bytes = Base64.base64ToByteArray(encodedStream);\n    ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);\n    ObjectInputStream objectInputStream = new ObjectInputStream(byteStream);\n    TupleStream tupleStream = (TupleStream)objectInputStream.readObject();\n\n    int worker = params.getInt(\"workerID\");\n    int numWorkers = params.getInt(\"numWorkers\");\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"tuples\", tupleStream);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String encodedStream = params.get(\"stream\");\n    encodedStream = URLDecoder.decode(encodedStream, \"UTF-8\");\n    byte[] bytes = Base64.base64ToByteArray(encodedStream);\n    ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);\n    ObjectInputStream objectInputStream = new ObjectInputStream(byteStream);\n    TupleStream tupleStream = (TupleStream)objectInputStream.readObject();\n\n    int worker = params.getInt(\"workerID\");\n    int numWorkers = params.getInt(\"numWorkers\");\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.clientCache = clientCache;\n    tupleStream.setStreamContext(context);\n    rsp.add(\"tuples\", tupleStream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String encodedStream = params.get(\"stream\");\n    encodedStream = URLDecoder.decode(encodedStream, \"UTF-8\");\n    byte[] bytes = Base64.base64ToByteArray(encodedStream);\n    ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);\n    ObjectInputStream objectInputStream = new ObjectInputStream(byteStream);\n    TupleStream tupleStream = (TupleStream)objectInputStream.readObject();\n\n    int worker = params.getInt(\"workerID\");\n    int numWorkers = params.getInt(\"numWorkers\");\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"tuples\", tupleStream);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n\n    boolean objectSerialize = params.getBool(\"objectSerialize\", false);\n    TupleStream tupleStream = null;\n\n    if(objectSerialize) {\n      String encodedStream = params.get(\"stream\");\n      encodedStream = URLDecoder.decode(encodedStream, \"UTF-8\");\n      byte[] bytes = Base64.base64ToByteArray(encodedStream);\n      ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);\n      ObjectInputStream objectInputStream = new ObjectInputStream(byteStream);\n      tupleStream = (TupleStream)objectInputStream.readObject();\n    } else {\n      tupleStream = this.streamFactory.constructStream(params.get(\"stream\"));\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"tuples\", tupleStream);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String encodedStream = params.get(\"stream\");\n    encodedStream = URLDecoder.decode(encodedStream, \"UTF-8\");\n    byte[] bytes = Base64.base64ToByteArray(encodedStream);\n    ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);\n    ObjectInputStream objectInputStream = new ObjectInputStream(byteStream);\n    TupleStream tupleStream = (TupleStream)objectInputStream.readObject();\n\n    int worker = params.getInt(\"workerID\");\n    int numWorkers = params.getInt(\"numWorkers\");\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"tuples\", tupleStream);\n  }\n\n","bugFix":null,"bugIntro":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a55bf71f91aeded06b44ad1abea6666ea168b697","date":1435941127,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n\n    boolean objectSerialize = params.getBool(\"objectSerialize\", false);\n    TupleStream tupleStream = null;\n\n    try {\n      if (objectSerialize) {\n        String encodedStream = params.get(\"stream\");\n        encodedStream = URLDecoder.decode(encodedStream, \"UTF-8\");\n        byte[] bytes = Base64.base64ToByteArray(encodedStream);\n        ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);\n        ObjectInputStream objectInputStream = new ObjectInputStream(byteStream);\n        tupleStream = (TupleStream) objectInputStream.readObject();\n      } else {\n        tupleStream = this.streamFactory.constructStream(params.get(\"stream\"));\n      }\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      logger.error(\"Exception creating TupleStream\", e);\n      rsp.add(\"tuples\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"tuples\", new ExceptionStream(tupleStream));\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n\n    boolean objectSerialize = params.getBool(\"objectSerialize\", false);\n    TupleStream tupleStream = null;\n\n    if(objectSerialize) {\n      String encodedStream = params.get(\"stream\");\n      encodedStream = URLDecoder.decode(encodedStream, \"UTF-8\");\n      byte[] bytes = Base64.base64ToByteArray(encodedStream);\n      ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);\n      ObjectInputStream objectInputStream = new ObjectInputStream(byteStream);\n      tupleStream = (TupleStream)objectInputStream.readObject();\n    } else {\n      tupleStream = this.streamFactory.constructStream(params.get(\"stream\"));\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"tuples\", tupleStream);\n  }\n\n","bugFix":["f00f1c5fad501b66705121feb623f8cfbb6712f9","91814ce09be68efd0626969632e79ae47d8876d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    boolean objectSerialize = params.getBool(\"objectSerialize\", false);\n    TupleStream tupleStream = null;\n\n    try {\n      if (objectSerialize) {\n        String encodedStream = params.get(\"stream\");\n        encodedStream = URLDecoder.decode(encodedStream, \"UTF-8\");\n        byte[] bytes = Base64.base64ToByteArray(encodedStream);\n        ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);\n        ObjectInputStream objectInputStream = new ObjectInputStream(byteStream);\n        tupleStream = (TupleStream) objectInputStream.readObject();\n      } else {\n        tupleStream = this.streamFactory.constructStream(params.get(\"stream\"));\n      }\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n\n    boolean objectSerialize = params.getBool(\"objectSerialize\", false);\n    TupleStream tupleStream = null;\n\n    try {\n      if (objectSerialize) {\n        String encodedStream = params.get(\"stream\");\n        encodedStream = URLDecoder.decode(encodedStream, \"UTF-8\");\n        byte[] bytes = Base64.base64ToByteArray(encodedStream);\n        ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);\n        ObjectInputStream objectInputStream = new ObjectInputStream(byteStream);\n        tupleStream = (TupleStream) objectInputStream.readObject();\n      } else {\n        tupleStream = this.streamFactory.constructStream(params.get(\"stream\"));\n      }\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      logger.error(\"Exception creating TupleStream\", e);\n      rsp.add(\"tuples\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"tuples\", new ExceptionStream(tupleStream));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43","date":1449690748,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"stream\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    boolean objectSerialize = params.getBool(\"objectSerialize\", false);\n    TupleStream tupleStream = null;\n\n    try {\n      if (objectSerialize) {\n        String encodedStream = params.get(\"stream\");\n        encodedStream = URLDecoder.decode(encodedStream, \"UTF-8\");\n        byte[] bytes = Base64.base64ToByteArray(encodedStream);\n        ByteArrayInputStream byteStream = new ByteArrayInputStream(bytes);\n        ObjectInputStream objectInputStream = new ObjectInputStream(byteStream);\n        tupleStream = (TupleStream) objectInputStream.readObject();\n      } else {\n        tupleStream = this.streamFactory.constructStream(params.get(\"stream\"));\n      }\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n  }\n\n","bugFix":null,"bugIntro":["58b0ac98a4f0daf02f6400e863ed311c169630c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58b0ac98a4f0daf02f6400e863ed311c169630c6","date":1450474697,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"stream\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n  }\n\n","bugFix":["c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a027750b86452a8dcd054ac993d54b203dae9102","date":1451953949,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.put(\"core\", this.coreName);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e81698e1493f01874d99b769bc4d9fc9f07555d6","date":1453489635,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.put(\"core\", this.coreName);\n    tupleStream.setStreamContext(context);\n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.put(\"core\", this.coreName);\n    tupleStream.setStreamContext(context);\n    rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.put(\"core\", this.coreName);\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.put(\"core\", this.coreName);\n    tupleStream.setStreamContext(context);\n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.put(\"core\", this.coreName);\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.put(\"core\", this.coreName);\n    tupleStream.setStreamContext(context);\n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5fa1c8367f821057f943ece929329485ec708ba","date":1475186606,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.put(\"core\", this.coreName);\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.put(\"core\", this.coreName);\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5","date":1475846642,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ac1075ab5d486199f24ec3a7c07dc9b74606161","date":1476897426,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2305f39a86a068f1cee6fc5fbdfb760b153ac138","date":1476906991,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.put(\"core\", this.coreName);\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e5922fb6b9f0e49b31ce0436420a7f4392031c4","date":1489025486,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d70be9540b0b7e5e5e0ede741c22b01c63ff05a","date":1495734762,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if(this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"out\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b753f9a41b1ca838718cebdefd3aeff42547fb4","date":1495736570,"type":3,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if(this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"out\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36c7d00cc0e2c0e9b580ab62ebeb773659bfd739","date":1495812111,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if(this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if(this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"out\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if(this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if(this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2ca4206e5497c29b07a997ea7fc47d3bac0a352","date":1497801058,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if(this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if(this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if(this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    // if asking for explanation then go get it\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  //This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c80f6f4fe2e841ba56e6ce200951063ab91196d3","date":1533052731,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5cb8a7015ea492deb84f661910c6c5eb6908624","date":1535327336,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d9c44f68e848648da304352cf7c045c33148f4","date":1557331987,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839","date":1575929518,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"993b0c7dda6341b437fe5685d35c6cc35eaac420","date":1575985950,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d46fa75cfc7cd540107667512c745b836d3f4c9f","date":1585841895,"type":3,"author":"Eric Pugh","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the daemonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the deamonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa","date":1589312640,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(solrClientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the daemonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the daemonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    @SuppressWarnings(\"resource\")\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(solrClientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the daemonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(solrClientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the daemonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(StreamParams.EXPR));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(StreamParams.TUPLE);\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(StreamParams.RETURN_VALUE, streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(StreamParams.RESULT_SET, new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    @SuppressWarnings(\"resource\")\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(solrClientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the daemonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(StreamParams.RESULT_SET, new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(StreamParams.RESULT_SET, new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      // Catch exceptions that occur while the stream is being created. This will include streaming expression parse\n      // rules.\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); // explicit check for null core (temporary?, for tests)\n    @SuppressWarnings(\"resource\")\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(solrClientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    // if asking for explanation then go get it\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); // This will start the daemonStream\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["e81698e1493f01874d99b769bc4d9fc9f07555d6","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"993b0c7dda6341b437fe5685d35c6cc35eaac420":["70d9c44f68e848648da304352cf7c045c33148f4","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"3e5922fb6b9f0e49b31ce0436420a7f4392031c4":["2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"e81698e1493f01874d99b769bc4d9fc9f07555d6":["a027750b86452a8dcd054ac993d54b203dae9102"],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["e81698e1493f01874d99b769bc4d9fc9f07555d6"],"3ac1075ab5d486199f24ec3a7c07dc9b74606161":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5"],"c80f6f4fe2e841ba56e6ce200951063ab91196d3":["28288370235ed02234a64753cdbf0c6ec096304a"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["36c7d00cc0e2c0e9b580ab62ebeb773659bfd739"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4","36c7d00cc0e2c0e9b580ab62ebeb773659bfd739"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"ba055e19afc289adcb5bedaf68513793a7254012":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","b5fa1c8367f821057f943ece929329485ec708ba"],"804a8d5358fe7b7563b85ee7838714d720b89272":["ba055e19afc289adcb5bedaf68513793a7254012"],"a027750b86452a8dcd054ac993d54b203dae9102":["58b0ac98a4f0daf02f6400e863ed311c169630c6"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["70d9c44f68e848648da304352cf7c045c33148f4"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4","36c7d00cc0e2c0e9b580ab62ebeb773659bfd739"],"70d9c44f68e848648da304352cf7c045c33148f4":["a5cb8a7015ea492deb84f661910c6c5eb6908624"],"58b0ac98a4f0daf02f6400e863ed311c169630c6":["c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43"],"f00f1c5fad501b66705121feb623f8cfbb6712f9":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["d46fa75cfc7cd540107667512c745b836d3f4c9f"],"b5fa1c8367f821057f943ece929329485ec708ba":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"36c7d00cc0e2c0e9b580ab62ebeb773659bfd739":["6b753f9a41b1ca838718cebdefd3aeff42547fb4"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"2305f39a86a068f1cee6fc5fbdfb760b153ac138":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5","3ac1075ab5d486199f24ec3a7c07dc9b74606161"],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["91814ce09be68efd0626969632e79ae47d8876d4"],"d46fa75cfc7cd540107667512c745b836d3f4c9f":["ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"6b753f9a41b1ca838718cebdefd3aeff42547fb4":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4","8d70be9540b0b7e5e5e0ede741c22b01c63ff05a"],"a5cb8a7015ea492deb84f661910c6c5eb6908624":["c80f6f4fe2e841ba56e6ce200951063ab91196d3"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"8d70be9540b0b7e5e5e0ede741c22b01c63ff05a":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5":["3ac1075ab5d486199f24ec3a7c07dc9b74606161","2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b5fa1c8367f821057f943ece929329485ec708ba","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"993b0c7dda6341b437fe5685d35c6cc35eaac420":[],"3e5922fb6b9f0e49b31ce0436420a7f4392031c4":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","6b753f9a41b1ca838718cebdefd3aeff42547fb4","8d70be9540b0b7e5e5e0ede741c22b01c63ff05a"],"e81698e1493f01874d99b769bc4d9fc9f07555d6":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"91814ce09be68efd0626969632e79ae47d8876d4":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"3ac1075ab5d486199f24ec3a7c07dc9b74606161":["2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"c80f6f4fe2e841ba56e6ce200951063ab91196d3":["a5cb8a7015ea492deb84f661910c6c5eb6908624"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a55bf71f91aeded06b44ad1abea6666ea168b697":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"ba055e19afc289adcb5bedaf68513793a7254012":["804a8d5358fe7b7563b85ee7838714d720b89272"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91814ce09be68efd0626969632e79ae47d8876d4","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a027750b86452a8dcd054ac993d54b203dae9102":["e81698e1493f01874d99b769bc4d9fc9f07555d6"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["993b0c7dda6341b437fe5685d35c6cc35eaac420","d46fa75cfc7cd540107667512c745b836d3f4c9f"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"70d9c44f68e848648da304352cf7c045c33148f4":["993b0c7dda6341b437fe5685d35c6cc35eaac420","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"58b0ac98a4f0daf02f6400e863ed311c169630c6":["a027750b86452a8dcd054ac993d54b203dae9102"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["ba055e19afc289adcb5bedaf68513793a7254012"],"b5fa1c8367f821057f943ece929329485ec708ba":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43":["58b0ac98a4f0daf02f6400e863ed311c169630c6"],"36c7d00cc0e2c0e9b580ab62ebeb773659bfd739":["e2ca4206e5497c29b07a997ea7fc47d3bac0a352","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"28288370235ed02234a64753cdbf0c6ec096304a":["c80f6f4fe2e841ba56e6ce200951063ab91196d3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2305f39a86a068f1cee6fc5fbdfb760b153ac138":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f00f1c5fad501b66705121feb623f8cfbb6712f9"],"d46fa75cfc7cd540107667512c745b836d3f4c9f":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"6b753f9a41b1ca838718cebdefd3aeff42547fb4":["36c7d00cc0e2c0e9b580ab62ebeb773659bfd739"],"a5cb8a7015ea492deb84f661910c6c5eb6908624":["70d9c44f68e848648da304352cf7c045c33148f4"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43"],"8d70be9540b0b7e5e5e0ede741c22b01c63ff05a":["6b753f9a41b1ca838718cebdefd3aeff42547fb4"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["993b0c7dda6341b437fe5685d35c6cc35eaac420","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}