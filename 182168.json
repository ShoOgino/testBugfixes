{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aee7536c0dab5f97165523b2077d324095f5518","date":1544481552,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudUtil.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudUtil.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":null,"sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudUtil.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudUtil.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1aee7536c0dab5f97165523b2077d324095f5518":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["89948af0461fead48f44ba8fb7866f107ce83f22"],"89948af0461fead48f44ba8fb7866f107ce83f22":["1aee7536c0dab5f97165523b2077d324095f5518"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["1aee7536c0dab5f97165523b2077d324095f5518"],"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"1aee7536c0dab5f97165523b2077d324095f5518":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"89948af0461fead48f44ba8fb7866f107ce83f22":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}