{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","commits":[{"id":"0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5","date":1477788234,"type":1,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleFilters().mjava","sourceNew":"  private void evalFilters() throws IOException {\n    if (freq.filters == null || freq.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.filters) {\n      Query symbolicFilter;\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          symbolicFilter = parser.getQuery();\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n      qlist.add(symbolicFilter);\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","sourceOld":"  private void handleFilters() throws IOException {\n    if (freq.filters == null || freq.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.filters) {\n      Query symbolicFilter;\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          symbolicFilter = parser.getQuery();\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n      qlist.add(symbolicFilter);\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","pathOld":"/dev/null","sourceNew":"  private void evalFilters() throws IOException {\n    if (freq.filters == null || freq.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.filters) {\n      Query symbolicFilter;\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          symbolicFilter = parser.getQuery();\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n      qlist.add(symbolicFilter);\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12e7f5233d4a77959b66fda90df286dace8a9a0","date":1478016064,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","sourceNew":"  private void evalFilters() throws IOException {\n    if (freq.domain.filters == null || freq.domain.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.domain.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.domain.filters) {\n      Query symbolicFilter;\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          symbolicFilter = parser.getQuery();\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n      qlist.add(symbolicFilter);\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","sourceOld":"  private void evalFilters() throws IOException {\n    if (freq.filters == null || freq.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.filters) {\n      Query symbolicFilter;\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          symbolicFilter = parser.getQuery();\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n      qlist.add(symbolicFilter);\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","sourceNew":"  private void evalFilters() throws IOException {\n    if (freq.domain.filters == null || freq.domain.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.domain.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.domain.filters) {\n      Query symbolicFilter;\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          symbolicFilter = parser.getQuery();\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n      qlist.add(symbolicFilter);\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","sourceOld":"  private void evalFilters() throws IOException {\n    if (freq.filters == null || freq.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.filters) {\n      Query symbolicFilter;\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          symbolicFilter = parser.getQuery();\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n      qlist.add(symbolicFilter);\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca2ebd0ea0315b440af8ae976b9c4334f14ccdbc","date":1478373897,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","sourceNew":"  private void evalFilters() throws IOException {\n    if (freq.domain.filters == null || freq.domain.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.domain.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.domain.filters) {\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          Query symbolicFilter = parser.getQuery();\n          qlist.add(symbolicFilter);\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else if (rawFilter instanceof Map) {\n\n        Map<String,Object> m = (Map<String, Object>) rawFilter;\n        String type;\n        Object args;\n\n        if (m.size() == 1) {\n          Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n          type = entry.getKey();\n          args = entry.getValue();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't convert map to query:\" + rawFilter);\n        }\n\n        if (!\"param\".equals(type)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown type. Can't convert map to query:\" + rawFilter);\n        }\n\n        String tag;\n        if (!(args instanceof String)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't retrieve non-string param:\" + args);\n        }\n        tag = (String)args;\n\n        String[] qstrings = fcontext.req.getParams().getParams(tag);\n\n        if (qstrings != null) {\n          for (String qstring : qstrings) {\n            QParser parser = null;\n            try {\n              parser = QParser.getParser((String) qstring, fcontext.req);\n              Query symbolicFilter = parser.getQuery();\n              qlist.add(symbolicFilter);\n            } catch (SyntaxError syntaxError) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n            }\n          }\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","sourceOld":"  private void evalFilters() throws IOException {\n    if (freq.domain.filters == null || freq.domain.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.domain.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.domain.filters) {\n      Query symbolicFilter;\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          symbolicFilter = parser.getQuery();\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n      qlist.add(symbolicFilter);\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","sourceNew":"  private void evalFilters() throws IOException {\n    if (freq.domain.filters == null || freq.domain.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.domain.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.domain.filters) {\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          Query symbolicFilter = parser.getQuery();\n          qlist.add(symbolicFilter);\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else if (rawFilter instanceof Map) {\n\n        Map<String,Object> m = (Map<String, Object>) rawFilter;\n        String type;\n        Object args;\n\n        if (m.size() == 1) {\n          Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n          type = entry.getKey();\n          args = entry.getValue();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't convert map to query:\" + rawFilter);\n        }\n\n        if (!\"param\".equals(type)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown type. Can't convert map to query:\" + rawFilter);\n        }\n\n        String tag;\n        if (!(args instanceof String)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't retrieve non-string param:\" + args);\n        }\n        tag = (String)args;\n\n        String[] qstrings = fcontext.req.getParams().getParams(tag);\n\n        if (qstrings != null) {\n          for (String qstring : qstrings) {\n            QParser parser = null;\n            try {\n              parser = QParser.getParser((String) qstring, fcontext.req);\n              Query symbolicFilter = parser.getQuery();\n              qlist.add(symbolicFilter);\n            } catch (SyntaxError syntaxError) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n            }\n          }\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","sourceOld":"  private void evalFilters() throws IOException {\n    if (freq.domain.filters == null || freq.domain.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.domain.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.domain.filters) {\n      Query symbolicFilter;\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          symbolicFilter = parser.getQuery();\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n      qlist.add(symbolicFilter);\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b22e5a20e6ecc2a2a411a4344a34d99a51f0362","date":1479850208,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","sourceNew":"  private void evalFilters() throws IOException {\n    if (freq.domain.filters == null || freq.domain.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.domain.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.domain.filters) {\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          parser.setIsFilter(true);\n          Query symbolicFilter = parser.getQuery();\n          qlist.add(symbolicFilter);\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else if (rawFilter instanceof Map) {\n\n        Map<String,Object> m = (Map<String, Object>) rawFilter;\n        String type;\n        Object args;\n\n        if (m.size() == 1) {\n          Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n          type = entry.getKey();\n          args = entry.getValue();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't convert map to query:\" + rawFilter);\n        }\n\n        if (!\"param\".equals(type)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown type. Can't convert map to query:\" + rawFilter);\n        }\n\n        String tag;\n        if (!(args instanceof String)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't retrieve non-string param:\" + args);\n        }\n        tag = (String)args;\n\n        String[] qstrings = fcontext.req.getParams().getParams(tag);\n\n        if (qstrings != null) {\n          for (String qstring : qstrings) {\n            QParser parser = null;\n            try {\n              parser = QParser.getParser((String) qstring, fcontext.req);\n              parser.setIsFilter(true);\n              Query symbolicFilter = parser.getQuery();\n              qlist.add(symbolicFilter);\n            } catch (SyntaxError syntaxError) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n            }\n          }\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","sourceOld":"  private void evalFilters() throws IOException {\n    if (freq.domain.filters == null || freq.domain.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.domain.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.domain.filters) {\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          Query symbolicFilter = parser.getQuery();\n          qlist.add(symbolicFilter);\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else if (rawFilter instanceof Map) {\n\n        Map<String,Object> m = (Map<String, Object>) rawFilter;\n        String type;\n        Object args;\n\n        if (m.size() == 1) {\n          Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n          type = entry.getKey();\n          args = entry.getValue();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't convert map to query:\" + rawFilter);\n        }\n\n        if (!\"param\".equals(type)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown type. Can't convert map to query:\" + rawFilter);\n        }\n\n        String tag;\n        if (!(args instanceof String)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't retrieve non-string param:\" + args);\n        }\n        tag = (String)args;\n\n        String[] qstrings = fcontext.req.getParams().getParams(tag);\n\n        if (qstrings != null) {\n          for (String qstring : qstrings) {\n            QParser parser = null;\n            try {\n              parser = QParser.getParser((String) qstring, fcontext.req);\n              Query symbolicFilter = parser.getQuery();\n              qlist.add(symbolicFilter);\n            } catch (SyntaxError syntaxError) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n            }\n          }\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","sourceNew":"  private void evalFilters() throws IOException {\n    if (freq.domain.filters == null || freq.domain.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.domain.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.domain.filters) {\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          parser.setIsFilter(true);\n          Query symbolicFilter = parser.getQuery();\n          qlist.add(symbolicFilter);\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else if (rawFilter instanceof Map) {\n\n        Map<String,Object> m = (Map<String, Object>) rawFilter;\n        String type;\n        Object args;\n\n        if (m.size() == 1) {\n          Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n          type = entry.getKey();\n          args = entry.getValue();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't convert map to query:\" + rawFilter);\n        }\n\n        if (!\"param\".equals(type)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown type. Can't convert map to query:\" + rawFilter);\n        }\n\n        String tag;\n        if (!(args instanceof String)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't retrieve non-string param:\" + args);\n        }\n        tag = (String)args;\n\n        String[] qstrings = fcontext.req.getParams().getParams(tag);\n\n        if (qstrings != null) {\n          for (String qstring : qstrings) {\n            QParser parser = null;\n            try {\n              parser = QParser.getParser((String) qstring, fcontext.req);\n              parser.setIsFilter(true);\n              Query symbolicFilter = parser.getQuery();\n              qlist.add(symbolicFilter);\n            } catch (SyntaxError syntaxError) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n            }\n          }\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","sourceOld":"  private void evalFilters() throws IOException {\n    if (freq.domain.filters == null || freq.domain.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.domain.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.domain.filters) {\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          Query symbolicFilter = parser.getQuery();\n          qlist.add(symbolicFilter);\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else if (rawFilter instanceof Map) {\n\n        Map<String,Object> m = (Map<String, Object>) rawFilter;\n        String type;\n        Object args;\n\n        if (m.size() == 1) {\n          Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n          type = entry.getKey();\n          args = entry.getValue();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't convert map to query:\" + rawFilter);\n        }\n\n        if (!\"param\".equals(type)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown type. Can't convert map to query:\" + rawFilter);\n        }\n\n        String tag;\n        if (!(args instanceof String)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't retrieve non-string param:\" + args);\n        }\n        tag = (String)args;\n\n        String[] qstrings = fcontext.req.getParams().getParams(tag);\n\n        if (qstrings != null) {\n          for (String qstring : qstrings) {\n            QParser parser = null;\n            try {\n              parser = QParser.getParser((String) qstring, fcontext.req);\n              Query symbolicFilter = parser.getQuery();\n              qlist.add(symbolicFilter);\n            } catch (SyntaxError syntaxError) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n            }\n          }\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalFilters().mjava","sourceNew":"  private void evalFilters() throws IOException {\n    if (freq.domain.filters == null || freq.domain.filters.isEmpty()) return;\n    this.filter = fcontext.searcher.getDocSet(evalJSONFilterQueryStruct(fcontext, freq.domain.filters));\n  }\n\n","sourceOld":"  private void evalFilters() throws IOException {\n    if (freq.domain.filters == null || freq.domain.filters.isEmpty()) return;\n\n    List<Query> qlist = new ArrayList<>(freq.domain.filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : freq.domain.filters) {\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          parser.setIsFilter(true);\n          Query symbolicFilter = parser.getQuery();\n          qlist.add(symbolicFilter);\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else if (rawFilter instanceof Map) {\n\n        Map<String,Object> m = (Map<String, Object>) rawFilter;\n        String type;\n        Object args;\n\n        if (m.size() == 1) {\n          Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n          type = entry.getKey();\n          args = entry.getValue();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't convert map to query:\" + rawFilter);\n        }\n\n        if (!\"param\".equals(type)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown type. Can't convert map to query:\" + rawFilter);\n        }\n\n        String tag;\n        if (!(args instanceof String)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't retrieve non-string param:\" + args);\n        }\n        tag = (String)args;\n\n        String[] qstrings = fcontext.req.getParams().getParams(tag);\n\n        if (qstrings != null) {\n          for (String qstring : qstrings) {\n            QParser parser = null;\n            try {\n              parser = QParser.getParser((String) qstring, fcontext.req);\n              parser.setIsFilter(true);\n              Query symbolicFilter = parser.getQuery();\n              qlist.add(symbolicFilter);\n            } catch (SyntaxError syntaxError) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n            }\n          }\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n    }\n\n    this.filter = fcontext.searcher.getDocSet(qlist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["6b22e5a20e6ecc2a2a411a4344a34d99a51f0362"],"ca2ebd0ea0315b440af8ae976b9c4334f14ccdbc":["d12e7f5233d4a77959b66fda90df286dace8a9a0"],"727bb765ff2542275f6d31f67be18d7104bae148":["199dfa410f1fdbfd3294106b04096cce5ed34b21","6b22e5a20e6ecc2a2a411a4344a34d99a51f0362"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["320888923ec13b91f53082558f01f4c9960dd226","d12e7f5233d4a77959b66fda90df286dace8a9a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["9720b151fde2073f4e401450f4574e5f31c2d0ff","ca2ebd0ea0315b440af8ae976b9c4334f14ccdbc"],"0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d12e7f5233d4a77959b66fda90df286dace8a9a0":["0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5"],"320888923ec13b91f53082558f01f4c9960dd226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5"],"6b22e5a20e6ecc2a2a411a4344a34d99a51f0362":["ca2ebd0ea0315b440af8ae976b9c4334f14ccdbc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c705a0d590cf911e7c942df49563ca2ea176e22"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca2ebd0ea0315b440af8ae976b9c4334f14ccdbc":["199dfa410f1fdbfd3294106b04096cce5ed34b21","6b22e5a20e6ecc2a2a411a4344a34d99a51f0362"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5","320888923ec13b91f53082558f01f4c9960dd226"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["727bb765ff2542275f6d31f67be18d7104bae148"],"0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5":["d12e7f5233d4a77959b66fda90df286dace8a9a0","320888923ec13b91f53082558f01f4c9960dd226"],"d12e7f5233d4a77959b66fda90df286dace8a9a0":["ca2ebd0ea0315b440af8ae976b9c4334f14ccdbc","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"320888923ec13b91f53082558f01f4c9960dd226":["9720b151fde2073f4e401450f4574e5f31c2d0ff"],"6b22e5a20e6ecc2a2a411a4344a34d99a51f0362":["2c705a0d590cf911e7c942df49563ca2ea176e22","727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}