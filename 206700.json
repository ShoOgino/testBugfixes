{"path":"solr/core/src/test/org/apache/solr/search/join/BlockJoinFacetRandomTest#createIndex().mjava","commits":[{"id":"dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d","date":1450976696,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BlockJoinFacetRandomTest#createIndex().mjava","pathOld":"/dev/null","sourceNew":"  public static void createIndex() throws Exception {\n    int i = 0;\n    List<List<List<String>>> blocks = createBlocks();\n    for (List<List<String>> block : blocks) {\n      List<XmlDoc> updBlock = new ArrayList<>();\n      for (List<String> blockFields : block) {\n        blockFields.add(\"id\");\n        blockFields.add(Integer.toString(i));\n        updBlock.add(doc(blockFields.toArray(new String[blockFields.size()])));\n        i++;\n      }\n      //got xmls for every doc. now nest all into the last one\n      XmlDoc parentDoc = updBlock.get(updBlock.size() - 1);\n      parentDoc.xml = parentDoc.xml.replace(\"</doc>\",\n          updBlock.subList(0, updBlock.size() - 1).toString().replaceAll(\"[\\\\[\\\\]]\", \"\") + \"</doc>\");\n      assertU(add(parentDoc));\n\n      if (random().nextBoolean()) {\n        assertU(commit());\n        // force empty segment (actually, this will no longer create an empty segment, only a new segments_n)\n        if (random().nextBoolean()) {\n          assertU(commit());\n        }\n      }\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='\" + i + \"']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00a778ad8ad6c2c04607538d2f36fee001239eef","date":1576657013,"type":4,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/join/BlockJoinFacetRandomTest#createIndex().mjava","sourceNew":null,"sourceOld":"  public static void createIndex() throws Exception {\n    int i = 0;\n    List<List<List<String>>> blocks = createBlocks();\n    for (List<List<String>> block : blocks) {\n      List<XmlDoc> updBlock = new ArrayList<>();\n      for (List<String> blockFields : block) {\n        blockFields.add(\"id\");\n        blockFields.add(Integer.toString(i));\n        updBlock.add(doc(blockFields.toArray(new String[blockFields.size()])));\n        i++;\n      }\n      //got xmls for every doc. now nest all into the last one\n      XmlDoc parentDoc = updBlock.get(updBlock.size() - 1);\n      parentDoc.xml = parentDoc.xml.replace(\"</doc>\",\n          updBlock.subList(0, updBlock.size() - 1).toString().replaceAll(\"[\\\\[\\\\]]\", \"\") + \"</doc>\");\n      assertU(add(parentDoc));\n\n      if (random().nextBoolean()) {\n        assertU(commit());\n        // force empty segment (actually, this will no longer create an empty segment, only a new segments_n)\n        if (random().nextBoolean()) {\n          assertU(commit());\n        }\n      }\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='\" + i + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/join/BlockJoinFacetRandomTest#createIndex().mjava","sourceNew":null,"sourceOld":"  public static void createIndex() throws Exception {\n    int i = 0;\n    List<List<List<String>>> blocks = createBlocks();\n    for (List<List<String>> block : blocks) {\n      List<XmlDoc> updBlock = new ArrayList<>();\n      for (List<String> blockFields : block) {\n        blockFields.add(\"id\");\n        blockFields.add(Integer.toString(i));\n        updBlock.add(doc(blockFields.toArray(new String[blockFields.size()])));\n        i++;\n      }\n      //got xmls for every doc. now nest all into the last one\n      XmlDoc parentDoc = updBlock.get(updBlock.size() - 1);\n      parentDoc.xml = parentDoc.xml.replace(\"</doc>\",\n          updBlock.subList(0, updBlock.size() - 1).toString().replaceAll(\"[\\\\[\\\\]]\", \"\") + \"</doc>\");\n      assertU(add(parentDoc));\n\n      if (random().nextBoolean()) {\n        assertU(commit());\n        // force empty segment (actually, this will no longer create an empty segment, only a new segments_n)\n        if (random().nextBoolean()) {\n          assertU(commit());\n        }\n      }\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='\" + i + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d","00a778ad8ad6c2c04607538d2f36fee001239eef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"00a778ad8ad6c2c04607538d2f36fee001239eef":["dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00a778ad8ad6c2c04607538d2f36fee001239eef"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d"],"dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d":["246314af59d76a47fccc31e9494eefee01ec9c00","00a778ad8ad6c2c04607538d2f36fee001239eef"],"00a778ad8ad6c2c04607538d2f36fee001239eef":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}