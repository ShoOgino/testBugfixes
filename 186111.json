{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testIntersectionWithRandomApproximation().mjava","commits":[{"id":"1406cbbd53036d2d3c80ccaef932a04212ab9ecd","date":1434741435,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testIntersectionWithRandomApproximation().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntersectionWithRandomApproximation() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final int numBlocks = atLeast(100);\n    for (int i = 0; i < numBlocks; ++i) {\n      List<Document> docs = new ArrayList<>();\n      final int numChildren = random().nextInt(3);\n      for (int j = 0; j < numChildren; ++j) {\n        Document child = new Document();\n        child.add(new StringField(\"foo_child\", random().nextBoolean() ? \"bar\" : \"baz\", Store.NO));\n        docs.add(child);\n      }\n      Document parent = new Document();\n      parent.add(new StringField(\"parent\", \"true\", Store.NO));\n      parent.add(new StringField(\"foo_parent\", random().nextBoolean() ? \"bar\" : \"baz\", Store.NO));\n      docs.add(parent);\n      w.addDocuments(docs);\n    }\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null); // to have real advance() calls\n\n    final BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"parent\", \"true\"))));\n    final Query toChild = new ToChildBlockJoinQuery(new TermQuery(new Term(\"foo_parent\", \"bar\")), parentsFilter);\n    final Query childQuery = new TermQuery(new Term(\"foo_child\", \"baz\"));\n\n    BooleanQuery bq1 = new BooleanQuery.Builder()\n        .add(toChild, Occur.MUST)\n        .add(childQuery, Occur.MUST)\n        .build();\n    BooleanQuery bq2 = new BooleanQuery.Builder()\n        .add(toChild, Occur.MUST)\n        .add(new RandomApproximationQuery(childQuery, random()), Occur.MUST)\n        .build();\n\n    assertEquals(searcher.count(bq1), searcher.count(bq2));\n\n    searcher.getIndexReader().close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testIntersectionWithRandomApproximation().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testIntersectionWithRandomApproximation().mjava","sourceNew":"  public void testIntersectionWithRandomApproximation() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final int numBlocks = atLeast(100);\n    for (int i = 0; i < numBlocks; ++i) {\n      List<Document> docs = new ArrayList<>();\n      final int numChildren = random().nextInt(3);\n      for (int j = 0; j < numChildren; ++j) {\n        Document child = new Document();\n        child.add(new StringField(\"foo_child\", random().nextBoolean() ? \"bar\" : \"baz\", Store.NO));\n        docs.add(child);\n      }\n      Document parent = new Document();\n      parent.add(new StringField(\"parent\", \"true\", Store.NO));\n      parent.add(new StringField(\"foo_parent\", random().nextBoolean() ? \"bar\" : \"baz\", Store.NO));\n      docs.add(parent);\n      w.addDocuments(docs);\n    }\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null); // to have real advance() calls\n\n    final BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"parent\", \"true\")));\n    final Query toChild = new ToChildBlockJoinQuery(new TermQuery(new Term(\"foo_parent\", \"bar\")), parentsFilter);\n    final Query childQuery = new TermQuery(new Term(\"foo_child\", \"baz\"));\n\n    BooleanQuery bq1 = new BooleanQuery.Builder()\n        .add(toChild, Occur.MUST)\n        .add(childQuery, Occur.MUST)\n        .build();\n    BooleanQuery bq2 = new BooleanQuery.Builder()\n        .add(toChild, Occur.MUST)\n        .add(new RandomApproximationQuery(childQuery, random()), Occur.MUST)\n        .build();\n\n    assertEquals(searcher.count(bq1), searcher.count(bq2));\n\n    searcher.getIndexReader().close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIntersectionWithRandomApproximation() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final int numBlocks = atLeast(100);\n    for (int i = 0; i < numBlocks; ++i) {\n      List<Document> docs = new ArrayList<>();\n      final int numChildren = random().nextInt(3);\n      for (int j = 0; j < numChildren; ++j) {\n        Document child = new Document();\n        child.add(new StringField(\"foo_child\", random().nextBoolean() ? \"bar\" : \"baz\", Store.NO));\n        docs.add(child);\n      }\n      Document parent = new Document();\n      parent.add(new StringField(\"parent\", \"true\", Store.NO));\n      parent.add(new StringField(\"foo_parent\", random().nextBoolean() ? \"bar\" : \"baz\", Store.NO));\n      docs.add(parent);\n      w.addDocuments(docs);\n    }\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null); // to have real advance() calls\n\n    final BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"parent\", \"true\"))));\n    final Query toChild = new ToChildBlockJoinQuery(new TermQuery(new Term(\"foo_parent\", \"bar\")), parentsFilter);\n    final Query childQuery = new TermQuery(new Term(\"foo_child\", \"baz\"));\n\n    BooleanQuery bq1 = new BooleanQuery.Builder()\n        .add(toChild, Occur.MUST)\n        .add(childQuery, Occur.MUST)\n        .build();\n    BooleanQuery bq2 = new BooleanQuery.Builder()\n        .add(toChild, Occur.MUST)\n        .add(new RandomApproximationQuery(childQuery, random()), Occur.MUST)\n        .build();\n\n    assertEquals(searcher.count(bq1), searcher.count(bq2));\n\n    searcher.getIndexReader().close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1406cbbd53036d2d3c80ccaef932a04212ab9ecd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b3915945926c0bf7def01b0c504977709d3aed3":["1406cbbd53036d2d3c80ccaef932a04212ab9ecd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b3915945926c0bf7def01b0c504977709d3aed3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1406cbbd53036d2d3c80ccaef932a04212ab9ecd"],"1406cbbd53036d2d3c80ccaef932a04212ab9ecd":["4b3915945926c0bf7def01b0c504977709d3aed3"],"4b3915945926c0bf7def01b0c504977709d3aed3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}