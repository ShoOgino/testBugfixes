{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataService#updateEntry(GDataRequest,GDataResponse).mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataService#updateEntry(GDataRequest,GDataResponse).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * @see org.apache.lucene.gdata.server.Service#updateEntry(org.apache.lucene.gdata.server.GDataRequest, \n     *      org.apache.lucene.gdata.server.GDataResponse) \n     */ \n    @Override \n    public BaseEntry updateEntry(GDataRequest request, GDataResponse response) \n            throws ServiceException { \n        checkFeedIsRegisterd(request); \n \n        BaseEntry entry = buildEntry(request); \n        String feedid = request.getFeedId(); \n        if (LOGGER.isInfoEnabled()) \n            LOGGER.info(\"update Entry\" + entry.getId() + \" for feedId: \" \n                    + feedid); \n        setUpdateTime(entry); \n        try { \n            this.storage.updateEntry(entry, feedid); \n        } catch (StorageException e) { \n            ServiceException ex = new ServiceException( \n                    \"Could not update entry\", e); \n            ex.setStackTrace(e.getStackTrace()); \n            throw ex; \n        } \n        return entry; \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataService#updateEntry(GDataRequest,GDataResponse).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataService#updateEntry(GDataRequest,GDataResponse).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.Service#updateEntry(org.apache.lucene.gdata.server.GDataRequest,\n     *      org.apache.lucene.gdata.server.GDataResponse)\n     */\n\n    public BaseEntry updateEntry(GDataRequest request, GDataResponse response)\n            throws ServiceException {\n\n        ServerBaseEntry entry = buildEntry(request, response);\n        entry.setFeedId(request.getFeedId());\n\n        entry.setServiceConfig(request.getConfigurator());\n        if (LOGGER.isInfoEnabled())\n            LOGGER.info(\"update Entry\" + entry.getId() + \" for feedId: \"\n                    + request.getFeedId());\n        if (entry.getId() == null) {\n            response.setError(HttpServletResponse.SC_BAD_REQUEST);\n            throw new ServiceException(\"Entry id is null can not update entry\");\n        }\n        if (!entry.getId().equals(request.getEntryId())) {\n            if (LOGGER.isInfoEnabled())\n                LOGGER\n                        .info(\"Entry id in the entry xml does not match the requested resource -- XML-ID:\"\n                                + entry.getId()\n                                + \"; Requested resource: \"\n                                + request.getEntryId());\n            response.setError(HttpServletResponse.SC_BAD_REQUEST);\n            throw new ServiceException(\n                    \"Entry id in the entry xml does not match the requested resource\");\n        }\n        setTimeStamps(entry.getEntry());\n        BaseEntry retVal = null;\n        try {\n            retVal = this.storage.updateEntry(entry);\n        } catch (ResourceNotFoundException e) {\n            response.setError(HttpServletResponse.SC_BAD_REQUEST);\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        } catch (StorageException e) {\n            response.setError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }\n        return retVal;\n    }\n\n","sourceOld":"    /** \n     * @see org.apache.lucene.gdata.server.Service#updateEntry(org.apache.lucene.gdata.server.GDataRequest, \n     *      org.apache.lucene.gdata.server.GDataResponse) \n     */ \n    @Override \n    public BaseEntry updateEntry(GDataRequest request, GDataResponse response) \n            throws ServiceException { \n        checkFeedIsRegisterd(request); \n \n        BaseEntry entry = buildEntry(request); \n        String feedid = request.getFeedId(); \n        if (LOGGER.isInfoEnabled()) \n            LOGGER.info(\"update Entry\" + entry.getId() + \" for feedId: \" \n                    + feedid); \n        setUpdateTime(entry); \n        try { \n            this.storage.updateEntry(entry, feedid); \n        } catch (StorageException e) { \n            ServiceException ex = new ServiceException( \n                    \"Could not update entry\", e); \n            ex.setStackTrace(e.getStackTrace()); \n            throw ex; \n        } \n        return entry; \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataService#updateEntry(GDataRequest,GDataResponse).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataService#updateEntry(GDataRequest,GDataResponse).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.Service#updateEntry(org.apache.lucene.gdata.server.GDataRequest,\n     *      org.apache.lucene.gdata.server.GDataResponse)\n     */\n\n    public BaseEntry updateEntry(GDataRequest request, GDataResponse response)\n            throws ServiceException {\n\n        ServerBaseEntry entry = buildEntry(request, response);\n        entry.setFeedId(request.getFeedId());\n        setVersionId(entry,request,response);\n        entry.setServiceConfig(request.getConfigurator());\n        if (LOGGER.isInfoEnabled())\n            LOGGER.info(\"update Entry\" + entry.getId() + \" for feedId: \"\n                    + request.getFeedId());\n        if (entry.getId() == null) {\n            response.setError(HttpServletResponse.SC_BAD_REQUEST);\n            throw new ServiceException(\"Entry id is null can not update entry\");\n        }\n        if (!entry.getId().equals(request.getEntryId())) {\n            if (LOGGER.isInfoEnabled())\n                LOGGER\n                        .info(\"Entry id in the entry xml does not match the requested resource -- XML-ID:\"\n                                + entry.getId()\n                                + \"; Requested resource: \"\n                                + request.getEntryId());\n            response.setError(HttpServletResponse.SC_BAD_REQUEST);\n            throw new ServiceException(\n                    \"Entry id in the entry xml does not match the requested resource\");\n        }\n        BaseEntry tempEntry = entry.getEntry();\n        tempEntry.setUpdated(getCurrentDateTime());\n        Link selfLink = entry.getSelfLink();\n        if(selfLink != null)\n            entry.getLinks().remove(selfLink);\n        BaseEntry retVal = null;\n        try {\n            retVal = this.storage.updateEntry(entry);\n        } catch (ResourceNotFoundException e) {\n            response.setError(HttpServletResponse.SC_BAD_REQUEST);\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (ModificationConflictException e) {\n            response.setError(HttpServletResponse.SC_CONFLICT);\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry - version confilict\", e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (StorageException e) {\n            response.setError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }\n        return retVal;\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.server.Service#updateEntry(org.apache.lucene.gdata.server.GDataRequest,\n     *      org.apache.lucene.gdata.server.GDataResponse)\n     */\n\n    public BaseEntry updateEntry(GDataRequest request, GDataResponse response)\n            throws ServiceException {\n\n        ServerBaseEntry entry = buildEntry(request, response);\n        entry.setFeedId(request.getFeedId());\n\n        entry.setServiceConfig(request.getConfigurator());\n        if (LOGGER.isInfoEnabled())\n            LOGGER.info(\"update Entry\" + entry.getId() + \" for feedId: \"\n                    + request.getFeedId());\n        if (entry.getId() == null) {\n            response.setError(HttpServletResponse.SC_BAD_REQUEST);\n            throw new ServiceException(\"Entry id is null can not update entry\");\n        }\n        if (!entry.getId().equals(request.getEntryId())) {\n            if (LOGGER.isInfoEnabled())\n                LOGGER\n                        .info(\"Entry id in the entry xml does not match the requested resource -- XML-ID:\"\n                                + entry.getId()\n                                + \"; Requested resource: \"\n                                + request.getEntryId());\n            response.setError(HttpServletResponse.SC_BAD_REQUEST);\n            throw new ServiceException(\n                    \"Entry id in the entry xml does not match the requested resource\");\n        }\n        setTimeStamps(entry.getEntry());\n        BaseEntry retVal = null;\n        try {\n            retVal = this.storage.updateEntry(entry);\n        } catch (ResourceNotFoundException e) {\n            response.setError(HttpServletResponse.SC_BAD_REQUEST);\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        } catch (StorageException e) {\n            response.setError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }\n        return retVal;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataService#updateEntry(GDataRequest,GDataResponse).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataService#updateEntry(GDataRequest,GDataResponse).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.Service#updateEntry(org.apache.lucene.gdata.server.GDataRequest,\n     *      org.apache.lucene.gdata.server.GDataResponse)\n     */\n\n    public BaseEntry updateEntry(GDataRequest request, GDataResponse response)\n            throws ServiceException {\n\n        ServerBaseEntry entry = buildEntry(request, response);\n        entry.setFeedId(request.getFeedId());\n        setVersionId(entry,request,response);\n        entry.setServiceConfig(request.getConfigurator());\n        if (LOG.isInfoEnabled())\n            LOG.info(\"update Entry\" + entry.getId() + \" for feedId: \"\n                    + request.getFeedId());\n        if (entry.getId() == null) {\n            throw new ServiceException(\"Entry id is null can not update entry\",GDataResponse.BAD_REQUEST);\n        }\n        if (!entry.getId().equals(request.getEntryId())) {\n            if (LOG.isInfoEnabled())\n                LOG\n                        .info(\"Entry id in the entry xml does not match the requested resource -- XML-ID:\"\n                                + entry.getId()\n                                + \"; Requested resource: \"\n                                + request.getEntryId());\n\n            throw new ServiceException(\n                    \"Entry id in the entry xml does not match the requested resource\",GDataResponse.BAD_REQUEST);\n        }\n        BaseEntry tempEntry = entry.getEntry();\n        tempEntry.setUpdated(getCurrentDateTime());\n        removeDynamicElements(entry.getEntry());\n        \n        BaseEntry retVal = null;\n     \n        try {\n            retVal = this.storage.updateEntry(entry);\n        } catch (ResourceNotFoundException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e,GDataResponse.BAD_REQUEST);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (ModificationConflictException e) {\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry - version conflict\", e,GDataResponse.CONFLICT);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (StorageException e) {\n\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e,GDataResponse.SERVER_ERROR);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }\n        this.entryEventMediator.entryUpdated(entry);\n        return retVal;\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.server.Service#updateEntry(org.apache.lucene.gdata.server.GDataRequest,\n     *      org.apache.lucene.gdata.server.GDataResponse)\n     */\n\n    public BaseEntry updateEntry(GDataRequest request, GDataResponse response)\n            throws ServiceException {\n\n        ServerBaseEntry entry = buildEntry(request, response);\n        entry.setFeedId(request.getFeedId());\n        setVersionId(entry,request,response);\n        entry.setServiceConfig(request.getConfigurator());\n        if (LOGGER.isInfoEnabled())\n            LOGGER.info(\"update Entry\" + entry.getId() + \" for feedId: \"\n                    + request.getFeedId());\n        if (entry.getId() == null) {\n            response.setError(HttpServletResponse.SC_BAD_REQUEST);\n            throw new ServiceException(\"Entry id is null can not update entry\");\n        }\n        if (!entry.getId().equals(request.getEntryId())) {\n            if (LOGGER.isInfoEnabled())\n                LOGGER\n                        .info(\"Entry id in the entry xml does not match the requested resource -- XML-ID:\"\n                                + entry.getId()\n                                + \"; Requested resource: \"\n                                + request.getEntryId());\n            response.setError(HttpServletResponse.SC_BAD_REQUEST);\n            throw new ServiceException(\n                    \"Entry id in the entry xml does not match the requested resource\");\n        }\n        BaseEntry tempEntry = entry.getEntry();\n        tempEntry.setUpdated(getCurrentDateTime());\n        Link selfLink = entry.getSelfLink();\n        if(selfLink != null)\n            entry.getLinks().remove(selfLink);\n        BaseEntry retVal = null;\n        try {\n            retVal = this.storage.updateEntry(entry);\n        } catch (ResourceNotFoundException e) {\n            response.setError(HttpServletResponse.SC_BAD_REQUEST);\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (ModificationConflictException e) {\n            response.setError(HttpServletResponse.SC_CONFLICT);\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry - version confilict\", e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (StorageException e) {\n            response.setError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }\n        return retVal;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/GDataService#updateEntry(GDataRequest,GDataResponse).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataService#updateEntry(GDataRequest,GDataResponse).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.Service#updateEntry(org.apache.lucene.gdata.server.GDataRequest,\n     *      org.apache.lucene.gdata.server.GDataResponse)\n     */\n\n    public BaseEntry updateEntry(GDataRequest request, GDataResponse response)\n            throws ServiceException {\n\n        ServerBaseEntry entry = buildEntry(request, response);\n        entry.setFeedId(request.getFeedId());\n        setVersionId(entry,request,response);\n        entry.setServiceConfig(request.getConfigurator());\n        if (LOG.isInfoEnabled())\n            LOG.info(\"update Entry\" + entry.getId() + \" for feedId: \"\n                    + request.getFeedId());\n        if (entry.getId() == null) {\n            throw new ServiceException(\"Entry id is null can not update entry\",GDataResponse.BAD_REQUEST);\n        }\n        if (!entry.getId().equals(request.getEntryId())) {\n            if (LOG.isInfoEnabled())\n                LOG\n                        .info(\"Entry id in the entry xml does not match the requested resource -- XML-ID:\"\n                                + entry.getId()\n                                + \"; Requested resource: \"\n                                + request.getEntryId());\n\n            throw new ServiceException(\n                    \"Entry id in the entry xml does not match the requested resource\",GDataResponse.BAD_REQUEST);\n        }\n        BaseEntry tempEntry = entry.getEntry();\n        tempEntry.setUpdated(getCurrentDateTime());\n        removeDynamicElements(entry.getEntry());\n        \n        BaseEntry retVal = null;\n     \n        try {\n            retVal = this.storage.updateEntry(entry);\n        } catch (ResourceNotFoundException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e,GDataResponse.BAD_REQUEST);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (ModificationConflictException e) {\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry - version conflict\", e,GDataResponse.CONFLICT);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (StorageException e) {\n\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e,GDataResponse.SERVER_ERROR);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }\n        this.entryEventMediator.entryUpdated(entry);\n        return retVal;\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.server.Service#updateEntry(org.apache.lucene.gdata.server.GDataRequest,\n     *      org.apache.lucene.gdata.server.GDataResponse)\n     */\n\n    public BaseEntry updateEntry(GDataRequest request, GDataResponse response)\n            throws ServiceException {\n\n        ServerBaseEntry entry = buildEntry(request, response);\n        entry.setFeedId(request.getFeedId());\n        setVersionId(entry,request,response);\n        entry.setServiceConfig(request.getConfigurator());\n        if (LOG.isInfoEnabled())\n            LOG.info(\"update Entry\" + entry.getId() + \" for feedId: \"\n                    + request.getFeedId());\n        if (entry.getId() == null) {\n            throw new ServiceException(\"Entry id is null can not update entry\",GDataResponse.BAD_REQUEST);\n        }\n        if (!entry.getId().equals(request.getEntryId())) {\n            if (LOG.isInfoEnabled())\n                LOG\n                        .info(\"Entry id in the entry xml does not match the requested resource -- XML-ID:\"\n                                + entry.getId()\n                                + \"; Requested resource: \"\n                                + request.getEntryId());\n\n            throw new ServiceException(\n                    \"Entry id in the entry xml does not match the requested resource\",GDataResponse.BAD_REQUEST);\n        }\n        BaseEntry tempEntry = entry.getEntry();\n        tempEntry.setUpdated(getCurrentDateTime());\n        removeDynamicElements(entry.getEntry());\n        \n        BaseEntry retVal = null;\n     \n        try {\n            retVal = this.storage.updateEntry(entry);\n        } catch (ResourceNotFoundException e) {\n            \n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e,GDataResponse.BAD_REQUEST);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (ModificationConflictException e) {\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry - version conflict\", e,GDataResponse.CONFLICT);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }catch (StorageException e) {\n\n            ServiceException ex = new ServiceException(\n                    \"Could not update entry\", e,GDataResponse.SERVER_ERROR);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n        }\n        this.entryEventMediator.entryUpdated(entry);\n        return retVal;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["52754a40a1550056d5637c8992b4076b5ed77328"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["5d43e216d757e2276d180eba8a192e300c4bfadb"]},"commit2Childs":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["52754a40a1550056d5637c8992b4076b5ed77328"],"52754a40a1550056d5637c8992b4076b5ed77328":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}