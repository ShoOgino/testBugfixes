{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#testMergeWithOverrefine().mjava","commits":[{"id":"84a99d9041ffa5585158e5a283ea1736b6b8b473","date":1532019928,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#testMergeWithOverrefine().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMergeWithOverrefine() throws Exception {\n    // overrefine hueristic should use explicit overrequest as default\n    doTestRefine(\"{x : {type:terms, field:X, limit:1, overrequest:1, sort:'count asc', refine:true} }\",\n                 //\n                 \"{x: {buckets:[{val:x1, count:3}, {val:x2, count:5}, {val:x9, count:42}, {val:x0, count:42}], more:true } }\",\n                 \"{x: {buckets:[{val:x2, count:2}, {val:x3, count:4}, {val:x7, count:66}, {val:x8, count:66}], more:true } }\",\n                 //\n                 \"=={x:{_l:[x3]}}\",\n                 \"=={x:{_l:[x1]}}\");\n    doTestRefine(\"{x : {type:terms, field:X, limit:1, overrequest:0, sort:'count asc', refine:true} }\",\n                 //\n                 \"{x: {buckets:[{val:x1, count:3}, {val:x2, count:5}, {val:x9, count:42}, {val:x0, count:42}], more:true } }\",\n                 \"{x: {buckets:[{val:x2, count:2}, {val:x3, count:4}, {val:x7, count:66}, {val:x8, count:66}], more:true } }\",\n                 //\n                 null,\n                 \"=={x:{_l:[x1]}}\");\n    \n    // completely implicit hueristic when no explicit overrequest\n    // limit=1 + 10% + 4 =~ 5 total, but x2 is fully populated so only the other 4 \"lowest\" should be refined\n    doTestRefine(\"{x : {type:terms, field:X, limit:1, sort:'count asc', refine:true} }\",\n                 //\n                 \"{x: {buckets:[{val:x1, count:3}, {val:x2, count:5}, {val:x9, count:42}, {val:x0, count:42}], more:true } }\",\n                 \"{x: {buckets:[{val:x2, count:2}, {val:x3, count:4}, {val:x7, count:66}, {val:x8, count:66}], more:true } }\",\n                 //\n                 \"=={x:{_l:[x3]}}\",\n                 \"=={x:{_l:[x1,x0,x9]}}\");\n\n    // when using (default) mincount (or mincount=0) sort=\"count desc\" should eliminate need for overrefine\n    // (regardless of whether any explicit overrequest is specified)\n    for (String extra : Arrays.asList(\"\", \", mincount:0\", \", mincount:1\",\n                                      \", overrequest:3\", \", overrequest:3, mincount:0\")) {\n      // w/o any overrefinement, we should only need to backfill x1 & x3 (x2 already fully populated)\n      doTestRefine(\"{x : {type:terms, field:X, limit:3, sort:'count desc', refine:true\"+extra+\" } }\",\n                   //\n                   \"{x: {buckets:[{val:x1, count:29}, {val:x2, count:15}, {val:x9, count:7}, {val:x0, count:7}], more:true } }\",\n                   \"{x: {buckets:[{val:x2, count:20}, {val:x3, count:12}, {val:x7, count:7}, {val:x8, count:7}], more:true } }\",\n                   //\n                   \"=={x:{_l:[x3]}}\",\n                   \"=={x:{_l:[x1]}}\");\n    }\n\n    // with 1<mincount, even sort=\"count desc\" should trigger hueristic overrefinement\n    // limit=1 + 10% + 4 =~ 5 total, but x2 is fully populated so only the other 4 \"highest\" should be refined\n    doTestRefine(\"{x : {type:terms, field:X, limit:1, mincount:5, sort:'count desc', refine:true } }\",\n                 //\n                 \"{x: {buckets:[{val:x1, count:29}, {val:x2, count:15}, {val:x9, count:5}, {val:x0, count:3}], more:true } }\",\n                 \"{x: {buckets:[{val:x2, count:20}, {val:x3, count:12}, {val:x7, count:7}, {val:x8, count:4}], more:true } }\",\n                 //\n                 \"=={x:{_l:[x3,x7]}}\",\n                 \"=={x:{_l:[x1,x9]}}\");\n    \n    // explicit overrefine\n    // limit=1 + overrefine=2 == 3 total, but x2 is fully populated, so only x1 & x3 need refined\n    doTestRefine(\"{x : {type:terms, field:X, limit:1, overrequest:1, overrefine:2, sort:'count asc', refine:true} }\",\n                 //\n                 \"{x: {buckets:[{val:x1, count:3}, {val:x2, count:5}, {val:x9, count:42}, {val:x0, count:42}], more:true } }\",\n                 \"{x: {buckets:[{val:x2, count:2}, {val:x3, count:9}, {val:x7, count:66}, {val:x8, count:66}], more:true } }\",\n                 //\n                 \"=={x:{_l:[x3]}}\",\n                 \"=={x:{_l:[x1]}}\");\n    \n    // explicit overrefine with 0<offset\n    // offset=1 + limit=1 + overrefine=2 == 4 total, but x2 is fully populated, so only x1,x3,x9 need refined\n    doTestRefine(\"{x : {type:terms, field:X, limit:1, offset:1, overrequest:1, overrefine:2, sort:'count asc', refine:true} }\",\n                 //\n                 \"{x: {buckets:[{val:x1, count:3}, {val:x2, count:5}, {val:x9, count:42}, {val:x0, count:43}], more:true } }\",\n                 \"{x: {buckets:[{val:x2, count:2}, {val:x3, count:9}, {val:x7, count:66}, {val:x8, count:67}], more:true } }\",\n                 //\n                 \"=={x:{_l:[x3]}}\",\n                 \"=={x:{_l:[x1,x9]}}\");\n\n    // hueristic refinement of nested facets\n    // limit=1 + 10% + 4 =~ 5 total (at each level)\n    // -> x2 is fully populated and child buckets are consistent - no refinement needed at all\n    // -> x4 has counts from both shards, but child buckets don't align perfectly\n    //\n    // For (test) simplicity, only x3 and x4 have enough (total) y buckets to prove that the sub-facet\n    // overrefine hueristic is finite...\n    // -> x3 has 6 total sub-facet buckets, only \"lowest 5\" should be refined on missing shard\n    // -> x4 also has 6 total sub-facet buckets, but only 3 need refined since 2 already fully populated\n    doTestRefine(\"{x:{type:terms, field:X, limit:1, sort:'count asc', refine:true, \" +\n                 \"    facet:{y : {type:terms, field:X, limit:1, sort:'count asc', refine:true} } } }\",\n                 //\n                 \"{x: {buckets:[\" +\n                 \"       {val:'x1', count:1, y:{buckets:[{val:y11, count:1},{val:y12, count:3}], more:true} }, \"+\n                 \"       {val:'x2', count:2, y:{buckets:[{val:y21, count:1},{val:y22, count:3}], more:true} }, \"+\n                 \"       {val:'x4', count:3, y:{buckets:[{val:y41, count:1},{val:y4a, count:3},     \"+\n                 \"                                       {val:y42, count:4},{val:y4d, count:5}], more:true} }, \"+\n                 \"       {val:'x5', count:4, y:{buckets:[{val:y51, count:1},{val:y52, count:3}], more:true} }, \"+\n                 \"    ], more:true } }\",\n                 \"{x: {buckets:[\" +\n                 \"       {val:'x3', count:1, y:{buckets:[{val:y31, count:1},{val:y32, count:2},     \"+\n                 \"                                       {val:y33, count:3},{val:y34, count:4}, \"+\n                 \"                                       {val:y35, count:5},{val:y36, count:6}], more:true} }, \"+\n                 \"       {val:'x2', count:2, y:{buckets:[{val:y21, count:1},{val:y22, count:3}], more:true} }, \"+\n                 \"       {val:'x4', count:3, y:{buckets:[{val:y41, count:1},{val:y4b, count:3},     \"+\n                 \"                                       {val:y42, count:4},{val:y4c, count:9}], more:true} }, \"+\n                 \"       {val:'x9', count:9, y:{buckets:[{val:y91, count:1},{val:y92, count:3}], more:true} }, \"+\n                 \"    ], more:true } }\",\n                 // \n                 \"=={x: {\" +\n                 \"        _p:[  ['x3' , {y:{_l:[y31,y32,y33,y34,y35]}} ]  ],\" +\n                 \"        _s:[  ['x4' , {y:{_l:[y4b]}} ]  ],\" +\n                 \"    } }\",\n                 \"=={x: {\" +\n                 \"        _p:[  ['x1' , {y:{_l:[y11,y12]}} ],   \" +\n                 \"              ['x5' , {y:{_l:[y51,y52]}} ]  ],\" +\n                 \"        _s:[  ['x4' , {y:{_l:[y4a,y4d]}} ]  ],\" +\n                 \"    } }\");\n                 \n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84a99d9041ffa5585158e5a283ea1736b6b8b473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84a99d9041ffa5585158e5a283ea1736b6b8b473"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84a99d9041ffa5585158e5a283ea1736b6b8b473"],"84a99d9041ffa5585158e5a283ea1736b6b8b473":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}