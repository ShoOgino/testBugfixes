{"path":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#setupCluster().mjava","commits":[{"id":"da83c90417e805f2b355afc2d79f4d2b2ce27469","date":1464346037,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\" );\n    collectionProperties.put(\"schema\", \"schema.xml\"); \n    \n    // create a collection holding data for the \"to\" side of the JOIN\n    \n    int shards = 2;\n    int replicas = 2 ;\n    assertNotNull(cluster.createCollection(toColl, shards, replicas,\n        configName,\n        collectionProperties));\n    \n\n    // get the set of nodes where replicas for the \"to\" collection exist\n    Set<String> nodeSet = new HashSet<>();\n    cloudClient = cluster.getSolrClient();\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    for (Slice slice : cs.getCollection(toColl).getActiveSlices())\n      for (Replica replica : slice.getReplicas())\n        nodeSet.add(replica.getNodeName());\n    assertTrue(nodeSet.size() > 0);\n\n    // deploy the \"from\" collection to all nodes where the \"to\" collection exists\n    \n    assertNotNull(cluster.createCollection(fromColl, 1, 4,\n        configName, StringUtils.join(nodeSet,\",\"), null,\n        collectionProperties));\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(toColl, zkStateReader, false, true, 30);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(fromColl, zkStateReader, false, true, 30);\n   \n    toDocId = indexDoc(toColl, 1001, \"a\", null, \"b\");\n    indexDoc(fromColl, 2001, \"a\", \"c\", null);\n\n    Thread.sleep(1000); // so the commits fire\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a95b7b666da79218aa9365b9d9adcb42351ee3","date":1464382787,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\" );\n    collectionProperties.put(\"schema\", \"schema.xml\"); \n    \n    // create a collection holding data for the \"to\" side of the JOIN\n    \n    int shards = 2;\n    int replicas = 2 ;\n    assertNotNull(cluster.createCollection(toColl, shards, replicas,\n        configName,\n        collectionProperties));\n    \n    // get the set of nodes where replicas for the \"to\" collection exist\n    Set<String> nodeSet = new HashSet<>();\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    for (Slice slice : cs.getCollection(toColl).getActiveSlices())\n      for (Replica replica : slice.getReplicas())\n        nodeSet.add(replica.getNodeName());\n    assertTrue(nodeSet.size() > 0);\n\n    // deploy the \"from\" collection to all nodes where the \"to\" collection exists\n    \n    assertNotNull(cluster.createCollection(fromColl, 1, 4,\n        configName, StringUtils.join(nodeSet,\",\"), null,\n        collectionProperties));\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(toColl, zkStateReader, false, true, 30);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(fromColl, zkStateReader, false, true, 30);\n   \n    toDocId = indexDoc(toColl, 1001, \"a\", null, \"b\");\n    indexDoc(fromColl, 2001, \"a\", \"c\", null);\n\n    Thread.sleep(1000); // so the commits fire\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\" );\n    collectionProperties.put(\"schema\", \"schema.xml\"); \n    \n    // create a collection holding data for the \"to\" side of the JOIN\n    \n    int shards = 2;\n    int replicas = 2 ;\n    assertNotNull(cluster.createCollection(toColl, shards, replicas,\n        configName,\n        collectionProperties));\n    \n\n    // get the set of nodes where replicas for the \"to\" collection exist\n    Set<String> nodeSet = new HashSet<>();\n    cloudClient = cluster.getSolrClient();\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    for (Slice slice : cs.getCollection(toColl).getActiveSlices())\n      for (Replica replica : slice.getReplicas())\n        nodeSet.add(replica.getNodeName());\n    assertTrue(nodeSet.size() > 0);\n\n    // deploy the \"from\" collection to all nodes where the \"to\" collection exists\n    \n    assertNotNull(cluster.createCollection(fromColl, 1, 4,\n        configName, StringUtils.join(nodeSet,\",\"), null,\n        collectionProperties));\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(toColl, zkStateReader, false, true, 30);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(fromColl, zkStateReader, false, true, 30);\n   \n    toDocId = indexDoc(toColl, 1001, \"a\", null, \"b\");\n    indexDoc(fromColl, 2001, \"a\", \"c\", null);\n\n    Thread.sleep(1000); // so the commits fire\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\" );\n    collectionProperties.put(\"schema\", \"schema.xml\"); \n    \n    // create a collection holding data for the \"to\" side of the JOIN\n    \n    int shards = 2;\n    int replicas = 2 ;\n    assertNotNull(cluster.createCollection(toColl, shards, replicas,\n        configName,\n        collectionProperties));\n    \n    // get the set of nodes where replicas for the \"to\" collection exist\n    Set<String> nodeSet = new HashSet<>();\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    for (Slice slice : cs.getCollection(toColl).getActiveSlices())\n      for (Replica replica : slice.getReplicas())\n        nodeSet.add(replica.getNodeName());\n    assertTrue(nodeSet.size() > 0);\n\n    // deploy the \"from\" collection to all nodes where the \"to\" collection exists\n    \n    assertNotNull(cluster.createCollection(fromColl, 1, 4,\n        configName, StringUtils.join(nodeSet,\",\"), null,\n        collectionProperties));\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(toColl, zkStateReader, false, true, 30);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(fromColl, zkStateReader, false, true, 30);\n   \n    toDocId = indexDoc(toColl, 1001, \"a\", null, \"b\");\n    indexDoc(fromColl, 2001, \"a\", \"c\", null);\n\n    Thread.sleep(1000); // so the commits fire\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\" );\n    collectionProperties.put(\"schema\", \"schema.xml\"); \n    \n    // create a collection holding data for the \"to\" side of the JOIN\n    \n    int shards = 2;\n    int replicas = 2 ;\n    assertNotNull(cluster.createCollection(toColl, shards, replicas,\n        configName,\n        collectionProperties));\n    \n    // get the set of nodes where replicas for the \"to\" collection exist\n    Set<String> nodeSet = new HashSet<>();\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    for (Slice slice : cs.getCollection(toColl).getActiveSlices())\n      for (Replica replica : slice.getReplicas())\n        nodeSet.add(replica.getNodeName());\n    assertTrue(nodeSet.size() > 0);\n\n    // deploy the \"from\" collection to all nodes where the \"to\" collection exists\n    \n    assertNotNull(cluster.createCollection(fromColl, 1, 4,\n        configName, StringUtils.join(nodeSet,\",\"), null,\n        collectionProperties));\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(toColl, zkStateReader, false, true, 30);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(fromColl, zkStateReader, false, true, 30);\n   \n    toDocId = indexDoc(toColl, 1001, \"a\", null, \"b\");\n    indexDoc(fromColl, 2001, \"a\", \"c\", null);\n\n    Thread.sleep(1000); // so the commits fire\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\" );\n    collectionProperties.put(\"schema\", \"schema.xml\"); \n    \n    // create a collection holding data for the \"to\" side of the JOIN\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(toColl, configName, shards, replicas)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    // get the set of nodes where replicas for the \"to\" collection exist\n    Set<String> nodeSet = new HashSet<>();\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    for (Slice slice : cs.getCollection(toColl).getActiveSlices())\n      for (Replica replica : slice.getReplicas())\n        nodeSet.add(replica.getNodeName());\n    assertTrue(nodeSet.size() > 0);\n\n    // deploy the \"from\" collection to all nodes where the \"to\" collection exists\n    CollectionAdminRequest.createCollection(fromColl, configName, 1, 4)\n        .setCreateNodeSet(StringUtils.join(nodeSet, \",\"))\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    toDocId = indexDoc(toColl, 1001, \"a\", null, \"b\");\n    indexDoc(fromColl, 2001, \"a\", \"c\", null);\n\n    Thread.sleep(1000); // so the commits fire\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\" );\n    collectionProperties.put(\"schema\", \"schema.xml\"); \n    \n    // create a collection holding data for the \"to\" side of the JOIN\n    \n    int shards = 2;\n    int replicas = 2 ;\n    assertNotNull(cluster.createCollection(toColl, shards, replicas,\n        configName,\n        collectionProperties));\n    \n    // get the set of nodes where replicas for the \"to\" collection exist\n    Set<String> nodeSet = new HashSet<>();\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    for (Slice slice : cs.getCollection(toColl).getActiveSlices())\n      for (Replica replica : slice.getReplicas())\n        nodeSet.add(replica.getNodeName());\n    assertTrue(nodeSet.size() > 0);\n\n    // deploy the \"from\" collection to all nodes where the \"to\" collection exists\n    \n    assertNotNull(cluster.createCollection(fromColl, 1, 4,\n        configName, StringUtils.join(nodeSet,\",\"), null,\n        collectionProperties));\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(toColl, zkStateReader, false, true, 30);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(fromColl, zkStateReader, false, true, 30);\n   \n    toDocId = indexDoc(toColl, 1001, \"a\", null, \"b\");\n    indexDoc(fromColl, 2001, \"a\", \"c\", null);\n\n    Thread.sleep(1000); // so the commits fire\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\" );\n    collectionProperties.put(\"schema\", \"schema.xml\"); \n    \n    // create a collection holding data for the \"to\" side of the JOIN\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(toColl, configName, shards, replicas)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    // get the set of nodes where replicas for the \"to\" collection exist\n    Set<String> nodeSet = new HashSet<>();\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    for (Slice slice : cs.getCollection(toColl).getActiveSlices())\n      for (Replica replica : slice.getReplicas())\n        nodeSet.add(replica.getNodeName());\n    assertTrue(nodeSet.size() > 0);\n\n    // deploy the \"from\" collection to all nodes where the \"to\" collection exists\n    CollectionAdminRequest.createCollection(fromColl, configName, 1, 4)\n        .setCreateNodeSet(StringUtils.join(nodeSet, \",\"))\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    toDocId = indexDoc(toColl, 1001, \"a\", null, \"b\");\n    indexDoc(fromColl, 2001, \"a\", \"c\", null);\n\n    Thread.sleep(1000); // so the commits fire\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ac6494315d04f68950d2f00f5436b4861bcd467","date":1553125039,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\" );\n    collectionProperties.put(\"schema\", \"schema.xml\"); \n    \n    // create a collection holding data for the \"to\" side of the JOIN\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(toColl, configName, shards, replicas)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    // get the set of nodes where replicas for the \"to\" collection exist\n    Set<String> nodeSet = new HashSet<>();\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    for (Slice slice : cs.getCollection(toColl).getActiveSlices())\n      for (Replica replica : slice.getReplicas())\n        nodeSet.add(replica.getNodeName());\n    assertTrue(nodeSet.size() > 0);\n\n    // deploy the \"from\" collection to all nodes where the \"to\" collection exists\n    CollectionAdminRequest.createCollection(fromColl, configName, 1, 4)\n        .setCreateNodeSet(String.join(\",\", nodeSet))\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    toDocId = indexDoc(toColl, 1001, \"a\", null, \"b\");\n    indexDoc(fromColl, 2001, \"a\", \"c\", null);\n\n    Thread.sleep(1000); // so the commits fire\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = 5;\n    configureCluster(nodeCount)\n       .addConfig(configName, configDir)\n       .configure();\n    \n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\" );\n    collectionProperties.put(\"schema\", \"schema.xml\"); \n    \n    // create a collection holding data for the \"to\" side of the JOIN\n    \n    int shards = 2;\n    int replicas = 2 ;\n    CollectionAdminRequest.createCollection(toColl, configName, shards, replicas)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    // get the set of nodes where replicas for the \"to\" collection exist\n    Set<String> nodeSet = new HashSet<>();\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    for (Slice slice : cs.getCollection(toColl).getActiveSlices())\n      for (Replica replica : slice.getReplicas())\n        nodeSet.add(replica.getNodeName());\n    assertTrue(nodeSet.size() > 0);\n\n    // deploy the \"from\" collection to all nodes where the \"to\" collection exists\n    CollectionAdminRequest.createCollection(fromColl, configName, 1, 4)\n        .setCreateNodeSet(StringUtils.join(nodeSet, \",\"))\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    toDocId = indexDoc(toColl, 1001, \"a\", null, \"b\");\n    indexDoc(fromColl, 2001, \"a\", \"c\", null);\n\n    Thread.sleep(1000); // so the commits fire\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8a02bef7458089240404614139b53c9f875ec7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"0ac6494315d04f68950d2f00f5436b4861bcd467":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"da83c90417e805f2b355afc2d79f4d2b2ce27469":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6a95b7b666da79218aa9365b9d9adcb42351ee3":["da83c90417e805f2b355afc2d79f4d2b2ce27469"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ac6494315d04f68950d2f00f5436b4861bcd467"]},"commit2Childs":{"da8a02bef7458089240404614139b53c9f875ec7":[],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["0ac6494315d04f68950d2f00f5436b4861bcd467","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0ac6494315d04f68950d2f00f5436b4861bcd467":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"da83c90417e805f2b355afc2d79f4d2b2ce27469":["d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da8a02bef7458089240404614139b53c9f875ec7","da83c90417e805f2b355afc2d79f4d2b2ce27469","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d6a95b7b666da79218aa9365b9d9adcb42351ee3":["da8a02bef7458089240404614139b53c9f875ec7","e89a32cc825033ebae8bb9e1c6877c2d9d76749e","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da8a02bef7458089240404614139b53c9f875ec7","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}