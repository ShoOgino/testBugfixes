{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","commits":[{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","sourceNew":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n                .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))                \n                .build();\n            return authProviders;\n          }\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n        \n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n        \n        builder.setCookieSpecRegistryProvider(new CookieSpecRegistryProvider() {\n          @Override\n          public Lookup<CookieSpecProvider> getCookieSpecRegistry() {\n            SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n            Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n                .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n            return cookieRegistry;\n          }\n        });\n        \n        builder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n            credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n            return credentialsProvider;\n          }\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    }\n    \n    return builder;\n  }\n\n","sourceOld":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    super.configure(httpClient, config);\n\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n        AuthSchemeRegistry registry = new AuthSchemeRegistry();\n        registry.register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false));\n        httpClient.setAuthSchemes(registry);\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n        httpClient.getCookieSpecs().register(cookieFactory.POLICY_NAME, cookieFactory);\n        httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY, cookieFactory.POLICY_NAME);\n        \n        httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, useJaasCreds);\n\n        httpClient.addRequestInterceptor(bufferedEntityInterceptor);\n      } else {\n        httpClient.getCredentialsProvider().clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043df2e9a841864922c32756a44c939ed768cb89","date":1459876536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","sourceNew":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n        \n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n        \n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    }\n    \n    return builder;\n  }\n\n","sourceOld":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n                .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))                \n                .build();\n            return authProviders;\n          }\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n        \n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n        \n        builder.setCookieSpecRegistryProvider(new CookieSpecRegistryProvider() {\n          @Override\n          public Lookup<CookieSpecProvider> getCookieSpecRegistry() {\n            SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n            Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n                .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n            return cookieRegistry;\n          }\n        });\n        \n        builder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n            credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n            return credentialsProvider;\n          }\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    }\n    \n    return builder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","sourceNew":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n        \n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n        \n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    }\n    \n    return builder;\n  }\n\n","sourceOld":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n                .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))                \n                .build();\n            return authProviders;\n          }\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n        \n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n        \n        builder.setCookieSpecRegistryProvider(new CookieSpecRegistryProvider() {\n          @Override\n          public Lookup<CookieSpecProvider> getCookieSpecRegistry() {\n            SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n            Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n                .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n            return cookieRegistry;\n          }\n        });\n        \n        builder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n            credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n            return credentialsProvider;\n          }\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    }\n    \n    return builder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","sourceNew":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    }\n    \n    return builder;\n  }\n\n","sourceOld":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n        \n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n        \n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    }\n    \n    return builder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","sourceNew":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    }\n    \n    return builder;\n  }\n\n","sourceOld":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n        \n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n        \n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    }\n    \n    return builder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","sourceNew":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    }\n    \n    return builder;\n  }\n\n","sourceOld":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n        \n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n        \n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    }\n    \n    return builder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd225c382b8919214f3db79af4c842f893b871","date":1486491351,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","sourceNew":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      logger.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n\n","sourceOld":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    }\n    \n    return builder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","sourceNew":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        log.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          log.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      log.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n\n","sourceOld":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      logger.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","sourceNew":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        log.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        } else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          log.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      log.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n\n","sourceOld":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        log.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          log.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      log.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder#getBuilder(SolrHttpClientBuilder).mjava","sourceNew":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        log.info(\"Setting up SPNego auth with config: {}\", configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        } else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          log.warn(\"System Property: {} set to: {} not false.  SPNego authentication may not be successful.\"\n              , useSubjectCredsProp, useSubjectCredsVal);\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      log.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n\n","sourceOld":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        log.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        // \"javax.security.auth.useSubjectCredsOnly\" should be false so that the underlying\n        // authentication mechanism can load the credentials from the JAAS configuration.\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        } else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          // Don't overwrite the prop value if it's already been written to something else,\n          // but log because it is likely the Credentials won't be loaded correctly.\n          log.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        //Enable only SPNEGO authentication scheme.\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        // Get the credentials from the JAAS configuration rather than here\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      log.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ddd225c382b8919214f3db79af4c842f893b871":["20be168d828ac40d262f85364d02f15b491dd88b"],"043df2e9a841864922c32756a44c939ed768cb89":["859081acf00749f5dd462772c571d611d4a4d2db"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"859081acf00749f5dd462772c571d611d4a4d2db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6284684320a9808c41a5e43de958b2da22f89bd":["859081acf00749f5dd462772c571d611d4a4d2db","043df2e9a841864922c32756a44c939ed768cb89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20be168d828ac40d262f85364d02f15b491dd88b":["b6284684320a9808c41a5e43de958b2da22f89bd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b6284684320a9808c41a5e43de958b2da22f89bd","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["b6284684320a9808c41a5e43de958b2da22f89bd","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9ddd225c382b8919214f3db79af4c842f893b871"]},"commit2Childs":{"9ddd225c382b8919214f3db79af4c842f893b871":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"043df2e9a841864922c32756a44c939ed768cb89":["b6284684320a9808c41a5e43de958b2da22f89bd"],"859081acf00749f5dd462772c571d611d4a4d2db":["043df2e9a841864922c32756a44c939ed768cb89","b6284684320a9808c41a5e43de958b2da22f89bd"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"b6284684320a9808c41a5e43de958b2da22f89bd":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["859081acf00749f5dd462772c571d611d4a4d2db"],"20be168d828ac40d262f85364d02f15b491dd88b":["9ddd225c382b8919214f3db79af4c842f893b871","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}