{"path":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","sourceNew":"  // prevent instantiation and extension.\n  private FieldValueHitQueue(SortField[] fields, int size) {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator[numComparators];\n    reverseMul = new int[numComparators];\n  }\n\n","sourceOld":"  // prevent instantiation and extension.\n  private FieldValueHitQueue(SortField[] fields, int size) {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator[numComparators];\n    reverseMul = new int[numComparators];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","sourceNew":"  // prevent instantiation and extension.\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private FieldValueHitQueue(SortField[] fields, int size) {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator[numComparators];\n    reverseMul = new int[numComparators];\n  }\n\n","sourceOld":"  // prevent instantiation and extension.\n  private FieldValueHitQueue(SortField[] fields, int size) {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator[numComparators];\n    reverseMul = new int[numComparators];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","sourceNew":"  // prevent instantiation and extension.\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private FieldValueHitQueue(SortField[] fields, int size) {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator[numComparators];\n    reverseMul = new int[numComparators];\n  }\n\n","sourceOld":"  // prevent instantiation and extension.\n  private FieldValueHitQueue(SortField[] fields, int size) {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator[numComparators];\n    reverseMul = new int[numComparators];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","sourceNew":"  // prevent instantiation and extension.\n  private FieldValueHitQueue(SortField[] fields, int size) throws IOException {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator<?>[numComparators];\n    reverseMul = new int[numComparators];\n    for (int i = 0; i < numComparators; ++i) {\n      SortField field = fields[i];\n\n      reverseMul[i] = field.reverse ? -1 : 1;\n      comparators[i] = field.getComparator(size, i);\n    }\n  }\n\n","sourceOld":"  // prevent instantiation and extension.\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private FieldValueHitQueue(SortField[] fields, int size) {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator[numComparators];\n    reverseMul = new int[numComparators];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e38c6374c23083c93e212a9498ff0a9c255476","date":1484767039,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","sourceNew":"  // prevent instantiation and extension.\n  private FieldValueHitQueue(SortField[] fields, int size) {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator<?>[numComparators];\n    reverseMul = new int[numComparators];\n    for (int i = 0; i < numComparators; ++i) {\n      SortField field = fields[i];\n\n      reverseMul[i] = field.reverse ? -1 : 1;\n      comparators[i] = field.getComparator(size, i);\n    }\n  }\n\n","sourceOld":"  // prevent instantiation and extension.\n  private FieldValueHitQueue(SortField[] fields, int size) throws IOException {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator<?>[numComparators];\n    reverseMul = new int[numComparators];\n    for (int i = 0; i < numComparators; ++i) {\n      SortField field = fields[i];\n\n      reverseMul[i] = field.reverse ? -1 : 1;\n      comparators[i] = field.getComparator(size, i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","sourceNew":"  // prevent instantiation and extension.\n  private FieldValueHitQueue(SortField[] fields, int size) {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator<?>[numComparators];\n    reverseMul = new int[numComparators];\n    for (int i = 0; i < numComparators; ++i) {\n      SortField field = fields[i];\n\n      reverseMul[i] = field.reverse ? -1 : 1;\n      comparators[i] = field.getComparator(size, i);\n    }\n  }\n\n","sourceOld":"  // prevent instantiation and extension.\n  private FieldValueHitQueue(SortField[] fields, int size) throws IOException {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator<?>[numComparators];\n    reverseMul = new int[numComparators];\n    for (int i = 0; i < numComparators; ++i) {\n      SortField field = fields[i];\n\n      reverseMul[i] = field.reverse ? -1 : 1;\n      comparators[i] = field.getComparator(size, i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e18fac0122568cb02eb2c92608ca703a723bbbd6","date":1592942698,"type":5,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","sourceNew":"  // prevent instantiation and extension.\n  private FieldValueHitQueue(SortField[] fields, int size, boolean filterNonCompetitiveDocs) {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator<?>[numComparators];\n    reverseMul = new int[numComparators];\n    for (int i = 0; i < numComparators; ++i) {\n      SortField field = fields[i];\n      reverseMul[i] = field.reverse ? -1 : 1;\n      if (i == 0 && filterNonCompetitiveDocs) {\n        // try to rewrite the 1st comparator to the comparator that can skip non-competitive documents\n        // skipping functionality is beneficial only for the 1st comparator\n        comparators[i] = FilteringFieldComparator.wrapToFilteringComparator(field.getComparator(size, i),\n            field.reverse, numComparators == 1);\n      } else {\n        comparators[i] = field.getComparator(size, i);\n      }\n    }\n  }\n\n","sourceOld":"  // prevent instantiation and extension.\n  private FieldValueHitQueue(SortField[] fields, int size) {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator<?>[numComparators];\n    reverseMul = new int[numComparators];\n    for (int i = 0; i < numComparators; ++i) {\n      SortField field = fields[i];\n\n      reverseMul[i] = field.reverse ? -1 : 1;\n      comparators[i] = field.getComparator(size, i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241","date":1599588987,"type":1,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#FieldValueHitQueue(SortField[],int,boolean).mjava","sourceNew":"  // prevent instantiation and extension.\n  private FieldValueHitQueue(SortField[] fields, int size) {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator<?>[numComparators];\n    reverseMul = new int[numComparators];\n    for (int i = 0; i < numComparators; ++i) {\n      SortField field = fields[i];\n      reverseMul[i] = field.reverse ? -1 : 1;\n      comparators[i] = field.getComparator(size, i);\n    }\n    if (numComparators == 1) {\n      // inform a comparator that sort is based on this single field\n      // to enable some optimizations for skipping over non-competitive documents\n      comparators[0].setSingleSort();\n    }\n  }\n\n","sourceOld":"  // prevent instantiation and extension.\n  private FieldValueHitQueue(SortField[] fields, int size, boolean filterNonCompetitiveDocs) {\n    super(size);\n    // When we get here, fields.length is guaranteed to be > 0, therefore no\n    // need to check it again.\n    \n    // All these are required by this class's API - need to return arrays.\n    // Therefore even in the case of a single comparator, create an array\n    // anyway.\n    this.fields = fields;\n    int numComparators = fields.length;\n    comparators = new FieldComparator<?>[numComparators];\n    reverseMul = new int[numComparators];\n    for (int i = 0; i < numComparators; ++i) {\n      SortField field = fields[i];\n      reverseMul[i] = field.reverse ? -1 : 1;\n      if (i == 0 && filterNonCompetitiveDocs) {\n        // try to rewrite the 1st comparator to the comparator that can skip non-competitive documents\n        // skipping functionality is beneficial only for the 1st comparator\n        comparators[i] = FilteringFieldComparator.wrapToFilteringComparator(field.getComparator(size, i),\n            field.reverse, numComparators == 1);\n      } else {\n        comparators[i] = field.getComparator(size, i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"03e38c6374c23083c93e212a9498ff0a9c255476":["901e951cec2e6af4e503209a6721c8834db23279"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["03e38c6374c23083c93e212a9498ff0a9c255476"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["901e951cec2e6af4e503209a6721c8834db23279","03e38c6374c23083c93e212a9498ff0a9c255476"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["e18fac0122568cb02eb2c92608ca703a723bbbd6"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"03e38c6374c23083c93e212a9498ff0a9c255476":["e18fac0122568cb02eb2c92608ca703a723bbbd6","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","901e951cec2e6af4e503209a6721c8834db23279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"901e951cec2e6af4e503209a6721c8834db23279":["03e38c6374c23083c93e212a9498ff0a9c255476","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}