{"path":"lucene/src/demo/org/apache/lucene/demo/html/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/html/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","pathOld":"src/demo/org/apache/lucene/demo/html/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/html/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","pathOld":"lucene/src/demo/org/apache/lucene/demo/html/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}