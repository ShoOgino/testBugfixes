{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(context, acceptDocs, termContexts);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return clauses.get(0).getSpans(context, acceptDocs, termContexts);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, context, acceptDocs, termContexts, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, context, acceptDocs, termContexts);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n    for (SpanQuery seq : clauses) {\n      Spans subSpan = seq.getSpans(context, acceptDocs, termContexts);\n      if (subSpan != null) {\n        subSpans.add(subSpan);\n      } else {\n        return null; // all required\n      }\n    }\n    \n    // all NearSpans require at least two subSpans\n    return (! inOrder) ? new NearSpansUnordered(this, subSpans)\n          : collectPayloads ? new NearSpansPayloadOrdered(this, subSpans)\n          : new NearSpansOrdered(this, subSpans);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(context, acceptDocs, termContexts);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return clauses.get(0).getSpans(context, acceptDocs, termContexts);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, context, acceptDocs, termContexts, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, context, acceptDocs, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n    for (SpanQuery seq : clauses) {\n      Spans subSpan = seq.getSpans(context, acceptDocs, termContexts);\n      if (subSpan != null) {\n        subSpans.add(subSpan);\n      } else {\n        return null; // all required\n      }\n    }\n    \n    // all NearSpans require at least two subSpans\n    return (! inOrder) ? new NearSpansUnordered(this, subSpans)\n          : collectPayloads ? new NearSpansPayloadOrdered(this, subSpans)\n          : new NearSpansOrdered(this, subSpans);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(context, acceptDocs, termContexts);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return clauses.get(0).getSpans(context, acceptDocs, termContexts);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, context, acceptDocs, termContexts, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, context, acceptDocs, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d1a832d7282403b4783b9435f19a5ba2e9dbdf7","date":1428071973,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n    for (SpanQuery seq : clauses) {\n      Spans subSpan = seq.getSpans(context, acceptDocs, termContexts);\n      if (subSpan != null) {\n        subSpans.add(subSpan);\n      } else {\n        return null; // all required\n      }\n    }\n\n    Terms terms = context.reader().terms(field);\n    if (terms == null) {\n      return null; // field does not exist\n    }\n    \n    // all NearSpans require at least two subSpans\n    return (! inOrder) ? new NearSpansUnordered(this, subSpans)\n          : collectPayloads && terms.hasPayloads() ? new NearSpansPayloadOrdered(this, subSpans)\n          : new NearSpansOrdered(this, subSpans);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n    for (SpanQuery seq : clauses) {\n      Spans subSpan = seq.getSpans(context, acceptDocs, termContexts);\n      if (subSpan != null) {\n        subSpans.add(subSpan);\n      } else {\n        return null; // all required\n      }\n    }\n    \n    // all NearSpans require at least two subSpans\n    return (! inOrder) ? new NearSpansUnordered(this, subSpans)\n          : collectPayloads ? new NearSpansPayloadOrdered(this, subSpans)\n          : new NearSpansOrdered(this, subSpans);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n    for (SpanQuery seq : clauses) {\n      Spans subSpan = seq.getSpans(context, acceptDocs, termContexts);\n      if (subSpan != null) {\n        subSpans.add(subSpan);\n      } else {\n        return null; // all required\n      }\n    }\n\n    Terms terms = context.reader().terms(field);\n    if (terms == null) {\n      return null; // field does not exist\n    }\n    \n    // all NearSpans require at least two subSpans\n    return (! inOrder) ? new NearSpansUnordered(this, subSpans)\n          : collectPayloads && terms.hasPayloads() ? new NearSpansPayloadOrdered(this, subSpans)\n          : new NearSpansOrdered(this, subSpans);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n    for (SpanQuery seq : clauses) {\n      Spans subSpan = seq.getSpans(context, acceptDocs, termContexts);\n      if (subSpan != null) {\n        subSpans.add(subSpan);\n      } else {\n        return null; // all required\n      }\n    }\n    \n    // all NearSpans require at least two subSpans\n    return (! inOrder) ? new NearSpansUnordered(this, subSpans)\n          : collectPayloads ? new NearSpansPayloadOrdered(this, subSpans)\n          : new NearSpansOrdered(this, subSpans);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, SpanCollector collector) throws IOException {\n\n    Terms terms = context.reader().terms(field);\n    if (terms == null) {\n      return null; // field does not exist\n    }\n\n    ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n    SpanCollector subSpanCollector = inOrder ? collector.bufferedCollector() : collector;\n    for (SpanQuery seq : clauses) {\n      Spans subSpan = seq.getSpans(context, acceptDocs, termContexts, subSpanCollector);\n      if (subSpan != null) {\n        subSpans.add(subSpan);\n      } else {\n        return null; // all required\n      }\n    }\n\n    \n    // all NearSpans require at least two subSpans\n    return (! inOrder) ? new NearSpansUnordered(this, subSpans) : new NearSpansOrdered(this, subSpans, collector);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n    for (SpanQuery seq : clauses) {\n      Spans subSpan = seq.getSpans(context, acceptDocs, termContexts);\n      if (subSpan != null) {\n        subSpans.add(subSpan);\n      } else {\n        return null; // all required\n      }\n    }\n\n    Terms terms = context.reader().terms(field);\n    if (terms == null) {\n      return null; // field does not exist\n    }\n    \n    // all NearSpans require at least two subSpans\n    return (! inOrder) ? new NearSpansUnordered(this, subSpans)\n          : collectPayloads && terms.hasPayloads() ? new NearSpansPayloadOrdered(this, subSpans)\n          : new NearSpansOrdered(this, subSpans);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d1a832d7282403b4783b9435f19a5ba2e9dbdf7":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["fab172655716b96f7e42376116235017a922de3a","3d1a832d7282403b4783b9435f19a5ba2e9dbdf7"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["3d1a832d7282403b4783b9435f19a5ba2e9dbdf7"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"fab172655716b96f7e42376116235017a922de3a":["c9fb5f46e264daf5ba3860defe623a89d202dd87","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d530e71ed32ab23b34ca3fc72b080a554a40404"]},"commit2Childs":{"3d1a832d7282403b4783b9435f19a5ba2e9dbdf7":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","2d530e71ed32ab23b34ca3fc72b080a554a40404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["3d1a832d7282403b4783b9435f19a5ba2e9dbdf7","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}