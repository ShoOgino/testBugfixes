{"path":"solr/contrib/solr-morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest#testTransformValue().mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest#testTransformValue().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that the ContentHandler properly strips the illegal characters\n   */\n  @Test\n  public void testTransformValue() {\n    String fieldName = \"user_name\";\n    assertFalse(\"foobar\".equals(getFoobarWithNonChars()));\n\n    Metadata metadata = new Metadata();\n    // load illegal char string into a metadata field and generate a new document,\n    // which will cause the ContentHandler to be invoked.\n    metadata.set(fieldName, getFoobarWithNonChars());\n    StripNonCharSolrContentHandlerFactory contentHandlerFactory =\n      new StripNonCharSolrContentHandlerFactory(DateUtil.DEFAULT_DATE_FORMATS);\n    IndexSchema schema = h.getCore().getLatestSchema();\n    SolrContentHandler contentHandler =\n      contentHandlerFactory.createSolrContentHandler(metadata, new MapSolrParams(new HashMap()), schema);\n    SolrInputDocument doc = contentHandler.newDocument();\n    String foobar = doc.getFieldValue(fieldName).toString();\n    assertTrue(\"foobar\".equals(foobar));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest#testTransformValue().mjava","pathOld":"solr/contrib/solr-morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest#testTransformValue().mjava","sourceNew":"  /**\n   * Test that the ContentHandler properly strips the illegal characters\n   */\n  @Test\n  public void testTransformValue() {\n    String fieldName = \"user_name\";\n    assertFalse(\"foobar\".equals(getFoobarWithNonChars()));\n\n    Metadata metadata = new Metadata();\n    // load illegal char string into a metadata field and generate a new document,\n    // which will cause the ContentHandler to be invoked.\n    metadata.set(fieldName, getFoobarWithNonChars());\n    StripNonCharSolrContentHandlerFactory contentHandlerFactory =\n      new StripNonCharSolrContentHandlerFactory(DateUtil.DEFAULT_DATE_FORMATS);\n    IndexSchema schema = h.getCore().getLatestSchema();\n    SolrContentHandler contentHandler =\n      contentHandlerFactory.createSolrContentHandler(metadata, new MapSolrParams(new HashMap()), schema);\n    SolrInputDocument doc = contentHandler.newDocument();\n    String foobar = doc.getFieldValue(fieldName).toString();\n    assertTrue(\"foobar\".equals(foobar));\n  }\n\n","sourceOld":"  /**\n   * Test that the ContentHandler properly strips the illegal characters\n   */\n  @Test\n  public void testTransformValue() {\n    String fieldName = \"user_name\";\n    assertFalse(\"foobar\".equals(getFoobarWithNonChars()));\n\n    Metadata metadata = new Metadata();\n    // load illegal char string into a metadata field and generate a new document,\n    // which will cause the ContentHandler to be invoked.\n    metadata.set(fieldName, getFoobarWithNonChars());\n    StripNonCharSolrContentHandlerFactory contentHandlerFactory =\n      new StripNonCharSolrContentHandlerFactory(DateUtil.DEFAULT_DATE_FORMATS);\n    IndexSchema schema = h.getCore().getLatestSchema();\n    SolrContentHandler contentHandler =\n      contentHandlerFactory.createSolrContentHandler(metadata, new MapSolrParams(new HashMap()), schema);\n    SolrInputDocument doc = contentHandler.newDocument();\n    String foobar = doc.getFieldValue(fieldName).toString();\n    assertTrue(\"foobar\".equals(foobar));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}