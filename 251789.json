{"path":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"/dev/null","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null);\n    builder.add(new BytesRef(\"stat\"), outputs.getNoOutput());\n    builder.add(new BytesRef(\"station\"), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    assertTrue(w.toString().indexOf(\"6 [shape=doublecircle\") != -1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ec890fad2ea96317f4429e0aa0085bb25673641","date":1326669938,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    assertTrue(w.toString().indexOf(\"6 [shape=doublecircle\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null);\n    builder.add(new BytesRef(\"stat\"), outputs.getNoOutput());\n    builder.add(new BytesRef(\"station\"), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    assertTrue(w.toString().indexOf(\"6 [shape=doublecircle\") != -1);\n  }\n\n","bugFix":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random.nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    final String expected;\n    if (willRewrite) {\n      expected = \"4 -> 3 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    } else {\n      expected = \"8 -> 6 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    }\n    assertTrue(w.toString().indexOf(expected) != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    assertTrue(w.toString().indexOf(\"6 [shape=doublecircle\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random.nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    final String expected;\n    if (willRewrite) {\n      expected = \"4 -> 3 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    } else {\n      expected = \"8 -> 6 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    }\n    assertTrue(w.toString().indexOf(expected) != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    assertTrue(w.toString().indexOf(\"6 [shape=doublecircle\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random.nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    final String expected;\n    if (willRewrite) {\n      expected = \"4 -> 3 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    } else {\n      expected = \"8 -> 6 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    }\n    assertTrue(w.toString().indexOf(expected) != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    assertTrue(w.toString().indexOf(\"6 [shape=doublecircle\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random.nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    final String expected;\n    if (willRewrite) {\n      expected = \"4 -> 3 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    } else {\n      expected = \"8 -> 6 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    }\n    assertTrue(w.toString().indexOf(expected) != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random.nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    final String expected;\n    if (willRewrite) {\n      expected = \"4 -> 3 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    } else {\n      expected = \"8 -> 6 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    }\n    assertTrue(w.toString().indexOf(expected) != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["1ec890fad2ea96317f4429e0aa0085bb25673641","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["1ec890fad2ea96317f4429e0aa0085bb25673641","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["60ba444201d2570214b6fcf1d15600dc1a01f548"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"1ec890fad2ea96317f4429e0aa0085bb25673641":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}