{"path":"solr/core/src/java/org/apache/solr/rest/ManagedResource#processStoredData(Object).mjava","commits":[{"id":"aebec5e84983a45d78a72ed0d459b5e033302bda","date":1419445941,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResource#processStoredData(Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Processes the stored data.\n   */\n  protected Object processStoredData(Object data) throws SolrException {\n    Object managedData = null;\n    if (data != null) {\n      if (!(data instanceof Map)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Stored data for \"+resourceId+\" is not a valid JSON object!\");\n      }\n\n      Map<String,Object> jsonMap = (Map<String,Object>)data;\n      Map<String,Object> initArgsMap = (Map<String,Object>)jsonMap.get(INIT_ARGS_JSON_FIELD);\n      managedInitArgs = new NamedList<>(initArgsMap);\n      log.info(\"Loaded initArgs {} for {}\", managedInitArgs, resourceId);\n\n      if (jsonMap.containsKey(MANAGED_JSON_LIST_FIELD)) {\n        Object jsonList = jsonMap.get(MANAGED_JSON_LIST_FIELD);\n        if (!(jsonList instanceof List)) {\n          String errMsg =\n              String.format(Locale.ROOT,\n                  \"Expected JSON array as value for %s but client sent a %s instead!\",\n                  MANAGED_JSON_LIST_FIELD, jsonList.getClass().getName());\n          throw new SolrException(ErrorCode.SERVER_ERROR, errMsg);\n        }\n\n        managedData = jsonList;\n      } else if (jsonMap.containsKey(MANAGED_JSON_MAP_FIELD)) {\n        Object jsonObj = jsonMap.get(MANAGED_JSON_MAP_FIELD);\n        if (!(jsonObj instanceof Map)) {\n          String errMsg =\n              String.format(Locale.ROOT,\n                  \"Expected JSON map as value for %s but client sent a %s instead!\",\n                  MANAGED_JSON_MAP_FIELD, jsonObj.getClass().getName());\n          throw new SolrException(ErrorCode.SERVER_ERROR, errMsg);\n        }\n\n        managedData = jsonObj;\n      }\n    }\n    return managedData;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResource#processStoredData(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResource#processStoredData(Object).mjava","sourceNew":"  /**\n   * Processes the stored data.\n   */\n  protected Object processStoredData(Object data) throws SolrException {\n    Object managedData = null;\n    if (data != null) {\n      if (!(data instanceof Map)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Stored data for \"+resourceId+\" is not a valid JSON object!\");\n      }\n\n      @SuppressWarnings({\"unchecked\"})\n      Map<String,Object> jsonMap = (Map<String,Object>)data;\n      @SuppressWarnings({\"unchecked\"})\n      Map<String,Object> initArgsMap = (Map<String,Object>)jsonMap.get(INIT_ARGS_JSON_FIELD);\n      managedInitArgs = new NamedList<>(initArgsMap);\n      log.info(\"Loaded initArgs {} for {}\", managedInitArgs, resourceId);\n\n      if (jsonMap.containsKey(MANAGED_JSON_LIST_FIELD)) {\n        Object jsonList = jsonMap.get(MANAGED_JSON_LIST_FIELD);\n        if (!(jsonList instanceof List)) {\n          String errMsg =\n              String.format(Locale.ROOT,\n                  \"Expected JSON array as value for %s but client sent a %s instead!\",\n                  MANAGED_JSON_LIST_FIELD, jsonList.getClass().getName());\n          throw new SolrException(ErrorCode.SERVER_ERROR, errMsg);\n        }\n\n        managedData = jsonList;\n      } else if (jsonMap.containsKey(MANAGED_JSON_MAP_FIELD)) {\n        Object jsonObj = jsonMap.get(MANAGED_JSON_MAP_FIELD);\n        if (!(jsonObj instanceof Map)) {\n          String errMsg =\n              String.format(Locale.ROOT,\n                  \"Expected JSON map as value for %s but client sent a %s instead!\",\n                  MANAGED_JSON_MAP_FIELD, jsonObj.getClass().getName());\n          throw new SolrException(ErrorCode.SERVER_ERROR, errMsg);\n        }\n\n        managedData = jsonObj;\n      }\n    }\n    return managedData;\n  }\n\n","sourceOld":"  /**\n   * Processes the stored data.\n   */\n  protected Object processStoredData(Object data) throws SolrException {\n    Object managedData = null;\n    if (data != null) {\n      if (!(data instanceof Map)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Stored data for \"+resourceId+\" is not a valid JSON object!\");\n      }\n\n      Map<String,Object> jsonMap = (Map<String,Object>)data;\n      Map<String,Object> initArgsMap = (Map<String,Object>)jsonMap.get(INIT_ARGS_JSON_FIELD);\n      managedInitArgs = new NamedList<>(initArgsMap);\n      log.info(\"Loaded initArgs {} for {}\", managedInitArgs, resourceId);\n\n      if (jsonMap.containsKey(MANAGED_JSON_LIST_FIELD)) {\n        Object jsonList = jsonMap.get(MANAGED_JSON_LIST_FIELD);\n        if (!(jsonList instanceof List)) {\n          String errMsg =\n              String.format(Locale.ROOT,\n                  \"Expected JSON array as value for %s but client sent a %s instead!\",\n                  MANAGED_JSON_LIST_FIELD, jsonList.getClass().getName());\n          throw new SolrException(ErrorCode.SERVER_ERROR, errMsg);\n        }\n\n        managedData = jsonList;\n      } else if (jsonMap.containsKey(MANAGED_JSON_MAP_FIELD)) {\n        Object jsonObj = jsonMap.get(MANAGED_JSON_MAP_FIELD);\n        if (!(jsonObj instanceof Map)) {\n          String errMsg =\n              String.format(Locale.ROOT,\n                  \"Expected JSON map as value for %s but client sent a %s instead!\",\n                  MANAGED_JSON_MAP_FIELD, jsonObj.getClass().getName());\n          throw new SolrException(ErrorCode.SERVER_ERROR, errMsg);\n        }\n\n        managedData = jsonObj;\n      }\n    }\n    return managedData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aebec5e84983a45d78a72ed0d459b5e033302bda":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["aebec5e84983a45d78a72ed0d459b5e033302bda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"aebec5e84983a45d78a72ed0d459b5e033302bda":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aebec5e84983a45d78a72ed0d459b5e033302bda"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}