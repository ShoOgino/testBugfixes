{"path":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the value of an expression to use in a range or query facet.\n   * @param expressionName the name of the expression\n   * @param fieldFacet the facet field\n   * @param facetValue the facet value\n   * @return String String representation of pivot value\n   */\n  @SuppressWarnings({ \"deprecation\", \"rawtypes\" })\n  public String getResult(String expressionName, String fieldFacet, String facetValue) {\n    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {\n      try {\n        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());\n        if (pivotStr.length==1) {\n          facetValue = getResult(pivotStr[0]);\n        } else if (pivotStr.length==3) {\n          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" has an invalid amount of arguments.\");\n        }\n      } catch (IndexOutOfBoundsException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" is invalid. Lacks parentheses.\",e);\n      }\n    } \n    if (fieldFacetExpressions.get(fieldFacet)!=null) {\n      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);\n      for (int count = 0; count < expressionNames.length; count++) {\n        if (expressionName.equals(expressionNames[count])) {\n          Comparable value = facetExpressions[count].getValue();\n          if (value.getClass().equals(Date.class)) {\n            return TrieDateField.formatExternal((Date)value);\n          } else {\n            return value.toString();\n          }\n        }\n      }\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"Field Facet Pivot expression \"+expressionName+\" not found.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the value of an expression to use in a range or query facet.\n   * @param expressionName the name of the expression\n   * @param fieldFacet the facet field\n   * @param facetValue the facet value\n   * @return String String representation of pivot value\n   */\n  @SuppressWarnings({ \"deprecation\", \"rawtypes\" })\n  public String getResult(String expressionName, String fieldFacet, String facetValue) {\n    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {\n      try {\n        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());\n        if (pivotStr.length==1) {\n          facetValue = getResult(pivotStr[0]);\n        } else if (pivotStr.length==3) {\n          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" has an invalid amount of arguments.\");\n        }\n      } catch (IndexOutOfBoundsException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" is invalid. Lacks parentheses.\",e);\n      }\n    } \n    if (fieldFacetExpressions.get(fieldFacet)!=null) {\n      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);\n      for (int count = 0; count < expressionNames.length; count++) {\n        if (expressionName.equals(expressionNames[count])) {\n          Comparable value = facetExpressions[count].getValue();\n          if (value.getClass().equals(Date.class)) {\n            return TrieDateField.formatExternal((Date)value);\n          } else {\n            return value.toString();\n          }\n        }\n      }\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"Field Facet Pivot expression \"+expressionName+\" not found.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","sourceNew":"  /**\n   * Returns the value of an expression to use in a range or query facet.\n   * @param expressionName the name of the expression\n   * @param fieldFacet the facet field\n   * @param facetValue the facet value\n   * @return String String representation of pivot value\n   */\n  @SuppressWarnings({ \"deprecation\", \"rawtypes\" })\n  public String getResult(String expressionName, String fieldFacet, String facetValue) {\n    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {\n      try {\n        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());\n        if (pivotStr.length==1) {\n          facetValue = getResult(pivotStr[0]);\n        } else if (pivotStr.length==3) {\n          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" has an invalid amount of arguments.\");\n        }\n      } catch (IndexOutOfBoundsException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" is invalid. Lacks parentheses.\",e);\n      }\n    } \n    if (fieldFacetExpressions.get(fieldFacet)!=null) {\n      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);\n      for (int count = 0; count < expressionNames.length; count++) {\n        if (expressionName.equals(expressionNames[count])) {\n          Comparable value = facetExpressions[count].getValue();\n          if (value.getClass().equals(Date.class)) {\n            return TrieDateField.formatExternal((Date)value);\n          } else {\n            return value.toString();\n          }\n        }\n      }\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"Field Facet Pivot expression \"+expressionName+\" not found.\");\n  }\n\n","sourceOld":"  /**\n   * Returns the value of an expression to use in a range or query facet.\n   * @param expressionName the name of the expression\n   * @param fieldFacet the facet field\n   * @param facetValue the facet value\n   * @return String String representation of pivot value\n   */\n  @SuppressWarnings({ \"deprecation\", \"rawtypes\" })\n  public String getResult(String expressionName, String fieldFacet, String facetValue) {\n    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {\n      try {\n        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());\n        if (pivotStr.length==1) {\n          facetValue = getResult(pivotStr[0]);\n        } else if (pivotStr.length==3) {\n          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" has an invalid amount of arguments.\");\n        }\n      } catch (IndexOutOfBoundsException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" is invalid. Lacks parentheses.\",e);\n      }\n    } \n    if (fieldFacetExpressions.get(fieldFacet)!=null) {\n      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);\n      for (int count = 0; count < expressionNames.length; count++) {\n        if (expressionName.equals(expressionNames[count])) {\n          Comparable value = facetExpressions[count].getValue();\n          if (value.getClass().equals(Date.class)) {\n            return TrieDateField.formatExternal((Date)value);\n          } else {\n            return value.toString();\n          }\n        }\n      }\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"Field Facet Pivot expression \"+expressionName+\" not found.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["ff403346522eaa9de75403763e297e83a3ea585c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}