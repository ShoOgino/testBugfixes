{"path":"solr/core/src/java/org/apache/solr/handler/admin/IndexSizeEstimator#main(String[]).mjava","commits":[{"id":"e4583dbd381e291c87e23144564c59ba3391b188","date":1560187306,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/IndexSizeEstimator#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressForbidden(reason = \"System.err and System.out required for a command-line utility\")\n  public static void main(String[] args) throws Exception {\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + IndexSizeEstimator.class.getName() + \" [-topN NUM] [-maxLen NUM] [-summary] [-details] <indexDir>\");\n      System.err.println();\n      System.err.println(\"\\t<indexDir>\\tpath to the index (parent path of 'segments_N' file)\");\n      System.err.println(\"\\t-topN NUM\\tnumber of top largest items to collect\");\n      System.err.println(\"\\t-maxLen NUM\\ttruncate the largest items to NUM bytes / characters\");\n      System.err.println(-1);\n    }\n    String path = null;\n    int topN = 20;\n    int maxLen = 100;\n    boolean details = false;\n    boolean summary = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-topN\")) {\n        topN = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-maxLen\")) {\n        maxLen = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-details\")) {\n        details = true;\n      } else if (args[i].equals(\"-summary\")) {\n        summary = true;\n      } else {\n        path = args[i];\n      }\n    }\n    if (path == null) {\n      System.err.println(\"ERROR: <indexDir> argument is required.\");\n      System.exit(-2);\n    }\n    Directory dir = FSDirectory.open(Paths.get(path));\n    DirectoryReader reader = StandardDirectoryReader.open(dir);\n    IndexSizeEstimator stats = new IndexSizeEstimator(reader, topN, maxLen, summary, details);\n    System.out.println(Utils.toJSONString(stats.estimate()));\n    System.exit(0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4583dbd381e291c87e23144564c59ba3391b188":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e4583dbd381e291c87e23144564c59ba3391b188"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4583dbd381e291c87e23144564c59ba3391b188"],"e4583dbd381e291c87e23144564c59ba3391b188":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}