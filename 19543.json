{"path":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#assertMatches(Searcher,Query,Sort,String).mjava","commits":[{"id":"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02","date":1244977984,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#assertMatches(Searcher,Query,Sort,String).mjava","pathOld":"/dev/null","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(hits.totalHits, expectedResult.length());\n    StringBuffer buff = new StringBuffer(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (expectedResult, buff.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#assertMatches(Searcher,Query,Sort,String).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#assertMatches(Searcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(hits.totalHits, expectedResult.length());\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(hits.totalHits, expectedResult.length());\n    StringBuffer buff = new StringBuffer(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#assertMatches(Searcher,Query,Sort,String).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#assertMatches(Searcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(hits.totalHits, expectedResult.length());\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(hits.totalHits, expectedResult.length());\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"]},"commit2Childs":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}