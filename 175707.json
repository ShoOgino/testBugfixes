{"path":"src/java/org/apache/solr/util/NumberUtils#float2sortableStr(float).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/NumberUtils#float2sortableStr(float).mjava","pathOld":"/dev/null","sourceNew":"  //\n  // IEEE floating point format is defined so that it sorts correctly\n  // when interpreted as a signed integer (or signed long in the case\n  // of a double) for positive values.  For negative values, all the bits except\n  // the sign bit must be inverted.\n  // This correctly handles all possible float values including -Infinity and +Infinity.\n  // Note that in float-space, NaN<x is false, NaN>x is false, NaN==x is false, NaN!=x is true\n  // for all x (including NaN itself).  Internal to Solr, NaN==NaN is true and NaN\n  // sorts higher than Infinity, so a range query of [-Infinity TO +Infinity] will\n  // exclude NaN values, but a query of \"NaN\" will find all NaN values.\n  // Also, -0==0 in float-space but -0<0 after this transformation.\n  //\n  public static String float2sortableStr(float val) {\n    int f = Float.floatToRawIntBits(val);\n    if (f<0) f ^= 0x7fffffff;\n    return int2sortableStr(f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/NumberUtils#float2sortableStr(float).mjava","pathOld":"src/java/org/apache/solr/util/NumberUtils#float2sortableStr(float).mjava","sourceNew":"  //\n  // IEEE floating point format is defined so that it sorts correctly\n  // when interpreted as a signed integer (or signed long in the case\n  // of a double) for positive values.  For negative values, all the bits except\n  // the sign bit must be inverted.\n  // This correctly handles all possible float values including -Infinity and +Infinity.\n  // Note that in float-space, NaN<x is false, NaN>x is false, NaN==x is false, NaN!=x is true\n  // for all x (including NaN itself).  Internal to Solr, NaN==NaN is true and NaN\n  // sorts higher than Infinity, so a range query of [-Infinity TO +Infinity] will\n  // exclude NaN values, but a query of \"NaN\" will find all NaN values.\n  // Also, -0==0 in float-space but -0<0 after this transformation.\n  //\n  public static String float2sortableStr(float val) {\n    int f = Float.floatToRawIntBits(val);\n    if (f<0) f ^= 0x7fffffff;\n    return int2sortableStr(f);\n  }\n\n","sourceOld":"  //\n  // IEEE floating point format is defined so that it sorts correctly\n  // when interpreted as a signed integer (or signed long in the case\n  // of a double) for positive values.  For negative values, all the bits except\n  // the sign bit must be inverted.\n  // This correctly handles all possible float values including -Infinity and +Infinity.\n  // Note that in float-space, NaN<x is false, NaN>x is false, NaN==x is false, NaN!=x is true\n  // for all x (including NaN itself).  Internal to Solr, NaN==NaN is true and NaN\n  // sorts higher than Infinity, so a range query of [-Infinity TO +Infinity] will\n  // exclude NaN values, but a query of \"NaN\" will find all NaN values.\n  // Also, -0==0 in float-space but -0<0 after this transformation.\n  //\n  public static String float2sortableStr(float val) {\n    int f = Float.floatToRawIntBits(val);\n    if (f<0) f ^= 0x7fffffff;\n    return int2sortableStr(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}