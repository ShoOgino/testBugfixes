{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","pathOld":"/dev/null","sourceNew":"  // Pushes next'd frame or seek'd frame; we later\n  // lazy-load the frame only when needed\n  Lucene40SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, long fp, int length) throws IOException {\n    final Lucene40SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.arc = arc;\n    if (f.fpOrig == fp && f.nextEnt != -1) {\n      //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n      //if (f.prefix > targetBeforeCurrentLength) {\n      if (f.ord > targetBeforeCurrentLength) {\n        f.rewind();\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        skip rewind!\");\n        // }\n      }\n      assert length == f.prefix;\n    } else {\n      f.nextEnt = -1;\n      f.prefix = length;\n      f.state.termBlockOrd = 0;\n      f.fpOrig = f.fp = fp;\n      f.lastSubFP = -1;\n      // if (DEBUG) {\n      //   final int sav = term.length;\n      //   term.length = length;\n      //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n      //   term.length = sav;\n      // }\n    }\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","pathOld":"/dev/null","sourceNew":"  // Pushes next'd frame or seek'd frame; we later\n  // lazy-load the frame only when needed\n  Lucene40SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, long fp, int length) throws IOException {\n    final Lucene40SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.arc = arc;\n    if (f.fpOrig == fp && f.nextEnt != -1) {\n      //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n      //if (f.prefix > targetBeforeCurrentLength) {\n      if (f.ord > targetBeforeCurrentLength) {\n        f.rewind();\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        skip rewind!\");\n        // }\n      }\n      assert length == f.prefix;\n    } else {\n      f.nextEnt = -1;\n      f.prefix = length;\n      f.state.termBlockOrd = 0;\n      f.fpOrig = f.fp = fp;\n      f.lastSubFP = -1;\n      // if (DEBUG) {\n      //   final int sav = term.length;\n      //   term.length = length;\n      //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n      //   term.length = sav;\n      // }\n    }\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","sourceNew":null,"sourceOld":"  // Pushes next'd frame or seek'd frame; we later\n  // lazy-load the frame only when needed\n  Lucene40SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, long fp, int length) throws IOException {\n    final Lucene40SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.arc = arc;\n    if (f.fpOrig == fp && f.nextEnt != -1) {\n      //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n      //if (f.prefix > targetBeforeCurrentLength) {\n      if (f.ord > targetBeforeCurrentLength) {\n        f.rewind();\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        skip rewind!\");\n        // }\n      }\n      assert length == f.prefix;\n    } else {\n      f.nextEnt = -1;\n      f.prefix = length;\n      f.state.termBlockOrd = 0;\n      f.fpOrig = f.fp = fp;\n      f.lastSubFP = -1;\n      // if (DEBUG) {\n      //   final int sav = term.length;\n      //   term.length = length;\n      //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n      //   term.length = sav;\n      // }\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0628077afea69a2955260949478afabab8e500d8"],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}