{"path":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","commits":[{"id":"f09ac0abea5345f77c4cf8d9f0d531da9139debc","date":1311103501,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected FieldType create( ResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = (FieldType)loader.newInstance(className);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n    \n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n    \n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Similarity similarity = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n    }\n    if (similarity!=null) {\n      ft.setSimilarity(similarity);\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6220329a2333b59a34a9ecf29c003e005c861310"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8d5405ac4f2510f9f83e07236792d1056c19640","date":1322235986,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( ResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = (FieldType)loader.newInstance(className);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Similarity similarity = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      Boolean legacyMatch = ! schema.getDefaultLuceneMatchVersion().onOrAfter(Version.LUCENE_36);\n      legacyMatch = (DOMUtil.getAttr(node, \"legacyMultiTerm\", null) == null) ? legacyMatch :\n          Boolean.parseBoolean(DOMUtil.getAttr(node, \"legacyMultiTerm\", null));\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer, legacyMatch);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      ft.setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (similarity!=null) {\n      ft.setSimilarity(similarity);\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( ResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = (FieldType)loader.newInstance(className);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n    \n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n    \n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Similarity similarity = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n    }\n    if (similarity!=null) {\n      ft.setSimilarity(similarity);\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f15795b2193a8dd132f374975d4243687bee9351","date":1322413478,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( ResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = (FieldType)loader.newInstance(className);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Similarity similarity = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (similarity!=null) {\n      ft.setSimilarity(similarity);\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( ResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = (FieldType)loader.newInstance(className);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Similarity similarity = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      Boolean legacyMatch = ! schema.getDefaultLuceneMatchVersion().onOrAfter(Version.LUCENE_36);\n      legacyMatch = (DOMUtil.getAttr(node, \"legacyMultiTerm\", null) == null) ? legacyMatch :\n          Boolean.parseBoolean(DOMUtil.getAttr(node, \"legacyMultiTerm\", null));\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer, legacyMatch);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      ft.setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (similarity!=null) {\n      ft.setSimilarity(similarity);\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":["6220329a2333b59a34a9ecf29c003e005c861310"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( ResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = (FieldType)loader.newInstance(className);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (simFactory!=null) {\n      ft.setSimilarity(simFactory.getSimilarity());\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( ResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = (FieldType)loader.newInstance(className);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Similarity similarity = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (similarity!=null) {\n      ft.setSimilarity(similarity);\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( ResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (simFactory!=null) {\n      ft.setSimilarity(simFactory.getSimilarity());\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( ResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = (FieldType)loader.newInstance(className);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (simFactory!=null) {\n      ft.setSimilarity(simFactory.getSimilarity());\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c028362918f0b06bbdb243dfd35486218b89dbde","date":1343391303,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(SolrResourceLoader,String,String,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","sourceNew":"  @Override\n  protected FieldType create( SolrResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (simFactory!=null) {\n      ft.setSimilarity(simFactory.getSimilarity());\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","sourceOld":"  @Override\n  protected FieldType create( ResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (simFactory!=null) {\n      ft.setSimilarity(simFactory.getSimilarity());\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected FieldType create( ResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (simFactory!=null) {\n      ft.setSimilarity(simFactory.getSimilarity());\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#create(ResourceLoader,String,String,Node).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected FieldType create( ResourceLoader loader, \n                              String name, \n                              String className, \n                              Node node ) throws Exception {\n\n    FieldType ft = loader.newInstance(className, FieldType.class);\n    ft.setTypeName(name);\n    \n    String expression = \"./analyzer[@type='query']\";\n    Node anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer queryAnalyzer = readAnalyzer(anode);\n\n    expression = \"./analyzer[@type='multiterm']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer multiAnalyzer = readAnalyzer(anode);\n\n    // An analyzer without a type specified, or with type=\"index\"\n    expression = \"./analyzer[not(@type)] | ./analyzer[@type='index']\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    Analyzer analyzer = readAnalyzer(anode);\n\n    // a custom similarity[Factory]\n    expression = \"./similarity\";\n    anode = (Node)xpath.evaluate(expression, node, XPathConstants.NODE);\n    SimilarityFactory simFactory = IndexSchema.readSimilarity(loader, anode);\n    \n    if (queryAnalyzer==null) queryAnalyzer=analyzer;\n    if (analyzer==null) analyzer=queryAnalyzer;\n    if (multiAnalyzer == null) {\n      multiAnalyzer = constructMultiTermAnalyzer(queryAnalyzer);\n    }\n    if (analyzer!=null) {\n      ft.setAnalyzer(analyzer);\n      ft.setQueryAnalyzer(queryAnalyzer);\n      if (ft instanceof TextField)\n        ((TextField)ft).setMultiTermAnalyzer(multiAnalyzer);\n    }\n    if (simFactory!=null) {\n      ft.setSimilarity(simFactory.getSimilarity());\n    }\n    if (ft instanceof SchemaAware){\n      schemaAware.add((SchemaAware) ft);\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","c028362918f0b06bbdb243dfd35486218b89dbde"],"c028362918f0b06bbdb243dfd35486218b89dbde":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","c028362918f0b06bbdb243dfd35486218b89dbde"],"f8d5405ac4f2510f9f83e07236792d1056c19640":["f09ac0abea5345f77c4cf8d9f0d531da9139debc"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["f15795b2193a8dd132f374975d4243687bee9351"],"f15795b2193a8dd132f374975d4243687bee9351":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c028362918f0b06bbdb243dfd35486218b89dbde"],"f09ac0abea5345f77c4cf8d9f0d531da9139debc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c028362918f0b06bbdb243dfd35486218b89dbde":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["aba371508186796cc6151d8223a5b4e16d02e26e","c028362918f0b06bbdb243dfd35486218b89dbde","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f09ac0abea5345f77c4cf8d9f0d531da9139debc"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f8d5405ac4f2510f9f83e07236792d1056c19640":["f15795b2193a8dd132f374975d4243687bee9351"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"f15795b2193a8dd132f374975d4243687bee9351":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"f09ac0abea5345f77c4cf8d9f0d531da9139debc":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}