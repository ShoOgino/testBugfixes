{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/SplittingBreakIterator#following(int).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/SplittingBreakIterator#following(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int following(int offset) {\n    // if the offset is not in this slice, update the slice\n    if (offset + 1 < sliceStartIdx || offset + 1 > sliceEndIdx) {\n      if (offset == text.length()) { // DONE condition\n        last(); // because https://bugs.openjdk.java.net/browse/JDK-8015110\n        return DONE;\n      }\n      sliceStartIdx = text.lastIndexOf(sliceChar, offset);//no +1\n      if (sliceStartIdx == -1) {\n        sliceStartIdx = 0;\n      } else {\n        sliceStartIdx++;//move past separator\n      }\n      sliceEndIdx = text.indexOf(sliceChar, Math.max(offset + 1, sliceStartIdx));\n      if (sliceEndIdx == -1) {\n        sliceEndIdx = text.length();\n      }\n      if (sliceStartIdx != sliceEndIdx) {//otherwise, adjacent separator or separator at end\n        baseIter.setText(text.substring(sliceStartIdx, sliceEndIdx));\n      }\n    }\n\n    // lookup following() in this slice:\n    if (sliceStartIdx == sliceEndIdx) {\n      return current = offset + 1;\n    } else {\n      // note: following() can never be first() if the first character is a boundary (it usually is).\n      //   So we have to check if we should call first() instead of following():\n      if (offset == sliceStartIdx - 1) {\n        // the first boundary following this offset is the very first boundary in this slice\n        return current = sliceStartIdx + baseIter.first();\n      } else {\n        return current = sliceStartIdx + baseIter.following(offset - sliceStartIdx);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/SplittingBreakIterator#following(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int following(int offset) {\n    // if the offset is not in this slice, update the slice\n    if (offset + 1 < sliceStartIdx || offset + 1 > sliceEndIdx) {\n      if (offset == text.length()) { // DONE condition\n        last(); // because https://bugs.openjdk.java.net/browse/JDK-8015110\n        return DONE;\n      }\n      sliceStartIdx = text.lastIndexOf(sliceChar, offset);//no +1\n      if (sliceStartIdx == -1) {\n        sliceStartIdx = 0;\n      } else {\n        sliceStartIdx++;//move past separator\n      }\n      sliceEndIdx = text.indexOf(sliceChar, Math.max(offset + 1, sliceStartIdx));\n      if (sliceEndIdx == -1) {\n        sliceEndIdx = text.length();\n      }\n      if (sliceStartIdx != sliceEndIdx) {//otherwise, adjacent separator or separator at end\n        baseIter.setText(text.substring(sliceStartIdx, sliceEndIdx));\n      }\n    }\n\n    // lookup following() in this slice:\n    if (sliceStartIdx == sliceEndIdx) {\n      return current = offset + 1;\n    } else {\n      // note: following() can never be first() if the first character is a boundary (it usually is).\n      //   So we have to check if we should call first() instead of following():\n      if (offset == sliceStartIdx - 1) {\n        // the first boundary following this offset is the very first boundary in this slice\n        return current = sliceStartIdx + baseIter.first();\n      } else {\n        return current = sliceStartIdx + baseIter.following(offset - sliceStartIdx);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}