{"path":"lucene/core/src/java/org/apache/lucene/index/MultiBits#getLiveDocs(IndexReader).mjava","commits":[{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiBits#getLiveDocs(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","sourceNew":"  /** Returns a single {@link Bits} instance for this\n   *  reader, merging live Documents on the\n   *  fly.  This method will return null if the reader\n   *  has no deletions.\n   *\n   *  <p><b>NOTE</b>: this is a very slow way to access live docs.\n   *  For example, each Bits access will require a binary search.\n   *  It's better to get the sub-readers and iterate through them\n   *  yourself. */\n  public static Bits getLiveDocs(IndexReader reader) {\n    if (reader.hasDeletions()) {\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final int size = leaves.size();\n      assert size > 0 : \"A reader with deletions must have at least one leave\";\n      if (size == 1) {\n        return leaves.get(0).reader().getLiveDocs();\n      }\n      final Bits[] liveDocs = new Bits[size];\n      final int[] starts = new int[size + 1];\n      for (int i = 0; i < size; i++) {\n        // record all liveDocs, even if they are null\n        final LeafReaderContext ctx = leaves.get(i);\n        liveDocs[i] = ctx.reader().getLiveDocs();\n        starts[i] = ctx.docBase;\n      }\n      starts[size] = reader.maxDoc();\n      return new MultiBits(liveDocs, starts, true);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Returns a single {@link Bits} instance for this\n   *  reader, merging live Documents on the\n   *  fly.  This method will return null if the reader \n   *  has no deletions.\n   *\n   *  <p><b>NOTE</b>: this is a very slow way to access live docs.\n   *  For example, each Bits access will require a binary search.\n   *  It's better to get the sub-readers and iterate through them\n   *  yourself. */\n  public static Bits getLiveDocs(IndexReader reader) {\n    if (reader.hasDeletions()) {\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final int size = leaves.size();\n      assert size > 0 : \"A reader with deletions must have at least one leave\";\n      if (size == 1) {\n        return leaves.get(0).reader().getLiveDocs();\n      }\n      final Bits[] liveDocs = new Bits[size];\n      final int[] starts = new int[size + 1];\n      for (int i = 0; i < size; i++) {\n        // record all liveDocs, even if they are null\n        final LeafReaderContext ctx = leaves.get(i);\n        liveDocs[i] = ctx.reader().getLiveDocs();\n        starts[i] = ctx.docBase;\n      }\n      starts[size] = reader.maxDoc();\n      return new MultiBits(liveDocs, starts, true);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}