{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","sourceNew":"  public SolrDispatchFilter() {\n    try {\n      adminRequestParser = new SolrRequestParsers(new Config(null,\"solr\",new InputSource(new ByteArrayInputStream(\"<root/>\".getBytes(\"UTF-8\"))),\"\") );\n    } catch (Exception e) {\n      //unlikely\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\n    }\n  }\n\n","sourceOld":"  public SolrDispatchFilter() {\n    try {\n      adminRequestParser = new SolrRequestParsers(new Config(null,\"solr\",new InputSource(new ByteArrayInputStream(\"<root/>\".getBytes(\"UTF-8\"))),\"\") );\n    } catch (Exception e) {\n      //unlikely\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","sourceNew":"  public SolrDispatchFilter() {\n    try {\n      adminRequestParser = new SolrRequestParsers(new Config(null,\"solr\",new InputSource(new ByteArrayInputStream(\"<root/>\".getBytes(\"UTF-8\"))),\"\") );\n    } catch (Exception e) {\n      //unlikely\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\n    }\n  }\n\n","sourceOld":"  public SolrDispatchFilter() {\n    try {\n      adminRequestParser = new SolrRequestParsers(new Config(null,\"solr\",new InputSource(new ByteArrayInputStream(\"<root/>\".getBytes(\"UTF-8\"))),\"\") );\n    } catch (Exception e) {\n      //unlikely\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","sourceNew":"  public SolrDispatchFilter() {\n    try {\n      adminRequestParser = new SolrRequestParsers(new Config(null,\"solr\",new InputSource(new ByteArrayInputStream(\"<root/>\".getBytes(\"UTF-8\"))),\"\") );\n    } catch (Exception e) {\n      //unlikely\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\n    }\n  }\n\n","sourceOld":"  public SolrDispatchFilter() {\n    try {\n      adminRequestParser = new SolrRequestParsers(new Config(null,\"solr\",new InputSource(new ByteArrayInputStream(\"<root/>\".getBytes(\"UTF-8\"))),\"\") );\n    } catch (Exception e) {\n      //unlikely\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d0565444d6381434fbff66cecf07da249f2bb4","date":1357484111,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","sourceNew":null,"sourceOld":"  public SolrDispatchFilter() {\n    try {\n      adminRequestParser = new SolrRequestParsers(new Config(null,\"solr\",new InputSource(new ByteArrayInputStream(\"<root/>\".getBytes(\"UTF-8\"))),\"\") );\n    } catch (Exception e) {\n      //unlikely\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","sourceNew":null,"sourceOld":"  public SolrDispatchFilter() {\n    try {\n      adminRequestParser = new SolrRequestParsers(new Config(null,\"solr\",new InputSource(new ByteArrayInputStream(\"<root/>\".getBytes(\"UTF-8\"))),\"\") );\n    } catch (Exception e) {\n      //unlikely\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"230f475015546562348808ccbf89a441c6f3b061","date":1367005974,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","pathOld":"/dev/null","sourceNew":"  public SolrDispatchFilter() {\n    try {\n      log = LoggerFactory.getLogger(SolrDispatchFilter.class);\n    } catch (NoClassDefFoundError e) {\n      throw new SolrException(\n          ErrorCode.SERVER_ERROR,\n          \"Could not find necessary SLF4j logging jars. If using Jetty, the SLF4j logging jars need to go in \"\n          +\"the jetty lib/ext directory. For other containers, the corresponding directory should be used. \"\n          +\"For more information, see: http://wiki.apache.org/solr/SolrLogging\",\n          e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["be47cd894eae840edc6a5d0832c13ca34dc7feb8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be47cd894eae840edc6a5d0832c13ca34dc7feb8","date":1396481059,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","sourceNew":"  public SolrDispatchFilter() {\n  }\n\n","sourceOld":"  public SolrDispatchFilter() {\n    try {\n      log = LoggerFactory.getLogger(SolrDispatchFilter.class);\n    } catch (NoClassDefFoundError e) {\n      throw new SolrException(\n          ErrorCode.SERVER_ERROR,\n          \"Could not find necessary SLF4j logging jars. If using Jetty, the SLF4j logging jars need to go in \"\n          +\"the jetty lib/ext directory. For other containers, the corresponding directory should be used. \"\n          +\"For more information, see: http://wiki.apache.org/solr/SolrLogging\",\n          e);\n    }\n  }\n\n","bugFix":["230f475015546562348808ccbf89a441c6f3b061"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","sourceNew":"  public SolrDispatchFilter() {\n  }\n\n","sourceOld":"  public SolrDispatchFilter() {\n    try {\n      log = LoggerFactory.getLogger(SolrDispatchFilter.class);\n    } catch (NoClassDefFoundError e) {\n      throw new SolrException(\n          ErrorCode.SERVER_ERROR,\n          \"Could not find necessary SLF4j logging jars. If using Jetty, the SLF4j logging jars need to go in \"\n          +\"the jetty lib/ext directory. For other containers, the corresponding directory should be used. \"\n          +\"For more information, see: http://wiki.apache.org/solr/SolrLogging\",\n          e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521","date":1461254038,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","sourceNew":"  public SolrDispatchFilter() {\n    // turn on test mode when running tests\n    assert testMode = true;\n    \n    if (testMode == null) {\n      testMode = false;\n    } else {\n      String tm = System.getProperty(\"solr.tests.doContainerStreamCloseAssert\");\n      if (tm != null) {\n        testMode = Boolean.parseBoolean(tm);\n      } else {\n        testMode = true;\n      }\n    }\n  }\n\n","sourceOld":"  public SolrDispatchFilter() {\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","sourceNew":"  public SolrDispatchFilter() {\n    // turn on test mode when running tests\n    assert testMode = true;\n    \n    if (testMode == null) {\n      testMode = false;\n    } else {\n      String tm = System.getProperty(\"solr.tests.doContainerStreamCloseAssert\");\n      if (tm != null) {\n        testMode = Boolean.parseBoolean(tm);\n      } else {\n        testMode = true;\n      }\n    }\n  }\n\n","sourceOld":"  public SolrDispatchFilter() {\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac35531329b1809368fb0780bcf1e72d0add3c21","date":1525474926,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#SolrDispatchFilter().mjava","sourceNew":"  public SolrDispatchFilter() {\n  }\n\n","sourceOld":"  public SolrDispatchFilter() {\n    // turn on test mode when running tests\n    assert testMode = true;\n    \n    if (testMode == null) {\n      testMode = false;\n    } else {\n      String tm = System.getProperty(\"solr.tests.doContainerStreamCloseAssert\");\n      if (tm != null) {\n        testMode = Boolean.parseBoolean(tm);\n      } else {\n        testMode = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["230f475015546562348808ccbf89a441c6f3b061","be47cd894eae840edc6a5d0832c13ca34dc7feb8"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","c7d0565444d6381434fbff66cecf07da249f2bb4"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["c26f00b574427b55127e869b935845554afde1fa"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["be47cd894eae840edc6a5d0832c13ca34dc7feb8","26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"ac35531329b1809368fb0780bcf1e72d0add3c21":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"be47cd894eae840edc6a5d0832c13ca34dc7feb8":["230f475015546562348808ccbf89a441c6f3b061"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"230f475015546562348808ccbf89a441c6f3b061":["c7d0565444d6381434fbff66cecf07da249f2bb4"],"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521":["be47cd894eae840edc6a5d0832c13ca34dc7feb8"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac35531329b1809368fb0780bcf1e72d0add3c21"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c7d0565444d6381434fbff66cecf07da249f2bb4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","230f475015546562348808ccbf89a441c6f3b061"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["ac35531329b1809368fb0780bcf1e72d0add3c21"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7d0565444d6381434fbff66cecf07da249f2bb4"],"ac35531329b1809368fb0780bcf1e72d0add3c21":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be47cd894eae840edc6a5d0832c13ca34dc7feb8":["5eb2511ababf862ea11e10761c70ee560cd84510","ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"230f475015546562348808ccbf89a441c6f3b061":["5eb2511ababf862ea11e10761c70ee560cd84510","be47cd894eae840edc6a5d0832c13ca34dc7feb8"],"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}