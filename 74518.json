{"path":"backwards/src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depending on <code>resolution</code>; using GMT as timezone\n   */\n  public static synchronized String timeToString(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(round(time, resolution));\n    Date date = calInstance.getTime();\n    \n    if (resolution == Resolution.YEAR) {\n      return YEAR_FORMAT.format(date);\n    } else if (resolution == Resolution.MONTH) {\n      return MONTH_FORMAT.format(date);\n    } else if (resolution == Resolution.DAY) {\n      return DAY_FORMAT.format(date);\n    } else if (resolution == Resolution.HOUR) {\n      return HOUR_FORMAT.format(date);\n    } else if (resolution == Resolution.MINUTE) {\n      return MINUTE_FORMAT.format(date);\n    } else if (resolution == Resolution.SECOND) {\n      return SECOND_FORMAT.format(date);\n    } else if (resolution == Resolution.MILLISECOND) {\n      return MILLISECOND_FORMAT.format(date);\n    }\n    \n    throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depending on <code>resolution</code>; using GMT as timezone\n   */\n  public static synchronized String timeToString(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(round(time, resolution));\n    Date date = calInstance.getTime();\n    \n    if (resolution == Resolution.YEAR) {\n      return YEAR_FORMAT.format(date);\n    } else if (resolution == Resolution.MONTH) {\n      return MONTH_FORMAT.format(date);\n    } else if (resolution == Resolution.DAY) {\n      return DAY_FORMAT.format(date);\n    } else if (resolution == Resolution.HOUR) {\n      return HOUR_FORMAT.format(date);\n    } else if (resolution == Resolution.MINUTE) {\n      return MINUTE_FORMAT.format(date);\n    } else if (resolution == Resolution.SECOND) {\n      return SECOND_FORMAT.format(date);\n    } else if (resolution == Resolution.MILLISECOND) {\n      return MILLISECOND_FORMAT.format(date);\n    }\n    \n    throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depending on <code>resolution</code>; using GMT as timezone\n   */\n  public static synchronized String timeToString(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(round(time, resolution));\n    Date date = calInstance.getTime();\n    \n    if (resolution == Resolution.YEAR) {\n      return YEAR_FORMAT.format(date);\n    } else if (resolution == Resolution.MONTH) {\n      return MONTH_FORMAT.format(date);\n    } else if (resolution == Resolution.DAY) {\n      return DAY_FORMAT.format(date);\n    } else if (resolution == Resolution.HOUR) {\n      return HOUR_FORMAT.format(date);\n    } else if (resolution == Resolution.MINUTE) {\n      return MINUTE_FORMAT.format(date);\n    } else if (resolution == Resolution.SECOND) {\n      return SECOND_FORMAT.format(date);\n    } else if (resolution == Resolution.MILLISECOND) {\n      return MILLISECOND_FORMAT.format(date);\n    }\n    \n    throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depending on <code>resolution</code>; using GMT as timezone\n   */\n  public static synchronized String timeToString(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(round(time, resolution));\n    Date date = calInstance.getTime();\n    \n    if (resolution == Resolution.YEAR) {\n      return YEAR_FORMAT.format(date);\n    } else if (resolution == Resolution.MONTH) {\n      return MONTH_FORMAT.format(date);\n    } else if (resolution == Resolution.DAY) {\n      return DAY_FORMAT.format(date);\n    } else if (resolution == Resolution.HOUR) {\n      return HOUR_FORMAT.format(date);\n    } else if (resolution == Resolution.MINUTE) {\n      return MINUTE_FORMAT.format(date);\n    } else if (resolution == Resolution.SECOND) {\n      return SECOND_FORMAT.format(date);\n    } else if (resolution == Resolution.MILLISECOND) {\n      return MILLISECOND_FORMAT.format(date);\n    }\n    \n    throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depending on <code>resolution</code>; using GMT as timezone\n   */\n  public static synchronized String timeToString(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(round(time, resolution));\n    Date date = calInstance.getTime();\n    \n    if (resolution == Resolution.YEAR) {\n      return YEAR_FORMAT.format(date);\n    } else if (resolution == Resolution.MONTH) {\n      return MONTH_FORMAT.format(date);\n    } else if (resolution == Resolution.DAY) {\n      return DAY_FORMAT.format(date);\n    } else if (resolution == Resolution.HOUR) {\n      return HOUR_FORMAT.format(date);\n    } else if (resolution == Resolution.MINUTE) {\n      return MINUTE_FORMAT.format(date);\n    } else if (resolution == Resolution.SECOND) {\n      return SECOND_FORMAT.format(date);\n    } else if (resolution == Resolution.MILLISECOND) {\n      return MILLISECOND_FORMAT.format(date);\n    }\n    \n    throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}