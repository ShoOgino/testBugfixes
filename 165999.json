{"path":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testBoost().mjava","commits":[{"id":"b46574f1283bd72a3f5d401f2e93b1d24c905c73","date":1369742953,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testBoost().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBoost() {\n    // Simple term query\n    q = parse(\"foo^3.0\");\n    assertEquals(3.0, q.getBoost(), 1e-15);\n\n    // Some DMQ and one plain required\n    q = parse(\"foo^5.0 bar^6.0 +baz^7\");\n    clauses = clauses(q);\n    assertEquals(2, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    float fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().get(0).getQuery().getBoost();\n    assertEquals(5.0, fooClause, 1e-15);\n    float barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().get(0).getQuery().getBoost();\n    assertEquals(6.0, barClause, 1e-15);\n    assertEquals(7.0, clauses[1].getQuery().getBoost(), 1e-15);\n    assertEquals(1.0, q.getBoost(), 1e-15);\n\n    // Grouped with parens on top level\n    q = parse(\"(foo^2.0 bar)^3.0\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().get(0).getQuery().getBoost();\n    assertEquals(2.0, fooClause, 1e-15);\n    barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().get(0).getQuery().getBoost();\n    assertEquals(1.0, barClause, 1e-15);\n    assertEquals(3.0, q.getBoost(), 1e-15);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testBoost().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() {\n    // Simple term query\n    q = parse(\"foo^3.0\");\n    assertEquals(3.0, q.getBoost(), 1e-15);\n\n    // Some DMQ and one plain required\n    q = parse(\"foo^5.0 bar^6.0 +baz^7\");\n    clauses = clauses(q);\n    assertEquals(2, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    float fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(5.0, fooClause, 1e-15);\n    float barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(6.0, barClause, 1e-15);\n    assertEquals(7.0, clauses[1].getQuery().getBoost(), 1e-15);\n    assertEquals(1.0, q.getBoost(), 1e-15);\n\n    // Grouped with parens on top level\n    q = parse(\"(foo^2.0 bar)^3.0\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(2.0, fooClause, 1e-15);\n    barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(1.0, barClause, 1e-15);\n    assertEquals(3.0, q.getBoost(), 1e-15);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() {\n    // Simple term query\n    q = parse(\"foo^3.0\");\n    assertEquals(3.0, q.getBoost(), 1e-15);\n\n    // Some DMQ and one plain required\n    q = parse(\"foo^5.0 bar^6.0 +baz^7\");\n    clauses = clauses(q);\n    assertEquals(2, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    float fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().get(0).getQuery().getBoost();\n    assertEquals(5.0, fooClause, 1e-15);\n    float barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().get(0).getQuery().getBoost();\n    assertEquals(6.0, barClause, 1e-15);\n    assertEquals(7.0, clauses[1].getQuery().getBoost(), 1e-15);\n    assertEquals(1.0, q.getBoost(), 1e-15);\n\n    // Grouped with parens on top level\n    q = parse(\"(foo^2.0 bar)^3.0\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().get(0).getQuery().getBoost();\n    assertEquals(2.0, fooClause, 1e-15);\n    barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().get(0).getQuery().getBoost();\n    assertEquals(1.0, barClause, 1e-15);\n    assertEquals(3.0, q.getBoost(), 1e-15);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testBoost().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() {\n    // Simple term query\n    q = parse(\"foo^3.0\");\n    assertTrue(q instanceof BoostQuery);\n    assertEquals(3.0, ((BoostQuery) q).getBoost(), 1e-15);\n\n    // Some DMQ and one plain required\n    q = parse(\"foo^5.0 bar^6.0 +baz^7\");\n    clauses = clauses(q);\n    assertEquals(2, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    Query fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery();\n    assertEquals(5.0, ((BoostQuery) fooClause).getBoost(), 1e-15);\n    Query barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery();\n    assertEquals(6.0, ((BoostQuery) barClause).getBoost(), 1e-15);\n    assertEquals(7.0, ((BoostQuery) clauses[1].getQuery()).getBoost(), 1e-15);\n    assertFalse(q instanceof BoostQuery);\n\n    // Grouped with parens on top level\n    q = parse(\"(foo^2.0 bar)^3.0\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery();\n    assertEquals(2.0, ((BoostQuery) fooClause).getBoost(), 1e-15);\n    barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery();\n    assertFalse(barClause instanceof BoostQuery);\n    assertEquals(3.0, ((BoostQuery) q).getBoost(), 1e-15);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() {\n    // Simple term query\n    q = parse(\"foo^3.0\");\n    assertEquals(3.0, q.getBoost(), 1e-15);\n\n    // Some DMQ and one plain required\n    q = parse(\"foo^5.0 bar^6.0 +baz^7\");\n    clauses = clauses(q);\n    assertEquals(2, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    float fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(5.0, fooClause, 1e-15);\n    float barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(6.0, barClause, 1e-15);\n    assertEquals(7.0, clauses[1].getQuery().getBoost(), 1e-15);\n    assertEquals(1.0, q.getBoost(), 1e-15);\n\n    // Grouped with parens on top level\n    q = parse(\"(foo^2.0 bar)^3.0\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(2.0, fooClause, 1e-15);\n    barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(1.0, barClause, 1e-15);\n    assertEquals(3.0, q.getBoost(), 1e-15);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b46574f1283bd72a3f5d401f2e93b1d24c905c73"],"b46574f1283bd72a3f5d401f2e93b1d24c905c73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b46574f1283bd72a3f5d401f2e93b1d24c905c73":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b46574f1283bd72a3f5d401f2e93b1d24c905c73"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}