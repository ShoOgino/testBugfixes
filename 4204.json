{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#assertOperation(Map[String,Shape],SpatialOperation,Shape).mjava","commits":[{"id":"e7b27dde701ae80df8bea8eb554d31e4e8bc6126","date":1354814363,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#assertOperation(Map[String,Shape],SpatialOperation,Shape).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertOperation(Map<String,Shape> indexedDocs,\n                                 SpatialOperation operation, Shape queryShape) {\n    //Generate truth via brute force\n    Set<String> expectedIds = new HashSet<String>();\n    for (Map.Entry<String, Shape> stringShapeEntry : indexedDocs.entrySet()) {\n      if (operation.evaluate(stringShapeEntry.getValue(), queryShape))\n        expectedIds.add(stringShapeEntry.getKey());\n    }\n\n    SpatialTestQuery testQuery = new SpatialTestQuery();\n    testQuery.args = new SpatialArgs(operation, queryShape);\n    testQuery.ids = new ArrayList<String>(expectedIds);\n    runTestQuery(SpatialMatchConcern.FILTER, testQuery);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#assertOperation(Map[String,Shape],SpatialOperation,Shape).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertOperation(Map<String,Shape> indexedDocs,\n                                 SpatialOperation operation, Shape queryShape) {\n    //Generate truth via brute force\n    Set<String> expectedIds = new HashSet<String>();\n    for (Map.Entry<String, Shape> stringShapeEntry : indexedDocs.entrySet()) {\n      if (operation.evaluate(stringShapeEntry.getValue(), queryShape))\n        expectedIds.add(stringShapeEntry.getKey());\n    }\n\n    SpatialTestQuery testQuery = new SpatialTestQuery();\n    testQuery.args = new SpatialArgs(operation, queryShape);\n    testQuery.ids = new ArrayList<String>(expectedIds);\n    runTestQuery(SpatialMatchConcern.FILTER, testQuery);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#assertOperation(Map[String,Shape],SpatialOperation,Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#assertOperation(Map[String,Shape],SpatialOperation,Shape).mjava","sourceNew":"  protected void assertOperation(Map<String,Shape> indexedDocs,\n                                 SpatialOperation operation, Shape queryShape) {\n    //Generate truth via brute force\n    Set<String> expectedIds = new HashSet<>();\n    for (Map.Entry<String, Shape> stringShapeEntry : indexedDocs.entrySet()) {\n      if (operation.evaluate(stringShapeEntry.getValue(), queryShape))\n        expectedIds.add(stringShapeEntry.getKey());\n    }\n\n    SpatialTestQuery testQuery = new SpatialTestQuery();\n    testQuery.args = new SpatialArgs(operation, queryShape);\n    testQuery.ids = new ArrayList<>(expectedIds);\n    runTestQuery(SpatialMatchConcern.FILTER, testQuery);\n  }\n\n","sourceOld":"  protected void assertOperation(Map<String,Shape> indexedDocs,\n                                 SpatialOperation operation, Shape queryShape) {\n    //Generate truth via brute force\n    Set<String> expectedIds = new HashSet<String>();\n    for (Map.Entry<String, Shape> stringShapeEntry : indexedDocs.entrySet()) {\n      if (operation.evaluate(stringShapeEntry.getValue(), queryShape))\n        expectedIds.add(stringShapeEntry.getKey());\n    }\n\n    SpatialTestQuery testQuery = new SpatialTestQuery();\n    testQuery.args = new SpatialArgs(operation, queryShape);\n    testQuery.ids = new ArrayList<String>(expectedIds);\n    runTestQuery(SpatialMatchConcern.FILTER, testQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#assertOperation(Map[String,Shape],SpatialOperation,Shape).mjava","sourceNew":null,"sourceOld":"  protected void assertOperation(Map<String,Shape> indexedDocs,\n                                 SpatialOperation operation, Shape queryShape) {\n    //Generate truth via brute force\n    Set<String> expectedIds = new HashSet<>();\n    for (Map.Entry<String, Shape> stringShapeEntry : indexedDocs.entrySet()) {\n      if (operation.evaluate(stringShapeEntry.getValue(), queryShape))\n        expectedIds.add(stringShapeEntry.getKey());\n    }\n\n    SpatialTestQuery testQuery = new SpatialTestQuery();\n    testQuery.args = new SpatialArgs(operation, queryShape);\n    testQuery.ids = new ArrayList<>(expectedIds);\n    runTestQuery(SpatialMatchConcern.FILTER, testQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b27dde701ae80df8bea8eb554d31e4e8bc6126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e7b27dde701ae80df8bea8eb554d31e4e8bc6126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7b27dde701ae80df8bea8eb554d31e4e8bc6126"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"]},"commit2Childs":{"e7b27dde701ae80df8bea8eb554d31e4e8bc6126":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7b27dde701ae80df8bea8eb554d31e4e8bc6126","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}