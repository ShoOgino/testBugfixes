{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        if(rewrittenQuery!=null)\n        {\n            return rewrittenQuery;\n        }\n        //load up the list of possible terms\n        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext();)\n\t\t{\n\t\t\tFieldVals f = iter.next();\n\t\t\taddTerms(reader,f);\t\t\t\n\t\t}\n        //clear the list of fields\n        fieldVals.clear();\n        \n        BooleanQuery bq=new BooleanQuery();\n        \n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<Term,ArrayList<ScoreTerm>>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<ScoreTerm>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);\n                tq.setBoost(st.score); // set the boost to a mix of IDF and score\n                bq.add(tq, BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery termVariants=new BooleanQuery(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);                    \n                    tq.setBoost(st.score); // set the boost using the ScoreTerm's score\n                    termVariants.add(tq, BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants, BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        bq.setBoost(getBoost());\n        this.rewrittenQuery=bq;\n        return bq;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        if(rewrittenQuery!=null)\n        {\n            return rewrittenQuery;\n        }\n        //load up the list of possible terms\n        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext();)\n\t\t{\n\t\t\tFieldVals f = iter.next();\n\t\t\taddTerms(reader,f);\t\t\t\n\t\t}\n        //clear the list of fields\n        fieldVals.clear();\n        \n        BooleanQuery bq=new BooleanQuery();\n        \n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<Term,ArrayList<ScoreTerm>>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<ScoreTerm>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);\n                tq.setBoost(st.score); // set the boost to a mix of IDF and score\n                bq.add(tq, BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery termVariants=new BooleanQuery(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);                    \n                    tq.setBoost(st.score); // set the boost using the ScoreTerm's score\n                    termVariants.add(tq, BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants, BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        bq.setBoost(getBoost());\n        this.rewrittenQuery=bq;\n        return bq;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        if(rewrittenQuery!=null)\n        {\n            return rewrittenQuery;\n        }\n        //load up the list of possible terms\n        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext(); ) {\n          FieldVals f = iter.next();\n          addTerms(reader, f);\n        }\n      //clear the list of fields\n        fieldVals.clear();\n        \n        BooleanQuery bq=new BooleanQuery();\n        \n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<Term,ArrayList<ScoreTerm>>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<ScoreTerm>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);\n                tq.setBoost(st.score); // set the boost to a mix of IDF and score\n                bq.add(tq, BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery termVariants=new BooleanQuery(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);                    \n                    tq.setBoost(st.score); // set the boost using the ScoreTerm's score\n                    termVariants.add(tq, BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants, BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        bq.setBoost(getBoost());\n        this.rewrittenQuery=bq;\n        return bq;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        if(rewrittenQuery!=null)\n        {\n            return rewrittenQuery;\n        }\n        //load up the list of possible terms\n        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext();)\n\t\t{\n\t\t\tFieldVals f = iter.next();\n\t\t\taddTerms(reader,f);\t\t\t\n\t\t}\n        //clear the list of fields\n        fieldVals.clear();\n        \n        BooleanQuery bq=new BooleanQuery();\n        \n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<Term,ArrayList<ScoreTerm>>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<ScoreTerm>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);\n                tq.setBoost(st.score); // set the boost to a mix of IDF and score\n                bq.add(tq, BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery termVariants=new BooleanQuery(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);                    \n                    tq.setBoost(st.score); // set the boost using the ScoreTerm's score\n                    termVariants.add(tq, BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants, BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        bq.setBoost(getBoost());\n        this.rewrittenQuery=bq;\n        return bq;\n    }\n\n","bugFix":null,"bugIntro":["683697c94be5a13ed67b070f48f5c5499ee8f6ea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        if(rewrittenQuery!=null)\n        {\n            return rewrittenQuery;\n        }\n        //load up the list of possible terms\n        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext(); ) {\n          FieldVals f = iter.next();\n          addTerms(reader, f);\n        }\n      //clear the list of fields\n        fieldVals.clear();\n        \n        BooleanQuery bq=new BooleanQuery();\n        \n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);\n                tq.setBoost(st.score); // set the boost to a mix of IDF and score\n                bq.add(tq, BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery termVariants=new BooleanQuery(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);                    \n                    tq.setBoost(st.score); // set the boost using the ScoreTerm's score\n                    termVariants.add(tq, BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants, BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        bq.setBoost(getBoost());\n        this.rewrittenQuery=bq;\n        return bq;\n    }\n\n","sourceOld":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        if(rewrittenQuery!=null)\n        {\n            return rewrittenQuery;\n        }\n        //load up the list of possible terms\n        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext(); ) {\n          FieldVals f = iter.next();\n          addTerms(reader, f);\n        }\n      //clear the list of fields\n        fieldVals.clear();\n        \n        BooleanQuery bq=new BooleanQuery();\n        \n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<Term,ArrayList<ScoreTerm>>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<ScoreTerm>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);\n                tq.setBoost(st.score); // set the boost to a mix of IDF and score\n                bq.add(tq, BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery termVariants=new BooleanQuery(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);                    \n                    tq.setBoost(st.score); // set the boost using the ScoreTerm's score\n                    termVariants.add(tq, BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants, BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        bq.setBoost(getBoost());\n        this.rewrittenQuery=bq;\n        return bq;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"365f98746545c0785c9778597f8558f5f91db4ad","date":1429195989,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        if(rewrittenQuery!=null)\n        {\n            return rewrittenQuery;\n        }\n        //load up the list of possible terms\n        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext(); ) {\n          FieldVals f = iter.next();\n          addTerms(reader, f);\n        }\n      //clear the list of fields\n        fieldVals.clear();\n        \n        BooleanQuery bq=new BooleanQuery();\n        \n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = newTermQuery(reader, st.term);\n                tq.setBoost(st.score); // set the boost to a mix of IDF and score\n                bq.add(tq, BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery termVariants=new BooleanQuery(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = newTermQuery(reader, st.term);\n                    tq.setBoost(st.score); // set the boost using the ScoreTerm's score\n                    termVariants.add(tq, BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants, BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        bq.setBoost(getBoost());\n        this.rewrittenQuery=bq;\n        return bq;\n    }\n\n","sourceOld":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        if(rewrittenQuery!=null)\n        {\n            return rewrittenQuery;\n        }\n        //load up the list of possible terms\n        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext(); ) {\n          FieldVals f = iter.next();\n          addTerms(reader, f);\n        }\n      //clear the list of fields\n        fieldVals.clear();\n        \n        BooleanQuery bq=new BooleanQuery();\n        \n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);\n                tq.setBoost(st.score); // set the boost to a mix of IDF and score\n                bq.add(tq, BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery termVariants=new BooleanQuery(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = ignoreTF ? new ConstantScoreQuery(new TermQuery(st.term)) : new TermQuery(st.term, 1);                    \n                    tq.setBoost(st.score); // set the boost using the ScoreTerm's score\n                    termVariants.add(tq, BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants, BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        bq.setBoost(getBoost());\n        this.rewrittenQuery=bq;\n        return bq;\n    }\n\n","bugFix":["3e00f80591de714c6975f454e33e0fa5218b5902"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        if(rewrittenQuery!=null)\n        {\n            return rewrittenQuery;\n        }\n        //load up the list of possible terms\n        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext(); ) {\n          FieldVals f = iter.next();\n          addTerms(reader, f);\n        }\n      //clear the list of fields\n        fieldVals.clear();\n        \n        BooleanQuery.Builder bq=new BooleanQuery.Builder();\n        \n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = newTermQuery(reader, st.term);\n                tq.setBoost(st.score); // set the boost to a mix of IDF and score\n                bq.add(tq, BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n                termVariants.setDisableCoord(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = newTermQuery(reader, st.term);\n                    tq.setBoost(st.score); // set the boost using the ScoreTerm's score\n                    termVariants.add(tq, BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        Query q = bq.build();\n        q.setBoost(getBoost());\n        this.rewrittenQuery=q;\n        return q;\n    }\n\n","sourceOld":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        if(rewrittenQuery!=null)\n        {\n            return rewrittenQuery;\n        }\n        //load up the list of possible terms\n        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext(); ) {\n          FieldVals f = iter.next();\n          addTerms(reader, f);\n        }\n      //clear the list of fields\n        fieldVals.clear();\n        \n        BooleanQuery bq=new BooleanQuery();\n        \n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = newTermQuery(reader, st.term);\n                tq.setBoost(st.score); // set the boost to a mix of IDF and score\n                bq.add(tq, BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery termVariants=new BooleanQuery(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = newTermQuery(reader, st.term);\n                    tq.setBoost(st.score); // set the boost using the ScoreTerm's score\n                    termVariants.add(tq, BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants, BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        bq.setBoost(getBoost());\n        this.rewrittenQuery=bq;\n        return bq;\n    }\n\n","bugFix":null,"bugIntro":["683697c94be5a13ed67b070f48f5c5499ee8f6ea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        if(rewrittenQuery!=null)\n        {\n            return rewrittenQuery;\n        }\n        //load up the list of possible terms\n        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext(); ) {\n          FieldVals f = iter.next();\n          addTerms(reader, f);\n        }\n      //clear the list of fields\n        fieldVals.clear();\n        \n        BooleanQuery.Builder bq=new BooleanQuery.Builder();\n        \n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = newTermQuery(reader, st.term);\n                // set the boost to a mix of IDF and score\n                bq.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n                termVariants.setDisableCoord(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = newTermQuery(reader, st.term);\n                    // set the boost using the ScoreTerm's score\n                    termVariants.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        Query q = bq.build();\n        this.rewrittenQuery=q;\n        return q;\n    }\n\n","sourceOld":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        if(rewrittenQuery!=null)\n        {\n            return rewrittenQuery;\n        }\n        //load up the list of possible terms\n        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext(); ) {\n          FieldVals f = iter.next();\n          addTerms(reader, f);\n        }\n      //clear the list of fields\n        fieldVals.clear();\n        \n        BooleanQuery.Builder bq=new BooleanQuery.Builder();\n        \n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = newTermQuery(reader, st.term);\n                tq.setBoost(st.score); // set the boost to a mix of IDF and score\n                bq.add(tq, BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n                termVariants.setDisableCoord(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = newTermQuery(reader, st.term);\n                    tq.setBoost(st.score); // set the boost using the ScoreTerm's score\n                    termVariants.add(tq, BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        Query q = bq.build();\n        q.setBoost(getBoost());\n        this.rewrittenQuery=q;\n        return q;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"683697c94be5a13ed67b070f48f5c5499ee8f6ea","date":1441704970,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        ScoreTermQueue q = new ScoreTermQueue(maxNumTerms);\n        //load up the list of possible terms\n        for (FieldVals f : fieldVals) {\n          addTerms(reader, f, q);\n        }\n        \n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = newTermQuery(reader, st.term);\n                // set the boost to a mix of IDF and score\n                bq.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n                termVariants.setDisableCoord(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = newTermQuery(reader, st.term);\n                    // set the boost using the ScoreTerm's score\n                    termVariants.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        return bq.build();\n    }\n\n","sourceOld":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        if(rewrittenQuery!=null)\n        {\n            return rewrittenQuery;\n        }\n        //load up the list of possible terms\n        for (Iterator<FieldVals> iter = fieldVals.iterator(); iter.hasNext(); ) {\n          FieldVals f = iter.next();\n          addTerms(reader, f);\n        }\n      //clear the list of fields\n        fieldVals.clear();\n        \n        BooleanQuery.Builder bq=new BooleanQuery.Builder();\n        \n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = newTermQuery(reader, st.term);\n                // set the boost to a mix of IDF and score\n                bq.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n                termVariants.setDisableCoord(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = newTermQuery(reader, st.term);\n                    // set the boost using the ScoreTerm's score\n                    termVariants.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        Query q = bq.build();\n        this.rewrittenQuery=q;\n        return q;\n    }\n\n","bugFix":["6a361a621b184d9b73c9c9a37323a9845b8f8260","3f68d01cf19df971dcdcb05e30247f4ad7ec9747","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        ScoreTermQueue q = new ScoreTermQueue(maxNumTerms);\n        //load up the list of possible terms\n        for (FieldVals f : fieldVals) {\n          addTerms(reader, f, q);\n        }\n        \n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = newTermQuery(reader, st.term);\n                // set the boost to a mix of IDF and score\n                bq.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = newTermQuery(reader, st.term);\n                    // set the boost using the ScoreTerm's score\n                    termVariants.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        return bq.build();\n    }\n\n","sourceOld":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        ScoreTermQueue q = new ScoreTermQueue(maxNumTerms);\n        //load up the list of possible terms\n        for (FieldVals f : fieldVals) {\n          addTerms(reader, f, q);\n        }\n        \n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = newTermQuery(reader, st.term);\n                // set the boost to a mix of IDF and score\n                bq.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n                termVariants.setDisableCoord(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = newTermQuery(reader, st.term);\n                    // set the boost using the ScoreTerm's score\n                    termVariants.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        return bq.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException\n  {\n    ScoreTermQueue q = new ScoreTermQueue(maxNumTerms);\n    //load up the list of possible terms\n    for (FieldVals f : fieldVals) {\n      addTerms(reader, f, q);\n    }\n        \n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        \n    //create BooleanQueries to hold the variants for each token/field pair and ensure it\n    // has no coord factor\n    //Step 1: sort the termqueries by term/field\n    HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n    int size = q.size();\n    for(int i = 0; i < size; i++)\n      {\n        ScoreTerm st = q.pop();\n        ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n        if(l==null)\n          {\n            l=new ArrayList<>();\n            variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n        l.add(st);\n      }\n    //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n    for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n      {\n        ArrayList<ScoreTerm> variants = iter.next();\n        if(variants.size()==1)\n          {\n            //optimize where only one selected variant\n            ScoreTerm st= variants.get(0);\n            Query tq = newTermQuery(reader, st.term);\n            // set the boost to a mix of IDF and score\n            bq.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD); \n          }\n        else\n          {\n            BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n            for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                   .hasNext();)\n              {\n                ScoreTerm st = iterator2.next();\n                // found a match\n                Query tq = newTermQuery(reader, st.term);\n                // set the boost using the ScoreTerm's score\n                termVariants.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD);          // add to query                    \n              }\n            bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n          }\n      }\n    //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n    // booleans with a minimum-should-match of NumFields-1?\n    return bq.build();\n  }\n\n","sourceOld":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        ScoreTermQueue q = new ScoreTermQueue(maxNumTerms);\n        //load up the list of possible terms\n        for (FieldVals f : fieldVals) {\n          addTerms(reader, f, q);\n        }\n        \n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = newTermQuery(reader, st.term);\n                // set the boost to a mix of IDF and score\n                bq.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = newTermQuery(reader, st.term);\n                    // set the boost using the ScoreTerm's score\n                    termVariants.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        return bq.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException\n  {\n    ScoreTermQueue q = new ScoreTermQueue(maxNumTerms);\n    //load up the list of possible terms\n    for (FieldVals f : fieldVals) {\n      addTerms(reader, f, q);\n    }\n        \n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        \n    //create BooleanQueries to hold the variants for each token/field pair and ensure it\n    // has no coord factor\n    //Step 1: sort the termqueries by term/field\n    HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n    int size = q.size();\n    for(int i = 0; i < size; i++)\n      {\n        ScoreTerm st = q.pop();\n        ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n        if(l==null)\n          {\n            l=new ArrayList<>();\n            variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n        l.add(st);\n      }\n    //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n    for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n      {\n        ArrayList<ScoreTerm> variants = iter.next();\n        if(variants.size()==1)\n          {\n            //optimize where only one selected variant\n            ScoreTerm st= variants.get(0);\n            Query tq = newTermQuery(reader, st.term);\n            // set the boost to a mix of IDF and score\n            bq.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD); \n          }\n        else\n          {\n            BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n            for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                   .hasNext();)\n              {\n                ScoreTerm st = iterator2.next();\n                // found a match\n                Query tq = newTermQuery(reader, st.term);\n                // set the boost using the ScoreTerm's score\n                termVariants.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD);          // add to query                    \n              }\n            bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n          }\n      }\n    //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n    // booleans with a minimum-should-match of NumFields-1?\n    return bq.build();\n  }\n\n","sourceOld":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        ScoreTermQueue q = new ScoreTermQueue(maxNumTerms);\n        //load up the list of possible terms\n        for (FieldVals f : fieldVals) {\n          addTerms(reader, f, q);\n        }\n        \n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = newTermQuery(reader, st.term);\n                // set the boost to a mix of IDF and score\n                bq.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = newTermQuery(reader, st.term);\n                    // set the boost using the ScoreTerm's score\n                    termVariants.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        return bq.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException\n  {\n    ScoreTermQueue q = new ScoreTermQueue(maxNumTerms);\n    //load up the list of possible terms\n    for (FieldVals f : fieldVals) {\n      addTerms(reader, f, q);\n    }\n        \n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        \n    //create BooleanQueries to hold the variants for each token/field pair and ensure it\n    // has no coord factor\n    //Step 1: sort the termqueries by term/field\n    HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n    int size = q.size();\n    for(int i = 0; i < size; i++)\n      {\n        ScoreTerm st = q.pop();\n        ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n        if(l==null)\n          {\n            l=new ArrayList<>();\n            variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n        l.add(st);\n      }\n    //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n    for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n      {\n        ArrayList<ScoreTerm> variants = iter.next();\n        if(variants.size()==1)\n          {\n            //optimize where only one selected variant\n            ScoreTerm st= variants.get(0);\n            Query tq = newTermQuery(reader, st.term);\n            // set the boost to a mix of IDF and score\n            bq.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD); \n          }\n        else\n          {\n            BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n            for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                   .hasNext();)\n              {\n                ScoreTerm st = iterator2.next();\n                // found a match\n                Query tq = newTermQuery(reader, st.term);\n                // set the boost using the ScoreTerm's score\n                termVariants.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD);          // add to query                    \n              }\n            bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n          }\n      }\n    //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n    // booleans with a minimum-should-match of NumFields-1?\n    return bq.build();\n  }\n\n","sourceOld":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        ScoreTermQueue q = new ScoreTermQueue(maxNumTerms);\n        //load up the list of possible terms\n        for (FieldVals f : fieldVals) {\n          addTerms(reader, f, q);\n        }\n        \n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = newTermQuery(reader, st.term);\n                // set the boost to a mix of IDF and score\n                bq.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = newTermQuery(reader, st.term);\n                    // set the boost using the ScoreTerm's score\n                    termVariants.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        return bq.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException\n  {\n    ScoreTermQueue q = new ScoreTermQueue(maxNumTerms);\n    //load up the list of possible terms\n    for (FieldVals f : fieldVals) {\n      addTerms(reader, f, q);\n    }\n        \n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        \n    //create BooleanQueries to hold the variants for each token/field pair and ensure it\n    // has no coord factor\n    //Step 1: sort the termqueries by term/field\n    HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n    int size = q.size();\n    for(int i = 0; i < size; i++)\n      {\n        ScoreTerm st = q.pop();\n        ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n        if(l==null)\n          {\n            l=new ArrayList<>();\n            variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n        l.add(st);\n      }\n    //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n    for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n      {\n        ArrayList<ScoreTerm> variants = iter.next();\n        if(variants.size()==1)\n          {\n            //optimize where only one selected variant\n            ScoreTerm st= variants.get(0);\n            Query tq = newTermQuery(reader, st.term);\n            // set the boost to a mix of IDF and score\n            bq.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD); \n          }\n        else\n          {\n            BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n            for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                   .hasNext();)\n              {\n                ScoreTerm st = iterator2.next();\n                // found a match\n                Query tq = newTermQuery(reader, st.term);\n                // set the boost using the ScoreTerm's score\n                termVariants.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD);          // add to query                    \n              }\n            bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n          }\n      }\n    //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n    // booleans with a minimum-should-match of NumFields-1?\n    return bq.build();\n  }\n\n","sourceOld":"  @Override\n    public Query rewrite(IndexReader reader) throws IOException\n    {\n        ScoreTermQueue q = new ScoreTermQueue(maxNumTerms);\n        //load up the list of possible terms\n        for (FieldVals f : fieldVals) {\n          addTerms(reader, f, q);\n        }\n        \n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        \n        //create BooleanQueries to hold the variants for each token/field pair and ensure it\n        // has no coord factor\n        //Step 1: sort the termqueries by term/field\n        HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<>();\n        int size = q.size();\n        for(int i = 0; i < size; i++)\n        {\n          ScoreTerm st = q.pop();\n          ArrayList<ScoreTerm> l= variantQueries.get(st.fuzziedSourceTerm);\n          if(l==null)\n          {\n              l=new ArrayList<>();\n              variantQueries.put(st.fuzziedSourceTerm,l);\n          }\n          l.add(st);\n        }\n        //Step 2: Organize the sorted termqueries into zero-coord scoring boolean queries\n        for (Iterator<ArrayList<ScoreTerm>> iter = variantQueries.values().iterator(); iter.hasNext();)\n        {\n            ArrayList<ScoreTerm> variants = iter.next();\n            if(variants.size()==1)\n            {\n                //optimize where only one selected variant\n                ScoreTerm st= variants.get(0);\n                Query tq = newTermQuery(reader, st.term);\n                // set the boost to a mix of IDF and score\n                bq.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD); \n            }\n            else\n            {\n                BooleanQuery.Builder termVariants=new BooleanQuery.Builder();\n                termVariants.setDisableCoord(true); //disable coord and IDF for these term variants\n                for (Iterator<ScoreTerm> iterator2 = variants.iterator(); iterator2\n                        .hasNext();)\n                {\n                    ScoreTerm st = iterator2.next();\n                    // found a match\n                    Query tq = newTermQuery(reader, st.term);\n                    // set the boost using the ScoreTerm's score\n                    termVariants.add(new BoostQuery(tq, st.score), BooleanClause.Occur.SHOULD);          // add to query                    \n                }\n                bq.add(termVariants.build(), BooleanClause.Occur.SHOULD);          // add to query\n            }\n        }\n        //TODO possible alternative step 3 - organize above booleans into a new layer of field-based\n        // booleans with a minimum-should-match of NumFields-1?\n        return bq.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"365f98746545c0785c9778597f8558f5f91db4ad":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["c8a0e442f7b61f811680273b25da95994a724466"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["683697c94be5a13ed67b070f48f5c5499ee8f6ea","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["c8a0e442f7b61f811680273b25da95994a724466","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["365f98746545c0785c9778597f8558f5f91db4ad"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"683697c94be5a13ed67b070f48f5c5499ee8f6ea":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c8a0e442f7b61f811680273b25da95994a724466","89424def13674ea17829b41c5883c54ecc31a132"],"c8a0e442f7b61f811680273b25da95994a724466":["683697c94be5a13ed67b070f48f5c5499ee8f6ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["365f98746545c0785c9778597f8558f5f91db4ad"],"365f98746545c0785c9778597f8558f5f91db4ad":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["683697c94be5a13ed67b070f48f5c5499ee8f6ea"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"683697c94be5a13ed67b070f48f5c5499ee8f6ea":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c8a0e442f7b61f811680273b25da95994a724466"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c8a0e442f7b61f811680273b25da95994a724466":["b9c5c0e8e826d8fd169840564bcf8606cf81d15b","89424def13674ea17829b41c5883c54ecc31a132","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}