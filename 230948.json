{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","sourceNew":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(config\n            .getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        cnxnFactory = new NIOServerCnxn.Factory(config.getClientPortAddress(), config\n            .getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zooKeeperServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n      }\n    }\n\n","sourceOld":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(config\n            .getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        cnxnFactory = new NIOServerCnxn.Factory(config.getClientPortAddress(), config\n            .getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zooKeeperServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","sourceNew":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(config\n            .getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        cnxnFactory = new NIOServerCnxn.Factory(config.getClientPortAddress(), config\n            .getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zooKeeperServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n      }\n    }\n\n","sourceOld":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(config\n            .getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        cnxnFactory = new NIOServerCnxn.Factory(config.getClientPortAddress(), config\n            .getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zooKeeperServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","sourceNew":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(config\n            .getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        cnxnFactory = new NIOServerCnxn.Factory(config.getClientPortAddress(), config\n            .getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zooKeeperServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n      }\n    }\n\n","sourceOld":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(config\n            .getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        cnxnFactory = new NIOServerCnxn.Factory(config.getClientPortAddress(), config\n            .getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zooKeeperServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","sourceNew":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(config\n            .getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        cnxnFactory = new NIOServerCnxn.Factory(config.getClientPortAddress(), config\n            .getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zooKeeperServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n      }\n    }\n\n","sourceOld":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(config\n            .getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        cnxnFactory = new NIOServerCnxn.Factory(config.getClientPortAddress(), config\n            .getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zooKeeperServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c05c6a4f999960536d6b23302feffb8a50227466","date":1353382574,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","sourceNew":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      log.info(\"Starting server\");\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n        \n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(\n            config.getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        zooKeeperServer.setMinSessionTimeout(config.getMinSessionTimeout());\n        zooKeeperServer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n        cnxnFactory = ServerCnxnFactory.createFactory();\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zkServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(config\n            .getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        cnxnFactory = new NIOServerCnxn.Factory(config.getClientPortAddress(), config\n            .getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zooKeeperServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n      }\n    }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","sourceNew":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      log.info(\"Starting server\");\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n        \n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(\n            config.getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        zooKeeperServer.setMinSessionTimeout(config.getMinSessionTimeout());\n        zooKeeperServer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n        cnxnFactory = ServerCnxnFactory.createFactory();\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zkServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(config\n            .getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        cnxnFactory = new NIOServerCnxn.Factory(config.getClientPortAddress(), config\n            .getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zooKeeperServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","sourceNew":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      log.info(\"Starting server\");\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n        \n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(\n            config.getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        zooKeeperServer.setMinSessionTimeout(config.getMinSessionTimeout());\n        zooKeeperServer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n        cnxnFactory = ServerCnxnFactory.createFactory();\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n       // if (zooKeeperServer.isRunning()) {\n          zkServer.shutdown();\n       // }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      log.info(\"Starting server\");\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n        \n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(\n            config.getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        zooKeeperServer.setMinSessionTimeout(config.getMinSessionTimeout());\n        zooKeeperServer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n        cnxnFactory = ServerCnxnFactory.createFactory();\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zkServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","sourceNew":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      log.info(\"Starting server\");\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n        \n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(\n            config.getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        zooKeeperServer.setMinSessionTimeout(config.getMinSessionTimeout());\n        zooKeeperServer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n        cnxnFactory = ServerCnxnFactory.createFactory();\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n       // if (zooKeeperServer.isRunning()) {\n          zkServer.shutdown();\n       // }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      log.info(\"Starting server\");\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n        \n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(\n            config.getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        zooKeeperServer.setMinSessionTimeout(config.getMinSessionTimeout());\n        zooKeeperServer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n        cnxnFactory = ServerCnxnFactory.createFactory();\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n        if (zooKeeperServer.isRunning()) {\n          zkServer.shutdown();\n        }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"144b39b0b004b766b7f785a03b6898512514c0c3","date":1411141724,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","sourceNew":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      log.info(\"Starting server\");\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(\n            config.getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer = new ZooKeeperServer(ftxn, config.getTickTime(),\n            config.getMinSessionTimeout(), config.getMaxSessionTimeout(),\n            null /* this is not used */, new TestZKDatabase(ftxn, limiter));\n        cnxnFactory = new TestServerCnxnFactory(limiter);\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n       // if (zooKeeperServer.isRunning()) {\n          zkServer.shutdown();\n       // }\n        if (violationReportAction != LimitViolationAction.IGNORE) {\n          String limitViolations = limiter.reportLimitViolations();\n          if (!limitViolations.isEmpty()) {\n            log.warn(\"Watch limit violations: {}\", limitViolations);\n            if (violationReportAction == LimitViolationAction.FAIL) {\n              throw new AssertionError(\"Parallel watch limits violated\");\n            }\n          }\n        }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      log.info(\"Starting server\");\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        zooKeeperServer = new ZooKeeperServer();\n        \n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(\n            config.getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer.setTxnLogFactory(ftxn);\n        zooKeeperServer.setTickTime(config.getTickTime());\n        zooKeeperServer.setMinSessionTimeout(config.getMinSessionTimeout());\n        zooKeeperServer.setMaxSessionTimeout(config.getMaxSessionTimeout());\n        cnxnFactory = ServerCnxnFactory.createFactory();\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n       // if (zooKeeperServer.isRunning()) {\n          zkServer.shutdown();\n       // }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"740d1c1026cde7506b133f0518c3216f45babaec","date":1421114638,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","sourceNew":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      log.info(\"Starting server\");\n      try {\n        // ZooKeeper maintains a static collection of AuthenticationProviders, so\n        // we make sure the SASL provider is loaded so that it can be used in\n        // subsequent tests.\n        System.setProperty(\"zookeeper.authProvider.1\",\n          \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(\n            config.getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer = new ZooKeeperServer(ftxn, config.getTickTime(),\n            config.getMinSessionTimeout(), config.getMaxSessionTimeout(),\n            null /* this is not used */, new TestZKDatabase(ftxn, limiter));\n        cnxnFactory = new TestServerCnxnFactory(limiter);\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n       // if (zooKeeperServer.isRunning()) {\n          zkServer.shutdown();\n       // }\n        if (violationReportAction != LimitViolationAction.IGNORE) {\n          String limitViolations = limiter.reportLimitViolations();\n          if (!limitViolations.isEmpty()) {\n            log.warn(\"Watch limit violations: {}\", limitViolations);\n            if (violationReportAction == LimitViolationAction.FAIL) {\n              throw new AssertionError(\"Parallel watch limits violated\");\n            }\n          }\n        }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      log.info(\"Starting server\");\n      try {\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(\n            config.getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer = new ZooKeeperServer(ftxn, config.getTickTime(),\n            config.getMinSessionTimeout(), config.getMaxSessionTimeout(),\n            null /* this is not used */, new TestZKDatabase(ftxn, limiter));\n        cnxnFactory = new TestServerCnxnFactory(limiter);\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n       // if (zooKeeperServer.isRunning()) {\n          zkServer.shutdown();\n       // }\n        if (violationReportAction != LimitViolationAction.IGNORE) {\n          String limitViolations = limiter.reportLimitViolations();\n          if (!limitViolations.isEmpty()) {\n            log.warn(\"Watch limit violations: {}\", limitViolations);\n            if (violationReportAction == LimitViolationAction.FAIL) {\n              throw new AssertionError(\"Parallel watch limits violated\");\n            }\n          }\n        }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","sourceNew":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      ObjectReleaseTracker.track(this);\n      log.info(\"Starting server\");\n      try {\n        // ZooKeeper maintains a static collection of AuthenticationProviders, so\n        // we make sure the SASL provider is loaded so that it can be used in\n        // subsequent tests.\n        System.setProperty(\"zookeeper.authProvider.1\",\n          \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(\n            config.getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer = new ZooKeeperServer(ftxn, config.getTickTime(),\n            config.getMinSessionTimeout(), config.getMaxSessionTimeout(),\n            null /* this is not used */, new TestZKDatabase(ftxn, limiter));\n        cnxnFactory = new TestServerCnxnFactory(limiter);\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n\n        if (violationReportAction != LimitViolationAction.IGNORE) {\n          String limitViolations = limiter.reportLimitViolations();\n          if (!limitViolations.isEmpty()) {\n            log.warn(\"Watch limit violations: {}\", limitViolations);\n            if (violationReportAction == LimitViolationAction.FAIL) {\n              throw new AssertionError(\"Parallel watch limits violated\");\n            }\n          }\n        }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      log.info(\"Starting server\");\n      try {\n        // ZooKeeper maintains a static collection of AuthenticationProviders, so\n        // we make sure the SASL provider is loaded so that it can be used in\n        // subsequent tests.\n        System.setProperty(\"zookeeper.authProvider.1\",\n          \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(\n            config.getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer = new ZooKeeperServer(ftxn, config.getTickTime(),\n            config.getMinSessionTimeout(), config.getMaxSessionTimeout(),\n            null /* this is not used */, new TestZKDatabase(ftxn, limiter));\n        cnxnFactory = new TestServerCnxnFactory(limiter);\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n       // if (zooKeeperServer.isRunning()) {\n          zkServer.shutdown();\n       // }\n        if (violationReportAction != LimitViolationAction.IGNORE) {\n          String limitViolations = limiter.reportLimitViolations();\n          if (!limitViolations.isEmpty()) {\n            log.warn(\"Watch limit violations: {}\", limitViolations);\n            if (violationReportAction == LimitViolationAction.FAIL) {\n              throw new AssertionError(\"Parallel watch limits violated\");\n            }\n          }\n        }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","bugFix":["1416f9d09d016a6894cd17e1caac137dad2bba59","c05c6a4f999960536d6b23302feffb8a50227466"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","sourceNew":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      ObjectReleaseTracker.track(this);\n      log.info(\"Starting server\");\n      try {\n        // ZooKeeper maintains a static collection of AuthenticationProviders, so\n        // we make sure the SASL provider is loaded so that it can be used in\n        // subsequent tests.\n        System.setProperty(\"zookeeper.authProvider.1\",\n          \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir());\n\n        zooKeeperServer = new ZooKeeperServer(ftxn, config.getTickTime(),\n            config.getMinSessionTimeout(), config.getMaxSessionTimeout(),\n            new TestZKDatabase(ftxn, limiter));\n        cnxnFactory = new TestServerCnxnFactory(limiter);\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n\n        if (violationReportAction != LimitViolationAction.IGNORE) {\n          String limitViolations = limiter.reportLimitViolations();\n          if (!limitViolations.isEmpty()) {\n            log.warn(\"Watch limit violations: {}\", limitViolations);\n            if (violationReportAction == LimitViolationAction.FAIL) {\n              throw new AssertionError(\"Parallel watch limits violated\");\n            }\n          }\n        }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      ObjectReleaseTracker.track(this);\n      log.info(\"Starting server\");\n      try {\n        // ZooKeeper maintains a static collection of AuthenticationProviders, so\n        // we make sure the SASL provider is loaded so that it can be used in\n        // subsequent tests.\n        System.setProperty(\"zookeeper.authProvider.1\",\n          \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(new File(\n            config.getDataLogDir()), new File(config.getDataDir()));\n        zooKeeperServer = new ZooKeeperServer(ftxn, config.getTickTime(),\n            config.getMinSessionTimeout(), config.getMaxSessionTimeout(),\n            null /* this is not used */, new TestZKDatabase(ftxn, limiter));\n        cnxnFactory = new TestServerCnxnFactory(limiter);\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n\n        if (violationReportAction != LimitViolationAction.IGNORE) {\n          String limitViolations = limiter.reportLimitViolations();\n          if (!limitViolations.isEmpty()) {\n            log.warn(\"Watch limit violations: {}\", limitViolations);\n            if (violationReportAction == LimitViolationAction.FAIL) {\n              throw new AssertionError(\"Parallel watch limits violated\");\n            }\n          }\n        }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":["5230f3091f5d18ecb95fb3527991f6fbb36041c5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5230f3091f5d18ecb95fb3527991f6fbb36041c5","date":1593647236,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain#runFromConfig(ServerConfig).mjava","sourceNew":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      ObjectReleaseTracker.track(this);\n      log.info(\"Starting server\");\n      try {\n        // ZooKeeper maintains a static collection of AuthenticationProviders, so\n        // we make sure the SASL provider is loaded so that it can be used in\n        // subsequent tests.\n        System.setProperty(\"zookeeper.authProvider.1\",\n          \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir());\n\n        zooKeeperServer = new ZooKeeperServer(ftxn, config.getTickTime(),\n            config.getMinSessionTimeout(), config.getMaxSessionTimeout(),\n            config.getClientPortListenBacklog(),\n            new TestZKDatabase(ftxn, limiter), \"\");\n        cnxnFactory = new TestServerCnxnFactory(limiter);\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n\n        if (violationReportAction != LimitViolationAction.IGNORE) {\n          String limitViolations = limiter.reportLimitViolations();\n          if (!limitViolations.isEmpty()) {\n            log.warn(\"Watch limit violations: {}\", limitViolations);\n            if (violationReportAction == LimitViolationAction.FAIL) {\n              throw new AssertionError(\"Parallel watch limits violated\");\n            }\n          }\n        }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Run from a ServerConfig.\n     * @param config ServerConfig to use.\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public void runFromConfig(ServerConfig config) throws IOException {\n      ObjectReleaseTracker.track(this);\n      log.info(\"Starting server\");\n      try {\n        // ZooKeeper maintains a static collection of AuthenticationProviders, so\n        // we make sure the SASL provider is loaded so that it can be used in\n        // subsequent tests.\n        System.setProperty(\"zookeeper.authProvider.1\",\n          \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n        // Note that this thread isn't going to be doing anything else,\n        // so rather than spawning another thread, we will just call\n        // run() in this thread.\n        // create a file logger url from the command line args\n        FileTxnSnapLog ftxn = new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir());\n\n        zooKeeperServer = new ZooKeeperServer(ftxn, config.getTickTime(),\n            config.getMinSessionTimeout(), config.getMaxSessionTimeout(),\n            new TestZKDatabase(ftxn, limiter));\n        cnxnFactory = new TestServerCnxnFactory(limiter);\n        cnxnFactory.configure(config.getClientPortAddress(),\n            config.getMaxClientCnxns());\n        cnxnFactory.startup(zooKeeperServer);\n        cnxnFactory.join();\n\n        if (violationReportAction != LimitViolationAction.IGNORE) {\n          String limitViolations = limiter.reportLimitViolations();\n          if (!limitViolations.isEmpty()) {\n            log.warn(\"Watch limit violations: {}\", limitViolations);\n            if (violationReportAction == LimitViolationAction.FAIL) {\n              throw new AssertionError(\"Parallel watch limits violated\");\n            }\n          }\n        }\n      } catch (InterruptedException e) {\n        // warn, but generally this is ok\n        log.warn(\"Server interrupted\", e);\n      }\n    }\n\n","bugFix":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["c05c6a4f999960536d6b23302feffb8a50227466"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["740d1c1026cde7506b133f0518c3216f45babaec"],"5230f3091f5d18ecb95fb3527991f6fbb36041c5":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","c05c6a4f999960536d6b23302feffb8a50227466"],"c05c6a4f999960536d6b23302feffb8a50227466":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"144b39b0b004b766b7f785a03b6898512514c0c3":["1416f9d09d016a6894cd17e1caac137dad2bba59"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["c05c6a4f999960536d6b23302feffb8a50227466"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"740d1c1026cde7506b133f0518c3216f45babaec":["144b39b0b004b766b7f785a03b6898512514c0c3"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5230f3091f5d18ecb95fb3527991f6fbb36041c5"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["407687e67faf6e1f02a211ca078d8e3eed631027","c05c6a4f999960536d6b23302feffb8a50227466"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"5230f3091f5d18ecb95fb3527991f6fbb36041c5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"c05c6a4f999960536d6b23302feffb8a50227466":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","407687e67faf6e1f02a211ca078d8e3eed631027","1416f9d09d016a6894cd17e1caac137dad2bba59"],"144b39b0b004b766b7f785a03b6898512514c0c3":["740d1c1026cde7506b133f0518c3216f45babaec"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"1416f9d09d016a6894cd17e1caac137dad2bba59":["144b39b0b004b766b7f785a03b6898512514c0c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"740d1c1026cde7506b133f0518c3216f45babaec":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["5230f3091f5d18ecb95fb3527991f6fbb36041c5"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","407687e67faf6e1f02a211ca078d8e3eed631027","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}