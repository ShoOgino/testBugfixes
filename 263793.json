{"path":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","commits":[{"id":"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2","date":1202772354,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n        r = new Random(base+range);\n        for (int i=0; i<iterations; i++) {\n          indexDoc();\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        TestCase.fail(e.toString());\n      }\n\n      synchronized (this) {\n        docs.size();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a5061c2bd3ae625ce9808a1291f32140d3609997"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04cd225b2d36ca6d599f6012f18973d8236e92c7","date":1202773059,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        r = new Random(base+range+seed);\n        for (int i=0; i<iterations; i++) {\n          indexDoc();\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        TestCase.fail(e.toString());\n      }\n\n      synchronized (this) {\n        docs.size();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        r = new Random(base+range);\n        for (int i=0; i<iterations; i++) {\n          indexDoc();\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        TestCase.fail(e.toString());\n      }\n\n      synchronized (this) {\n        docs.size();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5061c2bd3ae625ce9808a1291f32140d3609997","date":1204824056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        r = new Random(base+range+seed);\n        for (int i=0; i<iterations; i++) {\n          int what = nextInt(100);\n          if (what < 5) {\n            deleteDoc();\n          } else if (what < 10) {\n            deleteByQuery();\n          } else {\n            indexDoc();\n          }\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        TestCase.fail(e.toString());\n      }\n\n      synchronized (this) {\n        docs.size();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        r = new Random(base+range+seed);\n        for (int i=0; i<iterations; i++) {\n          indexDoc();\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        TestCase.fail(e.toString());\n      }\n\n      synchronized (this) {\n        docs.size();\n      }\n    }\n\n","bugFix":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        r = new Random(base+range+seed);\n        for (int i=0; i<iterations; i++) {\n          int what = nextInt(100);\n          if (what < 5) {\n            deleteDoc();\n          } else if (what < 10) {\n            deleteByQuery();\n          } else {\n            indexDoc();\n          }\n        }\n      } catch (Throwable e) {\n        e.printStackTrace();\n        TestCase.fail(e.toString());\n      }\n\n      synchronized (this) {\n        docs.size();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        r = new Random(base+range+seed);\n        for (int i=0; i<iterations; i++) {\n          int what = nextInt(100);\n          if (what < 5) {\n            deleteDoc();\n          } else if (what < 10) {\n            deleteByQuery();\n          } else {\n            indexDoc();\n          }\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        TestCase.fail(e.toString());\n      }\n\n      synchronized (this) {\n        docs.size();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        r = new Random(base+range+seed);\n        for (int i=0; i<iterations; i++) {\n          int what = nextInt(100);\n          if (what < 5) {\n            deleteDoc();\n          } else if (what < 10) {\n            deleteByQuery();\n          } else {\n            indexDoc();\n          }\n        }\n      } catch (Throwable e) {\n        e.printStackTrace();\n        TestCase.fail(e.toString());\n      }\n\n      synchronized (this) {\n        docs.size();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        r = new Random(base+range+seed);\n        for (int i=0; i<iterations; i++) {\n          int what = nextInt(100);\n          if (what < 5) {\n            deleteDoc();\n          } else if (what < 10) {\n            deleteByQuery();\n          } else {\n            indexDoc();\n          }\n        }\n      } catch (Throwable e) {\n        e.printStackTrace();\n        TestCase.fail(e.toString());\n      }\n\n      synchronized (this) {\n        docs.size();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        r = new Random(base+range+seed);\n        for (int i=0; i<iterations; i++) {\n          int what = nextInt(100);\n          if (what < 5) {\n            deleteDoc();\n          } else if (what < 10) {\n            deleteByQuery();\n          } else {\n            indexDoc();\n          }\n        }\n      } catch (Throwable e) {\n        e.printStackTrace();\n        Assert.fail(e.toString());\n      }\n\n      synchronized (this) {\n        docs.size();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        r = new Random(base+range+seed);\n        for (int i=0; i<iterations; i++) {\n          int what = nextInt(100);\n          if (what < 5) {\n            deleteDoc();\n          } else if (what < 10) {\n            deleteByQuery();\n          } else {\n            indexDoc();\n          }\n        }\n      } catch (Throwable e) {\n        e.printStackTrace();\n        TestCase.fail(e.toString());\n      }\n\n      synchronized (this) {\n        docs.size();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        r = new Random(base+range+seed);\n        for (int i=0; i<iterations; i++) {\n          int what = nextInt(100);\n          if (what < 5) {\n            deleteDoc();\n          } else if (what < 10) {\n            deleteByQuery();\n          } else {\n            indexDoc();\n          }\n        }\n      } catch (Throwable e) {\n        e.printStackTrace();\n        Assert.fail(e.toString());\n      }\n\n      synchronized (this) {\n        docs.size();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        r = new Random(base+range+seed);\n        for (int i=0; i<iterations; i++) {\n          int what = nextInt(100);\n          if (what < 5) {\n            deleteDoc();\n          } else if (what < 10) {\n            deleteByQuery();\n          } else {\n            indexDoc();\n          }\n        }\n      } catch (Throwable e) {\n        e.printStackTrace();\n        Assert.fail(e.toString());\n      }\n\n      synchronized (this) {\n        docs.size();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["5350389bf83287111f7760b9e3db3af8e3648474"],"a5061c2bd3ae625ce9808a1291f32140d3609997":["04cd225b2d36ca6d599f6012f18973d8236e92c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04cd225b2d36ca6d599f6012f18973d8236e92c7":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"5350389bf83287111f7760b9e3db3af8e3648474":["a5061c2bd3ae625ce9808a1291f32140d3609997"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a5061c2bd3ae625ce9808a1291f32140d3609997":["5350389bf83287111f7760b9e3db3af8e3648474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2":["04cd225b2d36ca6d599f6012f18973d8236e92c7"],"04cd225b2d36ca6d599f6012f18973d8236e92c7":["a5061c2bd3ae625ce9808a1291f32140d3609997"],"5350389bf83287111f7760b9e3db3af8e3648474":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}