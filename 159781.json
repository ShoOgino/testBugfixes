{"path":"lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#idfExplain(TermContext[],IndexSearcher).mjava","commits":[{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#idfExplain(TermContext[],IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TFIDFSimilarity#idfExplain(TermContext[],IndexSearcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param stats statistics of the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(final TermContext stats[], IndexSearcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final Explanation exp = new Explanation();\n    exp.setDescription(\"idf(), sum of:\");\n    for (final TermContext stat : stats ) {\n      final int df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      exp.addDetail(new Explanation(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    exp.setValue(idf);\n    return exp;\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param stats statistics of the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(final TermContext stats[], IndexSearcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final Explanation exp = new Explanation();\n    exp.setDescription(\"idf(), sum of:\");\n    for (final TermContext stat : stats ) {\n      final int df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      exp.addDetail(new Explanation(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    exp.setValue(idf);\n    return exp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","date":1320398636,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#idfExplain(CollectionStatistics,TermStatistics[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#idfExplain(TermContext[],IndexSearcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param collectionStats collection-level statistics\n   * @param termStats term-level statistics for the terms in the phrase\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {\n    final int max = collectionStats.maxDoc();\n    float idf = 0.0f;\n    final Explanation exp = new Explanation();\n    exp.setDescription(\"idf(), sum of:\");\n    for (final TermStatistics stat : termStats ) {\n      final int df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      exp.addDetail(new Explanation(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    exp.setValue(idf);\n    return exp;\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param stats statistics of the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(final TermContext stats[], IndexSearcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final Explanation exp = new Explanation();\n    exp.setDescription(\"idf(), sum of:\");\n    for (final TermContext stat : stats ) {\n      final int df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      exp.addDetail(new Explanation(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    exp.setValue(idf);\n    return exp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"]},"commit2Childs":{"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}