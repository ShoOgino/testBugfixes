{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","sourceNew":"  /**\n   * <p>\n   *   Adds an offset correction mapping at the given output stream offset.\n   * </p>\n   * <p>\n   *   Assumption: the offset given with each successive call to this method\n   *   will not be smaller than the offset given at the previous invocation.\n   * </p>\n   *\n   * @param off The output stream offset at which to apply the correction\n   * @param cumulativeDiff The input offset is given by adding this\n   *                       to the output offset\n   */\n  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    assert (size == 0 || off >= offsets[size - 1])\n        : \"Offset #\" + size + \"(\" + off + \") is less than the last recorded offset \"\n          + offsets[size - 1] + \"\\n\" + Arrays.toString(offsets) + \"\\n\" + Arrays.toString(diffs);\n    \n    if (size == 0 || off != offsets[size - 1]) {\n      offsets[size] = off;\n      diffs[size++] = cumulativeDiff;\n    } else { // Overwrite the diff at the last recorded offset\n      diffs[size - 1] = cumulativeDiff;\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   *   Adds an offset correction mapping at the given output stream offset.\n   * </p>\n   * <p>\n   *   Assumption: the offset given with each successive call to this method\n   *   will not be smaller than the offset given at the previous invocation.\n   * </p>\n   *\n   * @param off The output stream offset at which to apply the correction\n   * @param cumulativeDiff The input offset is given by adding this\n   *                       to the output offset\n   */\n  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    assert (size == 0 || off >= offsets[size - 1])\n        : \"Offset #\" + size + \"(\" + off + \") is less than the last recorded offset \"\n          + offsets[size - 1] + \"\\n\" + Arrays.toString(offsets) + \"\\n\" + Arrays.toString(diffs);\n    \n    if (size == 0 || off != offsets[size - 1]) {\n      offsets[size] = off;\n      diffs[size++] = cumulativeDiff;\n    } else { // Overwrite the diff at the last recorded offset\n      diffs[size - 1] = cumulativeDiff;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}