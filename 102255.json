{"path":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new MyAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    Random random = newRandom();\n    dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MyAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new MyAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MyAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    Random random = newRandom();\n    dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MyAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MyAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MyAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MyAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MyAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n      }\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else {\n        customType.setStoreTermVectors(true);\n      }\n      doc.add(new Field(testFields[i], customType, \"\"));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n      }\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else {\n        customType.setStoreTermVectors(true);\n      }\n      doc.add(new Field(testFields[i], \"\", customType));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n      }\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else {\n        customType.setStoreTermVectors(true);\n      }\n      doc.add(new Field(testFields[i], customType, \"\"));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = j * 10;\n        token.endOffset = j * 10 + testTerms[i].length();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n      }\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else {\n        customType.setStoreTermVectors(true);\n      }\n      doc.add(new Field(testFields[i], \"\", customType));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    seg = writer.newestSegment();\n    writer.close();\n\n    fieldInfos = seg.getFieldInfos(); //new FieldInfos(dir, IndexFileNames.segmentFileName(seg.name, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n      }\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else {\n        customType.setStoreTermVectors(true);\n      }\n      doc.add(new Field(testFields[i], \"\", customType));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = j * 10;\n        token.endOffset = j * 10 + testTerms[i].length();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n      }\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else {\n        customType.setStoreTermVectors(true);\n      }\n      doc.add(new Field(testFields[i], \"\", customType));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    seg = writer.newestSegment();\n    writer.close();\n\n    fieldInfos = seg.getFieldInfos(); //new FieldInfos(dir, IndexFileNames.segmentFileName(seg.name, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = j * 10;\n        token.endOffset = j * 10 + testTerms[i].length();\n      }\n    }\n    Arrays.sort(tokens);\n\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MyAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorPositions(true);\n      }\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i]) {\n        customType.setStoreTermVectors(true);\n        customType.setStoreTermVectorOffsets(true);\n      }\n      else {\n        customType.setStoreTermVectors(true);\n      }\n      doc.add(new Field(testFields[i], \"\", customType));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    seg = writer.newestSegment();\n    writer.close();\n\n    fieldInfos = seg.getFieldInfos(); //new FieldInfos(dir, IndexFileNames.segmentFileName(seg.name, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"43b04c27924fe393e38e9f0986e32c634f261859":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"3bb13258feba31ab676502787ab2e1779f129b7a":["43b04c27924fe393e38e9f0986e32c634f261859","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["43b04c27924fe393e38e9f0986e32c634f261859"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"43b04c27924fe393e38e9f0986e32c634f261859":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","b21422ff1d1d56499dec481f193b402e5e8def5b"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["43b04c27924fe393e38e9f0986e32c634f261859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["3cc749c053615f5871f3b95715fe292f34e70a53"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1509f151d7692d84fae414b2b799ac06ba60fcb4","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}