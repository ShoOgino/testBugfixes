{"path":"src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"a28fe77124a2ece3a2af0a5c1b264e07c7cae728","date":1220116339,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds a new RangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new RangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    if(useOldRangeQuery)\n    {\n      return new RangeQuery(new Term(field, part1),\n                            new Term(field, part2),\n                            inclusive);\n    }\n    else\n    {\n      return new ConstantScoreRangeQuery(field,part1,part2,inclusive,inclusive);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Builds a new RangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new RangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    if(useOldRangeQuery)\n    {\n      return new RangeQuery(new Term(field, part1),\n                            new Term(field, part2),\n                            inclusive, rangeCollator);\n    }\n    else\n    {\n      return new ConstantScoreRangeQuery\n        (field, part1, part2, inclusive, inclusive, rangeCollator);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a new RangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new RangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    if(useOldRangeQuery)\n    {\n      return new RangeQuery(new Term(field, part1),\n                            new Term(field, part2),\n                            inclusive);\n    }\n    else\n    {\n      return new ConstantScoreRangeQuery(field,part1,part2,inclusive,inclusive);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Builds a new RangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new RangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    RangeQuery query = new RangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    query.setConstantScoreRewrite(constantScoreRewrite);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new RangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new RangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    if(useOldRangeQuery)\n    {\n      return new RangeQuery(new Term(field, part1),\n                            new Term(field, part2),\n                            inclusive, rangeCollator);\n    }\n    else\n    {\n      return new ConstantScoreRangeQuery\n        (field, part1, part2, inclusive, inclusive, rangeCollator);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a90666692cfaf586a1cda01b8db4d3cefcb34e6c","date":1226448112,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Builds a new RangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new RangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    RangeQuery query;\n\n    if (constantScoreRewrite) {\n      // TODO: remove in Lucene 3.0\n      query = new ConstantScoreRangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    } else {\n      query = new RangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    }\n    query.setConstantScoreRewrite(constantScoreRewrite);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new RangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new RangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    RangeQuery query = new RangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    query.setConstantScoreRewrite(constantScoreRewrite);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    query.setConstantScoreRewrite(constantScoreRewrite);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new RangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new RangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    RangeQuery query;\n\n    if (constantScoreRewrite) {\n      // TODO: remove in Lucene 3.0\n      query = new ConstantScoreRangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    } else {\n      query = new RangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    }\n    query.setConstantScoreRewrite(constantScoreRewrite);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    query.setConstantScoreRewrite(constantScoreRewrite);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["a90666692cfaf586a1cda01b8db4d3cefcb34e6c"],"a90666692cfaf586a1cda01b8db4d3cefcb34e6c":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"b33dc4652df2747e38f9782fde82bd426b77c538":["a28fe77124a2ece3a2af0a5c1b264e07c7cae728"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a28fe77124a2ece3a2af0a5c1b264e07c7cae728":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"]},"commit2Childs":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a90666692cfaf586a1cda01b8db4d3cefcb34e6c":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a28fe77124a2ece3a2af0a5c1b264e07c7cae728"],"a28fe77124a2ece3a2af0a5c1b264e07c7cae728":["b33dc4652df2747e38f9782fde82bd426b77c538"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["a90666692cfaf586a1cda01b8db4d3cefcb34e6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}