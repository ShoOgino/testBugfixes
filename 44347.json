{"path":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4107dd39b127d892359c5c1d67d0f14d92f1a9bf","date":1351689723,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<Term>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":["e141595402370bee958745de8b1c9de1fa182581","61e20f33ce8ff701576366fdb03955eded5f209b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392","date":1377503666,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<Term>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<Term>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<Term>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<Term>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<Term>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.shutdown();\n\n    List<Term> terms = new ArrayList<>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.shutdown();\n\n    List<Term> terms = new ArrayList<>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitDocIdSet bits = (FixedBitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.bits().cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.bits().cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.bits().cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<>();\n    terms.add(new Term(fieldName, \"19\"));\n    BitDocIdSet bits = (BitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (BitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.bits().cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (BitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.bits().cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (BitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.bits().cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<>();\n    terms.add(new Term(fieldName, \"19\"));\n    FixedBitDocIdSet bits = (FixedBitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (FixedBitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.bits().cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (FixedBitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.bits().cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (FixedBitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.bits().cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":null,"sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(w.getReader());\n    assertTrue(reader.getContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    w.close();\n\n    List<Term> terms = new ArrayList<>();\n    terms.add(new Term(fieldName, \"19\"));\n    BitDocIdSet bits = (BitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertNull(\"Must match nothing\", bits);\n\n    terms.add(new Term(fieldName, \"20\"));\n    bits = (BitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.bits().cardinality());\n\n    terms.add(new Term(fieldName, \"10\"));\n    bits = (BitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.bits().cardinality());\n\n    terms.add(new Term(fieldName, \"00\"));\n    bits = (BitDocIdSet) termsFilter(random().nextBoolean(), terms).getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.bits().cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["04f07771a2a7dd3a395700665ed839c3dae2def2","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["04f07771a2a7dd3a395700665ed839c3dae2def2","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"80c55596a764e2d397e982828e75fcac5ce430a0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2042d3e27841c5b60112990fc33559e10ccf6dd"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["80c55596a764e2d397e982828e75fcac5ce430a0"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}