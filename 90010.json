{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.label.toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.value, 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.subResults.size());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.label.toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.value, 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.subResults.size());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new CategoryPath(\"a\"), 10),\n              new CountFacetRequest(new CategoryPath(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.label.toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.value, 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.subResults.size());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new CategoryPath(\"a\"), 10),\n              new CountFacetRequest(new CategoryPath(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.label.toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.value, 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.subResults.size());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new CategoryPath(\"a\"), 10),\n              new CountFacetRequest(new CategoryPath(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new CategoryPath(\"a\"), 10),\n              new CountFacetRequest(new CategoryPath(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["811cdb4a80352766eb0c762e48972707a924e5cd"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"607428da722dcb3e86bbd11c63de8986e6275c36":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["07155cdd910937cdf6877e48884d5782845c8b8b","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"811cdb4a80352766eb0c762e48972707a924e5cd":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["607428da722dcb3e86bbd11c63de8986e6275c36","61d5f95d14e5b9b046998c51e16709a398c15226"],"07155cdd910937cdf6877e48884d5782845c8b8b":["61d5f95d14e5b9b046998c51e16709a398c15226"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"811cdb4a80352766eb0c762e48972707a924e5cd":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}