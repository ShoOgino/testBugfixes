{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d8d7a81c29a594c8d28e66f3a9029ed7458af42","date":1300719582,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd0491419a55db5050f375ec779df63ce76d9db5","date":1302545750,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","date":1323050351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    String line;\n    while((line = r.readLine()) != null) {\n      if (numLines==0 && line.startsWith(WriteLineDocTask.FIELDS_HEADER_INDICATOR)) {\n        continue; // do not count the header line as a doc \n      }\n      numLines++;\n    }\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["fd0491419a55db5050f375ec779df63ce76d9db5","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","fd0491419a55db5050f375ec779df63ce76d9db5"],"fd0491419a55db5050f375ec779df63ce76d9db5":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","fd0491419a55db5050f375ec779df63ce76d9db5"],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["fd0491419a55db5050f375ec779df63ce76d9db5"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","7d8d7a81c29a594c8d28e66f3a9029ed7458af42"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["7d8d7a81c29a594c8d28e66f3a9029ed7458af42"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","7d8d7a81c29a594c8d28e66f3a9029ed7458af42"],"a3776dccca01c11e7046323cfad46a3b4a471233":["7d8d7a81c29a594c8d28e66f3a9029ed7458af42","fd0491419a55db5050f375ec779df63ce76d9db5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["fd0491419a55db5050f375ec779df63ce76d9db5","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7d8d7a81c29a594c8d28e66f3a9029ed7458af42":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"fd0491419a55db5050f375ec779df63ce76d9db5":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","a3776dccca01c11e7046323cfad46a3b4a471233","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":[],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","7d8d7a81c29a594c8d28e66f3a9029ed7458af42","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["fd0491419a55db5050f375ec779df63ce76d9db5"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7d8d7a81c29a594c8d28e66f3a9029ed7458af42":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}