{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    DirectoryReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final DirectoryReader newReader = DirectoryReader.openIfChanged(r);\n      if (newReader != null) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    DirectoryReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final DirectoryReader newReader = DirectoryReader.openIfChanged(r);\n      if (newReader != null) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    DirectoryReader r = DirectoryReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final DirectoryReader newReader = DirectoryReader.openIfChanged(r);\n      if (newReader != null) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    DirectoryReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final DirectoryReader newReader = DirectoryReader.openIfChanged(r);\n      if (newReader != null) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    DirectoryReader r = DirectoryReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final DirectoryReader newReader = DirectoryReader.openIfChanged(r);\n      if (newReader != null) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    DirectoryReader r = DirectoryReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final DirectoryReader newReader = DirectoryReader.openIfChanged(r);\n      if (newReader != null) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a1862266772deb28cdcb7d996b64d2177022687":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"2a1862266772deb28cdcb7d996b64d2177022687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["2a1862266772deb28cdcb7d996b64d2177022687"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}