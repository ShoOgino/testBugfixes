{"path":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","commits":[{"id":"00e1c8e1340d9e31d2c6bee5f72d9040ce569049","date":1431584404,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    waitForThingsToLevelOut(10);\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    // This should work fine.\n    cloudClient.query(params);\n    \n    // This user is blacklisted in the mock. The request should return a 403.\n    params.add(\"uname\", \"user1\");\n    try {\n      cloudClient.query(params);\n      fail(\"This should have failed\");\n    } catch (Exception e) {}\n    log.info(\"Ending test\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3c81adfe72846787d1a6df3a2efec1cdf72c5d88"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","sourceNew":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    waitForThingsToLevelOut(10);\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    // This should work fine.\n    cloudClient.query(params);\n    \n    // This user is blacklisted in the mock. The request should return a 403.\n    params.add(\"uname\", \"user1\");\n    try {\n      cloudClient.query(params);\n      fail(\"This should have failed\");\n    } catch (Exception e) {}\n    log.info(\"Ending test\");\n  }\n\n","sourceOld":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    waitForThingsToLevelOut(10);\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    // This should work fine.\n    cloudClient.query(params);\n    \n    // This user is blacklisted in the mock. The request should return a 403.\n    params.add(\"uname\", \"user1\");\n    try {\n      cloudClient.query(params);\n      fail(\"This should have failed\");\n    } catch (Exception e) {}\n    log.info(\"Ending test\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","sourceNew":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    waitForThingsToLevelOut(10);\n    try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n        TIMEOUT, TIMEOUT)) {\n      zkStateReader.getZkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH,\n          \"{\\\"authorization\\\":{\\\"class\\\":\\\"org.apache.solr.security.MockAuthorizationPlugin\\\"}}\".getBytes(Charsets.UTF_8),\n          true);\n    }\n    String baseUrl = jettys.get(0).getBaseUrl().toString();\n    verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    // This should work fine.\n    cloudClient.query(params);\n\n    // This user is blacklisted in the mock. The request should return a 403.\n    params.add(\"uname\", \"user1\");\n    try {\n      cloudClient.query(params);\n      fail(\"This should have failed\");\n    } catch (Exception e) {}\n    log.info(\"Ending test\");\n  }\n\n","sourceOld":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    waitForThingsToLevelOut(10);\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    // This should work fine.\n    cloudClient.query(params);\n    \n    // This user is blacklisted in the mock. The request should return a 403.\n    params.add(\"uname\", \"user1\");\n    try {\n      cloudClient.query(params);\n      fail(\"This should have failed\");\n    } catch (Exception e) {}\n    log.info(\"Ending test\");\n  }\n\n","bugFix":null,"bugIntro":["3c81adfe72846787d1a6df3a2efec1cdf72c5d88"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17a4968d4c95830a11b50afb9e1bfba602c5606d","date":1442834704,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","sourceNew":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    waitForThingsToLevelOut(10);\n    String baseUrl = jettys.get(0).getBaseUrl().toString();\n    verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    // This should work fine.\n    cloudClient.query(params);\n\n    // This user is blacklisted in the mock. The request should return a 403.\n    params.add(\"uname\", \"user1\");\n    try {\n      cloudClient.query(params);\n      fail(\"This should have failed\");\n    } catch (Exception e) {}\n    log.info(\"Ending test\");\n  }\n\n","sourceOld":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    waitForThingsToLevelOut(10);\n    try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n        TIMEOUT, TIMEOUT)) {\n      zkStateReader.getZkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH,\n          \"{\\\"authorization\\\":{\\\"class\\\":\\\"org.apache.solr.security.MockAuthorizationPlugin\\\"}}\".getBytes(Charsets.UTF_8),\n          true);\n    }\n    String baseUrl = jettys.get(0).getBaseUrl().toString();\n    verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    // This should work fine.\n    cloudClient.query(params);\n\n    // This user is blacklisted in the mock. The request should return a 403.\n    params.add(\"uname\", \"user1\");\n    try {\n      cloudClient.query(params);\n      fail(\"This should have failed\");\n    } catch (Exception e) {}\n    log.info(\"Ending test\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c81adfe72846787d1a6df3a2efec1cdf72c5d88","date":1515408210,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","sourceNew":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n\n    try {\n      waitForThingsToLevelOut(10);\n      String baseUrl = jettys.get(0).getBaseUrl().toString();\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      log.info(\"Starting test\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      // This should work fine.\n      cloudClient.query(params);\n      MockAuthorizationPlugin.protectedResources.add(\"/select\");\n\n      // This user is blacklisted in the mock. The request should return a 403.\n      params.add(\"uname\", \"user1\");\n      try {\n        cloudClient.query(params);\n        fail(\"This should have failed\");\n      } catch (Exception e) {}\n      log.info(\"Ending test\");\n    } finally {\n      MockAuthorizationPlugin.denyUsers.clear();\n      MockAuthorizationPlugin.protectedResources.clear();\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    waitForThingsToLevelOut(10);\n    String baseUrl = jettys.get(0).getBaseUrl().toString();\n    verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    // This should work fine.\n    cloudClient.query(params);\n\n    // This user is blacklisted in the mock. The request should return a 403.\n    params.add(\"uname\", \"user1\");\n    try {\n      cloudClient.query(params);\n      fail(\"This should have failed\");\n    } catch (Exception e) {}\n    log.info(\"Ending test\");\n  }\n\n","bugFix":["6bdcb86c29922edae9a14852e636303bc52df094","00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","sourceNew":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n\n    try {\n      waitForThingsToLevelOut(10);\n      String baseUrl = jettys.get(0).getBaseUrl().toString();\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      log.info(\"Starting test\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      // This should work fine.\n      cloudClient.query(params);\n      MockAuthorizationPlugin.protectedResources.add(\"/select\");\n\n      // This user is blacklisted in the mock. The request should return a 403.\n      params.add(\"uname\", \"user1\");\n      try {\n        cloudClient.query(params);\n        fail(\"This should have failed\");\n      } catch (Exception e) {}\n      log.info(\"Ending test\");\n    } finally {\n      MockAuthorizationPlugin.denyUsers.clear();\n      MockAuthorizationPlugin.protectedResources.clear();\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    waitForThingsToLevelOut(10);\n    String baseUrl = jettys.get(0).getBaseUrl().toString();\n    verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    // This should work fine.\n    cloudClient.query(params);\n\n    // This user is blacklisted in the mock. The request should return a 403.\n    params.add(\"uname\", \"user1\");\n    try {\n      cloudClient.query(params);\n      fail(\"This should have failed\");\n    } catch (Exception e) {}\n    log.info(\"Ending test\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","sourceNew":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n\n    try {\n      waitForThingsToLevelOut(10);\n      String baseUrl = jettys.get(0).getBaseUrl().toString();\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      log.info(\"Starting test\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      // This should work fine.\n      cloudClient.query(params);\n      MockAuthorizationPlugin.protectedResources.add(\"/select\");\n\n      // This user is blacklisted in the mock. The request should return a 403.\n      params.add(\"uname\", \"user1\");\n      expectThrows(Exception.class, () -> cloudClient.query(params));\n      log.info(\"Ending test\");\n    } finally {\n      MockAuthorizationPlugin.denyUsers.clear();\n      MockAuthorizationPlugin.protectedResources.clear();\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n\n    try {\n      waitForThingsToLevelOut(10);\n      String baseUrl = jettys.get(0).getBaseUrl().toString();\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      log.info(\"Starting test\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      // This should work fine.\n      cloudClient.query(params);\n      MockAuthorizationPlugin.protectedResources.add(\"/select\");\n\n      // This user is blacklisted in the mock. The request should return a 403.\n      params.add(\"uname\", \"user1\");\n      try {\n        cloudClient.query(params);\n        fail(\"This should have failed\");\n      } catch (Exception e) {}\n      log.info(\"Ending test\");\n    } finally {\n      MockAuthorizationPlugin.denyUsers.clear();\n      MockAuthorizationPlugin.protectedResources.clear();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","sourceNew":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n\n    try {\n      waitForThingsToLevelOut(10);\n      String baseUrl = jettys.get(0).getBaseUrl().toString();\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      log.info(\"Starting test\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      // This should work fine.\n      cloudClient.query(params);\n      MockAuthorizationPlugin.protectedResources.add(\"/select\");\n\n      // This user is blacklisted in the mock. The request should return a 403.\n      params.add(\"uname\", \"user1\");\n      expectThrows(Exception.class, () -> cloudClient.query(params));\n      log.info(\"Ending test\");\n    } finally {\n      MockAuthorizationPlugin.denyUsers.clear();\n      MockAuthorizationPlugin.protectedResources.clear();\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n\n    try {\n      waitForThingsToLevelOut(10);\n      String baseUrl = jettys.get(0).getBaseUrl().toString();\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      log.info(\"Starting test\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      // This should work fine.\n      cloudClient.query(params);\n      MockAuthorizationPlugin.protectedResources.add(\"/select\");\n\n      // This user is blacklisted in the mock. The request should return a 403.\n      params.add(\"uname\", \"user1\");\n      try {\n        cloudClient.query(params);\n        fail(\"This should have failed\");\n      } catch (Exception e) {}\n      log.info(\"Ending test\");\n    } finally {\n      MockAuthorizationPlugin.denyUsers.clear();\n      MockAuthorizationPlugin.protectedResources.clear();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","sourceNew":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n\n    try {\n      waitForThingsToLevelOut(10);\n      String baseUrl = jettys.get(0).getBaseUrl().toString();\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      log.info(\"Starting test\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      // This should work fine.\n      cloudClient.query(params);\n      MockAuthorizationPlugin.protectedResources.add(\"/select\");\n\n      // This user is blacklisted in the mock. The request should return a 403.\n      params.add(\"uname\", \"user1\");\n      expectThrows(Exception.class, () -> cloudClient.query(params));\n      log.info(\"Ending test\");\n    } finally {\n      MockAuthorizationPlugin.denyUsers.clear();\n      MockAuthorizationPlugin.protectedResources.clear();\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n\n    try {\n      waitForThingsToLevelOut(10);\n      String baseUrl = jettys.get(0).getBaseUrl().toString();\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      log.info(\"Starting test\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      // This should work fine.\n      cloudClient.query(params);\n      MockAuthorizationPlugin.protectedResources.add(\"/select\");\n\n      // This user is blacklisted in the mock. The request should return a 403.\n      params.add(\"uname\", \"user1\");\n      try {\n        cloudClient.query(params);\n        fail(\"This should have failed\");\n      } catch (Exception e) {}\n      log.info(\"Ending test\");\n    } finally {\n      MockAuthorizationPlugin.denyUsers.clear();\n      MockAuthorizationPlugin.protectedResources.clear();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add1e7dd742ea533ff4318cea83ca0a1f669f662","date":1585262285,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#authorizationFrameworkTest().mjava","sourceNew":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n\n    try {\n      waitForThingsToLevelOut(10, TimeUnit.SECONDS);\n      String baseUrl = jettys.get(0).getBaseUrl().toString();\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      log.info(\"Starting test\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      // This should work fine.\n      cloudClient.query(params);\n      MockAuthorizationPlugin.protectedResources.add(\"/select\");\n\n      // This user is blacklisted in the mock. The request should return a 403.\n      params.add(\"uname\", \"user1\");\n      expectThrows(Exception.class, () -> cloudClient.query(params));\n      log.info(\"Ending test\");\n    } finally {\n      MockAuthorizationPlugin.denyUsers.clear();\n      MockAuthorizationPlugin.protectedResources.clear();\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void authorizationFrameworkTest() throws Exception {\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n    MockAuthorizationPlugin.denyUsers.add(\"user1\");\n\n    try {\n      waitForThingsToLevelOut(10);\n      String baseUrl = jettys.get(0).getBaseUrl().toString();\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      log.info(\"Starting test\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      // This should work fine.\n      cloudClient.query(params);\n      MockAuthorizationPlugin.protectedResources.add(\"/select\");\n\n      // This user is blacklisted in the mock. The request should return a 403.\n      params.add(\"uname\", \"user1\");\n      expectThrows(Exception.class, () -> cloudClient.query(params));\n      log.info(\"Ending test\");\n    } finally {\n      MockAuthorizationPlugin.denyUsers.clear();\n      MockAuthorizationPlugin.protectedResources.clear();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"b94236357aaa22b76c10629851fe4e376e0cea82":["17a4968d4c95830a11b50afb9e1bfba602c5606d","3c81adfe72846787d1a6df3a2efec1cdf72c5d88"],"3c81adfe72846787d1a6df3a2efec1cdf72c5d88":["17a4968d4c95830a11b50afb9e1bfba602c5606d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["b94236357aaa22b76c10629851fe4e376e0cea82","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["b94236357aaa22b76c10629851fe4e376e0cea82","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"17a4968d4c95830a11b50afb9e1bfba602c5606d":["6bdcb86c29922edae9a14852e636303bc52df094"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["17a4968d4c95830a11b50afb9e1bfba602c5606d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"3c81adfe72846787d1a6df3a2efec1cdf72c5d88":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["6bdcb86c29922edae9a14852e636303bc52df094"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["add1e7dd742ea533ff4318cea83ca0a1f669f662","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"17a4968d4c95830a11b50afb9e1bfba602c5606d":["b94236357aaa22b76c10629851fe4e376e0cea82","3c81adfe72846787d1a6df3a2efec1cdf72c5d88"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}