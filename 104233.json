{"path":"src/java/org/apache/lucene/search/Hits#doc(int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#doc(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the nth document in this set.\n    <p>Documents are cached, so that repeated requests for the same element may\n    return the same Document object. */ \n  public final Document doc(int n) throws IOException {\n    HitDoc hitDoc = hitDoc(n);\n\n    // Update LRU cache of documents\n    remove(hitDoc);\t\t\t\t  // remove from list, if there\n    addToFront(hitDoc);\t\t\t\t  // add to front of list\n    if (numDocs > maxDocs) {\t\t\t  // if cache is full\n      HitDoc oldLast = last;\n      remove(last);\t\t\t\t  // flush last\n      oldLast.doc = null;\t\t\t  // let doc get gc'd\n    }\n\n    if (hitDoc.doc == null)\n      hitDoc.doc = searcher.doc(hitDoc.id);\t  // cache miss: read document\n      \n    return hitDoc.doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39332adc80701d999b904c433479b676c101d2a6","date":1063449985,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#doc(int).mjava","pathOld":"src/java/org/apache/lucene/search/Hits#doc(int).mjava","sourceNew":"    /** Returns the nth document in this set.\n     <p>Documents are cached, so that repeated requests for the same element may\n     return the same Document object. */\n    public final Document doc(int n) throws IOException {\n        HitDoc hitDoc = hitDoc(n);\n\n        // Update LRU cache of documents\n        remove(hitDoc);               // remove from list, if there\n        addToFront(hitDoc);           // add to front of list\n        if (numDocs > maxDocs) {      // if cache is full\n            HitDoc oldLast = last;\n            remove(last);             // flush last\n            oldLast.doc = null;       // let doc get gc'd\n        }\n\n        if (hitDoc.doc == null) {\n            hitDoc.doc = searcher.doc(hitDoc.id);  // cache miss: read document\n        }\n\n        return hitDoc.doc;\n    }\n\n","sourceOld":"  /** Returns the nth document in this set.\n    <p>Documents are cached, so that repeated requests for the same element may\n    return the same Document object. */ \n  public final Document doc(int n) throws IOException {\n    HitDoc hitDoc = hitDoc(n);\n\n    // Update LRU cache of documents\n    remove(hitDoc);\t\t\t\t  // remove from list, if there\n    addToFront(hitDoc);\t\t\t\t  // add to front of list\n    if (numDocs > maxDocs) {\t\t\t  // if cache is full\n      HitDoc oldLast = last;\n      remove(last);\t\t\t\t  // flush last\n      oldLast.doc = null;\t\t\t  // let doc get gc'd\n    }\n\n    if (hitDoc.doc == null)\n      hitDoc.doc = searcher.doc(hitDoc.id);\t  // cache miss: read document\n      \n    return hitDoc.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09801d5e36f040f424c56c388007a47a95d36d46","date":1063496429,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#doc(int).mjava","pathOld":"src/java/org/apache/lucene/search/Hits#doc(int).mjava","sourceNew":"  /** Returns the nth document in this set.\n   <p>Documents are cached, so that repeated requests for the same element may\n   return the same Document object. */\n  public final Document doc(int n) throws IOException {\n    HitDoc hitDoc = hitDoc(n);\n\n    // Update LRU cache of documents\n    remove(hitDoc);               // remove from list, if there\n    addToFront(hitDoc);           // add to front of list\n    if (numDocs > maxDocs) {      // if cache is full\n      HitDoc oldLast = last;\n      remove(last);             // flush last\n      oldLast.doc = null;       // let doc get gc'd\n    }\n\n    if (hitDoc.doc == null) {\n      hitDoc.doc = searcher.doc(hitDoc.id);  // cache miss: read document\n    }\n\n    return hitDoc.doc;\n  }\n\n","sourceOld":"    /** Returns the nth document in this set.\n     <p>Documents are cached, so that repeated requests for the same element may\n     return the same Document object. */\n    public final Document doc(int n) throws IOException {\n        HitDoc hitDoc = hitDoc(n);\n\n        // Update LRU cache of documents\n        remove(hitDoc);               // remove from list, if there\n        addToFront(hitDoc);           // add to front of list\n        if (numDocs > maxDocs) {      // if cache is full\n            HitDoc oldLast = last;\n            remove(last);             // flush last\n            oldLast.doc = null;       // let doc get gc'd\n        }\n\n        if (hitDoc.doc == null) {\n            hitDoc.doc = searcher.doc(hitDoc.id);  // cache miss: read document\n        }\n\n        return hitDoc.doc;\n    }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32cf2e30bd45f6248722d0d19a0045a712782ebc","date":1080240435,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#doc(int).mjava","pathOld":"src/java/org/apache/lucene/search/Hits#doc(int).mjava","sourceNew":"  /** Returns the stored fields of the n<sup>th</sup> document in this set.\n   <p>Documents are cached, so that repeated requests for the same element may\n   return the same Document object. */\n  public final Document doc(int n) throws IOException {\n    HitDoc hitDoc = hitDoc(n);\n\n    // Update LRU cache of documents\n    remove(hitDoc);               // remove from list, if there\n    addToFront(hitDoc);           // add to front of list\n    if (numDocs > maxDocs) {      // if cache is full\n      HitDoc oldLast = last;\n      remove(last);             // flush last\n      oldLast.doc = null;       // let doc get gc'd\n    }\n\n    if (hitDoc.doc == null) {\n      hitDoc.doc = searcher.doc(hitDoc.id);  // cache miss: read document\n    }\n\n    return hitDoc.doc;\n  }\n\n","sourceOld":"  /** Returns the nth document in this set.\n   <p>Documents are cached, so that repeated requests for the same element may\n   return the same Document object. */\n  public final Document doc(int n) throws IOException {\n    HitDoc hitDoc = hitDoc(n);\n\n    // Update LRU cache of documents\n    remove(hitDoc);               // remove from list, if there\n    addToFront(hitDoc);           // add to front of list\n    if (numDocs > maxDocs) {      // if cache is full\n      HitDoc oldLast = last;\n      remove(last);             // flush last\n      oldLast.doc = null;       // let doc get gc'd\n    }\n\n    if (hitDoc.doc == null) {\n      hitDoc.doc = searcher.doc(hitDoc.id);  // cache miss: read document\n    }\n\n    return hitDoc.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Hits#doc(int).mjava","pathOld":"src/java/org/apache/lucene/search/Hits#doc(int).mjava","sourceNew":"  /** Returns the stored fields of the n<sup>th</sup> document in this set.\n   * <p>Documents are cached, so that repeated requests for the same element may\n   * return the same Document object.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final Document doc(int n) throws CorruptIndexException, IOException {\n    HitDoc hitDoc = hitDoc(n);\n\n    // Update LRU cache of documents\n    remove(hitDoc);               // remove from list, if there\n    addToFront(hitDoc);           // add to front of list\n    if (numDocs > maxDocs) {      // if cache is full\n      HitDoc oldLast = last;\n      remove(last);             // flush last\n      oldLast.doc = null;       // let doc get gc'd\n    }\n\n    if (hitDoc.doc == null) {\n      hitDoc.doc = searcher.doc(hitDoc.id);  // cache miss: read document\n    }\n\n    return hitDoc.doc;\n  }\n\n","sourceOld":"  /** Returns the stored fields of the n<sup>th</sup> document in this set.\n   <p>Documents are cached, so that repeated requests for the same element may\n   return the same Document object. */\n  public final Document doc(int n) throws IOException {\n    HitDoc hitDoc = hitDoc(n);\n\n    // Update LRU cache of documents\n    remove(hitDoc);               // remove from list, if there\n    addToFront(hitDoc);           // add to front of list\n    if (numDocs > maxDocs) {      // if cache is full\n      HitDoc oldLast = last;\n      remove(last);             // flush last\n      oldLast.doc = null;       // let doc get gc'd\n    }\n\n    if (hitDoc.doc == null) {\n      hitDoc.doc = searcher.doc(hitDoc.id);  // cache miss: read document\n    }\n\n    return hitDoc.doc;\n  }\n\n","bugFix":["09801d5e36f040f424c56c388007a47a95d36d46"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfd046e26ed9bce27d8cb6fab8986d6dab29f264","date":1254940367,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/Hits#doc(int).mjava","sourceNew":null,"sourceOld":"  /** Returns the stored fields of the n<sup>th</sup> document in this set.\n   * <p>Documents are cached, so that repeated requests for the same element may\n   * return the same Document object.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final Document doc(int n) throws CorruptIndexException, IOException {\n    HitDoc hitDoc = hitDoc(n);\n\n    // Update LRU cache of documents\n    remove(hitDoc);               // remove from list, if there\n    addToFront(hitDoc);           // add to front of list\n    if (numDocs > maxDocs) {      // if cache is full\n      HitDoc oldLast = last;\n      remove(last);             // flush last\n      oldLast.doc = null;       // let doc get gc'd\n    }\n\n    if (hitDoc.doc == null) {\n      hitDoc.doc = searcher.doc(hitDoc.id);  // cache miss: read document\n    }\n\n    return hitDoc.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfd046e26ed9bce27d8cb6fab8986d6dab29f264":["1b54a9bc667895a2095a886184bf69a3179e63df"],"39332adc80701d999b904c433479b676c101d2a6":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"1b54a9bc667895a2095a886184bf69a3179e63df":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09801d5e36f040f424c56c388007a47a95d36d46":["39332adc80701d999b904c433479b676c101d2a6"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["09801d5e36f040f424c56c388007a47a95d36d46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bfd046e26ed9bce27d8cb6fab8986d6dab29f264"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["39332adc80701d999b904c433479b676c101d2a6"],"bfd046e26ed9bce27d8cb6fab8986d6dab29f264":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39332adc80701d999b904c433479b676c101d2a6":["09801d5e36f040f424c56c388007a47a95d36d46"],"1b54a9bc667895a2095a886184bf69a3179e63df":["bfd046e26ed9bce27d8cb6fab8986d6dab29f264"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"09801d5e36f040f424c56c388007a47a95d36d46":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}