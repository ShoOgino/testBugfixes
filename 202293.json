{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public abstract void preSoftCommit(CommitUpdateCommand cmd);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preSoftCommit(CommitUpdateCommand cmd) {\n    debug = log.isDebugEnabled(); // refresh our view of debugging occasionally\n\n    synchronized (this) {\n\n      if (!cmd.softCommit) return;  // already handled this at the start of the hard commit\n      newMap();\n\n      // start adding documents to a new map since we won't know if\n      // any added documents will make it into this commit or not.\n      // But we do know that any updates already added will definitely\n      // show up in the latest reader after the commit succeeds.\n      map = new HashMap<BytesRef, LogPtr>();\n\n      if (debug) {\n        log.debug(\"TLOG: preSoftCommit: prevMap=\"+ System.identityHashCode(prevMap) + \" new map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public abstract void preSoftCommit(CommitUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preSoftCommit(CommitUpdateCommand cmd) {\n    debug = log.isDebugEnabled(); // refresh our view of debugging occasionally\n\n    synchronized (this) {\n\n      if (!cmd.softCommit) return;  // already handled this at the start of the hard commit\n      newMap();\n\n      // start adding documents to a new map since we won't know if\n      // any added documents will make it into this commit or not.\n      // But we do know that any updates already added will definitely\n      // show up in the latest reader after the commit succeeds.\n      map = new HashMap<BytesRef, LogPtr>();\n\n      if (debug) {\n        log.debug(\"TLOG: preSoftCommit: prevMap=\"+ System.identityHashCode(prevMap) + \" new map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public abstract void preSoftCommit(CommitUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preSoftCommit(CommitUpdateCommand cmd) {\n    debug = log.isDebugEnabled(); // refresh our view of debugging occasionally\n\n    synchronized (this) {\n\n      if (!cmd.softCommit) return;  // already handled this at the start of the hard commit\n      newMap();\n\n      // start adding documents to a new map since we won't know if\n      // any added documents will make it into this commit or not.\n      // But we do know that any updates already added will definitely\n      // show up in the latest reader after the commit succeeds.\n      map = new HashMap<BytesRef, LogPtr>();\n\n      if (debug) {\n        log.debug(\"TLOG: preSoftCommit: prevMap=\"+ System.identityHashCode(prevMap) + \" new map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public abstract void preSoftCommit(CommitUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4404c73eb4b69219f283c2f08a34a08bfdb6327f","date":1327615748,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preSoftCommit(CommitUpdateCommand cmd) {\n    debug = log.isDebugEnabled(); // refresh our view of debugging occasionally\n    trace = log.isTraceEnabled();\n\n    synchronized (this) {\n\n      if (!cmd.softCommit) return;  // already handled this at the start of the hard commit\n      newMap();\n\n      // start adding documents to a new map since we won't know if\n      // any added documents will make it into this commit or not.\n      // But we do know that any updates already added will definitely\n      // show up in the latest reader after the commit succeeds.\n      map = new HashMap<BytesRef, LogPtr>();\n\n      if (debug) {\n        log.debug(\"TLOG: preSoftCommit: prevMap=\"+ System.identityHashCode(prevMap) + \" new map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void preSoftCommit(CommitUpdateCommand cmd) {\n    debug = log.isDebugEnabled(); // refresh our view of debugging occasionally\n\n    synchronized (this) {\n\n      if (!cmd.softCommit) return;  // already handled this at the start of the hard commit\n      newMap();\n\n      // start adding documents to a new map since we won't know if\n      // any added documents will make it into this commit or not.\n      // But we do know that any updates already added will definitely\n      // show up in the latest reader after the commit succeeds.\n      map = new HashMap<BytesRef, LogPtr>();\n\n      if (debug) {\n        log.debug(\"TLOG: preSoftCommit: prevMap=\"+ System.identityHashCode(prevMap) + \" new map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preSoftCommit(CommitUpdateCommand cmd) {\n    debug = log.isDebugEnabled(); // refresh our view of debugging occasionally\n    trace = log.isTraceEnabled();\n\n    synchronized (this) {\n\n      if (!cmd.softCommit) return;  // already handled this at the start of the hard commit\n      newMap();\n\n      // start adding documents to a new map since we won't know if\n      // any added documents will make it into this commit or not.\n      // But we do know that any updates already added will definitely\n      // show up in the latest reader after the commit succeeds.\n      map = new HashMap<BytesRef, LogPtr>();\n\n      if (debug) {\n        log.debug(\"TLOG: preSoftCommit: prevMap=\"+ System.identityHashCode(prevMap) + \" new map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void preSoftCommit(CommitUpdateCommand cmd) {\n    debug = log.isDebugEnabled(); // refresh our view of debugging occasionally\n\n    synchronized (this) {\n\n      if (!cmd.softCommit) return;  // already handled this at the start of the hard commit\n      newMap();\n\n      // start adding documents to a new map since we won't know if\n      // any added documents will make it into this commit or not.\n      // But we do know that any updates already added will definitely\n      // show up in the latest reader after the commit succeeds.\n      map = new HashMap<BytesRef, LogPtr>();\n\n      if (debug) {\n        log.debug(\"TLOG: preSoftCommit: prevMap=\"+ System.identityHashCode(prevMap) + \" new map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preSoftCommit(CommitUpdateCommand cmd) {\n    debug = log.isDebugEnabled(); // refresh our view of debugging occasionally\n    trace = log.isTraceEnabled();\n\n    synchronized (this) {\n\n      if (!cmd.softCommit) return;  // already handled this at the start of the hard commit\n      newMap();\n\n      // start adding documents to a new map since we won't know if\n      // any added documents will make it into this commit or not.\n      // But we do know that any updates already added will definitely\n      // show up in the latest reader after the commit succeeds.\n      map = new HashMap<BytesRef, LogPtr>();\n\n      if (debug) {\n        log.debug(\"TLOG: preSoftCommit: prevMap=\"+ System.identityHashCode(prevMap) + \" new map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void preSoftCommit(CommitUpdateCommand cmd) {\n    debug = log.isDebugEnabled(); // refresh our view of debugging occasionally\n\n    synchronized (this) {\n\n      if (!cmd.softCommit) return;  // already handled this at the start of the hard commit\n      newMap();\n\n      // start adding documents to a new map since we won't know if\n      // any added documents will make it into this commit or not.\n      // But we do know that any updates already added will definitely\n      // show up in the latest reader after the commit succeeds.\n      map = new HashMap<BytesRef, LogPtr>();\n\n      if (debug) {\n        log.debug(\"TLOG: preSoftCommit: prevMap=\"+ System.identityHashCode(prevMap) + \" new map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preSoftCommit(CommitUpdateCommand cmd) {\n    debug = log.isDebugEnabled(); // refresh our view of debugging occasionally\n    trace = log.isTraceEnabled();\n\n    synchronized (this) {\n\n      if (!cmd.softCommit) return;  // already handled this at the start of the hard commit\n      newMap();\n\n      // start adding documents to a new map since we won't know if\n      // any added documents will make it into this commit or not.\n      // But we do know that any updates already added will definitely\n      // show up in the latest reader after the commit succeeds.\n      map = new HashMap<>();\n\n      if (debug) {\n        log.debug(\"TLOG: preSoftCommit: prevMap=\"+ System.identityHashCode(prevMap) + \" new map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void preSoftCommit(CommitUpdateCommand cmd) {\n    debug = log.isDebugEnabled(); // refresh our view of debugging occasionally\n    trace = log.isTraceEnabled();\n\n    synchronized (this) {\n\n      if (!cmd.softCommit) return;  // already handled this at the start of the hard commit\n      newMap();\n\n      // start adding documents to a new map since we won't know if\n      // any added documents will make it into this commit or not.\n      // But we do know that any updates already added will definitely\n      // show up in the latest reader after the commit succeeds.\n      map = new HashMap<BytesRef, LogPtr>();\n\n      if (debug) {\n        log.debug(\"TLOG: preSoftCommit: prevMap=\"+ System.identityHashCode(prevMap) + \" new map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#preSoftCommit(CommitUpdateCommand).mjava","sourceNew":"  public void preSoftCommit(CommitUpdateCommand cmd) {\n    debug = log.isDebugEnabled(); // refresh our view of debugging occasionally\n    trace = log.isTraceEnabled();\n\n    synchronized (this) {\n\n      if (!cmd.softCommit) return;  // already handled this at the start of the hard commit\n      newMap();\n\n      // start adding documents to a new map since we won't know if\n      // any added documents will make it into this commit or not.\n      // But we do know that any updates already added will definitely\n      // show up in the latest reader after the commit succeeds.\n      map = new HashMap<>();\n\n      if (debug) {\n        log.debug(\"TLOG: preSoftCommit: prevMap={} new map={}\", System.identityHashCode(prevMap), System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void preSoftCommit(CommitUpdateCommand cmd) {\n    debug = log.isDebugEnabled(); // refresh our view of debugging occasionally\n    trace = log.isTraceEnabled();\n\n    synchronized (this) {\n\n      if (!cmd.softCommit) return;  // already handled this at the start of the hard commit\n      newMap();\n\n      // start adding documents to a new map since we won't know if\n      // any added documents will make it into this commit or not.\n      // But we do know that any updates already added will definitely\n      // show up in the latest reader after the commit succeeds.\n      map = new HashMap<>();\n\n      if (debug) {\n        log.debug(\"TLOG: preSoftCommit: prevMap=\"+ System.identityHashCode(prevMap) + \" new map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"740d649f013f07efbeb73ca854f106c60166e7c0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"4404c73eb4b69219f283c2f08a34a08bfdb6327f":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["740d649f013f07efbeb73ca854f106c60166e7c0"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"4404c73eb4b69219f283c2f08a34a08bfdb6327f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}