{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","sourceNew":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    return findIntersections(planetModel, q, bounds, moreBounds).length > 0;\n  }\n\n","sourceOld":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    return findIntersections(planetModel, q, bounds, moreBounds).length > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8bf516b42eec25ec0f36c31310e126f4a91c835","date":1462479415,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","sourceNew":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    \n    // Save on allocations; do inline instead of calling findIntersections\n    //System.err.println(\"Looking for intersection between plane \"+this+\" and plane \"+q+\" within bounds\");\n    // Unnormalized, unchecked...\n    final Vector lineVector = new Vector(y * q.z - z * q.y, z * q.x - x * q.z, x * q.y - y * q.x);\n    if (Math.abs(lineVector.x) < MINIMUM_RESOLUTION && Math.abs(lineVector.y) < MINIMUM_RESOLUTION && Math.abs(lineVector.z) < MINIMUM_RESOLUTION) {\n      // Degenerate case: parallel planes\n      //System.err.println(\" planes are parallel - no intersection\");\n      return false;\n    }\n\n    // The line will have the equation: A t + A0 = x, B t + B0 = y, C t + C0 = z.\n    // We have A, B, and C.  In order to come up with A0, B0, and C0, we need to find a point that is on both planes.\n    // To do this, we find the largest vector value (either x, y, or z), and look for a point that solves both plane equations\n    // simultaneous.  For example, let's say that the vector is (0.5,0.5,1), and the two plane equations are:\n    // 0.7 x + 0.3 y + 0.1 z + 0.0 = 0\n    // and\n    // 0.9 x - 0.1 y + 0.2 z + 4.0 = 0\n    // Then we'd pick z = 0, so the equations to solve for x and y would be:\n    // 0.7 x + 0.3y = 0.0\n    // 0.9 x - 0.1y = -4.0\n    // ... which can readily be solved using standard linear algebra.  Generally:\n    // Q0 x + R0 y = S0\n    // Q1 x + R1 y = S1\n    // ... can be solved by Cramer's rule:\n    // x = det(S0 R0 / S1 R1) / det(Q0 R0 / Q1 R1)\n    // y = det(Q0 S0 / Q1 S1) / det(Q0 R0 / Q1 R1)\n    // ... where det( a b / c d ) = ad - bc, so:\n    // x = (S0 * R1 - R0 * S1) / (Q0 * R1 - R0 * Q1)\n    // y = (Q0 * S1 - S0 * Q1) / (Q0 * R1 - R0 * Q1)\n    double x0;\n    double y0;\n    double z0;\n    // We try to maximize the determinant in the denominator\n    final double denomYZ = this.y * q.z - this.z * q.y;\n    final double denomXZ = this.x * q.z - this.z * q.x;\n    final double denomXY = this.x * q.y - this.y * q.x;\n    if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {\n      // X is the biggest, so our point will have x0 = 0.0\n      if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomYZ;\n      x0 = 0.0;\n      y0 = (-this.D * q.z - this.z * -q.D) * denom;\n      z0 = (this.y * -q.D + this.D * q.y) * denom;\n    } else if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {\n      // Y is the biggest, so y0 = 0.0\n      if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXZ;\n      x0 = (-this.D * q.z - this.z * -q.D) * denom;\n      y0 = 0.0;\n      z0 = (this.x * -q.D + this.D * q.x) * denom;\n    } else {\n      // Z is the biggest, so Z0 = 0.0\n      if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXY;\n      x0 = (-this.D * q.y - this.y * -q.D) * denom;\n      y0 = (this.x * -q.D + this.D * q.x) * denom;\n      z0 = 0.0;\n    }\n\n    // Once an intersecting line is determined, the next step is to intersect that line with the ellipsoid, which\n    // will yield zero, one, or two points.\n    // The ellipsoid equation: 1,0 = x^2/a^2 + y^2/b^2 + z^2/c^2\n    // 1.0 = (At+A0)^2/a^2 + (Bt+B0)^2/b^2 + (Ct+C0)^2/c^2\n    // A^2 t^2 / a^2 + 2AA0t / a^2 + A0^2 / a^2 + B^2 t^2 / b^2 + 2BB0t / b^2 + B0^2 / b^2 + C^2 t^2 / c^2 + 2CC0t / c^2 + C0^2 / c^2  - 1,0 = 0.0\n    // [A^2 / a^2 + B^2 / b^2 + C^2 / c^2] t^2 + [2AA0 / a^2 + 2BB0 / b^2 + 2CC0 / c^2] t + [A0^2 / a^2 + B0^2 / b^2 + C0^2 / c^2 - 1,0] = 0.0\n    // Use the quadratic formula to determine t values and candidate point(s)\n    final double A = lineVector.x * lineVector.x * planetModel.inverseAbSquared +\n      lineVector.y * lineVector.y * planetModel.inverseAbSquared +\n      lineVector.z * lineVector.z * planetModel.inverseCSquared;\n    final double B = 2.0 * (lineVector.x * x0 * planetModel.inverseAbSquared + lineVector.y * y0 * planetModel.inverseAbSquared + lineVector.z * z0 * planetModel.inverseCSquared);\n    final double C = x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;\n\n    final double BsquaredMinus = B * B - 4.0 * A * C;\n    if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {\n      //System.err.println(\" One point of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // One solution only\n      final double t = -B * inverse2A;\n      // Maybe we can save ourselves the cost of construction of a point?\n      final double pointX = lineVector.x * t + x0;\n      final double pointY = lineVector.y * t + y0;\n      final double pointZ = lineVector.z * t + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      return true;\n    } else if (BsquaredMinus > 0.0) {\n      //System.err.println(\" Two points of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // Two solutions\n      final double sqrtTerm = Math.sqrt(BsquaredMinus);\n      final double t1 = (-B + sqrtTerm) * inverse2A;\n      final double t2 = (-B - sqrtTerm) * inverse2A;\n      // Up to two points being returned.  Do what we can to save on object creation though.\n      final double point1X = lineVector.x * t1 + x0;\n      final double point1Y = lineVector.y * t1 + y0;\n      final double point1Z = lineVector.z * t1 + z0;\n      boolean point1Valid = true;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point1X, point1Y, point1Z)) {\n          point1Valid = false;\n          break;\n        }\n      }\n      if (point1Valid) {\n        for (final Membership bound : moreBounds) {\n          if (!bound.isWithin(point1X, point1Y, point1Z)) {\n            point1Valid = false;\n            break;\n          }\n        }\n      }\n      if (point1Valid) {\n        return true;\n      }\n      final double point2X = lineVector.x * t2 + x0;\n      final double point2Y = lineVector.y * t2 + y0;\n      final double point2Z = lineVector.z * t2 + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      //System.err.println(\" no solutions - no intersection\");\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    return findIntersections(planetModel, q, bounds, moreBounds).length > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f62d3e07d022fc0a93a17d141edb605494aa3ee7","date":1462480525,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","sourceNew":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    \n    // Save on allocations; do inline instead of calling findIntersections\n    //System.err.println(\"Looking for intersection between plane \"+this+\" and plane \"+q+\" within bounds\");\n    // Unnormalized, unchecked...\n    final double lineVectorX = y * q.z - z * q.y;\n    final double lineVectorY = z * q.x - x * q.z;\n    final double lineVectorZ = x * q.y - y * q.x;\n\n    if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {\n      // Degenerate case: parallel planes\n      //System.err.println(\" planes are parallel - no intersection\");\n      return false;\n    }\n\n    // The line will have the equation: A t + A0 = x, B t + B0 = y, C t + C0 = z.\n    // We have A, B, and C.  In order to come up with A0, B0, and C0, we need to find a point that is on both planes.\n    // To do this, we find the largest vector value (either x, y, or z), and look for a point that solves both plane equations\n    // simultaneous.  For example, let's say that the vector is (0.5,0.5,1), and the two plane equations are:\n    // 0.7 x + 0.3 y + 0.1 z + 0.0 = 0\n    // and\n    // 0.9 x - 0.1 y + 0.2 z + 4.0 = 0\n    // Then we'd pick z = 0, so the equations to solve for x and y would be:\n    // 0.7 x + 0.3y = 0.0\n    // 0.9 x - 0.1y = -4.0\n    // ... which can readily be solved using standard linear algebra.  Generally:\n    // Q0 x + R0 y = S0\n    // Q1 x + R1 y = S1\n    // ... can be solved by Cramer's rule:\n    // x = det(S0 R0 / S1 R1) / det(Q0 R0 / Q1 R1)\n    // y = det(Q0 S0 / Q1 S1) / det(Q0 R0 / Q1 R1)\n    // ... where det( a b / c d ) = ad - bc, so:\n    // x = (S0 * R1 - R0 * S1) / (Q0 * R1 - R0 * Q1)\n    // y = (Q0 * S1 - S0 * Q1) / (Q0 * R1 - R0 * Q1)\n    double x0;\n    double y0;\n    double z0;\n    // We try to maximize the determinant in the denominator\n    final double denomYZ = this.y * q.z - this.z * q.y;\n    final double denomXZ = this.x * q.z - this.z * q.x;\n    final double denomXY = this.x * q.y - this.y * q.x;\n    if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {\n      // X is the biggest, so our point will have x0 = 0.0\n      if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomYZ;\n      x0 = 0.0;\n      y0 = (-this.D * q.z - this.z * -q.D) * denom;\n      z0 = (this.y * -q.D + this.D * q.y) * denom;\n    } else if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {\n      // Y is the biggest, so y0 = 0.0\n      if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXZ;\n      x0 = (-this.D * q.z - this.z * -q.D) * denom;\n      y0 = 0.0;\n      z0 = (this.x * -q.D + this.D * q.x) * denom;\n    } else {\n      // Z is the biggest, so Z0 = 0.0\n      if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXY;\n      x0 = (-this.D * q.y - this.y * -q.D) * denom;\n      y0 = (this.x * -q.D + this.D * q.x) * denom;\n      z0 = 0.0;\n    }\n\n    // Once an intersecting line is determined, the next step is to intersect that line with the ellipsoid, which\n    // will yield zero, one, or two points.\n    // The ellipsoid equation: 1,0 = x^2/a^2 + y^2/b^2 + z^2/c^2\n    // 1.0 = (At+A0)^2/a^2 + (Bt+B0)^2/b^2 + (Ct+C0)^2/c^2\n    // A^2 t^2 / a^2 + 2AA0t / a^2 + A0^2 / a^2 + B^2 t^2 / b^2 + 2BB0t / b^2 + B0^2 / b^2 + C^2 t^2 / c^2 + 2CC0t / c^2 + C0^2 / c^2  - 1,0 = 0.0\n    // [A^2 / a^2 + B^2 / b^2 + C^2 / c^2] t^2 + [2AA0 / a^2 + 2BB0 / b^2 + 2CC0 / c^2] t + [A0^2 / a^2 + B0^2 / b^2 + C0^2 / c^2 - 1,0] = 0.0\n    // Use the quadratic formula to determine t values and candidate point(s)\n    final double A = lineVectorX * lineVectorX * planetModel.inverseAbSquared +\n      lineVectorY * lineVectorY * planetModel.inverseAbSquared +\n      lineVectorZ * lineVectorZ * planetModel.inverseCSquared;\n    final double B = 2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);\n    final double C = x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;\n\n    final double BsquaredMinus = B * B - 4.0 * A * C;\n    if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {\n      //System.err.println(\" One point of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // One solution only\n      final double t = -B * inverse2A;\n      // Maybe we can save ourselves the cost of construction of a point?\n      final double pointX = lineVectorX * t + x0;\n      final double pointY = lineVectorY * t + y0;\n      final double pointZ = lineVectorZ * t + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      return true;\n    } else if (BsquaredMinus > 0.0) {\n      //System.err.println(\" Two points of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // Two solutions\n      final double sqrtTerm = Math.sqrt(BsquaredMinus);\n      final double t1 = (-B + sqrtTerm) * inverse2A;\n      final double t2 = (-B - sqrtTerm) * inverse2A;\n      // Up to two points being returned.  Do what we can to save on object creation though.\n      final double point1X = lineVectorX * t1 + x0;\n      final double point1Y = lineVectorY * t1 + y0;\n      final double point1Z = lineVectorZ * t1 + z0;\n      boolean point1Valid = true;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point1X, point1Y, point1Z)) {\n          point1Valid = false;\n          break;\n        }\n      }\n      if (point1Valid) {\n        for (final Membership bound : moreBounds) {\n          if (!bound.isWithin(point1X, point1Y, point1Z)) {\n            point1Valid = false;\n            break;\n          }\n        }\n      }\n      if (point1Valid) {\n        return true;\n      }\n      final double point2X = lineVectorX * t2 + x0;\n      final double point2Y = lineVectorY * t2 + y0;\n      final double point2Z = lineVectorZ * t2 + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      //System.err.println(\" no solutions - no intersection\");\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    \n    // Save on allocations; do inline instead of calling findIntersections\n    //System.err.println(\"Looking for intersection between plane \"+this+\" and plane \"+q+\" within bounds\");\n    // Unnormalized, unchecked...\n    final Vector lineVector = new Vector(y * q.z - z * q.y, z * q.x - x * q.z, x * q.y - y * q.x);\n    if (Math.abs(lineVector.x) < MINIMUM_RESOLUTION && Math.abs(lineVector.y) < MINIMUM_RESOLUTION && Math.abs(lineVector.z) < MINIMUM_RESOLUTION) {\n      // Degenerate case: parallel planes\n      //System.err.println(\" planes are parallel - no intersection\");\n      return false;\n    }\n\n    // The line will have the equation: A t + A0 = x, B t + B0 = y, C t + C0 = z.\n    // We have A, B, and C.  In order to come up with A0, B0, and C0, we need to find a point that is on both planes.\n    // To do this, we find the largest vector value (either x, y, or z), and look for a point that solves both plane equations\n    // simultaneous.  For example, let's say that the vector is (0.5,0.5,1), and the two plane equations are:\n    // 0.7 x + 0.3 y + 0.1 z + 0.0 = 0\n    // and\n    // 0.9 x - 0.1 y + 0.2 z + 4.0 = 0\n    // Then we'd pick z = 0, so the equations to solve for x and y would be:\n    // 0.7 x + 0.3y = 0.0\n    // 0.9 x - 0.1y = -4.0\n    // ... which can readily be solved using standard linear algebra.  Generally:\n    // Q0 x + R0 y = S0\n    // Q1 x + R1 y = S1\n    // ... can be solved by Cramer's rule:\n    // x = det(S0 R0 / S1 R1) / det(Q0 R0 / Q1 R1)\n    // y = det(Q0 S0 / Q1 S1) / det(Q0 R0 / Q1 R1)\n    // ... where det( a b / c d ) = ad - bc, so:\n    // x = (S0 * R1 - R0 * S1) / (Q0 * R1 - R0 * Q1)\n    // y = (Q0 * S1 - S0 * Q1) / (Q0 * R1 - R0 * Q1)\n    double x0;\n    double y0;\n    double z0;\n    // We try to maximize the determinant in the denominator\n    final double denomYZ = this.y * q.z - this.z * q.y;\n    final double denomXZ = this.x * q.z - this.z * q.x;\n    final double denomXY = this.x * q.y - this.y * q.x;\n    if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {\n      // X is the biggest, so our point will have x0 = 0.0\n      if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomYZ;\n      x0 = 0.0;\n      y0 = (-this.D * q.z - this.z * -q.D) * denom;\n      z0 = (this.y * -q.D + this.D * q.y) * denom;\n    } else if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {\n      // Y is the biggest, so y0 = 0.0\n      if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXZ;\n      x0 = (-this.D * q.z - this.z * -q.D) * denom;\n      y0 = 0.0;\n      z0 = (this.x * -q.D + this.D * q.x) * denom;\n    } else {\n      // Z is the biggest, so Z0 = 0.0\n      if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXY;\n      x0 = (-this.D * q.y - this.y * -q.D) * denom;\n      y0 = (this.x * -q.D + this.D * q.x) * denom;\n      z0 = 0.0;\n    }\n\n    // Once an intersecting line is determined, the next step is to intersect that line with the ellipsoid, which\n    // will yield zero, one, or two points.\n    // The ellipsoid equation: 1,0 = x^2/a^2 + y^2/b^2 + z^2/c^2\n    // 1.0 = (At+A0)^2/a^2 + (Bt+B0)^2/b^2 + (Ct+C0)^2/c^2\n    // A^2 t^2 / a^2 + 2AA0t / a^2 + A0^2 / a^2 + B^2 t^2 / b^2 + 2BB0t / b^2 + B0^2 / b^2 + C^2 t^2 / c^2 + 2CC0t / c^2 + C0^2 / c^2  - 1,0 = 0.0\n    // [A^2 / a^2 + B^2 / b^2 + C^2 / c^2] t^2 + [2AA0 / a^2 + 2BB0 / b^2 + 2CC0 / c^2] t + [A0^2 / a^2 + B0^2 / b^2 + C0^2 / c^2 - 1,0] = 0.0\n    // Use the quadratic formula to determine t values and candidate point(s)\n    final double A = lineVector.x * lineVector.x * planetModel.inverseAbSquared +\n      lineVector.y * lineVector.y * planetModel.inverseAbSquared +\n      lineVector.z * lineVector.z * planetModel.inverseCSquared;\n    final double B = 2.0 * (lineVector.x * x0 * planetModel.inverseAbSquared + lineVector.y * y0 * planetModel.inverseAbSquared + lineVector.z * z0 * planetModel.inverseCSquared);\n    final double C = x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;\n\n    final double BsquaredMinus = B * B - 4.0 * A * C;\n    if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {\n      //System.err.println(\" One point of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // One solution only\n      final double t = -B * inverse2A;\n      // Maybe we can save ourselves the cost of construction of a point?\n      final double pointX = lineVector.x * t + x0;\n      final double pointY = lineVector.y * t + y0;\n      final double pointZ = lineVector.z * t + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      return true;\n    } else if (BsquaredMinus > 0.0) {\n      //System.err.println(\" Two points of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // Two solutions\n      final double sqrtTerm = Math.sqrt(BsquaredMinus);\n      final double t1 = (-B + sqrtTerm) * inverse2A;\n      final double t2 = (-B - sqrtTerm) * inverse2A;\n      // Up to two points being returned.  Do what we can to save on object creation though.\n      final double point1X = lineVector.x * t1 + x0;\n      final double point1Y = lineVector.y * t1 + y0;\n      final double point1Z = lineVector.z * t1 + z0;\n      boolean point1Valid = true;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point1X, point1Y, point1Z)) {\n          point1Valid = false;\n          break;\n        }\n      }\n      if (point1Valid) {\n        for (final Membership bound : moreBounds) {\n          if (!bound.isWithin(point1X, point1Y, point1Z)) {\n            point1Valid = false;\n            break;\n          }\n        }\n      }\n      if (point1Valid) {\n        return true;\n      }\n      final double point2X = lineVector.x * t2 + x0;\n      final double point2Y = lineVector.y * t2 + y0;\n      final double point2Z = lineVector.z * t2 + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      //System.err.println(\" no solutions - no intersection\");\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","sourceNew":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    \n    // Save on allocations; do inline instead of calling findIntersections\n    //System.err.println(\"Looking for intersection between plane \"+this+\" and plane \"+q+\" within bounds\");\n    // Unnormalized, unchecked...\n    final double lineVectorX = y * q.z - z * q.y;\n    final double lineVectorY = z * q.x - x * q.z;\n    final double lineVectorZ = x * q.y - y * q.x;\n\n    if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {\n      // Degenerate case: parallel planes\n      //System.err.println(\" planes are parallel - no intersection\");\n      return false;\n    }\n\n    // The line will have the equation: A t + A0 = x, B t + B0 = y, C t + C0 = z.\n    // We have A, B, and C.  In order to come up with A0, B0, and C0, we need to find a point that is on both planes.\n    // To do this, we find the largest vector value (either x, y, or z), and look for a point that solves both plane equations\n    // simultaneous.  For example, let's say that the vector is (0.5,0.5,1), and the two plane equations are:\n    // 0.7 x + 0.3 y + 0.1 z + 0.0 = 0\n    // and\n    // 0.9 x - 0.1 y + 0.2 z + 4.0 = 0\n    // Then we'd pick z = 0, so the equations to solve for x and y would be:\n    // 0.7 x + 0.3y = 0.0\n    // 0.9 x - 0.1y = -4.0\n    // ... which can readily be solved using standard linear algebra.  Generally:\n    // Q0 x + R0 y = S0\n    // Q1 x + R1 y = S1\n    // ... can be solved by Cramer's rule:\n    // x = det(S0 R0 / S1 R1) / det(Q0 R0 / Q1 R1)\n    // y = det(Q0 S0 / Q1 S1) / det(Q0 R0 / Q1 R1)\n    // ... where det( a b / c d ) = ad - bc, so:\n    // x = (S0 * R1 - R0 * S1) / (Q0 * R1 - R0 * Q1)\n    // y = (Q0 * S1 - S0 * Q1) / (Q0 * R1 - R0 * Q1)\n    double x0;\n    double y0;\n    double z0;\n    // We try to maximize the determinant in the denominator\n    final double denomYZ = this.y * q.z - this.z * q.y;\n    final double denomXZ = this.x * q.z - this.z * q.x;\n    final double denomXY = this.x * q.y - this.y * q.x;\n    if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {\n      // X is the biggest, so our point will have x0 = 0.0\n      if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomYZ;\n      x0 = 0.0;\n      y0 = (-this.D * q.z - this.z * -q.D) * denom;\n      z0 = (this.y * -q.D + this.D * q.y) * denom;\n    } else if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {\n      // Y is the biggest, so y0 = 0.0\n      if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXZ;\n      x0 = (-this.D * q.z - this.z * -q.D) * denom;\n      y0 = 0.0;\n      z0 = (this.x * -q.D + this.D * q.x) * denom;\n    } else {\n      // Z is the biggest, so Z0 = 0.0\n      if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXY;\n      x0 = (-this.D * q.y - this.y * -q.D) * denom;\n      y0 = (this.x * -q.D + this.D * q.x) * denom;\n      z0 = 0.0;\n    }\n\n    // Once an intersecting line is determined, the next step is to intersect that line with the ellipsoid, which\n    // will yield zero, one, or two points.\n    // The ellipsoid equation: 1,0 = x^2/a^2 + y^2/b^2 + z^2/c^2\n    // 1.0 = (At+A0)^2/a^2 + (Bt+B0)^2/b^2 + (Ct+C0)^2/c^2\n    // A^2 t^2 / a^2 + 2AA0t / a^2 + A0^2 / a^2 + B^2 t^2 / b^2 + 2BB0t / b^2 + B0^2 / b^2 + C^2 t^2 / c^2 + 2CC0t / c^2 + C0^2 / c^2  - 1,0 = 0.0\n    // [A^2 / a^2 + B^2 / b^2 + C^2 / c^2] t^2 + [2AA0 / a^2 + 2BB0 / b^2 + 2CC0 / c^2] t + [A0^2 / a^2 + B0^2 / b^2 + C0^2 / c^2 - 1,0] = 0.0\n    // Use the quadratic formula to determine t values and candidate point(s)\n    final double A = lineVectorX * lineVectorX * planetModel.inverseAbSquared +\n      lineVectorY * lineVectorY * planetModel.inverseAbSquared +\n      lineVectorZ * lineVectorZ * planetModel.inverseCSquared;\n    final double B = 2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);\n    final double C = x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;\n\n    final double BsquaredMinus = B * B - 4.0 * A * C;\n    if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {\n      //System.err.println(\" One point of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // One solution only\n      final double t = -B * inverse2A;\n      // Maybe we can save ourselves the cost of construction of a point?\n      final double pointX = lineVectorX * t + x0;\n      final double pointY = lineVectorY * t + y0;\n      final double pointZ = lineVectorZ * t + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      return true;\n    } else if (BsquaredMinus > 0.0) {\n      //System.err.println(\" Two points of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // Two solutions\n      final double sqrtTerm = Math.sqrt(BsquaredMinus);\n      final double t1 = (-B + sqrtTerm) * inverse2A;\n      final double t2 = (-B - sqrtTerm) * inverse2A;\n      // Up to two points being returned.  Do what we can to save on object creation though.\n      final double point1X = lineVectorX * t1 + x0;\n      final double point1Y = lineVectorY * t1 + y0;\n      final double point1Z = lineVectorZ * t1 + z0;\n      boolean point1Valid = true;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point1X, point1Y, point1Z)) {\n          point1Valid = false;\n          break;\n        }\n      }\n      if (point1Valid) {\n        for (final Membership bound : moreBounds) {\n          if (!bound.isWithin(point1X, point1Y, point1Z)) {\n            point1Valid = false;\n            break;\n          }\n        }\n      }\n      if (point1Valid) {\n        return true;\n      }\n      final double point2X = lineVectorX * t2 + x0;\n      final double point2Y = lineVectorY * t2 + y0;\n      final double point2Z = lineVectorZ * t2 + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      //System.err.println(\" no solutions - no intersection\");\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    return findIntersections(planetModel, q, bounds, moreBounds).length > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","sourceNew":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    \n    // Save on allocations; do inline instead of calling findIntersections\n    //System.err.println(\"Looking for intersection between plane \"+this+\" and plane \"+q+\" within bounds\");\n    // Unnormalized, unchecked...\n    final double lineVectorX = y * q.z - z * q.y;\n    final double lineVectorY = z * q.x - x * q.z;\n    final double lineVectorZ = x * q.y - y * q.x;\n\n    if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {\n      // Degenerate case: parallel planes\n      //System.err.println(\" planes are parallel - no intersection\");\n      return false;\n    }\n\n    // The line will have the equation: A t + A0 = x, B t + B0 = y, C t + C0 = z.\n    // We have A, B, and C.  In order to come up with A0, B0, and C0, we need to find a point that is on both planes.\n    // To do this, we find the largest vector value (either x, y, or z), and look for a point that solves both plane equations\n    // simultaneous.  For example, let's say that the vector is (0.5,0.5,1), and the two plane equations are:\n    // 0.7 x + 0.3 y + 0.1 z + 0.0 = 0\n    // and\n    // 0.9 x - 0.1 y + 0.2 z + 4.0 = 0\n    // Then we'd pick z = 0, so the equations to solve for x and y would be:\n    // 0.7 x + 0.3y = 0.0\n    // 0.9 x - 0.1y = -4.0\n    // ... which can readily be solved using standard linear algebra.  Generally:\n    // Q0 x + R0 y = S0\n    // Q1 x + R1 y = S1\n    // ... can be solved by Cramer's rule:\n    // x = det(S0 R0 / S1 R1) / det(Q0 R0 / Q1 R1)\n    // y = det(Q0 S0 / Q1 S1) / det(Q0 R0 / Q1 R1)\n    // ... where det( a b / c d ) = ad - bc, so:\n    // x = (S0 * R1 - R0 * S1) / (Q0 * R1 - R0 * Q1)\n    // y = (Q0 * S1 - S0 * Q1) / (Q0 * R1 - R0 * Q1)\n    double x0;\n    double y0;\n    double z0;\n    // We try to maximize the determinant in the denominator\n    final double denomYZ = this.y * q.z - this.z * q.y;\n    final double denomXZ = this.x * q.z - this.z * q.x;\n    final double denomXY = this.x * q.y - this.y * q.x;\n    if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {\n      // X is the biggest, so our point will have x0 = 0.0\n      if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomYZ;\n      x0 = 0.0;\n      y0 = (-this.D * q.z - this.z * -q.D) * denom;\n      z0 = (this.y * -q.D + this.D * q.y) * denom;\n    } else if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {\n      // Y is the biggest, so y0 = 0.0\n      if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXZ;\n      x0 = (-this.D * q.z - this.z * -q.D) * denom;\n      y0 = 0.0;\n      z0 = (this.x * -q.D + this.D * q.x) * denom;\n    } else {\n      // Z is the biggest, so Z0 = 0.0\n      if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXY;\n      x0 = (-this.D * q.y - this.y * -q.D) * denom;\n      y0 = (this.x * -q.D + this.D * q.x) * denom;\n      z0 = 0.0;\n    }\n\n    // Once an intersecting line is determined, the next step is to intersect that line with the ellipsoid, which\n    // will yield zero, one, or two points.\n    // The ellipsoid equation: 1,0 = x^2/a^2 + y^2/b^2 + z^2/c^2\n    // 1.0 = (At+A0)^2/a^2 + (Bt+B0)^2/b^2 + (Ct+C0)^2/c^2\n    // A^2 t^2 / a^2 + 2AA0t / a^2 + A0^2 / a^2 + B^2 t^2 / b^2 + 2BB0t / b^2 + B0^2 / b^2 + C^2 t^2 / c^2 + 2CC0t / c^2 + C0^2 / c^2  - 1,0 = 0.0\n    // [A^2 / a^2 + B^2 / b^2 + C^2 / c^2] t^2 + [2AA0 / a^2 + 2BB0 / b^2 + 2CC0 / c^2] t + [A0^2 / a^2 + B0^2 / b^2 + C0^2 / c^2 - 1,0] = 0.0\n    // Use the quadratic formula to determine t values and candidate point(s)\n    final double A = lineVectorX * lineVectorX * planetModel.inverseAbSquared +\n      lineVectorY * lineVectorY * planetModel.inverseAbSquared +\n      lineVectorZ * lineVectorZ * planetModel.inverseCSquared;\n    final double B = 2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);\n    final double C = x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;\n\n    final double BsquaredMinus = B * B - 4.0 * A * C;\n    if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {\n      //System.err.println(\" One point of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // One solution only\n      final double t = -B * inverse2A;\n      // Maybe we can save ourselves the cost of construction of a point?\n      final double pointX = lineVectorX * t + x0;\n      final double pointY = lineVectorY * t + y0;\n      final double pointZ = lineVectorZ * t + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      return true;\n    } else if (BsquaredMinus > 0.0) {\n      //System.err.println(\" Two points of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // Two solutions\n      final double sqrtTerm = Math.sqrt(BsquaredMinus);\n      final double t1 = (-B + sqrtTerm) * inverse2A;\n      final double t2 = (-B - sqrtTerm) * inverse2A;\n      // Up to two points being returned.  Do what we can to save on object creation though.\n      final double point1X = lineVectorX * t1 + x0;\n      final double point1Y = lineVectorY * t1 + y0;\n      final double point1Z = lineVectorZ * t1 + z0;\n      boolean point1Valid = true;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point1X, point1Y, point1Z)) {\n          point1Valid = false;\n          break;\n        }\n      }\n      if (point1Valid) {\n        for (final Membership bound : moreBounds) {\n          if (!bound.isWithin(point1X, point1Y, point1Z)) {\n            point1Valid = false;\n            break;\n          }\n        }\n      }\n      if (point1Valid) {\n        return true;\n      }\n      final double point2X = lineVectorX * t2 + x0;\n      final double point2Y = lineVectorY * t2 + y0;\n      final double point2Z = lineVectorZ * t2 + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      //System.err.println(\" no solutions - no intersection\");\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    return findIntersections(planetModel, q, bounds, moreBounds).length > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#intersects(PlanetModel,Plane,GeoPoint[],GeoPoint[],Membership[],Membership...).mjava","sourceNew":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    \n    // Save on allocations; do inline instead of calling findIntersections\n    //System.err.println(\"Looking for intersection between plane \"+this+\" and plane \"+q+\" within bounds\");\n    // Unnormalized, unchecked...\n    final double lineVectorX = y * q.z - z * q.y;\n    final double lineVectorY = z * q.x - x * q.z;\n    final double lineVectorZ = x * q.y - y * q.x;\n\n    if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {\n      // Degenerate case: parallel planes\n      //System.err.println(\" planes are parallel - no intersection\");\n      return false;\n    }\n\n    // The line will have the equation: A t + A0 = x, B t + B0 = y, C t + C0 = z.\n    // We have A, B, and C.  In order to come up with A0, B0, and C0, we need to find a point that is on both planes.\n    // To do this, we find the largest vector value (either x, y, or z), and look for a point that solves both plane equations\n    // simultaneous.  For example, let's say that the vector is (0.5,0.5,1), and the two plane equations are:\n    // 0.7 x + 0.3 y + 0.1 z + 0.0 = 0\n    // and\n    // 0.9 x - 0.1 y + 0.2 z + 4.0 = 0\n    // Then we'd pick z = 0, so the equations to solve for x and y would be:\n    // 0.7 x + 0.3y = 0.0\n    // 0.9 x - 0.1y = -4.0\n    // ... which can readily be solved using standard linear algebra.  Generally:\n    // Q0 x + R0 y = S0\n    // Q1 x + R1 y = S1\n    // ... can be solved by Cramer's rule:\n    // x = det(S0 R0 / S1 R1) / det(Q0 R0 / Q1 R1)\n    // y = det(Q0 S0 / Q1 S1) / det(Q0 R0 / Q1 R1)\n    // ... where det( a b / zScaling d ) = ad - bc, so:\n    // x = (S0 * R1 - R0 * S1) / (Q0 * R1 - R0 * Q1)\n    // y = (Q0 * S1 - S0 * Q1) / (Q0 * R1 - R0 * Q1)\n    double x0;\n    double y0;\n    double z0;\n    // We try to maximize the determinant in the denominator\n    final double denomYZ = this.y * q.z - this.z * q.y;\n    final double denomXZ = this.x * q.z - this.z * q.x;\n    final double denomXY = this.x * q.y - this.y * q.x;\n    if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {\n      // X is the biggest, so our point will have x0 = 0.0\n      if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomYZ;\n      x0 = 0.0;\n      y0 = (-this.D * q.z - this.z * -q.D) * denom;\n      z0 = (this.y * -q.D + this.D * q.y) * denom;\n    } else if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {\n      // Y is the biggest, so y0 = 0.0\n      if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXZ;\n      x0 = (-this.D * q.z - this.z * -q.D) * denom;\n      y0 = 0.0;\n      z0 = (this.x * -q.D + this.D * q.x) * denom;\n    } else {\n      // Z is the biggest, so Z0 = 0.0\n      if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXY;\n      x0 = (-this.D * q.y - this.y * -q.D) * denom;\n      y0 = (this.x * -q.D + this.D * q.x) * denom;\n      z0 = 0.0;\n    }\n\n    // Once an intersecting line is determined, the next step is to intersect that line with the ellipsoid, which\n    // will yield zero, one, or two points.\n    // The ellipsoid equation: 1,0 = x^2/a^2 + y^2/b^2 + z^2/zScaling^2\n    // 1.0 = (At+A0)^2/a^2 + (Bt+B0)^2/b^2 + (Ct+C0)^2/zScaling^2\n    // A^2 t^2 / a^2 + 2AA0t / a^2 + A0^2 / a^2 + B^2 t^2 / b^2 + 2BB0t / b^2 + B0^2 / b^2 + C^2 t^2 / zScaling^2 + 2CC0t / zScaling^2 + C0^2 / zScaling^2  - 1,0 = 0.0\n    // [A^2 / a^2 + B^2 / b^2 + C^2 / zScaling^2] t^2 + [2AA0 / a^2 + 2BB0 / b^2 + 2CC0 / zScaling^2] t + [A0^2 / a^2 + B0^2 / b^2 + C0^2 / zScaling^2 - 1,0] = 0.0\n    // Use the quadratic formula to determine t values and candidate point(s)\n    final double A = lineVectorX * lineVectorX * planetModel.inverseXYScalingSquared +\n      lineVectorY * lineVectorY * planetModel.inverseXYScalingSquared +\n      lineVectorZ * lineVectorZ * planetModel.inverseZScalingSquared;\n    final double B = 2.0 * (lineVectorX * x0 * planetModel.inverseXYScalingSquared + lineVectorY * y0 * planetModel.inverseXYScalingSquared + lineVectorZ * z0 * planetModel.inverseZScalingSquared);\n    final double C = x0 * x0 * planetModel.inverseXYScalingSquared + y0 * y0 * planetModel.inverseXYScalingSquared + z0 * z0 * planetModel.inverseZScalingSquared - 1.0;\n\n    final double BsquaredMinus = B * B - 4.0 * A * C;\n    if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {\n      //System.err.println(\" One point of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // One solution only\n      final double t = -B * inverse2A;\n      // Maybe we can save ourselves the cost of construction of a point?\n      final double pointX = lineVectorX * t + x0;\n      final double pointY = lineVectorY * t + y0;\n      final double pointZ = lineVectorZ * t + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      return true;\n    } else if (BsquaredMinus > 0.0) {\n      //System.err.println(\" Two points of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // Two solutions\n      final double sqrtTerm = Math.sqrt(BsquaredMinus);\n      final double t1 = (-B + sqrtTerm) * inverse2A;\n      final double t2 = (-B - sqrtTerm) * inverse2A;\n      // Up to two points being returned.  Do what we can to save on object creation though.\n      final double point1X = lineVectorX * t1 + x0;\n      final double point1Y = lineVectorY * t1 + y0;\n      final double point1Z = lineVectorZ * t1 + z0;\n      boolean point1Valid = true;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point1X, point1Y, point1Z)) {\n          point1Valid = false;\n          break;\n        }\n      }\n      if (point1Valid) {\n        for (final Membership bound : moreBounds) {\n          if (!bound.isWithin(point1X, point1Y, point1Z)) {\n            point1Valid = false;\n            break;\n          }\n        }\n      }\n      if (point1Valid) {\n        return true;\n      }\n      final double point2X = lineVectorX * t2 + x0;\n      final double point2Y = lineVectorY * t2 + y0;\n      final double point2Z = lineVectorZ * t2 + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      //System.err.println(\" no solutions - no intersection\");\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Determine whether the plane intersects another plane within the\n   * bounds provided.\n   *\n   * @param planetModel is the planet model to use in determining intersection.\n   * @param q                 is the other plane.\n   * @param notablePoints     are points to look at to disambiguate cases when the two planes are identical.\n   * @param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.\n   * @param bounds            is one part of the bounds.\n   * @param moreBounds        are more bounds.\n   * @return true if there's an intersection.\n   */\n  public boolean intersects(final PlanetModel planetModel, final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {\n    //System.err.println(\"Does plane \"+this+\" intersect with plane \"+q);\n    // If the two planes are identical, then the math will find no points of intersection.\n    // So a special case of this is to check for plane equality.  But that is not enough, because\n    // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection\n    // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?\n    if (isNumericallyIdentical(q)) {\n      //System.err.println(\" Identical plane\");\n      // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.\n      // We look for any point that fulfills all the bounds.\n      for (GeoPoint p : notablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      for (GeoPoint p : moreNotablePoints) {\n        if (meetsAllBounds(p, bounds, moreBounds)) {\n          //System.err.println(\"  found a notable point in bounds, so intersects\");\n          return true;\n        }\n      }\n      //System.err.println(\"  no notable points inside found; no intersection\");\n      return false;\n    }\n    \n    // Save on allocations; do inline instead of calling findIntersections\n    //System.err.println(\"Looking for intersection between plane \"+this+\" and plane \"+q+\" within bounds\");\n    // Unnormalized, unchecked...\n    final double lineVectorX = y * q.z - z * q.y;\n    final double lineVectorY = z * q.x - x * q.z;\n    final double lineVectorZ = x * q.y - y * q.x;\n\n    if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {\n      // Degenerate case: parallel planes\n      //System.err.println(\" planes are parallel - no intersection\");\n      return false;\n    }\n\n    // The line will have the equation: A t + A0 = x, B t + B0 = y, C t + C0 = z.\n    // We have A, B, and C.  In order to come up with A0, B0, and C0, we need to find a point that is on both planes.\n    // To do this, we find the largest vector value (either x, y, or z), and look for a point that solves both plane equations\n    // simultaneous.  For example, let's say that the vector is (0.5,0.5,1), and the two plane equations are:\n    // 0.7 x + 0.3 y + 0.1 z + 0.0 = 0\n    // and\n    // 0.9 x - 0.1 y + 0.2 z + 4.0 = 0\n    // Then we'd pick z = 0, so the equations to solve for x and y would be:\n    // 0.7 x + 0.3y = 0.0\n    // 0.9 x - 0.1y = -4.0\n    // ... which can readily be solved using standard linear algebra.  Generally:\n    // Q0 x + R0 y = S0\n    // Q1 x + R1 y = S1\n    // ... can be solved by Cramer's rule:\n    // x = det(S0 R0 / S1 R1) / det(Q0 R0 / Q1 R1)\n    // y = det(Q0 S0 / Q1 S1) / det(Q0 R0 / Q1 R1)\n    // ... where det( a b / c d ) = ad - bc, so:\n    // x = (S0 * R1 - R0 * S1) / (Q0 * R1 - R0 * Q1)\n    // y = (Q0 * S1 - S0 * Q1) / (Q0 * R1 - R0 * Q1)\n    double x0;\n    double y0;\n    double z0;\n    // We try to maximize the determinant in the denominator\n    final double denomYZ = this.y * q.z - this.z * q.y;\n    final double denomXZ = this.x * q.z - this.z * q.x;\n    final double denomXY = this.x * q.y - this.y * q.x;\n    if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {\n      // X is the biggest, so our point will have x0 = 0.0\n      if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomYZ;\n      x0 = 0.0;\n      y0 = (-this.D * q.z - this.z * -q.D) * denom;\n      z0 = (this.y * -q.D + this.D * q.y) * denom;\n    } else if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {\n      // Y is the biggest, so y0 = 0.0\n      if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXZ;\n      x0 = (-this.D * q.z - this.z * -q.D) * denom;\n      y0 = 0.0;\n      z0 = (this.x * -q.D + this.D * q.x) * denom;\n    } else {\n      // Z is the biggest, so Z0 = 0.0\n      if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {\n        //System.err.println(\" Denominator is zero: no intersection\");\n        return false;\n      }\n      final double denom = 1.0 / denomXY;\n      x0 = (-this.D * q.y - this.y * -q.D) * denom;\n      y0 = (this.x * -q.D + this.D * q.x) * denom;\n      z0 = 0.0;\n    }\n\n    // Once an intersecting line is determined, the next step is to intersect that line with the ellipsoid, which\n    // will yield zero, one, or two points.\n    // The ellipsoid equation: 1,0 = x^2/a^2 + y^2/b^2 + z^2/c^2\n    // 1.0 = (At+A0)^2/a^2 + (Bt+B0)^2/b^2 + (Ct+C0)^2/c^2\n    // A^2 t^2 / a^2 + 2AA0t / a^2 + A0^2 / a^2 + B^2 t^2 / b^2 + 2BB0t / b^2 + B0^2 / b^2 + C^2 t^2 / c^2 + 2CC0t / c^2 + C0^2 / c^2  - 1,0 = 0.0\n    // [A^2 / a^2 + B^2 / b^2 + C^2 / c^2] t^2 + [2AA0 / a^2 + 2BB0 / b^2 + 2CC0 / c^2] t + [A0^2 / a^2 + B0^2 / b^2 + C0^2 / c^2 - 1,0] = 0.0\n    // Use the quadratic formula to determine t values and candidate point(s)\n    final double A = lineVectorX * lineVectorX * planetModel.inverseAbSquared +\n      lineVectorY * lineVectorY * planetModel.inverseAbSquared +\n      lineVectorZ * lineVectorZ * planetModel.inverseCSquared;\n    final double B = 2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);\n    final double C = x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;\n\n    final double BsquaredMinus = B * B - 4.0 * A * C;\n    if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {\n      //System.err.println(\" One point of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // One solution only\n      final double t = -B * inverse2A;\n      // Maybe we can save ourselves the cost of construction of a point?\n      final double pointX = lineVectorX * t + x0;\n      final double pointY = lineVectorY * t + y0;\n      final double pointZ = lineVectorZ * t + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(pointX, pointY, pointZ)) {\n          return false;\n        }\n      }\n      return true;\n    } else if (BsquaredMinus > 0.0) {\n      //System.err.println(\" Two points of intersection\");\n      final double inverse2A = 1.0 / (2.0 * A);\n      // Two solutions\n      final double sqrtTerm = Math.sqrt(BsquaredMinus);\n      final double t1 = (-B + sqrtTerm) * inverse2A;\n      final double t2 = (-B - sqrtTerm) * inverse2A;\n      // Up to two points being returned.  Do what we can to save on object creation though.\n      final double point1X = lineVectorX * t1 + x0;\n      final double point1Y = lineVectorY * t1 + y0;\n      final double point1Z = lineVectorZ * t1 + z0;\n      boolean point1Valid = true;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point1X, point1Y, point1Z)) {\n          point1Valid = false;\n          break;\n        }\n      }\n      if (point1Valid) {\n        for (final Membership bound : moreBounds) {\n          if (!bound.isWithin(point1X, point1Y, point1Z)) {\n            point1Valid = false;\n            break;\n          }\n        }\n      }\n      if (point1Valid) {\n        return true;\n      }\n      final double point2X = lineVectorX * t2 + x0;\n      final double point2Y = lineVectorY * t2 + y0;\n      final double point2Z = lineVectorZ * t2 + z0;\n      for (final Membership bound : bounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      for (final Membership bound : moreBounds) {\n        if (!bound.isWithin(point2X, point2Y, point2Z)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      //System.err.println(\" no solutions - no intersection\");\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["b4e444678504caf66a8060b1d514383aa4feac0c","f62d3e07d022fc0a93a17d141edb605494aa3ee7"],"e8bf516b42eec25ec0f36c31310e126f4a91c835":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["f62d3e07d022fc0a93a17d141edb605494aa3ee7"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b4e444678504caf66a8060b1d514383aa4feac0c","f62d3e07d022fc0a93a17d141edb605494aa3ee7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"f62d3e07d022fc0a93a17d141edb605494aa3ee7":["e8bf516b42eec25ec0f36c31310e126f4a91c835"]},"commit2Childs":{"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"e8bf516b42eec25ec0f36c31310e126f4a91c835":["f62d3e07d022fc0a93a17d141edb605494aa3ee7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e8bf516b42eec25ec0f36c31310e126f4a91c835","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"f62d3e07d022fc0a93a17d141edb605494aa3ee7":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}