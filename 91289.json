{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog].LogCodec#readExternString(FastInputStream).mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog].LogCodec#readExternString(FastInputStream).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public String readExternString(FastInputStream fis) throws IOException {\n      int idx = readSize(fis);\n      if (idx != 0) {// idx != 0 is the index of the extern string\n      // no need to synchronize globalStringList - it's only updated before the first record is written to the log\n        return globalStringList.get(idx - 1);\n      } else {// idx == 0 means it has a string value\n        // this shouldn't happen with this codec subclass.\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Corrupt transaction log\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#readExternString(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog].LogCodec#readExternString(FastInputStream).mjava","sourceNew":"    @Override\n    public String readExternString(FastInputStream fis) throws IOException {\n      int idx = readSize(fis);\n      if (idx != 0) {// idx != 0 is the index of the extern string\n      // no need to synchronize globalStringList - it's only updated before the first record is written to the log\n        return globalStringList.get(idx - 1);\n      } else {// idx == 0 means it has a string value\n        // this shouldn't happen with this codec subclass.\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Corrupt transaction log\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public String readExternString(FastInputStream fis) throws IOException {\n      int idx = readSize(fis);\n      if (idx != 0) {// idx != 0 is the index of the extern string\n      // no need to synchronize globalStringList - it's only updated before the first record is written to the log\n        return globalStringList.get(idx - 1);\n      } else {// idx == 0 means it has a string value\n        // this shouldn't happen with this codec subclass.\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Corrupt transaction log\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#readExternString(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog].LogCodec#readExternString(FastInputStream).mjava","sourceNew":"    @Override\n    public String readExternString(FastInputStream fis) throws IOException {\n      int idx = readSize(fis);\n      if (idx != 0) {// idx != 0 is the index of the extern string\n      // no need to synchronize globalStringList - it's only updated before the first record is written to the log\n        return globalStringList.get(idx - 1);\n      } else {// idx == 0 means it has a string value\n        // this shouldn't happen with this codec subclass.\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Corrupt transaction log\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public String readExternString(FastInputStream fis) throws IOException {\n      int idx = readSize(fis);\n      if (idx != 0) {// idx != 0 is the index of the extern string\n      // no need to synchronize globalStringList - it's only updated before the first record is written to the log\n        return globalStringList.get(idx - 1);\n      } else {// idx == 0 means it has a string value\n        // this shouldn't happen with this codec subclass.\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Corrupt transaction log\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#readExternString(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog].LogCodec#readExternString(FastInputStream).mjava","sourceNew":"    @Override\n    public String readExternString(FastInputStream fis) throws IOException {\n      int idx = readSize(fis);\n      if (idx != 0) {// idx != 0 is the index of the extern string\n      // no need to synchronize globalStringList - it's only updated before the first record is written to the log\n        return globalStringList.get(idx - 1);\n      } else {// idx == 0 means it has a string value\n        // this shouldn't happen with this codec subclass.\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Corrupt transaction log\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public String readExternString(FastInputStream fis) throws IOException {\n      int idx = readSize(fis);\n      if (idx != 0) {// idx != 0 is the index of the extern string\n      // no need to synchronize globalStringList - it's only updated before the first record is written to the log\n        return globalStringList.get(idx - 1);\n      } else {// idx == 0 means it has a string value\n        // this shouldn't happen with this codec subclass.\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Corrupt transaction log\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}