{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","commits":[{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, cloudConfig, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, cloudConfig, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, cloudConfig, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, cloudConfig, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c526352db87264a72a7a9ad68c1b769b81e54305"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}