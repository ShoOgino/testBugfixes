{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,String,Map[String,String]).mjava","commits":[{"id":"4039b5ea46ea51770a47714b5f486a607ffc5a66","date":1438356910,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor,\n      String configName, String asyncId, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CollectionAction.CREATE.name());\n    params.set(CoreAdminParams.NAME, name);\n    params.set(\"numShards\", numShards);\n    params.set(\"replicationFactor\", replicationFactor);\n    params.set(\"collection.configName\", configName);\n    if (null != asyncId) {\n      params.set(CommonAdminParams.ASYNC, asyncId);\n    }\n    if(collectionProperties != null) {\n      for(Map.Entry<String, String> property : collectionProperties.entrySet()){\n        params.set(CoreAdminParams.PROPERTY_PREFIX + property.getKey(), property.getValue());\n      }\n    }\n    \n    return makeCollectionsRequest(params);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b","date":1438774486,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,String,String,Map[String,String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,String,Map[String,String]).mjava","sourceNew":"  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor, \n      String configName, String createNodeSet, String asyncId, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CollectionAction.CREATE.name());\n    params.set(CoreAdminParams.NAME, name);\n    params.set(\"numShards\", numShards);\n    params.set(\"replicationFactor\", replicationFactor);\n    params.set(\"collection.configName\", configName);\n    if (null != createNodeSet) {\n      params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSet);\n    }\n    if (null != asyncId) {\n      params.set(CommonAdminParams.ASYNC, asyncId);\n    }\n    if(collectionProperties != null) {\n      for(Map.Entry<String, String> property : collectionProperties.entrySet()){\n        params.set(CoreAdminParams.PROPERTY_PREFIX + property.getKey(), property.getValue());\n      }\n    }\n    \n    return makeCollectionsRequest(params);\n  }\n\n","sourceOld":"  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor,\n      String configName, String asyncId, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CollectionAction.CREATE.name());\n    params.set(CoreAdminParams.NAME, name);\n    params.set(\"numShards\", numShards);\n    params.set(\"replicationFactor\", replicationFactor);\n    params.set(\"collection.configName\", configName);\n    if (null != asyncId) {\n      params.set(CommonAdminParams.ASYNC, asyncId);\n    }\n    if(collectionProperties != null) {\n      for(Map.Entry<String, String> property : collectionProperties.entrySet()){\n        params.set(CoreAdminParams.PROPERTY_PREFIX + property.getKey(), property.getValue());\n      }\n    }\n    \n    return makeCollectionsRequest(params);\n  }\n\n","bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b":["4039b5ea46ea51770a47714b5f486a607ffc5a66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4039b5ea46ea51770a47714b5f486a607ffc5a66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b"]},"commit2Childs":{"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4039b5ea46ea51770a47714b5f486a607ffc5a66"],"4039b5ea46ea51770a47714b5f486a607ffc5a66":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}