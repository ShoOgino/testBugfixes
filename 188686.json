{"path":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(BytesRef,long,int).mjava","commits":[{"id":"c447e0427ce53ca53d708ce8b64eaf8cfd372591","date":1359552077,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(BytesRef,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#copyFrom(BytesRef,int,int).mjava","sourceNew":"  /**\n   * Reads bytes bytes out of the pool starting at the given offset with the given  \n   * length into the given {@link BytesRef} at offset <tt>0</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final BytesRef bytes, final long offset, final int length) {\n    bytes.offset = 0;\n    bytes.grow(length);\n    bytes.length = length;\n    if (length == 0) {\n      return;\n    }\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytes.length);\n        bytes.length = length;\n        bytes.offset = 0;\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytesToCopy);\n        pos = 0;\n        bytes.length -= bytesToCopy;\n        bytes.offset += bytesToCopy;\n        buffer = buffers[++bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /**\n   * Copies bytes from the pool starting at the given offset with the given  \n   * length into the given {@link BytesRef} at offset <tt>0</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public final void copyFrom(final BytesRef bytes, final int offset, final int length) {\n    bytes.offset = 0;\n    bytes.grow(length);\n    bytes.length = length;\n    int bufferIndex = offset >> BYTE_BLOCK_SHIFT;\n    byte[] buffer = buffers[bufferIndex];\n    int pos = offset & BYTE_BLOCK_MASK;\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytes.length);\n        bytes.length = length;\n        bytes.offset = 0;\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytesToCopy);\n        pos = 0;\n        bytes.length -= bytesToCopy;\n        bytes.offset += bytesToCopy;\n        buffer = buffers[++bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b3cc2f5fa15326949acef967166394fb5b4a5e8","date":1359739263,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(long,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(BytesRef,long,int).mjava","sourceNew":"  /**\n   * Reads bytes bytes out of the pool starting at the given offset with the given  \n   * length into the given byte array at offset <tt>off</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final long offset, final byte bytes[], final int off, final int length) {\n    if (length == 0) {\n      return;\n    }\n    int bytesOffset = off;\n    int bytesLength = length;\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes, bytesOffset, bytesLength);\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes, bytesOffset, bytesToCopy);\n        pos = 0;\n        bytesLength -= bytesToCopy;\n        bytesOffset += bytesToCopy;\n        buffer = buffers[++bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /**\n   * Reads bytes bytes out of the pool starting at the given offset with the given  \n   * length into the given {@link BytesRef} at offset <tt>0</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final BytesRef bytes, final long offset, final int length) {\n    bytes.offset = 0;\n    bytes.grow(length);\n    bytes.length = length;\n    if (length == 0) {\n      return;\n    }\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytes.length);\n        bytes.length = length;\n        bytes.offset = 0;\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytesToCopy);\n        pos = 0;\n        bytes.length -= bytesToCopy;\n        bytes.offset += bytesToCopy;\n        buffer = buffers[++bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":["22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c447e0427ce53ca53d708ce8b64eaf8cfd372591":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2b3cc2f5fa15326949acef967166394fb5b4a5e8":["c447e0427ce53ca53d708ce8b64eaf8cfd372591"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c447e0427ce53ca53d708ce8b64eaf8cfd372591":["2b3cc2f5fa15326949acef967166394fb5b4a5e8"],"2b3cc2f5fa15326949acef967166394fb5b4a5e8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c447e0427ce53ca53d708ce8b64eaf8cfd372591","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2b3cc2f5fa15326949acef967166394fb5b4a5e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}