{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","commits":[{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method);\n\n","sourceOld":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method);\n\n","sourceOld":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_REWRITE} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method);\n\n","sourceOld":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_REWRITE} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method);\n\n","sourceOld":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}