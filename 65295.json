{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#serialize(DataOutput).mjava","commits":[{"id":"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30","date":1346918556,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#serialize(DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FuzzySet#serialize(DataOutput).mjava","sourceNew":"  /**\n   * Serializes the data set to file using the following format:\n   * <ul>\n   *  <li>FuzzySet --&gt;FuzzySetVersion,HashFunctionName,BloomSize,\n   * NumBitSetWords,BitSetWord<sup>NumBitSetWords</sup></li> \n   * <li>HashFunctionName --&gt; {@link DataOutput#writeString(String) String} The\n   * name of a ServiceProvider registered {@link HashFunction}</li>\n   * <li>FuzzySetVersion --&gt; {@link DataOutput#writeInt Uint32} The version number of the {@link FuzzySet} class</li>\n   * <li>BloomSize --&gt; {@link DataOutput#writeInt Uint32} The modulo value used\n   * to project hashes into the field's Bitset</li>\n   * <li>NumBitSetWords --&gt; {@link DataOutput#writeInt Uint32} The number of\n   * longs (as returned from {@link FixedBitSet#getBits})</li>\n   * <li>BitSetWord --&gt; {@link DataOutput#writeLong Long} A long from the array\n   * returned by {@link FixedBitSet#getBits}</li>\n   * </ul>\n   * @param out Data output stream\n   * @throws IOException\n   */\n  public void serialize(DataOutput out) throws IOException\n  {\n      out.writeInt(VERSION_CURRENT);\n      out.writeInt(bloomSize);\n      long[] bits = filter.getBits();\n      out.writeInt(bits.length);\n      for (int i = 0; i < bits.length; i++) {\n        // Can't used VLong encoding because cant cope with negative numbers\n        // output by FixedBitSet\n        out.writeLong(bits[i]);\n      }\n  }\n\n","sourceOld":"  /**\n   * Serializes the data set to file using the following format:\n   * <ul>\n   *  <li>FuzzySet --&gt;FuzzySetVersion,HashFunctionName,BloomSize,\n   * NumBitSetWords,BitSetWord<sup>NumBitSetWords</sup></li> \n   * <li>HashFunctionName --&gt; {@link DataOutput#writeString(String) String} The\n   * name of a ServiceProvider registered {@link HashFunction}</li>\n   * <li>FuzzySetVersion --&gt; {@link DataOutput#writeInt Uint32} The version number of the {@link FuzzySet} class</li>\n   * <li>BloomSize --&gt; {@link DataOutput#writeInt Uint32} The modulo value used\n   * to project hashes into the field's Bitset</li>\n   * <li>NumBitSetWords --&gt; {@link DataOutput#writeInt Uint32} The number of\n   * longs (as returned from {@link FixedBitSet#getBits})</li>\n   * <li>BitSetWord --&gt; {@link DataOutput#writeLong Long} A long from the array\n   * returned by {@link FixedBitSet#getBits}</li>\n   * </ul>\n   * @param out Data output stream\n   * @throws IOException\n   */\n  public void serialize(DataOutput out) throws IOException\n  {\n      out.writeInt(FUZZY_SERIALIZATION_VERSION);\n      out.writeString(hashFunction.getName());\n      out.writeInt(bloomSize);\n      long[] bits = filter.getBits();\n      out.writeInt(bits.length);\n      for (int i = 0; i < bits.length; i++) {\n        // Can't used VLong encoding because cant cope with negative numbers\n        // output by FixedBitSet\n        out.writeLong(bits[i]);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#serialize(DataOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#serialize(DataOutput).mjava","sourceNew":"  /**\n   * Serializes the data set to file using the following format:\n   * <ul>\n   *  <li>FuzzySet --&gt;FuzzySetVersion,HashFunctionName,BloomSize,\n   * NumBitSetWords,BitSetWord<sup>NumBitSetWords</sup></li> \n   * <li>HashFunctionName --&gt; {@link DataOutput#writeString(String) String} The\n   * name of a ServiceProvider registered {@link HashFunction}</li>\n   * <li>FuzzySetVersion --&gt; {@link DataOutput#writeInt Uint32} The version number of the {@link FuzzySet} class</li>\n   * <li>BloomSize --&gt; {@link DataOutput#writeInt Uint32} The modulo value used\n   * to project hashes into the field's Bitset</li>\n   * <li>NumBitSetWords --&gt; {@link DataOutput#writeInt Uint32} The number of\n   * longs (as returned from {@link FixedBitSet#getBits})</li>\n   * <li>BitSetWord --&gt; {@link DataOutput#writeLong Long} A long from the array\n   * returned by {@link FixedBitSet#getBits}</li>\n   * </ul>\n   * @param out Data output stream\n   * @throws IOException If there is a low-level I/O error\n   */\n  public void serialize(DataOutput out) throws IOException\n  {\n      out.writeInt(VERSION_CURRENT);\n      out.writeInt(bloomSize);\n      long[] bits = filter.getBits();\n      out.writeInt(bits.length);\n      for (int i = 0; i < bits.length; i++) {\n        // Can't used VLong encoding because cant cope with negative numbers\n        // output by FixedBitSet\n        out.writeLong(bits[i]);\n      }\n  }\n\n","sourceOld":"  /**\n   * Serializes the data set to file using the following format:\n   * <ul>\n   *  <li>FuzzySet --&gt;FuzzySetVersion,HashFunctionName,BloomSize,\n   * NumBitSetWords,BitSetWord<sup>NumBitSetWords</sup></li> \n   * <li>HashFunctionName --&gt; {@link DataOutput#writeString(String) String} The\n   * name of a ServiceProvider registered {@link HashFunction}</li>\n   * <li>FuzzySetVersion --&gt; {@link DataOutput#writeInt Uint32} The version number of the {@link FuzzySet} class</li>\n   * <li>BloomSize --&gt; {@link DataOutput#writeInt Uint32} The modulo value used\n   * to project hashes into the field's Bitset</li>\n   * <li>NumBitSetWords --&gt; {@link DataOutput#writeInt Uint32} The number of\n   * longs (as returned from {@link FixedBitSet#getBits})</li>\n   * <li>BitSetWord --&gt; {@link DataOutput#writeLong Long} A long from the array\n   * returned by {@link FixedBitSet#getBits}</li>\n   * </ul>\n   * @param out Data output stream\n   * @throws IOException\n   */\n  public void serialize(DataOutput out) throws IOException\n  {\n      out.writeInt(VERSION_CURRENT);\n      out.writeInt(bloomSize);\n      long[] bits = filter.getBits();\n      out.writeInt(bits.length);\n      for (int i = 0; i < bits.length; i++) {\n        // Can't used VLong encoding because cant cope with negative numbers\n        // output by FixedBitSet\n        out.writeLong(bits[i]);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30"],"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}