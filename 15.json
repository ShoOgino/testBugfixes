{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2da200553d43622ccbeef29f3c1b6223fec4d83","date":1331145186,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":["6f7fee42303a18cc146043c96f66491311b345d9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this, needsScores);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a normalized weight for a top-level {@link Query}.\n   * The query is rewritten by this method and {@link Query#createWeight} called,\n   * afterwards the {@link Weight} is normalized. The returned {@code Weight}\n   * can then directly be used to get a {@link Scorer}.\n   * @lucene.internal\n   */\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    query = rewrite(query);\n    Weight weight = query.createWeight(this);\n    float v = weight.getValueForNormalization();\n    float norm = getSimilarity().queryNorm(v);\n    if (Float.isInfinite(norm) || Float.isNaN(norm)) {\n      norm = 1.0f;\n    }\n    weight.normalize(norm, 1.0f);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d2da200553d43622ccbeef29f3c1b6223fec4d83"],"fb17639909a369c1e64866842e5c213440acc17e":["d2da200553d43622ccbeef29f3c1b6223fec4d83"],"d2da200553d43622ccbeef29f3c1b6223fec4d83":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","d2da200553d43622ccbeef29f3c1b6223fec4d83"],"d2da200553d43622ccbeef29f3c1b6223fec4d83":["38e3b736c7ca086d61b7dbb841c905ee115490da","fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}