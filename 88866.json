{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#doWork(Object...).mjava","commits":[{"id":"17c1dd439e6014d2075d21de7920bc4c1b0c9661","date":1509550215,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c469fe67f2da2a654eb8d709dfd239236f23a9a2","date":1570414680,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      Matrix realMatrix = new Matrix(coData);\n      List<String> labels = CorrelationEvaluator.getColumnLabels(matrix.getColumnLabels(), coData.length);\n      realMatrix.setColumnLabels(labels);\n      realMatrix.setRowLabels(labels);\n      return realMatrix;\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      Matrix realMatrix = new Matrix(coData);\n      List<String> labels = CorrelationEvaluator.getColumnLabels(matrix.getColumnLabels(), coData.length);\n      realMatrix.setColumnLabels(labels);\n      realMatrix.setRowLabels(labels);\n      return realMatrix;\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      Matrix realMatrix = new Matrix(coData);\n      List<String> labels = CorrelationEvaluator.getColumnLabels(matrix.getColumnLabels(), coData.length);\n      realMatrix.setColumnLabels(labels);\n      realMatrix.setRowLabels(labels);\n      return realMatrix;\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      Matrix realMatrix = new Matrix(coData);\n      List<String> labels = CorrelationEvaluator.getColumnLabels(matrix.getColumnLabels(), coData.length);\n      realMatrix.setColumnLabels(labels);\n      realMatrix.setRowLabels(labels);\n      return realMatrix;\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17c1dd439e6014d2075d21de7920bc4c1b0c9661":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["c469fe67f2da2a654eb8d709dfd239236f23a9a2"],"c469fe67f2da2a654eb8d709dfd239236f23a9a2":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["17c1dd439e6014d2075d21de7920bc4c1b0c9661"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"b0b597c65628ca9e73913a07e81691f8229bae35":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","c469fe67f2da2a654eb8d709dfd239236f23a9a2"]},"commit2Childs":{"17c1dd439e6014d2075d21de7920bc4c1b0c9661":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c469fe67f2da2a654eb8d709dfd239236f23a9a2":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17c1dd439e6014d2075d21de7920bc4c1b0c9661"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["c469fe67f2da2a654eb8d709dfd239236f23a9a2","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}