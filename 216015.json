{"path":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":"  /** Returns true if the number of segments eligible for\n   *  merging is less than or equal to the specified {@code\n   *  maxNumSegments}. */\n  protected boolean isMerged(SegmentInfos infos, int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    final int numSegments = infos.size();\n    int numToMerge = 0;\n    SegmentCommitInfo mergeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToMerge <= maxNumSegments;i++) {\n      final SegmentCommitInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToMerge++;\n        mergeInfo = info;\n      }\n    }\n\n    return numToMerge <= maxNumSegments &&\n      (numToMerge != 1 || !segmentIsOriginal || isMerged(mergeInfo));\n  }\n\n","sourceOld":"  /** Returns true if the number of segments eligible for\n   *  merging is less than or equal to the specified {@code\n   *  maxNumSegments}. */\n  protected boolean isMerged(SegmentInfos infos, int maxNumSegments, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws IOException {\n    final int numSegments = infos.size();\n    int numToMerge = 0;\n    SegmentInfoPerCommit mergeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToMerge <= maxNumSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToMerge++;\n        mergeInfo = info;\n      }\n    }\n\n    return numToMerge <= maxNumSegments &&\n      (numToMerge != 1 || !segmentIsOriginal || isMerged(mergeInfo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67bcec391f8e94564afde5a0f0e6538d07a96255","date":1393593793,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  /** Returns true if the number of segments eligible for\n   *  merging is less than or equal to the specified {@code\n   *  maxNumSegments}. */\n  protected boolean isMerged(SegmentInfos infos, int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    final int numSegments = infos.size();\n    int numToMerge = 0;\n    SegmentCommitInfo mergeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToMerge <= maxNumSegments;i++) {\n      final SegmentCommitInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToMerge++;\n        mergeInfo = info;\n      }\n    }\n\n    return numToMerge <= maxNumSegments &&\n      (numToMerge != 1 || !segmentIsOriginal || isMerged(infos, mergeInfo));\n  }\n\n","sourceOld":"  /** Returns true if the number of segments eligible for\n   *  merging is less than or equal to the specified {@code\n   *  maxNumSegments}. */\n  protected boolean isMerged(SegmentInfos infos, int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    final int numSegments = infos.size();\n    int numToMerge = 0;\n    SegmentCommitInfo mergeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToMerge <= maxNumSegments;i++) {\n      final SegmentCommitInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToMerge++;\n        mergeInfo = info;\n      }\n    }\n\n    return numToMerge <= maxNumSegments &&\n      (numToMerge != 1 || !segmentIsOriginal || isMerged(mergeInfo));\n  }\n\n","bugFix":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  /** Returns true if the number of segments eligible for\n   *  merging is less than or equal to the specified {@code\n   *  maxNumSegments}. */\n  protected boolean isMerged(SegmentInfos infos, int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer) throws IOException {\n    final int numSegments = infos.size();\n    int numToMerge = 0;\n    SegmentCommitInfo mergeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToMerge <= maxNumSegments;i++) {\n      final SegmentCommitInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToMerge++;\n        mergeInfo = info;\n      }\n    }\n\n    return numToMerge <= maxNumSegments &&\n      (numToMerge != 1 || !segmentIsOriginal || isMerged(infos, mergeInfo, writer));\n  }\n\n","sourceOld":"  /** Returns true if the number of segments eligible for\n   *  merging is less than or equal to the specified {@code\n   *  maxNumSegments}. */\n  protected boolean isMerged(SegmentInfos infos, int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    final int numSegments = infos.size();\n    int numToMerge = 0;\n    SegmentCommitInfo mergeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToMerge <= maxNumSegments;i++) {\n      final SegmentCommitInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToMerge++;\n        mergeInfo = info;\n      }\n    }\n\n    return numToMerge <= maxNumSegments &&\n      (numToMerge != 1 || !segmentIsOriginal || isMerged(infos, mergeInfo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"027bee21e09164c9ee230395405076d1e0034b30":["67bcec391f8e94564afde5a0f0e6538d07a96255"],"67bcec391f8e94564afde5a0f0e6538d07a96255":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["027bee21e09164c9ee230395405076d1e0034b30"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["67bcec391f8e94564afde5a0f0e6538d07a96255"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"027bee21e09164c9ee230395405076d1e0034b30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"67bcec391f8e94564afde5a0f0e6538d07a96255":["027bee21e09164c9ee230395405076d1e0034b30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}