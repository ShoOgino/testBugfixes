{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#ScheduledTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","commits":[{"id":"d3102a9c9032617766c43974e7ec8b7a3148fb91","date":1519273763,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#ScheduledTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","pathOld":"/dev/null","sourceNew":"  public ScheduledTrigger(String name, Map<String, Object> properties,\n                          SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    super(TriggerEventType.SCHEDULED, name, properties, loader, cloudManager);\n\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.getOrDefault(PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n\n    // attempt parsing to validate date math strings\n    Instant startTime = parseStartTime(startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(null, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(null, startTime + graceDurationStr, timeZone);\n\n    this.lastRunAt = startTime;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c252a8291191876badb5f6235f62895d6e36b33e","date":1519309955,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#ScheduledTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":null,"sourceOld":"  public ScheduledTrigger(String name, Map<String, Object> properties,\n                          SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    super(TriggerEventType.SCHEDULED, name, properties, loader, cloudManager);\n\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.getOrDefault(PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n\n    // attempt parsing to validate date math strings\n    Instant startTime = parseStartTime(startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(null, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(null, startTime + graceDurationStr, timeZone);\n\n    this.lastRunAt = startTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dec9417ffbde1f9d7317d78c151248cb8f6af88","date":1520019381,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#ScheduledTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","pathOld":"/dev/null","sourceNew":"  public ScheduledTrigger(String name, Map<String, Object> properties,\n                          SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    super(TriggerEventType.SCHEDULED, name, properties, loader, cloudManager);\n\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.getOrDefault(PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n\n    // attempt parsing to validate date math strings\n    Instant startTime = parseStartTime(startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(null, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(null, startTime + graceDurationStr, timeZone);\n\n    this.lastRunAt = startTime;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b6486136ec2c4fa54e33c828abf690144736bd8","date":1520351825,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#ScheduledTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#ScheduledTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public ScheduledTrigger(String name, Map<String, Object> properties,\n                          SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    super(TriggerEventType.SCHEDULED, name, properties, loader, cloudManager);\n\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.get(PREFERRED_OP);\n\n    // attempt parsing to validate date math strings\n    Instant startTime = parseStartTime(startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(null, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(null, startTime + graceDurationStr, timeZone);\n\n    // We set lastRunAt to be the startTime (which could be a date math expression such as 'NOW')\n    // Ordinarily, NOW will always be evaluated in this constructor so it may seem that\n    // the trigger will always fire the first time.\n    // However, the lastRunAt is overwritten with the value from ZK\n    // during restoreState() operation (which is performed before run()) so the trigger works correctly\n    this.lastRunAt = startTime;\n  }\n\n","sourceOld":"  public ScheduledTrigger(String name, Map<String, Object> properties,\n                          SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    super(TriggerEventType.SCHEDULED, name, properties, loader, cloudManager);\n\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.getOrDefault(PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n\n    // attempt parsing to validate date math strings\n    Instant startTime = parseStartTime(startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(null, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(null, startTime + graceDurationStr, timeZone);\n\n    this.lastRunAt = startTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4404f65815cc874649176858833ace645e4ca172","date":1520945234,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#ScheduledTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#ScheduledTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public ScheduledTrigger(String name, Map<String, Object> properties,\n                          SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    super(TriggerEventType.SCHEDULED, name, properties, loader, cloudManager);\n\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.get(PREFERRED_OP);\n\n    // attempt parsing to validate date math strings\n    // explicitly set NOW because it may be different for simulated time\n    Date now = new Date(TimeUnit.NANOSECONDS.toMillis(cloudManager.getTimeSource().getEpochTime()));\n    Instant startTime = parseStartTime(now, startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(now, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(now, startTime + graceDurationStr, timeZone);\n\n    // We set lastRunAt to be the startTime (which could be a date math expression such as 'NOW')\n    // Ordinarily, NOW will always be evaluated in this constructor so it may seem that\n    // the trigger will always fire the first time.\n    // However, the lastRunAt is overwritten with the value from ZK\n    // during restoreState() operation (which is performed before run()) so the trigger works correctly\n    this.lastRunAt = startTime;\n  }\n\n","sourceOld":"  public ScheduledTrigger(String name, Map<String, Object> properties,\n                          SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    super(TriggerEventType.SCHEDULED, name, properties, loader, cloudManager);\n\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.get(PREFERRED_OP);\n\n    // attempt parsing to validate date math strings\n    Instant startTime = parseStartTime(startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(null, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(null, startTime + graceDurationStr, timeZone);\n\n    // We set lastRunAt to be the startTime (which could be a date math expression such as 'NOW')\n    // Ordinarily, NOW will always be evaluated in this constructor so it may seem that\n    // the trigger will always fire the first time.\n    // However, the lastRunAt is overwritten with the value from ZK\n    // during restoreState() operation (which is performed before run()) so the trigger works correctly\n    this.lastRunAt = startTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#ScheduledTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#ScheduledTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public ScheduledTrigger(String name, Map<String, Object> properties,\n                          SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    super(TriggerEventType.SCHEDULED, name, properties, loader, cloudManager);\n\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.get(PREFERRED_OP);\n\n    // attempt parsing to validate date math strings\n    // explicitly set NOW because it may be different for simulated time\n    Date now = new Date(TimeUnit.NANOSECONDS.toMillis(cloudManager.getTimeSource().getEpochTimeNs()));\n    Instant startTime = parseStartTime(now, startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(now, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(now, startTime + graceDurationStr, timeZone);\n\n    // We set lastRunAt to be the startTime (which could be a date math expression such as 'NOW')\n    // Ordinarily, NOW will always be evaluated in this constructor so it may seem that\n    // the trigger will always fire the first time.\n    // However, the lastRunAt is overwritten with the value from ZK\n    // during restoreState() operation (which is performed before run()) so the trigger works correctly\n    this.lastRunAt = startTime;\n  }\n\n","sourceOld":"  public ScheduledTrigger(String name, Map<String, Object> properties,\n                          SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    super(TriggerEventType.SCHEDULED, name, properties, loader, cloudManager);\n\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.get(PREFERRED_OP);\n\n    // attempt parsing to validate date math strings\n    // explicitly set NOW because it may be different for simulated time\n    Date now = new Date(TimeUnit.NANOSECONDS.toMillis(cloudManager.getTimeSource().getEpochTime()));\n    Instant startTime = parseStartTime(now, startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(now, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(now, startTime + graceDurationStr, timeZone);\n\n    // We set lastRunAt to be the startTime (which could be a date math expression such as 'NOW')\n    // Ordinarily, NOW will always be evaluated in this constructor so it may seem that\n    // the trigger will always fire the first time.\n    // However, the lastRunAt is overwritten with the value from ZK\n    // during restoreState() operation (which is performed before run()) so the trigger works correctly\n    this.lastRunAt = startTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#ScheduledTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.get(PREFERRED_OP);\n\n    // attempt parsing to validate date math strings\n    // explicitly set NOW because it may be different for simulated time\n    Date now = new Date(TimeUnit.NANOSECONDS.toMillis(cloudManager.getTimeSource().getEpochTimeNs()));\n    Instant startTime = parseStartTime(now, startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(now, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(now, startTime + graceDurationStr, timeZone);\n\n    // We set lastRunAt to be the startTime (which could be a date math expression such as 'NOW')\n    // Ordinarily, NOW will always be evaluated in this constructor so it may seem that\n    // the trigger will always fire the first time.\n    // However, the lastRunAt is overwritten with the value from ZK\n    // during restoreState() operation (which is performed before run()) so the trigger works correctly\n    this.lastRunAt = startTime;\n  }\n\n","sourceOld":"  public ScheduledTrigger(String name, Map<String, Object> properties,\n                          SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    super(TriggerEventType.SCHEDULED, name, properties, loader, cloudManager);\n\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.get(PREFERRED_OP);\n\n    // attempt parsing to validate date math strings\n    // explicitly set NOW because it may be different for simulated time\n    Date now = new Date(TimeUnit.NANOSECONDS.toMillis(cloudManager.getTimeSource().getEpochTimeNs()));\n    Instant startTime = parseStartTime(now, startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(now, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(now, startTime + graceDurationStr, timeZone);\n\n    // We set lastRunAt to be the startTime (which could be a date math expression such as 'NOW')\n    // Ordinarily, NOW will always be evaluated in this constructor so it may seem that\n    // the trigger will always fire the first time.\n    // However, the lastRunAt is overwritten with the value from ZK\n    // during restoreState() operation (which is performed before run()) so the trigger works correctly\n    this.lastRunAt = startTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b6486136ec2c4fa54e33c828abf690144736bd8":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"c252a8291191876badb5f6235f62895d6e36b33e":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4404f65815cc874649176858833ace645e4ca172":["6b6486136ec2c4fa54e33c828abf690144736bd8"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["4404f65815cc874649176858833ace645e4ca172"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["c252a8291191876badb5f6235f62895d6e36b33e"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6b6486136ec2c4fa54e33c828abf690144736bd8":["4404f65815cc874649176858833ace645e4ca172"],"c252a8291191876badb5f6235f62895d6e36b33e":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"4404f65815cc874649176858833ace645e4ca172":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["6b6486136ec2c4fa54e33c828abf690144736bd8"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["c252a8291191876badb5f6235f62895d6e36b33e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}