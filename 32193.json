{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBitFlippedOnPartition1().mjava","commits":[{"id":"950b7a6881d14da782b60444c11295e3ec50d41a","date":1458379095,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBitFlippedOnPartition1().mjava","pathOld":"/dev/null","sourceNew":"  /** Make sure corruption on an input sort file is caught, even if BKDWriter doesn't get angry */\n  public void testBitFlippedOnPartition1() throws Exception {\n\n    // Generate fixed data set:\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = 4;\n    int numDims = 3;\n\n    byte[][][] docValues = new byte[numDocs][][];\n    byte counter = 0;\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        for(int i=0;i<values[dim].length;i++) {\n          values[dim][i] = counter;\n          counter++;\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    try (Directory dir0 = newMockDirectory()) {\n      if (dir0 instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper) dir0).setPreventDoubleWrite(false);\n      }\n\n      Directory dir = new FilterDirectory(dir0) {\n        boolean corrupted;\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (corrupted == false && prefix.equals(\"_0_bkd1\") && suffix.equals(\"sort\")) {\n            corrupted = true;\n            return new CorruptingIndexOutput(dir0, 22, out);\n          } else {\n            return out;\n          }\n        }\n      };\n\n      CorruptIndexException e = expectThrows(CorruptIndexException.class, () -> {\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, 0.1);\n        });\n      assertTrue(e.getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBitFlippedOnPartition1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBitFlippedOnPartition1().mjava","sourceNew":"  /** Make sure corruption on an input sort file is caught, even if BKDWriter doesn't get angry */\n  public void testBitFlippedOnPartition1() throws Exception {\n\n    // Generate fixed data set:\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = 4;\n    int numDims = 3;\n\n    byte[][][] docValues = new byte[numDocs][][];\n    byte counter = 0;\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        for(int i=0;i<values[dim].length;i++) {\n          values[dim][i] = counter;\n          counter++;\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    try (Directory dir0 = newMockDirectory()) {\n\n      Directory dir = new FilterDirectory(dir0) {\n        boolean corrupted;\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (corrupted == false && prefix.equals(\"_0_bkd1\") && suffix.equals(\"sort\")) {\n            corrupted = true;\n            return new CorruptingIndexOutput(dir0, 22, out);\n          } else {\n            return out;\n          }\n        }\n      };\n\n      CorruptIndexException e = expectThrows(CorruptIndexException.class, () -> {\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, 0.1);\n        });\n      assertTrue(e.getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","sourceOld":"  /** Make sure corruption on an input sort file is caught, even if BKDWriter doesn't get angry */\n  public void testBitFlippedOnPartition1() throws Exception {\n\n    // Generate fixed data set:\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = 4;\n    int numDims = 3;\n\n    byte[][][] docValues = new byte[numDocs][][];\n    byte counter = 0;\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        for(int i=0;i<values[dim].length;i++) {\n          values[dim][i] = counter;\n          counter++;\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    try (Directory dir0 = newMockDirectory()) {\n      if (dir0 instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper) dir0).setPreventDoubleWrite(false);\n      }\n\n      Directory dir = new FilterDirectory(dir0) {\n        boolean corrupted;\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (corrupted == false && prefix.equals(\"_0_bkd1\") && suffix.equals(\"sort\")) {\n            corrupted = true;\n            return new CorruptingIndexOutput(dir0, 22, out);\n          } else {\n            return out;\n          }\n        }\n      };\n\n      CorruptIndexException e = expectThrows(CorruptIndexException.class, () -> {\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, 0.1);\n        });\n      assertTrue(e.getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","bugFix":["950b7a6881d14da782b60444c11295e3ec50d41a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBitFlippedOnPartition1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBitFlippedOnPartition1().mjava","sourceNew":"  /** Make sure corruption on an input sort file is caught, even if BKDWriter doesn't get angry */\n  public void testBitFlippedOnPartition1() throws Exception {\n\n    // Generate fixed data set:\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = 4;\n    int numDims = 3;\n\n    byte[][][] docValues = new byte[numDocs][][];\n    byte counter = 0;\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        for(int i=0;i<values[dim].length;i++) {\n          values[dim][i] = counter;\n          counter++;\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    try (Directory dir0 = newMockDirectory()) {\n\n      Directory dir = new FilterDirectory(dir0) {\n        boolean corrupted;\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (corrupted == false && prefix.equals(\"_0_bkd1\") && suffix.equals(\"sort\")) {\n            corrupted = true;\n            return new CorruptingIndexOutput(dir0, 22, out);\n          } else {\n            return out;\n          }\n        }\n      };\n\n      CorruptIndexException e = expectThrows(CorruptIndexException.class, () -> {\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, 0.1);\n        });\n      assertTrue(e.getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","sourceOld":"  /** Make sure corruption on an input sort file is caught, even if BKDWriter doesn't get angry */\n  public void testBitFlippedOnPartition1() throws Exception {\n\n    // Generate fixed data set:\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = 4;\n    int numDims = 3;\n\n    byte[][][] docValues = new byte[numDocs][][];\n    byte counter = 0;\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        for(int i=0;i<values[dim].length;i++) {\n          values[dim][i] = counter;\n          counter++;\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    try (Directory dir0 = newMockDirectory()) {\n      if (dir0 instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper) dir0).setPreventDoubleWrite(false);\n      }\n\n      Directory dir = new FilterDirectory(dir0) {\n        boolean corrupted;\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (corrupted == false && prefix.equals(\"_0_bkd1\") && suffix.equals(\"sort\")) {\n            corrupted = true;\n            return new CorruptingIndexOutput(dir0, 22, out);\n          } else {\n            return out;\n          }\n        }\n      };\n\n      CorruptIndexException e = expectThrows(CorruptIndexException.class, () -> {\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, 0.1);\n        });\n      assertTrue(e.getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBitFlippedOnPartition1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBitFlippedOnPartition1().mjava","sourceNew":"  /** Make sure corruption on an input sort file is caught, even if BKDWriter doesn't get angry */\n  public void testBitFlippedOnPartition1() throws Exception {\n\n    // Generate fixed data set:\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = 4;\n    int numDims = 3;\n\n    byte[][][] docValues = new byte[numDocs][][];\n    byte counter = 0;\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        for(int i=0;i<values[dim].length;i++) {\n          values[dim][i] = counter;\n          counter++;\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    try (Directory dir0 = newMockDirectory()) {\n\n      Directory dir = new FilterDirectory(dir0) {\n        boolean corrupted;\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (corrupted == false && prefix.equals(\"_0_bkd1\") && suffix.equals(\"sort\")) {\n            corrupted = true;\n            return new CorruptingIndexOutput(dir0, 22, out);\n          } else {\n            return out;\n          }\n        }\n      };\n\n      CorruptIndexException e = expectThrows(CorruptIndexException.class, () -> {\n          verify(dir, docValues, null, numDims, numDims, numBytesPerDim, 50, 0.1);\n        });\n      assertTrue(e.getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","sourceOld":"  /** Make sure corruption on an input sort file is caught, even if BKDWriter doesn't get angry */\n  public void testBitFlippedOnPartition1() throws Exception {\n\n    // Generate fixed data set:\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = 4;\n    int numDims = 3;\n\n    byte[][][] docValues = new byte[numDocs][][];\n    byte counter = 0;\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        for(int i=0;i<values[dim].length;i++) {\n          values[dim][i] = counter;\n          counter++;\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    try (Directory dir0 = newMockDirectory()) {\n\n      Directory dir = new FilterDirectory(dir0) {\n        boolean corrupted;\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (corrupted == false && prefix.equals(\"_0_bkd1\") && suffix.equals(\"sort\")) {\n            corrupted = true;\n            return new CorruptingIndexOutput(dir0, 22, out);\n          } else {\n            return out;\n          }\n        }\n      };\n\n      CorruptIndexException e = expectThrows(CorruptIndexException.class, () -> {\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, 0.1);\n        });\n      assertTrue(e.getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBitFlippedOnPartition1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBitFlippedOnPartition1().mjava","sourceNew":"  /** Make sure corruption on an input sort file is caught, even if BKDWriter doesn't get angry */\n  public void testBitFlippedOnPartition1() throws Exception {\n\n    // Generate fixed data set:\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = 4;\n    int numDims = 3;\n\n    byte[][][] docValues = new byte[numDocs][][];\n    byte counter = 0;\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        for(int i=0;i<values[dim].length;i++) {\n          values[dim][i] = counter;\n          counter++;\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    try (Directory dir0 = newMockDirectory()) {\n\n      Directory dir = new FilterDirectory(dir0) {\n        boolean corrupted;\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (corrupted == false && prefix.equals(\"_0\") && suffix.equals(\"bkd_left0\")) {\n            corrupted = true;\n            return new CorruptingIndexOutput(dir0, 22, out);\n          } else {\n            return out;\n          }\n        }\n      };\n\n      CorruptIndexException e = expectThrows(CorruptIndexException.class, () -> {\n          verify(dir, docValues, null, numDims, numDims, numBytesPerDim, 50, 0.1);\n        });\n      assertTrue(e.getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","sourceOld":"  /** Make sure corruption on an input sort file is caught, even if BKDWriter doesn't get angry */\n  public void testBitFlippedOnPartition1() throws Exception {\n\n    // Generate fixed data set:\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = 4;\n    int numDims = 3;\n\n    byte[][][] docValues = new byte[numDocs][][];\n    byte counter = 0;\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        for(int i=0;i<values[dim].length;i++) {\n          values[dim][i] = counter;\n          counter++;\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    try (Directory dir0 = newMockDirectory()) {\n\n      Directory dir = new FilterDirectory(dir0) {\n        boolean corrupted;\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (corrupted == false && prefix.equals(\"_0_bkd1\") && suffix.equals(\"sort\")) {\n            corrupted = true;\n            return new CorruptingIndexOutput(dir0, 22, out);\n          } else {\n            return out;\n          }\n        }\n      };\n\n      CorruptIndexException e = expectThrows(CorruptIndexException.class, () -> {\n          verify(dir, docValues, null, numDims, numDims, numBytesPerDim, 50, 0.1);\n        });\n      assertTrue(e.getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6652c943595e92c187ee904c382863013eae28f":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["f6652c943595e92c187ee904c382863013eae28f"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["950b7a6881d14da782b60444c11295e3ec50d41a"],"950b7a6881d14da782b60444c11295e3ec50d41a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["950b7a6881d14da782b60444c11295e3ec50d41a","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"]},"commit2Childs":{"f6652c943595e92c187ee904c382863013eae28f":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["950b7a6881d14da782b60444c11295e3ec50d41a"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["f6652c943595e92c187ee904c382863013eae28f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"950b7a6881d14da782b60444c11295e3ec50d41a":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}