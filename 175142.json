{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testDoBeforeAfterFlush().mjava","commits":[{"id":"daad6ea8319237361a2c5c4aa31ad04dc7a70ba3","date":1266940597,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoBeforeAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void testDoBeforeAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.beforeWasCalled = false;\n    w.afterWasCalled = false;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoBeforeAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoBeforeAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void testDoBeforeAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.beforeWasCalled = false;\n    w.afterWasCalled = false;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void testDoBeforeAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.beforeWasCalled = false;\n    w.afterWasCalled = false;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoBeforeAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoBeforeAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void testDoBeforeAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.beforeWasCalled = false;\n    w.afterWasCalled = false;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void testDoBeforeAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.beforeWasCalled = false;\n    w.afterWasCalled = false;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoBeforeAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoBeforeAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void testDoBeforeAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.beforeWasCalled = false;\n    w.afterWasCalled = false;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void testDoBeforeAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.beforeWasCalled = false;\n    w.afterWasCalled = false;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDoBeforeAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoBeforeAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void testDoBeforeAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.beforeWasCalled = false;\n    w.afterWasCalled = false;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void testDoBeforeAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.beforeWasCalled = false;\n    w.afterWasCalled = false;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["daad6ea8319237361a2c5c4aa31ad04dc7a70ba3"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"daad6ea8319237361a2c5c4aa31ad04dc7a70ba3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["daad6ea8319237361a2c5c4aa31ad04dc7a70ba3"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"daad6ea8319237361a2c5c4aa31ad04dc7a70ba3":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}