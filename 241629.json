{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer),\n   *  not counting deletions.\n   *  @see #numDocs */\n  public synchronized int maxDoc() {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    count += segmentInfos.totalDocCount();\n    return count;\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer),\n   *  not counting deletions.\n   *  @see #numDocs */\n  public synchronized int maxDoc() {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    count += segmentInfos.totalDocCount();\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abf299c3223296f3d69484286b321c8da2dfe3c6","date":1381332681,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer),\n   *  not counting deletions.\n   *  @see #numDocs */\n  public synchronized int maxDoc() {\n    ensureOpen();\n    return docWriter.getNumDocs() + segmentInfos.totalDocCount();\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer),\n   *  not counting deletions.\n   *  @see #numDocs */\n  public synchronized int maxDoc() {\n    ensureOpen();\n    int count;\n    if (docWriter != null)\n      count = docWriter.getNumDocs();\n    else\n      count = 0;\n\n    count += segmentInfos.totalDocCount();\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer),\n   *  not counting deletions.\n   *  @see #numDocs */\n  public synchronized int maxDoc() {\n    ensureOpen();\n    return docWriter.getNumDocs() + segmentInfos.totalMaxDoc();\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer),\n   *  not counting deletions.\n   *  @see #numDocs */\n  public synchronized int maxDoc() {\n    ensureOpen();\n    return docWriter.getNumDocs() + segmentInfos.totalDocCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer),\n   *  not counting deletions.\n   *  @see #numDocs */\n  public synchronized int maxDoc() {\n    ensureOpen();\n    return docWriter.getNumDocs() + segmentInfos.totalMaxDoc();\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer),\n   *  not counting deletions.\n   *  @see #numDocs */\n  public synchronized int maxDoc() {\n    ensureOpen();\n    return docWriter.getNumDocs() + segmentInfos.totalDocCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer),\n   *  not counting deletions.\n   *  @see #numDocs */\n  public synchronized int maxDoc() {\n    ensureOpen();\n    return docWriter.getNumDocs() + segmentInfos.totalMaxDoc();\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer),\n   *  not counting deletions.\n   *  @see #numDocs */\n  public synchronized int maxDoc() {\n    ensureOpen();\n    return docWriter.getNumDocs() + segmentInfos.totalDocCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","sourceNew":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer),\n   *  not counting deletions.\n   *  @see #numDocs\n   *  @deprecated use {@link #getDocStats()} instead\n   *  */\n  @Deprecated\n  public synchronized int maxDoc() {\n    ensureOpen();\n    return docWriter.getNumDocs() + segmentInfos.totalMaxDoc();\n  }\n\n","sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer),\n   *  not counting deletions.\n   *  @see #numDocs */\n  public synchronized int maxDoc() {\n    ensureOpen();\n    return docWriter.getNumDocs() + segmentInfos.totalMaxDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ba3bb78479d97e76aa664b8958ccf070d655e6","date":1544812585,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maxDoc().mjava","sourceNew":null,"sourceOld":"  /** Returns total number of docs in this index, including\n   *  docs not yet flushed (still in the RAM buffer),\n   *  not counting deletions.\n   *  @see #numDocs\n   *  @deprecated use {@link #getDocStats()} instead\n   *  */\n  @Deprecated\n  public synchronized int maxDoc() {\n    ensureOpen();\n    return docWriter.getNumDocs() + segmentInfos.totalMaxDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["abf299c3223296f3d69484286b321c8da2dfe3c6","b0267c69e2456a3477a1ad785723f2135da3117e"],"abf299c3223296f3d69484286b321c8da2dfe3c6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b06445ae1731e049327712db0454e5643ca9b7fe":["abf299c3223296f3d69484286b321c8da2dfe3c6","b0267c69e2456a3477a1ad785723f2135da3117e"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["b0267c69e2456a3477a1ad785723f2135da3117e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0267c69e2456a3477a1ad785723f2135da3117e":["abf299c3223296f3d69484286b321c8da2dfe3c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96ba3bb78479d97e76aa664b8958ccf070d655e6":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96ba3bb78479d97e76aa664b8958ccf070d655e6"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"abf299c3223296f3d69484286b321c8da2dfe3c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["abf299c3223296f3d69484286b321c8da2dfe3c6"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["96ba3bb78479d97e76aa664b8958ccf070d655e6"],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","feb4029567b43f074ed7b6eb8fb126d355075dfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"96ba3bb78479d97e76aa664b8958ccf070d655e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}