{"path":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ec0d240527a6868c3d152a1e4c8cf3708e51b03","date":1371788703,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = _TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = TestUtil.createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be04a7534a8a0679382542b62556ea5fba6cfb7f","date":1396613089,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = TestUtil.createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = TestUtil.createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = TestUtil.createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = TestUtil.getTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.shutdown();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.shutdown();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig( \n          TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.shutdown();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.shutdown();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"229c9e4d133b2ca0d40130aead6ca64d4db2d266","date":1409606567,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      FaultyFSDirectory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      dir.startFailing();\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","bugFix":["2e40e7e910b7a5d8fe0bc0b9d557777a31eb0b20"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf37ee1c40027de1b0be9d687aebe8f34d274ae3","date":1409655762,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      FaultyFSDirectory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      dir.startFailing();\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      FaultyFSDirectory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      dir.startFailing();\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      IOUtils.rm(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      FaultyFSDirectory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      dir.startFailing();\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      TestUtil.rm(indexDir);\n    }\n\n  }\n\n","bugFix":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    Path indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      FaultyFSDirectory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      dir.startFailing();\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      IOUtils.rm(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      FaultyFSDirectory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      dir.startFailing();\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      IOUtils.rm(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    Path indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory fsDir = newFSDirectory(indexDir);\n      FaultyFSDirectory dir = new FaultyFSDirectory(fsDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      dir.startFailing();\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      IOUtils.rm(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    Path indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      FaultyFSDirectory dir = new FaultyFSDirectory(indexDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      dir.startFailing();\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      IOUtils.rm(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    Path indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    Directory fsDir = newFSDirectory(indexDir);\n    FaultyFSDirectory dir = new FaultyFSDirectory(fsDir);\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.CREATE);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    for(int i=0;i<2;i++)\n      writer.addDocument(testDoc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    dir.startFailing();\n\n    boolean exc = false;\n\n    for(int i=0;i<2;i++) {\n      try {\n        reader.document(i);\n      } catch (IOException ioe) {\n        // expected\n        exc = true;\n      }\n      try {\n        reader.document(i);\n      } catch (IOException ioe) {\n        // expected\n        exc = true;\n      }\n    }\n    assertTrue(exc);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    Path indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory fsDir = newFSDirectory(indexDir);\n      FaultyFSDirectory dir = new FaultyFSDirectory(fsDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      dir.startFailing();\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      IOUtils.rm(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    Path indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    Directory fsDir = newFSDirectory(indexDir);\n    FaultyFSDirectory dir = new FaultyFSDirectory(fsDir);\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.CREATE);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    for(int i=0;i<2;i++)\n      writer.addDocument(testDoc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    dir.startFailing();\n\n    boolean exc = false;\n\n    for(int i=0;i<2;i++) {\n      try {\n        reader.document(i);\n      } catch (IOException ioe) {\n        // expected\n        exc = true;\n      }\n      try {\n        reader.document(i);\n      } catch (IOException ioe) {\n        // expected\n        exc = true;\n      }\n    }\n    assertTrue(exc);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    Path indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory fsDir = newFSDirectory(indexDir);\n      FaultyFSDirectory dir = new FaultyFSDirectory(fsDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      dir.startFailing();\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      IOUtils.rm(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    Path indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    Directory fsDir = newFSDirectory(indexDir);\n    FaultyFSDirectory dir = new FaultyFSDirectory(fsDir);\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.CREATE);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    for(int i=0;i<2;i++)\n      writer.addDocument(testDoc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    dir.startFailing();\n\n    boolean exc = false;\n\n    for(int i=0;i<2;i++) {\n      try {\n        reader.document(i);\n      } catch (IOException ioe) {\n        // expected\n        exc = true;\n      }\n      try {\n        reader.document(i);\n      } catch (IOException ioe) {\n        // expected\n        exc = true;\n      }\n    }\n    assertTrue(exc);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    Path indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory fsDir = newFSDirectory(indexDir);\n      FaultyFSDirectory dir = new FaultyFSDirectory(fsDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      dir.startFailing();\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      IOUtils.rm(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    Path indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    Directory fsDir = newFSDirectory(indexDir);\n    FaultyFSDirectory dir = new FaultyFSDirectory(fsDir);\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.CREATE);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    for(int i=0;i<2;i++)\n      writer.addDocument(testDoc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    dir.startFailing();\n\n    boolean exc = false;\n\n    for(int i=0;i<2;i++) {\n      try {\n        reader.document(i);\n      } catch (IOException ioe) {\n        // expected\n        exc = true;\n      }\n      try {\n        reader.document(i);\n      } catch (IOException ioe) {\n        // expected\n        exc = true;\n      }\n    }\n    assertTrue(exc);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    Path indexDir = createTempDir(\"testfieldswriterexceptions\");\n\n    try {\n      Directory fsDir = newFSDirectory(indexDir);\n      FaultyFSDirectory dir = new FaultyFSDirectory(fsDir);\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setOpenMode(OpenMode.CREATE);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.forceMerge(1);\n      writer.close();\n\n      IndexReader reader = DirectoryReader.open(dir);\n      dir.startFailing();\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      IOUtils.rm(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"229c9e4d133b2ca0d40130aead6ca64d4db2d266":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cf37ee1c40027de1b0be9d687aebe8f34d274ae3":["d0ef034a4f10871667ae75181537775ddcf8ade4","229c9e4d133b2ca0d40130aead6ca64d4db2d266"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","7ec0d240527a6868c3d152a1e4c8cf3708e51b03"],"6613659748fe4411a7dcf85266e55db1f95f7315":["7ec0d240527a6868c3d152a1e4c8cf3708e51b03"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["285cdc737de75b7cc7c284a156b20214deb67bca","b470f36a9372c97283360b1304eacbde22df6c0d"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["285cdc737de75b7cc7c284a156b20214deb67bca","b470f36a9372c97283360b1304eacbde22df6c0d"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["d0d579490a72f2e6297eaa648940611234c57cf1"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["229c9e4d133b2ca0d40130aead6ca64d4db2d266"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["285cdc737de75b7cc7c284a156b20214deb67bca","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["285cdc737de75b7cc7c284a156b20214deb67bca"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7ec0d240527a6868c3d152a1e4c8cf3708e51b03":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"229c9e4d133b2ca0d40130aead6ca64d4db2d266":["cf37ee1c40027de1b0be9d687aebe8f34d274ae3","cbc3688252d4a8045d69a164236b2cf87b721f17"],"cf37ee1c40027de1b0be9d687aebe8f34d274ae3":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"285cdc737de75b7cc7c284a156b20214deb67bca":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"d0d579490a72f2e6297eaa648940611234c57cf1":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","7ec0d240527a6868c3d152a1e4c8cf3708e51b03"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["229c9e4d133b2ca0d40130aead6ca64d4db2d266","cf37ee1c40027de1b0be9d687aebe8f34d274ae3"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"7ec0d240527a6868c3d152a1e4c8cf3708e51b03":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cf37ee1c40027de1b0be9d687aebe8f34d274ae3","37a0f60745e53927c4c876cfe5b5a58170f0646c","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}