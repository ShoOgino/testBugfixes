{"path":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testFSDirectoryReopen2().mjava","commits":[{"id":"6817596a5666fa3e3979682dea4a2bc8d70fc570","date":1227002271,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testFSDirectoryReopen2().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1453\n  public void testFSDirectoryReopen2() throws CorruptIndexException, IOException {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"IndexReaderReopen2\");\n\n    Directory dir1 = FSDirectory.getDirectory(indexDir2);\n    createIndex(dir1, false);\n\n    IndexReader lastReader = IndexReader.open(indexDir2);\n    \n    Random r = new Random(42);\n    for(int i=0;i<10;i++) {\n      int mod = r.nextInt(5);\n      modifyIndex(mod, lastReader.directory());\n      IndexReader reader = lastReader.reopen();\n      if (reader != lastReader) {\n        lastReader.close();\n        lastReader = reader;\n      }\n    }\n    lastReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.list();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d54c7739bfe85d68f0352823cd70c10c619fad38","date":1228496593,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testFSDirectoryReopen2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testFSDirectoryReopen2().mjava","sourceNew":"  // LUCENE-1453\n  public void testFSDirectoryReopen2() throws CorruptIndexException, IOException {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"IndexReaderReopen2\");\n\n    Directory dir1 = FSDirectory.getDirectory(indexDir2);\n    createIndex(dir1, false);\n\n    IndexReader lastReader = IndexReader.open(indexDir2);\n    \n    Random r = new Random(42);\n    for(int i=0;i<10;i++) {\n      int mod = r.nextInt(5);\n      modifyIndex(mod, lastReader.directory());\n      IndexReader reader = lastReader.reopen();\n      if (reader != lastReader) {\n        lastReader.close();\n        lastReader = reader;\n      }\n    }\n    lastReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.listAll();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","sourceOld":"  // LUCENE-1453\n  public void testFSDirectoryReopen2() throws CorruptIndexException, IOException {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"IndexReaderReopen2\");\n\n    Directory dir1 = FSDirectory.getDirectory(indexDir2);\n    createIndex(dir1, false);\n\n    IndexReader lastReader = IndexReader.open(indexDir2);\n    \n    Random r = new Random(42);\n    for(int i=0;i<10;i++) {\n      int mod = r.nextInt(5);\n      modifyIndex(mod, lastReader.directory());\n      IndexReader reader = lastReader.reopen();\n      if (reader != lastReader) {\n        lastReader.close();\n        lastReader = reader;\n      }\n    }\n    lastReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.list();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","bugFix":["6817596a5666fa3e3979682dea4a2bc8d70fc570"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testFSDirectoryReopen2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testFSDirectoryReopen2().mjava","sourceNew":"  // LUCENE-1453\n  public void testFSDirectoryReopen2() throws CorruptIndexException, IOException {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"IndexReaderReopen2\");\n\n    Directory dir1 = FSDirectory.getDirectory(indexDir2);\n    createIndex(dir1, false);\n\n    IndexReader lastReader = IndexReader.open(indexDir2);\n    \n    Random r = newRandom();\n    for(int i=0;i<10;i++) {\n      int mod = r.nextInt(5);\n      modifyIndex(mod, lastReader.directory());\n      IndexReader reader = lastReader.reopen();\n      if (reader != lastReader) {\n        lastReader.close();\n        lastReader = reader;\n      }\n    }\n    lastReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.listAll();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","sourceOld":"  // LUCENE-1453\n  public void testFSDirectoryReopen2() throws CorruptIndexException, IOException {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"IndexReaderReopen2\");\n\n    Directory dir1 = FSDirectory.getDirectory(indexDir2);\n    createIndex(dir1, false);\n\n    IndexReader lastReader = IndexReader.open(indexDir2);\n    \n    Random r = new Random(42);\n    for(int i=0;i<10;i++) {\n      int mod = r.nextInt(5);\n      modifyIndex(mod, lastReader.directory());\n      IndexReader reader = lastReader.reopen();\n      if (reader != lastReader) {\n        lastReader.close();\n        lastReader = reader;\n      }\n    }\n    lastReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.listAll();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testFSDirectoryReopen2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testFSDirectoryReopen2().mjava","sourceNew":"  // LUCENE-1453\n  public void testFSDirectoryReopen2() throws CorruptIndexException, IOException {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"IndexReaderReopen2\");\n\n    Directory dir1 = FSDirectory.open(indexDir2);\n    createIndex(dir1, false);\n\n    IndexReader lastReader = IndexReader.open(indexDir2);\n    \n    Random r = newRandom();\n    for(int i=0;i<10;i++) {\n      int mod = r.nextInt(5);\n      modifyIndex(mod, lastReader.directory());\n      IndexReader reader = lastReader.reopen();\n      if (reader != lastReader) {\n        lastReader.close();\n        lastReader = reader;\n      }\n    }\n    lastReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.listAll();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","sourceOld":"  // LUCENE-1453\n  public void testFSDirectoryReopen2() throws CorruptIndexException, IOException {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"IndexReaderReopen2\");\n\n    Directory dir1 = FSDirectory.getDirectory(indexDir2);\n    createIndex(dir1, false);\n\n    IndexReader lastReader = IndexReader.open(indexDir2);\n    \n    Random r = newRandom();\n    for(int i=0;i<10;i++) {\n      int mod = r.nextInt(5);\n      modifyIndex(mod, lastReader.directory());\n      IndexReader reader = lastReader.reopen();\n      if (reader != lastReader) {\n        lastReader.close();\n        lastReader = reader;\n      }\n    }\n    lastReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.listAll();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcdb11dc129c2c947a3e04355edd02a790bb4ac7","date":1244490955,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testFSDirectoryReopen2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testFSDirectoryReopen2().mjava","sourceNew":"  // LUCENE-1453\n  public void testFSDirectoryReopen2() throws CorruptIndexException, IOException {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"IndexReaderReopen2\");\n\n    Directory dir1 = FSDirectory.getDirectory(indexDir2);\n    createIndex(dir1, false);\n\n    IndexReader lastReader = IndexReader.open(indexDir2);\n    \n    Random r = newRandom();\n    for(int i=0;i<10;i++) {\n      int mod = r.nextInt(5);\n      modifyIndex(mod, lastReader.directory());\n      IndexReader reader = lastReader.reopen();\n      if (reader != lastReader) {\n        lastReader.close();\n        lastReader = reader;\n      }\n    }\n    lastReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.listAll();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","sourceOld":"  // LUCENE-1453\n  public void testFSDirectoryReopen2() throws CorruptIndexException, IOException {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"IndexReaderReopen2\");\n\n    Directory dir1 = FSDirectory.open(indexDir2);\n    createIndex(dir1, false);\n\n    IndexReader lastReader = IndexReader.open(indexDir2);\n    \n    Random r = newRandom();\n    for(int i=0;i<10;i++) {\n      int mod = r.nextInt(5);\n      modifyIndex(mod, lastReader.directory());\n      IndexReader reader = lastReader.reopen();\n      if (reader != lastReader) {\n        lastReader.close();\n        lastReader = reader;\n      }\n    }\n    lastReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.listAll();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testFSDirectoryReopen2().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1453\n  public void testFSDirectoryReopen2() throws CorruptIndexException, IOException {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"IndexReaderReopen2\");\n\n    Directory dir1 = FSDirectory.getDirectory(indexDir2);\n    createIndex(dir1, false);\n\n    IndexReader lastReader = IndexReader.open(indexDir2);\n    \n    Random r = newRandom();\n    for(int i=0;i<10;i++) {\n      int mod = r.nextInt(5);\n      modifyIndex(mod, lastReader.directory());\n      IndexReader reader = lastReader.reopen();\n      if (reader != lastReader) {\n        lastReader.close();\n        lastReader = reader;\n      }\n    }\n    lastReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.listAll();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testFSDirectoryReopen2().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1453\n  public void testFSDirectoryReopen2() throws CorruptIndexException, IOException {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"IndexReaderReopen2\");\n\n    Directory dir1 = FSDirectory.getDirectory(indexDir2);\n    createIndex(dir1, false);\n\n    IndexReader lastReader = IndexReader.open(indexDir2);\n    \n    Random r = newRandom();\n    for(int i=0;i<10;i++) {\n      int mod = r.nextInt(5);\n      modifyIndex(mod, lastReader.directory());\n      IndexReader reader = lastReader.reopen();\n      if (reader != lastReader) {\n        lastReader.close();\n        lastReader = reader;\n      }\n    }\n    lastReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.listAll();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d54c7739bfe85d68f0352823cd70c10c619fad38":["6817596a5666fa3e3979682dea4a2bc8d70fc570"],"cb1066f2afe9450585d0d10063ea4450085236f1":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["dcdb11dc129c2c947a3e04355edd02a790bb4ac7"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["cb1066f2afe9450585d0d10063ea4450085236f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["dcdb11dc129c2c947a3e04355edd02a790bb4ac7","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"dcdb11dc129c2c947a3e04355edd02a790bb4ac7":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"6817596a5666fa3e3979682dea4a2bc8d70fc570":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"d54c7739bfe85d68f0352823cd70c10c619fad38":["cb1066f2afe9450585d0d10063ea4450085236f1"],"cb1066f2afe9450585d0d10063ea4450085236f1":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["dcdb11dc129c2c947a3e04355edd02a790bb4ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6817596a5666fa3e3979682dea4a2bc8d70fc570"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6817596a5666fa3e3979682dea4a2bc8d70fc570":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"dcdb11dc129c2c947a3e04355edd02a790bb4ac7":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}