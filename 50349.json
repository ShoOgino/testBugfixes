{"path":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesAgainstAllClients(String,SolrParams,List[Integer],List[Float]).mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesAgainstAllClients(String,SolrParams,List[Integer],List[Float]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retries the specified 'req' against each SolrClient in \"clients\" untill the expected number of \n   * results are returned, at which point the results are verified using assertDocIdsAndValuesInResults\n   *\n   * @param debug used in log and assertion messages\n   * @param req the query to execut, should include rows &amp; sort params such that the results can be compared to luceneDocids and valuesList\n   * @param luceneDocids a list of \"[docid]\" values to be tested against each doc in the req results (in order)\n   * @param valuesList a list of \"inplace_updatable_float\" values to be tested against each doc in the req results (in order)\n   */\n  private void assertDocIdsAndValuesAgainstAllClients(final String debug,\n                                                      final SolrParams req,\n                                                      final List<Integer> luceneDocids,\n                                                      final List<Float> valuesList) throws Exception {\n    assert luceneDocids.size() == valuesList.size();\n    final long numFoundExpected = luceneDocids.size();\n    \n    CLIENT: for (SolrClient client : clients) {\n      final String clientDebug = client.toString() + (LEADER.equals(client) ? \" (leader)\" : \" (not leader)\");\n      final String msg = \"'\"+debug+\"' results against client: \" + clientDebug;\n      SolrDocumentList results = null;\n      // For each client, do a (sorted) sanity check query to confirm searcher has been re-opened\n      // after our update -- if the numFound matches our expectations, then verify the inplace float\n      // value and [docid] of each result doc against our expecations to ensure that the values were\n      // updated properly w/o the doc being completley re-added internally. (ie: truly inplace)\n      RETRY: for (int attempt = 0; attempt <= NUM_RETRIES; attempt++) {\n        log.info(\"Attempt #{} checking {}\", attempt, msg);\n        results = client.query(req).getResults();\n        if (numFoundExpected == results.getNumFound()) {\n          break RETRY;\n        }\n        if (attempt == NUM_RETRIES) {\n          fail(\"Repeated retry for \"+msg+\"; Never got numFound=\"+numFoundExpected+\"; results=> \"+results);\n        }\n        log.info(\"numFound missmatch, searcher may not have re-opened yet.  Will sleep an retry...\");\n        Thread.sleep(WAIT_TIME);          \n      }\n      \n      assertDocIdsAndValuesInResults(msg, results, luceneDocids, valuesList);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesAgainstAllClients(String,SolrParams,List[Integer],List[Float]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retries the specified 'req' against each SolrClient in \"clients\" untill the expected number of \n   * results are returned, at which point the results are verified using assertDocIdsAndValuesInResults\n   *\n   * @param debug used in log and assertion messages\n   * @param req the query to execut, should include rows &amp; sort params such that the results can be compared to luceneDocids and valuesList\n   * @param luceneDocids a list of \"[docid]\" values to be tested against each doc in the req results (in order)\n   * @param valuesList a list of \"inplace_updatable_float\" values to be tested against each doc in the req results (in order)\n   */\n  private void assertDocIdsAndValuesAgainstAllClients(final String debug,\n                                                      final SolrParams req,\n                                                      final List<Integer> luceneDocids,\n                                                      final List<Float> valuesList) throws Exception {\n    assert luceneDocids.size() == valuesList.size();\n    final long numFoundExpected = luceneDocids.size();\n    \n    CLIENT: for (SolrClient client : clients) {\n      final String clientDebug = client.toString() + (LEADER.equals(client) ? \" (leader)\" : \" (not leader)\");\n      final String msg = \"'\"+debug+\"' results against client: \" + clientDebug;\n      SolrDocumentList results = null;\n      // For each client, do a (sorted) sanity check query to confirm searcher has been re-opened\n      // after our update -- if the numFound matches our expectations, then verify the inplace float\n      // value and [docid] of each result doc against our expecations to ensure that the values were\n      // updated properly w/o the doc being completley re-added internally. (ie: truly inplace)\n      RETRY: for (int attempt = 0; attempt <= NUM_RETRIES; attempt++) {\n        log.info(\"Attempt #{} checking {}\", attempt, msg);\n        results = client.query(req).getResults();\n        if (numFoundExpected == results.getNumFound()) {\n          break RETRY;\n        }\n        if (attempt == NUM_RETRIES) {\n          fail(\"Repeated retry for \"+msg+\"; Never got numFound=\"+numFoundExpected+\"; results=> \"+results);\n        }\n        log.info(\"numFound missmatch, searcher may not have re-opened yet.  Will sleep an retry...\");\n        Thread.sleep(WAIT_TIME);          \n      }\n      \n      assertDocIdsAndValuesInResults(msg, results, luceneDocids, valuesList);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10baade1bc7e7bc0d12a8bf111f5da63599334f","date":1548013816,"type":3,"author":"Jimmy Casey","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesAgainstAllClients(String,SolrParams,List[Integer],List[Float]).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesAgainstAllClients(String,SolrParams,List[Integer],List[Float]).mjava","sourceNew":"  /**\n   * Retries the specified 'req' against each SolrClient in \"clients\" until the expected number of \n   * results are returned, at which point the results are verified using assertDocIdsAndValuesInResults\n   *\n   * @param debug used in log and assertion messages\n   * @param req the query to execut, should include rows &amp; sort params such that the results can be compared to luceneDocids and valuesList\n   * @param luceneDocids a list of \"[docid]\" values to be tested against each doc in the req results (in order)\n   * @param valuesList a list of \"inplace_updatable_float\" values to be tested against each doc in the req results (in order)\n   */\n  private void assertDocIdsAndValuesAgainstAllClients(final String debug,\n                                                      final SolrParams req,\n                                                      final List<Integer> luceneDocids,\n                                                      final List<Float> valuesList) throws Exception {\n    assert luceneDocids.size() == valuesList.size();\n    final long numFoundExpected = luceneDocids.size();\n    \n    CLIENT: for (SolrClient client : clients) {\n      final String clientDebug = client.toString() + (LEADER.equals(client) ? \" (leader)\" : \" (not leader)\");\n      final String msg = \"'\"+debug+\"' results against client: \" + clientDebug;\n      SolrDocumentList results = null;\n      // For each client, do a (sorted) sanity check query to confirm searcher has been re-opened\n      // after our update -- if the numFound matches our expectations, then verify the inplace float\n      // value and [docid] of each result doc against our expecations to ensure that the values were\n      // updated properly w/o the doc being completley re-added internally. (ie: truly inplace)\n      RETRY: for (int attempt = 0; attempt <= NUM_RETRIES; attempt++) {\n        log.info(\"Attempt #{} checking {}\", attempt, msg);\n        results = client.query(req).getResults();\n        if (numFoundExpected == results.getNumFound()) {\n          break RETRY;\n        }\n        if (attempt == NUM_RETRIES) {\n          fail(\"Repeated retry for \"+msg+\"; Never got numFound=\"+numFoundExpected+\"; results=> \"+results);\n        }\n        log.info(\"numFound missmatch, searcher may not have re-opened yet.  Will sleep an retry...\");\n        Thread.sleep(WAIT_TIME);          \n      }\n      \n      assertDocIdsAndValuesInResults(msg, results, luceneDocids, valuesList);\n    }\n  }\n\n","sourceOld":"  /**\n   * Retries the specified 'req' against each SolrClient in \"clients\" untill the expected number of \n   * results are returned, at which point the results are verified using assertDocIdsAndValuesInResults\n   *\n   * @param debug used in log and assertion messages\n   * @param req the query to execut, should include rows &amp; sort params such that the results can be compared to luceneDocids and valuesList\n   * @param luceneDocids a list of \"[docid]\" values to be tested against each doc in the req results (in order)\n   * @param valuesList a list of \"inplace_updatable_float\" values to be tested against each doc in the req results (in order)\n   */\n  private void assertDocIdsAndValuesAgainstAllClients(final String debug,\n                                                      final SolrParams req,\n                                                      final List<Integer> luceneDocids,\n                                                      final List<Float> valuesList) throws Exception {\n    assert luceneDocids.size() == valuesList.size();\n    final long numFoundExpected = luceneDocids.size();\n    \n    CLIENT: for (SolrClient client : clients) {\n      final String clientDebug = client.toString() + (LEADER.equals(client) ? \" (leader)\" : \" (not leader)\");\n      final String msg = \"'\"+debug+\"' results against client: \" + clientDebug;\n      SolrDocumentList results = null;\n      // For each client, do a (sorted) sanity check query to confirm searcher has been re-opened\n      // after our update -- if the numFound matches our expectations, then verify the inplace float\n      // value and [docid] of each result doc against our expecations to ensure that the values were\n      // updated properly w/o the doc being completley re-added internally. (ie: truly inplace)\n      RETRY: for (int attempt = 0; attempt <= NUM_RETRIES; attempt++) {\n        log.info(\"Attempt #{} checking {}\", attempt, msg);\n        results = client.query(req).getResults();\n        if (numFoundExpected == results.getNumFound()) {\n          break RETRY;\n        }\n        if (attempt == NUM_RETRIES) {\n          fail(\"Repeated retry for \"+msg+\"; Never got numFound=\"+numFoundExpected+\"; results=> \"+results);\n        }\n        log.info(\"numFound missmatch, searcher may not have re-opened yet.  Will sleep an retry...\");\n        Thread.sleep(WAIT_TIME);          \n      }\n      \n      assertDocIdsAndValuesInResults(msg, results, luceneDocids, valuesList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesAgainstAllClients(String,SolrParams,List[Integer],List[Float]).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesAgainstAllClients(String,SolrParams,List[Integer],List[Float]).mjava","sourceNew":"  /**\n   * Retries the specified 'req' against each SolrClient in \"clients\" until the expected number of \n   * results are returned, at which point the results are verified using assertDocIdsAndValuesInResults\n   *\n   * @param debug used in log and assertion messages\n   * @param req the query to execut, should include rows &amp; sort params such that the results can be compared to luceneDocids and valuesList\n   * @param luceneDocids a list of \"[docid]\" values to be tested against each doc in the req results (in order)\n   * @param valuesList a list of \"inplace_updatable_float\" values to be tested against each doc in the req results (in order)\n   */\n  private void assertDocIdsAndValuesAgainstAllClients(final String debug,\n                                                      final SolrParams req,\n                                                      final List<Integer> luceneDocids,\n                                                      final List<Float> valuesList) throws Exception {\n    assert luceneDocids.size() == valuesList.size();\n    final long numFoundExpected = luceneDocids.size();\n    \n    CLIENT: for (SolrClient client : clients) {\n      final String clientDebug = client.toString() + (LEADER.equals(client) ? \" (leader)\" : \" (not leader)\");\n      final String msg = \"'\"+debug+\"' results against client: \" + clientDebug;\n      SolrDocumentList results = null;\n      // For each client, do a (sorted) sanity check query to confirm searcher has been re-opened\n      // after our update -- if the numFound matches our expectations, then verify the inplace float\n      // value and [docid] of each result doc against our expecations to ensure that the values were\n      // updated properly w/o the doc being completley re-added internally. (ie: truly inplace)\n      RETRY: for (int attempt = 0; attempt <= NUM_RETRIES; attempt++) {\n        log.info(\"Attempt #{} checking {}\", attempt, msg);\n        results = client.query(req).getResults();\n        if (numFoundExpected == results.getNumFound()) {\n          break RETRY;\n        }\n        if (attempt == NUM_RETRIES) {\n          fail(\"Repeated retry for \"+msg+\"; Never got numFound=\"+numFoundExpected+\"; results=> \"+results);\n        }\n        log.info(\"numFound missmatch, searcher may not have re-opened yet.  Will sleep an retry...\");\n        Thread.sleep(WAIT_TIME);          \n      }\n      \n      assertDocIdsAndValuesInResults(msg, results, luceneDocids, valuesList);\n    }\n  }\n\n","sourceOld":"  /**\n   * Retries the specified 'req' against each SolrClient in \"clients\" untill the expected number of \n   * results are returned, at which point the results are verified using assertDocIdsAndValuesInResults\n   *\n   * @param debug used in log and assertion messages\n   * @param req the query to execut, should include rows &amp; sort params such that the results can be compared to luceneDocids and valuesList\n   * @param luceneDocids a list of \"[docid]\" values to be tested against each doc in the req results (in order)\n   * @param valuesList a list of \"inplace_updatable_float\" values to be tested against each doc in the req results (in order)\n   */\n  private void assertDocIdsAndValuesAgainstAllClients(final String debug,\n                                                      final SolrParams req,\n                                                      final List<Integer> luceneDocids,\n                                                      final List<Float> valuesList) throws Exception {\n    assert luceneDocids.size() == valuesList.size();\n    final long numFoundExpected = luceneDocids.size();\n    \n    CLIENT: for (SolrClient client : clients) {\n      final String clientDebug = client.toString() + (LEADER.equals(client) ? \" (leader)\" : \" (not leader)\");\n      final String msg = \"'\"+debug+\"' results against client: \" + clientDebug;\n      SolrDocumentList results = null;\n      // For each client, do a (sorted) sanity check query to confirm searcher has been re-opened\n      // after our update -- if the numFound matches our expectations, then verify the inplace float\n      // value and [docid] of each result doc against our expecations to ensure that the values were\n      // updated properly w/o the doc being completley re-added internally. (ie: truly inplace)\n      RETRY: for (int attempt = 0; attempt <= NUM_RETRIES; attempt++) {\n        log.info(\"Attempt #{} checking {}\", attempt, msg);\n        results = client.query(req).getResults();\n        if (numFoundExpected == results.getNumFound()) {\n          break RETRY;\n        }\n        if (attempt == NUM_RETRIES) {\n          fail(\"Repeated retry for \"+msg+\"; Never got numFound=\"+numFoundExpected+\"; results=> \"+results);\n        }\n        log.info(\"numFound missmatch, searcher may not have re-opened yet.  Will sleep an retry...\");\n        Thread.sleep(WAIT_TIME);          \n      }\n      \n      assertDocIdsAndValuesInResults(msg, results, luceneDocids, valuesList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c14208216474e190dcec6327766fd749b8aa965","date":1563380115,"type":5,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesAgainstAllClients(String,SolrParams,List[Integer],String,List[Number]).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesAgainstAllClients(String,SolrParams,List[Integer],List[Float]).mjava","sourceNew":"  /**\n   * Retries the specified 'req' against each SolrClient in \"clients\" until the expected number of \n   * results are returned, at which point the results are verified using assertDocIdsAndValuesInResults\n   *\n   * @param debug used in log and assertion messages\n   * @param req the query to execut, should include rows &amp; sort params such that the results can be compared to luceneDocids and valuesList\n   * @param luceneDocids a list of \"[docid]\" values to be tested against each doc in the req results (in order)\n   * @param fieldName used to get value from the doc to validate with valuesList\n   * @param valuesList a list of given fieldName values to be tested against each doc in results (in order)\n   */\n  private void assertDocIdsAndValuesAgainstAllClients(final String debug,\n                                                      final SolrParams req,\n                                                      final List<Integer> luceneDocids,\n                                                      final String fieldName,\n                                                      final List<Number> valuesList) throws Exception {\n    assert luceneDocids.size() == valuesList.size();\n    final long numFoundExpected = luceneDocids.size();\n    \n    CLIENT: for (SolrClient client : clients) {\n      final String clientDebug = client.toString() + (LEADER.equals(client) ? \" (leader)\" : \" (not leader)\");\n      final String msg = \"'\"+debug+\"' results against client: \" + clientDebug;\n      SolrDocumentList results = null;\n      // For each client, do a (sorted) sanity check query to confirm searcher has been re-opened\n      // after our update -- if the numFound matches our expectations, then verify the inplace float\n      // value and [docid] of each result doc against our expecations to ensure that the values were\n      // updated properly w/o the doc being completley re-added internally. (ie: truly inplace)\n      RETRY: for (int attempt = 0; attempt <= NUM_RETRIES; attempt++) {\n        log.info(\"Attempt #{} checking {}\", attempt, msg);\n        results = client.query(req).getResults();\n        if (numFoundExpected == results.getNumFound()) {\n          break RETRY;\n        }\n        if (attempt == NUM_RETRIES) {\n          fail(\"Repeated retry for \"+msg+\"; Never got numFound=\"+numFoundExpected+\"; results=> \"+results);\n        }\n        log.info(\"numFound missmatch, searcher may not have re-opened yet.  Will sleep an retry...\");\n        Thread.sleep(WAIT_TIME);          \n      }\n      \n      assertDocIdsAndValuesInResults(msg, results, luceneDocids, fieldName, valuesList);\n    }\n  }\n\n","sourceOld":"  /**\n   * Retries the specified 'req' against each SolrClient in \"clients\" until the expected number of \n   * results are returned, at which point the results are verified using assertDocIdsAndValuesInResults\n   *\n   * @param debug used in log and assertion messages\n   * @param req the query to execut, should include rows &amp; sort params such that the results can be compared to luceneDocids and valuesList\n   * @param luceneDocids a list of \"[docid]\" values to be tested against each doc in the req results (in order)\n   * @param valuesList a list of \"inplace_updatable_float\" values to be tested against each doc in the req results (in order)\n   */\n  private void assertDocIdsAndValuesAgainstAllClients(final String debug,\n                                                      final SolrParams req,\n                                                      final List<Integer> luceneDocids,\n                                                      final List<Float> valuesList) throws Exception {\n    assert luceneDocids.size() == valuesList.size();\n    final long numFoundExpected = luceneDocids.size();\n    \n    CLIENT: for (SolrClient client : clients) {\n      final String clientDebug = client.toString() + (LEADER.equals(client) ? \" (leader)\" : \" (not leader)\");\n      final String msg = \"'\"+debug+\"' results against client: \" + clientDebug;\n      SolrDocumentList results = null;\n      // For each client, do a (sorted) sanity check query to confirm searcher has been re-opened\n      // after our update -- if the numFound matches our expectations, then verify the inplace float\n      // value and [docid] of each result doc against our expecations to ensure that the values were\n      // updated properly w/o the doc being completley re-added internally. (ie: truly inplace)\n      RETRY: for (int attempt = 0; attempt <= NUM_RETRIES; attempt++) {\n        log.info(\"Attempt #{} checking {}\", attempt, msg);\n        results = client.query(req).getResults();\n        if (numFoundExpected == results.getNumFound()) {\n          break RETRY;\n        }\n        if (attempt == NUM_RETRIES) {\n          fail(\"Repeated retry for \"+msg+\"; Never got numFound=\"+numFoundExpected+\"; results=> \"+results);\n        }\n        log.info(\"numFound missmatch, searcher may not have re-opened yet.  Will sleep an retry...\");\n        Thread.sleep(WAIT_TIME);          \n      }\n      \n      assertDocIdsAndValuesInResults(msg, results, luceneDocids, valuesList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c14208216474e190dcec6327766fd749b8aa965":["a10baade1bc7e7bc0d12a8bf111f5da63599334f"],"a10baade1bc7e7bc0d12a8bf111f5da63599334f":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c14208216474e190dcec6327766fd749b8aa965"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["415bbbe7da8065dd3c477bdc3c703c6425622998","a10baade1bc7e7bc0d12a8bf111f5da63599334f"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","a10baade1bc7e7bc0d12a8bf111f5da63599334f","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"9c14208216474e190dcec6327766fd749b8aa965":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a10baade1bc7e7bc0d12a8bf111f5da63599334f":["9c14208216474e190dcec6327766fd749b8aa965","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}