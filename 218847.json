{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection with stateFormat=2: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"2\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      SolrClient adminClient = createNewSolrClient(\"\", baseUrl);\n      try {\n        res.setResponse(adminClient.request(request));\n      } finally {\n        if (adminClient != null) adminClient.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection with stateFormat=2: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"2\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed5e858eb62a97f2c8f311bbc560d03fe017d119","date":1421935972,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      SolrClient adminClient = createNewSolrClient(\"\", baseUrl);\n      try {\n        res.setResponse(adminClient.request(request));\n      } finally {\n        if (adminClient != null) adminClient.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection with stateFormat=2: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"2\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      SolrClient adminClient = createNewSolrClient(\"\", baseUrl);\n      try {\n        res.setResponse(adminClient.request(request));\n      } finally {\n        if (adminClient != null) adminClient.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      SolrClient adminClient = createNewSolrClient(\"\", baseUrl);\n      try {\n        res.setResponse(adminClient.request(request));\n      } finally {\n        if (adminClient != null) adminClient.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82b686ab2904b3e81184ecea0d238b4ab0885376","date":1529576124,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLL_PROPS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException, InterruptedException, TimeoutException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(numShards,\n          numShards * (numNrtReplicas + numTlogReplicas + numPullReplicas)));\n    } catch (TimeoutException e) {\n      new RuntimeException(\"Timeout waiting for \" + numShards + \" shards and \" + (numNrtReplicas + numTlogReplicas + numPullReplicas) + \" replicas.\", e);\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42210058b8ae092085fa2658880b69931512e8bf","date":1579289439,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException, InterruptedException, TimeoutException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(numShards,\n          numShards * (numNrtReplicas + numTlogReplicas + numPullReplicas)));\n    } catch (TimeoutException e) {\n      throw new RuntimeException(\"Timeout waiting for \" + numShards + \" shards and \" + (numNrtReplicas + numTlogReplicas + numPullReplicas) + \" replicas.\", e);\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException, InterruptedException, TimeoutException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(numShards,\n          numShards * (numNrtReplicas + numTlogReplicas + numPullReplicas)));\n    } catch (TimeoutException e) {\n      new RuntimeException(\"Timeout waiting for \" + numShards + \" shards and \" + (numNrtReplicas + numTlogReplicas + numPullReplicas) + \" replicas.\", e);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException, InterruptedException, TimeoutException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: {}\", collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(numShards,\n          numShards * (numNrtReplicas + numTlogReplicas + numPullReplicas)));\n    } catch (TimeoutException e) {\n      throw new RuntimeException(\"Timeout waiting for \" + numShards + \" shards and \" + (numNrtReplicas + numTlogReplicas + numPullReplicas) + \" replicas.\", e);\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException, InterruptedException, TimeoutException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(numShards,\n          numShards * (numNrtReplicas + numTlogReplicas + numPullReplicas)));\n    } catch (TimeoutException e) {\n      throw new RuntimeException(\"Timeout waiting for \" + numShards + \" shards and \" + (numNrtReplicas + numTlogReplicas + numPullReplicas) + \" replicas.\", e);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException, InterruptedException, TimeoutException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(numShards,\n          numShards * (numNrtReplicas + numTlogReplicas + numPullReplicas)));\n    } catch (TimeoutException e) {\n      throw new RuntimeException(\"Timeout waiting for \" + numShards + \" shards and \" + (numNrtReplicas + numTlogReplicas + numPullReplicas) + \" replicas.\", e);\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException, InterruptedException, TimeoutException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (\"1\".equals(getStateFormat()) ) {\n      log.info(\"Creating collection with stateFormat=1: {}\", collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"1\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(numShards,\n          numShards * (numNrtReplicas + numTlogReplicas + numPullReplicas)));\n    } catch (TimeoutException e) {\n      throw new RuntimeException(\"Timeout waiting for \" + numShards + \" shards and \" + (numNrtReplicas + numTlogReplicas + numPullReplicas) + \" replicas.\", e);\n    }\n    return res;\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b","ed5e858eb62a97f2c8f311bbc560d03fe017d119","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6809a6d7924df2c864d6a5863944aff9dfeb372c","date":1591826750,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException, InterruptedException, TimeoutException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(numShards,\n          numShards * (numNrtReplicas + numTlogReplicas + numPullReplicas)));\n    } catch (TimeoutException e) {\n      throw new RuntimeException(\"Timeout waiting for \" + numShards + \" shards and \" + (numNrtReplicas + numTlogReplicas + numPullReplicas) + \" replicas.\", e);\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException, InterruptedException, TimeoutException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.NRT_REPLICAS);\n    if (numNrtReplicas == null) {\n      numNrtReplicas = (Integer) collectionProps.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if(numNrtReplicas == null){\n      numNrtReplicas = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(ZkStateReader.REPLICATION_FACTOR);\n    }\n    if (numNrtReplicas == null) {\n      numNrtReplicas = Integer.valueOf(0);\n    }\n    Integer numTlogReplicas = (Integer) collectionProps.get(ZkStateReader.TLOG_REPLICAS);\n    if (numTlogReplicas == null) {\n      numTlogReplicas = Integer.valueOf(0);\n    }\n    Integer numPullReplicas = (Integer) collectionProps.get(ZkStateReader.PULL_REPLICAS);\n    if (numPullReplicas == null) {\n      numPullReplicas = Integer.valueOf(0);\n    }\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    } else {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numNrtReplicas + numTlogReplicas + numPullReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      try (SolrClient adminClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(adminClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    \n    try {\n      cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(numShards,\n          numShards * (numNrtReplicas + numTlogReplicas + numPullReplicas)));\n    } catch (TimeoutException e) {\n      throw new RuntimeException(\"Timeout waiting for \" + numShards + \" shards and \" + (numNrtReplicas + numTlogReplicas + numPullReplicas) + \" replicas.\", e);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"197bbedf08450ade98a11f4a0001448059666bec":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["82b686ab2904b3e81184ecea0d238b4ab0885376"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["28288370235ed02234a64753cdbf0c6ec096304a"],"82b686ab2904b3e81184ecea0d238b4ab0885376":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["42210058b8ae092085fa2658880b69931512e8bf"],"28288370235ed02234a64753cdbf0c6ec096304a":["61c45e99cf6676da48f19d7511c73712ad39402b","197bbedf08450ade98a11f4a0001448059666bec"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","61c45e99cf6676da48f19d7511c73712ad39402b"],"42210058b8ae092085fa2658880b69931512e8bf":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","82b686ab2904b3e81184ecea0d238b4ab0885376"],"ed5e858eb62a97f2c8f311bbc560d03fe017d119":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["e9017cf144952056066919f1ebc7897ff9bd71b1","197bbedf08450ade98a11f4a0001448059666bec"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["ed5e858eb62a97f2c8f311bbc560d03fe017d119"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6809a6d7924df2c864d6a5863944aff9dfeb372c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","82b686ab2904b3e81184ecea0d238b4ab0885376"]},"commit2Childs":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["82b686ab2904b3e81184ecea0d238b4ab0885376","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["6809a6d7924df2c864d6a5863944aff9dfeb372c"],"61c45e99cf6676da48f19d7511c73712ad39402b":["197bbedf08450ade98a11f4a0001448059666bec","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["42210058b8ae092085fa2658880b69931512e8bf"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"82b686ab2904b3e81184ecea0d238b4ab0885376":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"bafca15d8e408346a67f4282ad1143b88023893b":["ed5e858eb62a97f2c8f311bbc560d03fe017d119"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["61c45e99cf6676da48f19d7511c73712ad39402b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"42210058b8ae092085fa2658880b69931512e8bf":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"ed5e858eb62a97f2c8f311bbc560d03fe017d119":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}