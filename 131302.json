{"path":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.write(output, SI_NAME);\n    SimpleTextUtil.write(output, si.name, scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_CODEC);\n    SimpleTextUtil.write(output, si.getCodec().getName(), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_VERSION);\n    SimpleTextUtil.write(output, si.getVersion(), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DOCCOUNT);\n    SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DELCOUNT);\n    SimpleTextUtil.write(output, Integer.toString(si.getDelCount()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_HASPROX);\n    switch(si.getHasProxInternal()) {\n      case SegmentInfo.YES: SimpleTextUtil.write(output, \"true\", scratch); break;\n      case SegmentInfo.CHECK_FIELDINFO: SimpleTextUtil.write(output, \"check fieldinfo\", scratch); break;\n      // its \"NO\" if its 'anything but YES'... such as 0\n      default: SimpleTextUtil.write(output, \"false\", scratch); break;\n    }\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_HASVECTORS);\n    switch(si.getHasVectorsInternal()) {\n      case SegmentInfo.YES: SimpleTextUtil.write(output, \"true\", scratch); break;\n      case SegmentInfo.CHECK_FIELDINFO: SimpleTextUtil.write(output, \"check fieldinfo\", scratch); break;\n      // its \"NO\" if its 'anything but YES'... such as 0\n      default: SimpleTextUtil.write(output, \"false\", scratch); break;\n    }\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_USECOMPOUND);\n    SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DSOFFSET);\n    SimpleTextUtil.write(output, Integer.toString(si.getDocStoreOffset()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DSSEGMENT);\n    SimpleTextUtil.write(output, si.getDocStoreSegment(), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DSCOMPOUND);\n    SimpleTextUtil.write(output, Boolean.toString(si.getDocStoreIsCompoundFile()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DELGEN);\n    SimpleTextUtil.write(output, Long.toString(si.getDelGen()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    Map<Integer,Long> normGen = si.getNormGen();\n    int numNormGen = normGen == null ? 0 : normGen.size();\n    SimpleTextUtil.write(output, SI_NUM_NORMGEN);\n    SimpleTextUtil.write(output, Integer.toString(numNormGen), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    if (numNormGen > 0) {\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        SimpleTextUtil.write(output, SI_NORMGEN_KEY);\n        SimpleTextUtil.write(output, Integer.toString(entry.getKey()), scratch);\n        SimpleTextUtil.writeNewline(output);\n        \n        SimpleTextUtil.write(output, SI_NORMGEN_VALUE);\n        SimpleTextUtil.write(output, Long.toString(entry.getValue()), scratch);\n        SimpleTextUtil.writeNewline(output);\n      }\n    }\n    \n    Map<String,String> diagnostics = si.getDiagnostics();\n    int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n    SimpleTextUtil.write(output, SI_NUM_DIAG);\n    SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    if (numDiagnostics > 0) {\n      for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n        SimpleTextUtil.write(output, SI_DIAG_KEY);\n        SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n        SimpleTextUtil.writeNewline(output);\n        \n        SimpleTextUtil.write(output, SI_DIAG_VALUE);\n        SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n        SimpleTextUtil.writeNewline(output);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","sourceNew":"  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.write(output, SI_NAME);\n    SimpleTextUtil.write(output, si.name, scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_CODEC);\n    SimpleTextUtil.write(output, si.getCodec().getName(), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_VERSION);\n    SimpleTextUtil.write(output, si.getVersion(), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DOCCOUNT);\n    SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DELCOUNT);\n    SimpleTextUtil.write(output, Integer.toString(si.getDelCount()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_HASPROX);\n    switch(si.getHasProxInternal()) {\n      case SegmentInfo.YES: SimpleTextUtil.write(output, \"true\", scratch); break;\n      case SegmentInfo.CHECK_FIELDINFO: SimpleTextUtil.write(output, \"check fieldinfo\", scratch); break;\n      // its \"NO\" if its 'anything but YES'... such as 0\n      default: SimpleTextUtil.write(output, \"false\", scratch); break;\n    }\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_HASVECTORS);\n    switch(si.getHasVectorsInternal()) {\n      case SegmentInfo.YES: SimpleTextUtil.write(output, \"true\", scratch); break;\n      case SegmentInfo.CHECK_FIELDINFO: SimpleTextUtil.write(output, \"check fieldinfo\", scratch); break;\n      // its \"NO\" if its 'anything but YES'... such as 0\n      default: SimpleTextUtil.write(output, \"false\", scratch); break;\n    }\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_USECOMPOUND);\n    SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DSOFFSET);\n    SimpleTextUtil.write(output, Integer.toString(si.getDocStoreOffset()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DSSEGMENT);\n    SimpleTextUtil.write(output, si.getDocStoreSegment(), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DSCOMPOUND);\n    SimpleTextUtil.write(output, Boolean.toString(si.getDocStoreIsCompoundFile()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DELGEN);\n    SimpleTextUtil.write(output, Long.toString(si.getDelGen()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    Map<Integer,Long> normGen = si.getNormGen();\n    int numNormGen = normGen == null ? 0 : normGen.size();\n    SimpleTextUtil.write(output, SI_NUM_NORMGEN);\n    SimpleTextUtil.write(output, Integer.toString(numNormGen), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    if (numNormGen > 0) {\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        SimpleTextUtil.write(output, SI_NORMGEN_KEY);\n        SimpleTextUtil.write(output, Integer.toString(entry.getKey()), scratch);\n        SimpleTextUtil.writeNewline(output);\n        \n        SimpleTextUtil.write(output, SI_NORMGEN_VALUE);\n        SimpleTextUtil.write(output, Long.toString(entry.getValue()), scratch);\n        SimpleTextUtil.writeNewline(output);\n      }\n    }\n    \n    Map<String,String> diagnostics = si.getDiagnostics();\n    int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n    SimpleTextUtil.write(output, SI_NUM_DIAG);\n    SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    if (numDiagnostics > 0) {\n      for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n        SimpleTextUtil.write(output, SI_DIAG_KEY);\n        SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n        SimpleTextUtil.writeNewline(output);\n        \n        SimpleTextUtil.write(output, SI_DIAG_VALUE);\n        SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n        SimpleTextUtil.writeNewline(output);\n      }\n    }\n  }\n\n","sourceOld":"  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.write(output, SI_NAME);\n    SimpleTextUtil.write(output, si.name, scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_CODEC);\n    SimpleTextUtil.write(output, si.getCodec().getName(), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_VERSION);\n    SimpleTextUtil.write(output, si.getVersion(), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DOCCOUNT);\n    SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DELCOUNT);\n    SimpleTextUtil.write(output, Integer.toString(si.getDelCount()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_HASPROX);\n    switch(si.getHasProxInternal()) {\n      case SegmentInfo.YES: SimpleTextUtil.write(output, \"true\", scratch); break;\n      case SegmentInfo.CHECK_FIELDINFO: SimpleTextUtil.write(output, \"check fieldinfo\", scratch); break;\n      // its \"NO\" if its 'anything but YES'... such as 0\n      default: SimpleTextUtil.write(output, \"false\", scratch); break;\n    }\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_HASVECTORS);\n    switch(si.getHasVectorsInternal()) {\n      case SegmentInfo.YES: SimpleTextUtil.write(output, \"true\", scratch); break;\n      case SegmentInfo.CHECK_FIELDINFO: SimpleTextUtil.write(output, \"check fieldinfo\", scratch); break;\n      // its \"NO\" if its 'anything but YES'... such as 0\n      default: SimpleTextUtil.write(output, \"false\", scratch); break;\n    }\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_USECOMPOUND);\n    SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DSOFFSET);\n    SimpleTextUtil.write(output, Integer.toString(si.getDocStoreOffset()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DSSEGMENT);\n    SimpleTextUtil.write(output, si.getDocStoreSegment(), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DSCOMPOUND);\n    SimpleTextUtil.write(output, Boolean.toString(si.getDocStoreIsCompoundFile()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    SimpleTextUtil.write(output, SI_DELGEN);\n    SimpleTextUtil.write(output, Long.toString(si.getDelGen()), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    Map<Integer,Long> normGen = si.getNormGen();\n    int numNormGen = normGen == null ? 0 : normGen.size();\n    SimpleTextUtil.write(output, SI_NUM_NORMGEN);\n    SimpleTextUtil.write(output, Integer.toString(numNormGen), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    if (numNormGen > 0) {\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        SimpleTextUtil.write(output, SI_NORMGEN_KEY);\n        SimpleTextUtil.write(output, Integer.toString(entry.getKey()), scratch);\n        SimpleTextUtil.writeNewline(output);\n        \n        SimpleTextUtil.write(output, SI_NORMGEN_VALUE);\n        SimpleTextUtil.write(output, Long.toString(entry.getValue()), scratch);\n        SimpleTextUtil.writeNewline(output);\n      }\n    }\n    \n    Map<String,String> diagnostics = si.getDiagnostics();\n    int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n    SimpleTextUtil.write(output, SI_NUM_DIAG);\n    SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n    SimpleTextUtil.writeNewline(output);\n    \n    if (numDiagnostics > 0) {\n      for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n        SimpleTextUtil.write(output, SI_DIAG_KEY);\n        SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n        SimpleTextUtil.writeNewline(output);\n        \n        SimpleTextUtil.write(output, SI_DIAG_VALUE);\n        SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n        SimpleTextUtil.writeNewline(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}