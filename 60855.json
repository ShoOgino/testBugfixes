{"path":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(String,int).mjava","commits":[{"id":"9c706ea4648df3cdef242f9dd43da00db226b1a6","date":1184375011,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(String,int).mjava","pathOld":"/dev/null","sourceNew":"  public String processWord( String w, int wordCount )\n  {\n    if( w.length() < 1 ) {\n      return w;\n    }\n    if( onlyFirstWord && wordCount > 0 ) {\n      return w.toLowerCase();\n    }\n    \n    String k = keep.get( w.toUpperCase() );\n    if( k != null ) {\n      if( wordCount == 0 && forceFirstLetter && Character.isLowerCase( k.charAt(0) ) ) {\n        return Character.toUpperCase( k.charAt(0) ) + k.substring( 1 );\n      }\n      return k;\n    }\n    if( w.length() < minWordLength ) {\n      return w;\n    }\n    for( String prefix : okPrefix ) {\n      if( w.startsWith( prefix ) ) {\n        return w;\n      }\n    }\n    \n    // We know it has at least one character\n    char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );\n    for( int i=1; i<chars.length; i++ ) {\n      word.append( Character.toLowerCase( chars[i] ) );\n    }\n    return word.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a3bd060e23c83333ee54d14fc1034f973eb8b5","date":1203820455,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(String,int).mjava","sourceNew":null,"sourceOld":"  public String processWord( String w, int wordCount )\n  {\n    if( w.length() < 1 ) {\n      return w;\n    }\n    if( onlyFirstWord && wordCount > 0 ) {\n      return w.toLowerCase();\n    }\n    \n    String k = keep.get( w.toUpperCase() );\n    if( k != null ) {\n      if( wordCount == 0 && forceFirstLetter && Character.isLowerCase( k.charAt(0) ) ) {\n        return Character.toUpperCase( k.charAt(0) ) + k.substring( 1 );\n      }\n      return k;\n    }\n    if( w.length() < minWordLength ) {\n      return w;\n    }\n    for( String prefix : okPrefix ) {\n      if( w.startsWith( prefix ) ) {\n        return w;\n      }\n    }\n    \n    // We know it has at least one character\n    char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );\n    for( int i=1; i<chars.length; i++ ) {\n      word.append( Character.toLowerCase( chars[i] ) );\n    }\n    return word.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":["9c706ea4648df3cdef242f9dd43da00db226b1a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c706ea4648df3cdef242f9dd43da00db226b1a6":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9c706ea4648df3cdef242f9dd43da00db226b1a6"],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":[],"9c706ea4648df3cdef242f9dd43da00db226b1a6":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["16a3bd060e23c83333ee54d14fc1034f973eb8b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}