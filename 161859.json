{"path":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#scaleMaxScore(float,int).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#scaleMaxScore(float,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Scale max scores in an unsigned integer to avoid overflows\n   * (only the lower 32 bits of the long are used) as well as\n   * floating-point arithmetic errors. Those are rounded up in order\n   * to make sure we do not miss any matches.\n   */\n  private static long scaleMaxScore(float maxScore, int scalingFactor) {\n    assert Float.isNaN(maxScore) == false;\n    assert maxScore >= 0;\n\n    if (Float.isInfinite(maxScore)) {\n      return (1L << 32) - 1; // means +Infinity in practice for this scorer\n    }\n\n    // NOTE: because doubles have more amplitude than floats for the\n    // exponent, the scalb call produces an accurate value.\n    double scaled = Math.scalb((double) maxScore, scalingFactor);\n    assert scaled <= 1 << 16 : scaled + \" \" + maxScore; // regular values of max_score go into 0..2^16\n    return (long) Math.ceil(scaled); // round up, cast is accurate since value is <= 2^16\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#scaleMaxScore(float,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Scale max scores in an unsigned integer to avoid overflows\n   * (only the lower 32 bits of the long are used) as well as\n   * floating-point arithmetic errors. Those are rounded up in order\n   * to make sure we do not miss any matches.\n   */\n  private static long scaleMaxScore(float maxScore, int scalingFactor) {\n    assert Float.isNaN(maxScore) == false;\n    assert maxScore >= 0;\n\n    if (Float.isInfinite(maxScore)) {\n      return (1L << 32) - 1; // means +Infinity in practice for this scorer\n    }\n\n    // NOTE: because doubles have more amplitude than floats for the\n    // exponent, the scalb call produces an accurate value.\n    double scaled = Math.scalb((double) maxScore, scalingFactor);\n    assert scaled <= 1 << 16 : scaled + \" \" + maxScore; // regular values of max_score go into 0..2^16\n    return (long) Math.ceil(scaled); // round up, cast is accurate since value is <= 2^16\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3","date":1548397276,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#scaleMaxScore(float,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#scaleMaxScore(float,int).mjava","sourceNew":"  /**\n   * Scale max scores in an unsigned integer to avoid overflows\n   * (only the lower 32 bits of the long are used) as well as\n   * floating-point arithmetic errors. Those are rounded up in order\n   * to make sure we do not miss any matches.\n   */\n  private static long scaleMaxScore(float maxScore, int scalingFactor) {\n    assert Float.isNaN(maxScore) == false;\n    assert maxScore >= 0;\n\n    // NOTE: because doubles have more amplitude than floats for the\n    // exponent, the scalb call produces an accurate value.\n    double scaled = Math.scalb((double) maxScore, scalingFactor);\n\n    if (scaled > 1 << 16) {\n      // This happens if either maxScore is +Infty, or we have a scorer that\n      // returned +Infty as its maximum score over the whole range of doc IDs\n      // when computing the scaling factor in the constructor, and now returned\n      // a finite maximum score for a smaller range of doc IDs.\n      return (1L << 32) - 1; // means +Infinity in practice for this scorer\n    }\n\n    return (long) Math.ceil(scaled); // round up, cast is accurate since value is <= 2^16\n  }\n\n","sourceOld":"  /**\n   * Scale max scores in an unsigned integer to avoid overflows\n   * (only the lower 32 bits of the long are used) as well as\n   * floating-point arithmetic errors. Those are rounded up in order\n   * to make sure we do not miss any matches.\n   */\n  private static long scaleMaxScore(float maxScore, int scalingFactor) {\n    assert Float.isNaN(maxScore) == false;\n    assert maxScore >= 0;\n\n    if (Float.isInfinite(maxScore)) {\n      return (1L << 32) - 1; // means +Infinity in practice for this scorer\n    }\n\n    // NOTE: because doubles have more amplitude than floats for the\n    // exponent, the scalb call produces an accurate value.\n    double scaled = Math.scalb((double) maxScore, scalingFactor);\n    assert scaled <= 1 << 16 : scaled + \" \" + maxScore; // regular values of max_score go into 0..2^16\n    return (long) Math.ceil(scaled); // round up, cast is accurate since value is <= 2^16\n  }\n\n","bugFix":["9fc47cb7b4346802411bb432f501ed0673d7119e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["cf21ec8900bfb4d610f7bbac05b7d23d76c2cca3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}