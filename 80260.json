{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","pathOld":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","sourceNew":"\tpublic void testGetTextFragments() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString stringResults[] = highlighter.getBestFragments(tokenStream,text,10);\n\n\t\t\ttokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tTextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream,text,true,10);\n\n\t\t\tassertTrue(\"Failed to find correct number of text Fragments: \" + \n\t\t\t\tfragmentResults.length + \" vs \"+ stringResults.length, fragmentResults.length==stringResults.length);\n\t\t\tfor (int j = 0; j < stringResults.length; j++) \n\t\t\t{\n\t\t\t\tSystem.out.println(fragmentResults[j]);\n\t\t\t\tassertTrue(\"Failed to find same text Fragments: \" + \n\t\t\t\t\tfragmentResults[j] + \" found\", fragmentResults[j].toString().equals(stringResults[j]));\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testGetTextFragments() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString stringResults[] = highlighter.getBestFragments(tokenStream,text,10);\n\n\t\t\ttokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tTextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream,text,true,10);\n\n\t\t\tassertTrue(\"Failed to find correct number of text Fragments: \" + \n\t\t\t\tfragmentResults.length + \" vs \"+ stringResults.length, fragmentResults.length==stringResults.length);\n\t\t\tfor (int j = 0; j < stringResults.length; j++) \n\t\t\t{\n\t\t\t\tSystem.out.println(fragmentResults[j]);\n\t\t\t\tassertTrue(\"Failed to find same text Fragments: \" + \n\t\t\t\t\tfragmentResults[j] + \" found\", fragmentResults[j].toString().equals(stringResults[j]));\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","sourceNew":"  public void testGetTextFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n\n        doSearching(\"Kennedy\");\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);// new Highlighter(this, new\n          // QueryScorer(query));\n          highlighter.setTextFragmenter(new SimpleFragmenter(20));\n          String stringResults[] = highlighter.getBestFragments(tokenStream, text, 10);\n\n          tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          TextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream, text,\n              true, 10);\n\n          assertTrue(\"Failed to find correct number of text Fragments: \" + fragmentResults.length\n              + \" vs \" + stringResults.length, fragmentResults.length == stringResults.length);\n          for (int j = 0; j < stringResults.length; j++) {\n            System.out.println(fragmentResults[j]);\n            assertTrue(\"Failed to find same text Fragments: \" + fragmentResults[j] + \" found\",\n                fragmentResults[j].toString().equals(stringResults[j]));\n\n          }\n\n        }\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"\tpublic void testGetTextFragments() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString stringResults[] = highlighter.getBestFragments(tokenStream,text,10);\n\n\t\t\ttokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tTextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream,text,true,10);\n\n\t\t\tassertTrue(\"Failed to find correct number of text Fragments: \" + \n\t\t\t\tfragmentResults.length + \" vs \"+ stringResults.length, fragmentResults.length==stringResults.length);\n\t\t\tfor (int j = 0; j < stringResults.length; j++) \n\t\t\t{\n\t\t\t\tSystem.out.println(fragmentResults[j]);\n\t\t\t\tassertTrue(\"Failed to find same text Fragments: \" + \n\t\t\t\t\tfragmentResults[j] + \" found\", fragmentResults[j].toString().equals(stringResults[j]));\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","sourceNew":"  public void testGetTextFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n\n        doSearching(\"Kennedy\");\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);// new Highlighter(this, new\n          // QueryTermScorer(query));\n          highlighter.setTextFragmenter(new SimpleFragmenter(20));\n          String stringResults[] = highlighter.getBestFragments(tokenStream, text, 10);\n\n          tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          TextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream, text,\n              true, 10);\n\n          assertTrue(\"Failed to find correct number of text Fragments: \" + fragmentResults.length\n              + \" vs \" + stringResults.length, fragmentResults.length == stringResults.length);\n          for (int j = 0; j < stringResults.length; j++) {\n            System.out.println(fragmentResults[j]);\n            assertTrue(\"Failed to find same text Fragments: \" + fragmentResults[j] + \" found\",\n                fragmentResults[j].toString().equals(stringResults[j]));\n\n          }\n\n        }\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetTextFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n\n        doSearching(\"Kennedy\");\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);// new Highlighter(this, new\n          // QueryScorer(query));\n          highlighter.setTextFragmenter(new SimpleFragmenter(20));\n          String stringResults[] = highlighter.getBestFragments(tokenStream, text, 10);\n\n          tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          TextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream, text,\n              true, 10);\n\n          assertTrue(\"Failed to find correct number of text Fragments: \" + fragmentResults.length\n              + \" vs \" + stringResults.length, fragmentResults.length == stringResults.length);\n          for (int j = 0; j < stringResults.length; j++) {\n            System.out.println(fragmentResults[j]);\n            assertTrue(\"Failed to find same text Fragments: \" + fragmentResults[j] + \" found\",\n                fragmentResults[j].toString().equals(stringResults[j]));\n\n          }\n\n        }\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","sourceNew":"  public void testGetTextFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n\n        doSearching(\"Kennedy\");\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);// new Highlighter(this, new\n          // QueryTermScorer(query));\n          highlighter.setTextFragmenter(new SimpleFragmenter(20));\n          String stringResults[] = highlighter.getBestFragments(tokenStream, text, 10);\n\n          tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          TextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream, text,\n              true, 10);\n\n          assertTrue(\"Failed to find correct number of text Fragments: \" + fragmentResults.length\n              + \" vs \" + stringResults.length, fragmentResults.length == stringResults.length);\n          for (int j = 0; j < stringResults.length; j++) {\n            System.out.println(fragmentResults[j]);\n            assertTrue(\"Failed to find same text Fragments: \" + fragmentResults[j] + \" found\",\n                fragmentResults[j].toString().equals(stringResults[j]));\n\n          }\n\n        }\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetTextFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n\n        doSearching(\"Kennedy\");\n\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);// new Highlighter(this, new\n          // QueryTermScorer(query));\n          highlighter.setTextFragmenter(new SimpleFragmenter(20));\n          String stringResults[] = highlighter.getBestFragments(tokenStream, text, 10);\n\n          tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          TextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream, text,\n              true, 10);\n\n          assertTrue(\"Failed to find correct number of text Fragments: \" + fragmentResults.length\n              + \" vs \" + stringResults.length, fragmentResults.length == stringResults.length);\n          for (int j = 0; j < stringResults.length; j++) {\n            System.out.println(fragmentResults[j]);\n            assertTrue(\"Failed to find same text Fragments: \" + fragmentResults[j] + \" found\",\n                fragmentResults[j].toString().equals(stringResults[j]));\n\n          }\n\n        }\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","sourceNew":"  public void testGetTextFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n\n        doSearching(\"Kennedy\");\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);// new Highlighter(this, new\n          // QueryTermScorer(query));\n          highlighter.setTextFragmenter(new SimpleFragmenter(20));\n          String stringResults[] = highlighter.getBestFragments(tokenStream, text, 10);\n\n          tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          TextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream, text,\n              true, 10);\n\n          assertTrue(\"Failed to find correct number of text Fragments: \" + fragmentResults.length\n              + \" vs \" + stringResults.length, fragmentResults.length == stringResults.length);\n          for (int j = 0; j < stringResults.length; j++) {\n            System.out.println(fragmentResults[j]);\n            assertTrue(\"Failed to find same text Fragments: \" + fragmentResults[j] + \" found\",\n                fragmentResults[j].toString().equals(stringResults[j]));\n\n          }\n\n        }\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetTextFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n\n        doSearching(\"Kennedy\");\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);// new Highlighter(this, new\n          // QueryTermScorer(query));\n          highlighter.setTextFragmenter(new SimpleFragmenter(20));\n          String stringResults[] = highlighter.getBestFragments(tokenStream, text, 10);\n\n          tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          TextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream, text,\n              true, 10);\n\n          assertTrue(\"Failed to find correct number of text Fragments: \" + fragmentResults.length\n              + \" vs \" + stringResults.length, fragmentResults.length == stringResults.length);\n          for (int j = 0; j < stringResults.length; j++) {\n            System.out.println(fragmentResults[j]);\n            assertTrue(\"Failed to find same text Fragments: \" + fragmentResults[j] + \" found\",\n                fragmentResults[j].toString().equals(stringResults[j]));\n\n          }\n\n        }\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","sourceNew":"  public void testGetTextFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n\n        doSearching(\"Kennedy\");\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);// new Highlighter(this, new\n          // QueryTermScorer(query));\n          highlighter.setTextFragmenter(new SimpleFragmenter(20));\n          String stringResults[] = highlighter.getBestFragments(tokenStream, text, 10);\n\n          tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          TextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream, text,\n              true, 10);\n\n          assertTrue(\"Failed to find correct number of text Fragments: \" + fragmentResults.length\n              + \" vs \" + stringResults.length, fragmentResults.length == stringResults.length);\n          for (int j = 0; j < stringResults.length; j++) {\n            if (VERBOSE) System.out.println(fragmentResults[j]);\n            assertTrue(\"Failed to find same text Fragments: \" + fragmentResults[j] + \" found\",\n                fragmentResults[j].toString().equals(stringResults[j]));\n\n          }\n\n        }\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetTextFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n\n        doSearching(\"Kennedy\");\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);// new Highlighter(this, new\n          // QueryTermScorer(query));\n          highlighter.setTextFragmenter(new SimpleFragmenter(20));\n          String stringResults[] = highlighter.getBestFragments(tokenStream, text, 10);\n\n          tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          TextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream, text,\n              true, 10);\n\n          assertTrue(\"Failed to find correct number of text Fragments: \" + fragmentResults.length\n              + \" vs \" + stringResults.length, fragmentResults.length == stringResults.length);\n          for (int j = 0; j < stringResults.length; j++) {\n            System.out.println(fragmentResults[j]);\n            assertTrue(\"Failed to find same text Fragments: \" + fragmentResults[j] + \" found\",\n                fragmentResults[j].toString().equals(stringResults[j]));\n\n          }\n\n        }\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","sourceNew":"  public void testGetTextFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n\n        doSearching(\"Kennedy\");\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);// new Highlighter(this, new\n          // QueryTermScorer(query));\n          highlighter.setTextFragmenter(new SimpleFragmenter(20));\n          String stringResults[] = highlighter.getBestFragments(tokenStream, text, 10);\n\n          tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          TextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream, text,\n              true, 10);\n\n          assertTrue(\"Failed to find correct number of text Fragments: \" + fragmentResults.length\n              + \" vs \" + stringResults.length, fragmentResults.length == stringResults.length);\n          for (int j = 0; j < stringResults.length; j++) {\n            if (VERBOSE) System.out.println(fragmentResults[j]);\n            assertTrue(\"Failed to find same text Fragments: \" + fragmentResults[j] + \" found\",\n                fragmentResults[j].toString().equals(stringResults[j]));\n\n          }\n\n        }\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetTextFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n\n        doSearching(\"Kennedy\");\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);// new Highlighter(this, new\n          // QueryTermScorer(query));\n          highlighter.setTextFragmenter(new SimpleFragmenter(20));\n          String stringResults[] = highlighter.getBestFragments(tokenStream, text, 10);\n\n          tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          TextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream, text,\n              true, 10);\n\n          assertTrue(\"Failed to find correct number of text Fragments: \" + fragmentResults.length\n              + \" vs \" + stringResults.length, fragmentResults.length == stringResults.length);\n          for (int j = 0; j < stringResults.length; j++) {\n            if (VERBOSE) System.out.println(fragmentResults[j]);\n            assertTrue(\"Failed to find same text Fragments: \" + fragmentResults[j] + \" found\",\n                fragmentResults[j].toString().equals(stringResults[j]));\n\n          }\n\n        }\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["296b8b38a87feb478921f77834a2302dfe77641c"],"296b8b38a87feb478921f77834a2302dfe77641c":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["296b8b38a87feb478921f77834a2302dfe77641c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"296b8b38a87feb478921f77834a2302dfe77641c":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}