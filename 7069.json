{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","commits":[{"id":"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15","date":1496411842,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#validate(String,Object).mjava","sourceNew":"  /**\n   *\n   * @param name name of the condition\n   * @param val value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Long.class) {\n      Long num = parseNumber(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min) throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max) throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","sourceOld":"  public static Object validate(String name, Object val) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(null);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Long.class) {\n      Long num = parseNumber(name, val);\n      if (info.min != null)\n        if (num < info.min) throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n      if (info.max != null)\n        if (num > info.max) throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      return num;\n    } else if (info.type == String.class) {\n      if (info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db505911df79fefd49f29212e44226b35e9e02e1","date":1496414878,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   *\n   * @param name name of the condition\n   * @param val value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","sourceOld":"  /**\n   *\n   * @param name name of the condition\n   * @param val value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Long.class) {\n      Long num = parseNumber(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min) throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max) throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * @param name name of the condition\n   * @param val value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * @param name name of the condition\n   * @param val value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","sourceOld":"  /**\n   *\n   * @param name name of the condition\n   * @param val value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   *\n   * @param name name of the condition\n   * @param val value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","sourceOld":"  /**\n   *\n   * @param name name of the condition\n   * @param val value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","sourceOld":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","db505911df79fefd49f29212e44226b35e9e02e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db505911df79fefd49f29212e44226b35e9e02e1":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"98f11c416d30e556e0004a9a84960702d12d35b1":["1852ff897aecd2f7c8376a02aedfd44104533f28","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["98f11c416d30e556e0004a9a84960702d12d35b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["db505911df79fefd49f29212e44226b35e9e02e1"],"db505911df79fefd49f29212e44226b35e9e02e1":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}