{"path":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#accept(BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#accept(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    if (collator == null) {\n      if (!this.includeLower && term.equals(lowerBytesRef))\n        return AcceptStatus.NO;\n      // Use this field's default sort ordering\n      if (upperBytesRef != null) {\n        final int cmp = termComp.compare(upperBytesRef, term);\n        /*\n         * if beyond the upper term, or is exclusive and this is equal to\n         * the upper term, break out\n         */\n        if ((cmp < 0) ||\n            (!includeUpper && cmp==0)) {\n          return AcceptStatus.END;\n        }\n      }\n      return AcceptStatus.YES;\n    } else {\n      if ((includeLower\n           ? collator.compare(term.utf8ToString(), lowerTermText) >= 0\n           : collator.compare(term.utf8ToString(), lowerTermText) > 0)\n          && (upperTermText == null\n              || (includeUpper\n                  ? collator.compare(term.utf8ToString(), upperTermText) <= 0\n                  : collator.compare(term.utf8ToString(), upperTermText) < 0))) {\n        return AcceptStatus.YES;\n      }\n      return AcceptStatus.NO;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#accept(BytesRef).mjava","sourceNew":"  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    if (!this.includeLower && term.equals(lowerBytesRef))\n      return AcceptStatus.NO;\n    \n    // Use this field's default sort ordering\n    if (upperBytesRef != null) {\n      final int cmp = termComp.compare(upperBytesRef, term);\n      /*\n       * if beyond the upper term, or is exclusive and this is equal to\n       * the upper term, break out\n       */\n      if ((cmp < 0) ||\n          (!includeUpper && cmp==0)) {\n        return AcceptStatus.END;\n      }\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    if (collator == null) {\n      if (!this.includeLower && term.equals(lowerBytesRef))\n        return AcceptStatus.NO;\n      // Use this field's default sort ordering\n      if (upperBytesRef != null) {\n        final int cmp = termComp.compare(upperBytesRef, term);\n        /*\n         * if beyond the upper term, or is exclusive and this is equal to\n         * the upper term, break out\n         */\n        if ((cmp < 0) ||\n            (!includeUpper && cmp==0)) {\n          return AcceptStatus.END;\n        }\n      }\n      return AcceptStatus.YES;\n    } else {\n      if ((includeLower\n           ? collator.compare(term.utf8ToString(), lowerTermText) >= 0\n           : collator.compare(term.utf8ToString(), lowerTermText) > 0)\n          && (upperTermText == null\n              || (includeUpper\n                  ? collator.compare(term.utf8ToString(), upperTermText) <= 0\n                  : collator.compare(term.utf8ToString(), upperTermText) < 0))) {\n        return AcceptStatus.YES;\n      }\n      return AcceptStatus.NO;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#accept(BytesRef).mjava","sourceNew":"  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    if (!this.includeLower && term.equals(lowerBytesRef))\n      return AcceptStatus.NO;\n    \n    // Use this field's default sort ordering\n    if (upperBytesRef != null) {\n      final int cmp = termComp.compare(upperBytesRef, term);\n      /*\n       * if beyond the upper term, or is exclusive and this is equal to\n       * the upper term, break out\n       */\n      if ((cmp < 0) ||\n          (!includeUpper && cmp==0)) {\n        return AcceptStatus.END;\n      }\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    if (collator == null) {\n      if (!this.includeLower && term.equals(lowerBytesRef))\n        return AcceptStatus.NO;\n      // Use this field's default sort ordering\n      if (upperBytesRef != null) {\n        final int cmp = termComp.compare(upperBytesRef, term);\n        /*\n         * if beyond the upper term, or is exclusive and this is equal to\n         * the upper term, break out\n         */\n        if ((cmp < 0) ||\n            (!includeUpper && cmp==0)) {\n          return AcceptStatus.END;\n        }\n      }\n      return AcceptStatus.YES;\n    } else {\n      if ((includeLower\n           ? collator.compare(term.utf8ToString(), lowerTermText) >= 0\n           : collator.compare(term.utf8ToString(), lowerTermText) > 0)\n          && (upperTermText == null\n              || (includeUpper\n                  ? collator.compare(term.utf8ToString(), upperTermText) <= 0\n                  : collator.compare(term.utf8ToString(), upperTermText) < 0))) {\n        return AcceptStatus.YES;\n      }\n      return AcceptStatus.NO;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#accept(BytesRef).mjava","sourceNew":"  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    if (!this.includeLower && term.equals(lowerBytesRef))\n      return AcceptStatus.NO;\n    \n    // Use this field's default sort ordering\n    if (upperBytesRef != null) {\n      final int cmp = termComp.compare(upperBytesRef, term);\n      /*\n       * if beyond the upper term, or is exclusive and this is equal to\n       * the upper term, break out\n       */\n      if ((cmp < 0) ||\n          (!includeUpper && cmp==0)) {\n        return AcceptStatus.END;\n      }\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    if (collator == null) {\n      if (!this.includeLower && term.equals(lowerBytesRef))\n        return AcceptStatus.NO;\n      // Use this field's default sort ordering\n      if (upperBytesRef != null) {\n        final int cmp = termComp.compare(upperBytesRef, term);\n        /*\n         * if beyond the upper term, or is exclusive and this is equal to\n         * the upper term, break out\n         */\n        if ((cmp < 0) ||\n            (!includeUpper && cmp==0)) {\n          return AcceptStatus.END;\n        }\n      }\n      return AcceptStatus.YES;\n    } else {\n      if ((includeLower\n           ? collator.compare(term.utf8ToString(), lowerTermText) >= 0\n           : collator.compare(term.utf8ToString(), lowerTermText) > 0)\n          && (upperTermText == null\n              || (includeUpper\n                  ? collator.compare(term.utf8ToString(), upperTermText) <= 0\n                  : collator.compare(term.utf8ToString(), upperTermText) < 0))) {\n        return AcceptStatus.YES;\n      }\n      return AcceptStatus.NO;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#accept(BytesRef).mjava","sourceNew":"  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    if (!this.includeLower && term.equals(lowerBytesRef))\n      return AcceptStatus.NO;\n    \n    // Use this field's default sort ordering\n    if (upperBytesRef != null) {\n      final int cmp = termComp.compare(upperBytesRef, term);\n      /*\n       * if beyond the upper term, or is exclusive and this is equal to\n       * the upper term, break out\n       */\n      if ((cmp < 0) ||\n          (!includeUpper && cmp==0)) {\n        return AcceptStatus.END;\n      }\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","sourceOld":"  @Override\n  protected AcceptStatus accept(BytesRef term) {\n    if (!this.includeLower && term.equals(lowerBytesRef))\n      return AcceptStatus.NO;\n    \n    // Use this field's default sort ordering\n    if (upperBytesRef != null) {\n      final int cmp = termComp.compare(upperBytesRef, term);\n      /*\n       * if beyond the upper term, or is exclusive and this is equal to\n       * the upper term, break out\n       */\n      if ((cmp < 0) ||\n          (!includeUpper && cmp==0)) {\n        return AcceptStatus.END;\n      }\n    }\n\n    return AcceptStatus.YES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}