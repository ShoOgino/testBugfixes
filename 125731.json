{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#normalDistance(double,double,double,Membership...).mjava","commits":[{"id":"9908748d960ccb7706a20e81289a656237780b6c","date":1435716223,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#normalDistance(double,double,double,Membership...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute normal distance from plane to a vector.\n   * @param x is the vector x.\n   * @param y is the vector y.\n   * @param z is the vector z.\n   * @return the normal distance.\n   */\n  public double normalDistance(final double x, final double y, final double z, final Membership... bounds) {\n\n    final double dist = evaluate(x,y,z);\n    final double perpX = x - dist * this.x;\n    final double perpY = y - dist * this.y;\n    final double perpZ = z - dist * this.z;\n\n    if (!meetsAllBounds(perpX, perpY, perpZ, bounds)) {\n      return Double.MAX_VALUE;\n    }\n    \n    return Math.abs(dist);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#normalDistance(double,double,double,Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#normalDistance(double,double,double,Membership...).mjava","sourceNew":"  /**\n   * Compute normal distance from plane to a vector.\n   * @param x is the vector x.\n   * @param y is the vector y.\n   * @param z is the vector z.\n   * @return the normal distance.\n   */\n  public double normalDistance(final double x, final double y, final double z, final Membership... bounds) {\n\n    final double dist = evaluate(x,y,z);\n    final double perpX = x - dist * this.x;\n    final double perpY = y - dist * this.y;\n    final double perpZ = z - dist * this.z;\n\n    if (!meetsAllBounds(perpX, perpY, perpZ, bounds)) {\n      return Double.MAX_VALUE;\n    }\n    \n    return Math.abs(dist);\n  }\n\n","sourceOld":"  /**\n   * Compute normal distance from plane to a vector.\n   * @param x is the vector x.\n   * @param y is the vector y.\n   * @param z is the vector z.\n   * @return the normal distance.\n   */\n  public double normalDistance(final double x, final double y, final double z, final Membership... bounds) {\n\n    final double dist = evaluate(x,y,z);\n    final double perpX = x - dist * this.x;\n    final double perpY = y - dist * this.y;\n    final double perpZ = z - dist * this.z;\n\n    if (!meetsAllBounds(perpX, perpY, perpZ, bounds)) {\n      return Double.MAX_VALUE;\n    }\n    \n    return Math.abs(dist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["9908748d960ccb7706a20e81289a656237780b6c"],"9908748d960ccb7706a20e81289a656237780b6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9908748d960ccb7706a20e81289a656237780b6c"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9908748d960ccb7706a20e81289a656237780b6c":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}