{"path":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,ValuesAttribute,FieldInfo).mjava","commits":[{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,ValuesAttribute,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, ValuesAttribute attr, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setIndexValues(attr.type());\n\n      if(fieldsConsumer == null) {\n        /* nocommit -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      SegmentWriteState state = docWriter.segWriteState();\n      fieldsConsumer = state.codec.fieldsConsumer(state);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n    }\n    return valuesConsumer;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,ValuesAttribute,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,ValuesAttribute,FieldInfo).mjava","sourceNew":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, ValuesAttribute attr, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(attr.type());\n\n      if(fieldsConsumer == null) {\n        /* nocommit -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      SegmentWriteState state = docWriter.segWriteState();\n      fieldsConsumer = state.codec.fieldsConsumer(state);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n    }\n    return valuesConsumer;\n\n  }\n\n","sourceOld":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, ValuesAttribute attr, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setIndexValues(attr.type());\n\n      if(fieldsConsumer == null) {\n        /* nocommit -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      SegmentWriteState state = docWriter.segWriteState();\n      fieldsConsumer = state.codec.fieldsConsumer(state);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n    }\n    return valuesConsumer;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,ValuesAttribute,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,ValuesAttribute,FieldInfo).mjava","sourceNew":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, ValuesAttribute attr, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(attr.type());\n\n      if(fieldsConsumer == null) {\n        /* nocommit -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      SegmentWriteState state = docWriter.segWriteState();\n      fieldsConsumer = state.segmentCodecs.codec().fieldsConsumer(state);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n    }\n    return valuesConsumer;\n\n  }\n\n","sourceOld":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, ValuesAttribute attr, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(attr.type());\n\n      if(fieldsConsumer == null) {\n        /* nocommit -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      SegmentWriteState state = docWriter.segWriteState();\n      fieldsConsumer = state.codec.fieldsConsumer(state);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n    }\n    return valuesConsumer;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,ValuesAttribute,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,ValuesAttribute,FieldInfo).mjava","sourceNew":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, ValuesAttribute attr, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(attr.type());\n\n      if(fieldsConsumer == null) {\n        /* nocommit -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      docValuesConsumerState = docWriter.segWriteState();\n      fieldsConsumer = docValuesConsumerState.segmentCodecs.codec().fieldsConsumer(docValuesConsumerState);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n    }\n    return valuesConsumer;\n\n  }\n\n","sourceOld":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, ValuesAttribute attr, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(attr.type());\n\n      if(fieldsConsumer == null) {\n        /* nocommit -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      SegmentWriteState state = docWriter.segWriteState();\n      fieldsConsumer = state.segmentCodecs.codec().fieldsConsumer(state);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n    }\n    return valuesConsumer;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","date":1291128345,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,ValuesAttribute,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,ValuesAttribute,FieldInfo).mjava","sourceNew":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, ValuesAttribute attr, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(attr.type());\n\n      if(fieldsConsumer == null) {\n        /* nocommit -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      docValuesConsumerState = docWriter.segWriteState();\n      fieldsConsumer = docValuesConsumerState.segmentCodecs.codec().fieldsConsumer(docValuesConsumerState);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n      \n    }\n    return valuesConsumer;\n\n  }\n\n","sourceOld":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, ValuesAttribute attr, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(attr.type());\n\n      if(fieldsConsumer == null) {\n        /* nocommit -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      docValuesConsumerState = docWriter.segWriteState();\n      fieldsConsumer = docValuesConsumerState.segmentCodecs.codec().fieldsConsumer(docValuesConsumerState);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n    }\n    return valuesConsumer;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(Directory,String,String,ValuesAttribute,FieldInfo).mjava","sourceNew":null,"sourceOld":"  synchronized DocValuesConsumer docValuesConsumer(Directory dir,\n      String segment, String name, ValuesAttribute attr, FieldInfo fieldInfo)\n      throws IOException {\n    DocValuesConsumer valuesConsumer;\n    if ((valuesConsumer = docValues.get(name)) == null) {\n      fieldInfo.setDocValues(attr.type());\n\n      if(fieldsConsumer == null) {\n        /* nocommit -- this is a hack and only works since DocValuesCodec supports initializing the FieldsConsumer twice.\n         * we need to find a way that allows us to obtain a FieldsConsumer per DocumentsWriter. Currently some codecs rely on \n         * the SegmentsWriteState passed in right at the moment when the segment is flushed (doccount etc) but we need the consumer earlier \n         * to support docvalues and later on stored fields too.  \n         */\n      docValuesConsumerState = docWriter.segWriteState();\n      fieldsConsumer = docValuesConsumerState.segmentCodecs.codec().fieldsConsumer(docValuesConsumerState);\n      }\n      valuesConsumer = fieldsConsumer.addValuesField(fieldInfo);\n      docValues.put(name, valuesConsumer);\n      \n    }\n    return valuesConsumer;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["85a883878c0af761245ab048babc63d099f835f3"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["39f3757037aa8f710c0cbf9a76a332de735f58b0","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3bb13258feba31ab676502787ab2e1779f129b7a":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["3bb13258feba31ab676502787ab2e1779f129b7a"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["85a883878c0af761245ab048babc63d099f835f3"],"85a883878c0af761245ab048babc63d099f835f3":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","0e28c49f1fb6215a550fdadcf3805aa629b63ec0","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}