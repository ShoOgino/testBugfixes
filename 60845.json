{"path":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SolrSimpleQueryParser#newFuzzyQuery(String,int).mjava","commits":[{"id":"6ac2be03c3432a871db9d486ff2bb07229115f25","date":1449441715,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SolrSimpleQueryParser#newFuzzyQuery(String,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.setDisableCoord(true);\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy;\n\n        if (type instanceof TextField) {\n          // If the field type is a TextField then use the multi term analyzer.\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n        } else {\n          // If the type is *not* a TextField don't do any analysis.\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          fuzzy = new BoostQuery(fuzzy, boost);\n        }\n        bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b6d39099fdb84d195208fae92dd8feca29d77366"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SolrSimpleQueryParser#newFuzzyQuery(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SolrSimpleQueryParser#newFuzzyQuery(String,int).mjava","sourceNew":"    @Override\n    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy;\n\n        if (type instanceof TextField) {\n          // If the field type is a TextField then use the multi term analyzer.\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n        } else {\n          // If the type is *not* a TextField don't do any analysis.\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          fuzzy = new BoostQuery(fuzzy, boost);\n        }\n        bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n\n","sourceOld":"    @Override\n    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.setDisableCoord(true);\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy;\n\n        if (type instanceof TextField) {\n          // If the field type is a TextField then use the multi term analyzer.\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n        } else {\n          // If the type is *not* a TextField don't do any analysis.\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          fuzzy = new BoostQuery(fuzzy, boost);\n        }\n        bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SolrSimpleQueryParser#newFuzzyQuery(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SolrSimpleQueryParser#newFuzzyQuery(String,int).mjava","sourceNew":"    @Override\n    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy;\n\n        if (type instanceof TextField) {\n          // If the field type is a TextField then use the multi term analyzer.\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n        } else {\n          // If the type is *not* a TextField don't do any analysis.\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          fuzzy = new BoostQuery(fuzzy, boost);\n        }\n        bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n\n","sourceOld":"    @Override\n    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.setDisableCoord(true);\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy;\n\n        if (type instanceof TextField) {\n          // If the field type is a TextField then use the multi term analyzer.\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n        } else {\n          // If the type is *not* a TextField don't do any analysis.\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          fuzzy = new BoostQuery(fuzzy, boost);\n        }\n        bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d39099fdb84d195208fae92dd8feca29d77366","date":1578667620,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SolrSimpleQueryParser#newFuzzyQuery(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SolrSimpleQueryParser#newFuzzyQuery(String,int).mjava","sourceNew":"    @Override\n    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy = null;\n\n        if (type instanceof TextField) {\n          // If the field type is a TextField then use the multi term analyzer.\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          BytesRef termBytes = TextField.analyzeMultiTerm(field, text, analyzer);\n          if (termBytes != null) {\n            String term = termBytes.utf8ToString();\n            fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n          }\n        } else {\n          // If the type is *not* a TextField don't do any analysis.\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n        if (fuzzy != null) {\n          float boost = entry.getValue();\n          if (boost != 1f) {\n            fuzzy = new BoostQuery(fuzzy, boost);\n          }\n          bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n        }\n      }\n\n      return simplify(bq.build());\n    }\n\n","sourceOld":"    @Override\n    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy;\n\n        if (type instanceof TextField) {\n          // If the field type is a TextField then use the multi term analyzer.\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n        } else {\n          // If the type is *not* a TextField don't do any analysis.\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          fuzzy = new BoostQuery(fuzzy, boost);\n        }\n        bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n\n","bugFix":["6ac2be03c3432a871db9d486ff2bb07229115f25"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","date":1578901035,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SolrSimpleQueryParser#newFuzzyQuery(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SolrSimpleQueryParser#newFuzzyQuery(String,int).mjava","sourceNew":"    @Override\n    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy = null;\n\n        if (type instanceof TextField) {\n          // If the field type is a TextField then use the multi term analyzer.\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          BytesRef termBytes = TextField.analyzeMultiTerm(field, text, analyzer);\n          if (termBytes != null) {\n            String term = termBytes.utf8ToString();\n            fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n          }\n        } else {\n          // If the type is *not* a TextField don't do any analysis.\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n        if (fuzzy != null) {\n          float boost = entry.getValue();\n          if (boost != 1f) {\n            fuzzy = new BoostQuery(fuzzy, boost);\n          }\n          bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n        }\n      }\n\n      return simplify(bq.build());\n    }\n\n","sourceOld":"    @Override\n    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy;\n\n        if (type instanceof TextField) {\n          // If the field type is a TextField then use the multi term analyzer.\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n        } else {\n          // If the type is *not* a TextField don't do any analysis.\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          fuzzy = new BoostQuery(fuzzy, boost);\n        }\n        bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac":["c8a0e442f7b61f811680273b25da95994a724466","b6d39099fdb84d195208fae92dd8feca29d77366"],"b6d39099fdb84d195208fae92dd8feca29d77366":["c8a0e442f7b61f811680273b25da95994a724466"],"6ac2be03c3432a871db9d486ff2bb07229115f25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["6ac2be03c3432a871db9d486ff2bb07229115f25"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6ac2be03c3432a871db9d486ff2bb07229115f25","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6d39099fdb84d195208fae92dd8feca29d77366"]},"commit2Childs":{"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac":[],"b6d39099fdb84d195208fae92dd8feca29d77366":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ac2be03c3432a871db9d486ff2bb07229115f25":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ac2be03c3432a871db9d486ff2bb07229115f25"],"c8a0e442f7b61f811680273b25da95994a724466":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","b6d39099fdb84d195208fae92dd8feca29d77366","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}