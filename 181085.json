{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","commits":[{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","sourceNew":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (TEST) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term;\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term : next();\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (TEST) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term;\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term : next();\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (TEST) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term;\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term : next();\n          }\n        }\n        return null;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","sourceNew":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (TEST) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term();\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term() : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term() : next();\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (TEST) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term;\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term : next();\n          }\n        }\n        return null;\n      }\n\n","bugFix":["050ba1ba249733cac50c2612418b7179591d2df9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","sourceNew":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (TEST) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label() != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term();\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term() : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term() : next();\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (TEST) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term();\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term() : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term() : next();\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","sourceNew":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (TEST) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label() != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term();\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term() : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term() : next();\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (TEST) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term();\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term() : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term() : next();\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","sourceNew":null,"sourceOld":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (TEST) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label() != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term();\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term() : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term() : next();\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (TEST) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label() != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term();\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term() : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term() : next();\n          }\n        }\n        return null;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"56df73d43b6fc340f5332322862382c7e30f4368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56df73d43b6fc340f5332322862382c7e30f4368"],"f8061ddd97f3352007d927dae445884a6f3d857b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06ab276a5660cb79daae8c5ede063531c700a03a"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["cb77022ef17ff655c519a3f6ecd393747ac88bcf","f8061ddd97f3352007d927dae445884a6f3d857b"],"56df73d43b6fc340f5332322862382c7e30f4368":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56df73d43b6fc340f5332322862382c7e30f4368","2f948dd442d23baa6cbb28daf77c8db78b351329"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"06ab276a5660cb79daae8c5ede063531c700a03a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}