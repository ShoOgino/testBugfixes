{"path":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents(SolrConfig).mjava","commits":[{"id":"68f896937cecbd003415d5fd0616436eaa1fb336","date":1197098869,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents(SolrConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register the default search components\n   */\n  private static Map<String, SearchComponent> loadSearchComponents( SolrConfig config )\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    components.put( QueryComponent.COMPONENT_NAME,        new QueryComponent()        );\n    components.put( FacetComponent.COMPONENT_NAME,        new FacetComponent()        );\n    components.put( MoreLikeThisComponent.COMPONENT_NAME, new MoreLikeThisComponent() );\n    components.put( HighlightComponent.COMPONENT_NAME,    new HighlightComponent()    );\n    components.put( DebugComponent.COMPONENT_NAME,        new DebugComponent()        );\n  \n    String xpath = \"searchComponent\";\n    NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, components );\n    loader.load( config.getResourceLoader(), (NodeList)config.evaluate( xpath, XPathConstants.NODESET ) );\n  \n    return components;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bbf67fac3bded29fa742c712e1ce3083b84b694","date":1199727762,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents(SolrConfig).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents(SolrConfig).mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private static Map<String, SearchComponent> loadSearchComponents( SolrConfig config )\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n  \n    String xpath = \"searchComponent\";\n    NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, components );\n    loader.load( config.getResourceLoader(), (NodeList)config.evaluate( xpath, XPathConstants.NODESET ) );\n  \n    final Map<String,Class<? extends SearchComponent>> standardcomponents \n        = new HashMap<String, Class<? extends SearchComponent>>();\n    standardcomponents.put( QueryComponent.COMPONENT_NAME,        QueryComponent.class        );\n    standardcomponents.put( FacetComponent.COMPONENT_NAME,        FacetComponent.class        );\n    standardcomponents.put( MoreLikeThisComponent.COMPONENT_NAME, MoreLikeThisComponent.class );\n    standardcomponents.put( HighlightComponent.COMPONENT_NAME,    HighlightComponent.class    );\n    standardcomponents.put( DebugComponent.COMPONENT_NAME,        DebugComponent.class        );\n    for( Map.Entry<String, Class<? extends SearchComponent>> entry : standardcomponents.entrySet() ) {\n      if( components.get( entry.getKey() ) == null ) {\n        try {\n          SearchComponent comp = entry.getValue().newInstance();\n          comp.init( null ); // default components initialized with nothing\n          components.put( entry.getKey(), comp );\n        }\n        catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n        }\n      }\n    }\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private static Map<String, SearchComponent> loadSearchComponents( SolrConfig config )\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    components.put( QueryComponent.COMPONENT_NAME,        new QueryComponent()        );\n    components.put( FacetComponent.COMPONENT_NAME,        new FacetComponent()        );\n    components.put( MoreLikeThisComponent.COMPONENT_NAME, new MoreLikeThisComponent() );\n    components.put( HighlightComponent.COMPONENT_NAME,    new HighlightComponent()    );\n    components.put( DebugComponent.COMPONENT_NAME,        new DebugComponent()        );\n  \n    String xpath = \"searchComponent\";\n    NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, components );\n    loader.load( config.getResourceLoader(), (NodeList)config.evaluate( xpath, XPathConstants.NODESET ) );\n  \n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"758a0ba5e213f4d1fc89087ae6e4678f7879e450","date":1224361193,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents(SolrConfig).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents(SolrConfig).mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private static Map<String, SearchComponent> loadSearchComponents( SolrConfig config )\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n  \n    String xpath = \"searchComponent\";\n    NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, components );\n    loader.load( config.getResourceLoader(), (NodeList)config.evaluate( xpath, XPathConstants.NODESET ) );\n  \n    final Map<String,Class<? extends SearchComponent>> standardcomponents \n        = new HashMap<String, Class<? extends SearchComponent>>();\n    standardcomponents.put( QueryComponent.COMPONENT_NAME,        QueryComponent.class        );\n    standardcomponents.put( FacetComponent.COMPONENT_NAME,        FacetComponent.class        );\n    standardcomponents.put( MoreLikeThisComponent.COMPONENT_NAME, MoreLikeThisComponent.class );\n    standardcomponents.put( HighlightComponent.COMPONENT_NAME,    HighlightComponent.class    );\n    standardcomponents.put( StatsComponent.COMPONENT_NAME,        StatsComponent.class        );\n    standardcomponents.put( DebugComponent.COMPONENT_NAME,        DebugComponent.class        );\n    for( Map.Entry<String, Class<? extends SearchComponent>> entry : standardcomponents.entrySet() ) {\n      if( components.get( entry.getKey() ) == null ) {\n        try {\n          SearchComponent comp = entry.getValue().newInstance();\n          comp.init( null ); // default components initialized with nothing\n          components.put( entry.getKey(), comp );\n        }\n        catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n        }\n      }\n    }\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private static Map<String, SearchComponent> loadSearchComponents( SolrConfig config )\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n  \n    String xpath = \"searchComponent\";\n    NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, components );\n    loader.load( config.getResourceLoader(), (NodeList)config.evaluate( xpath, XPathConstants.NODESET ) );\n  \n    final Map<String,Class<? extends SearchComponent>> standardcomponents \n        = new HashMap<String, Class<? extends SearchComponent>>();\n    standardcomponents.put( QueryComponent.COMPONENT_NAME,        QueryComponent.class        );\n    standardcomponents.put( FacetComponent.COMPONENT_NAME,        FacetComponent.class        );\n    standardcomponents.put( MoreLikeThisComponent.COMPONENT_NAME, MoreLikeThisComponent.class );\n    standardcomponents.put( HighlightComponent.COMPONENT_NAME,    HighlightComponent.class    );\n    standardcomponents.put( DebugComponent.COMPONENT_NAME,        DebugComponent.class        );\n    for( Map.Entry<String, Class<? extends SearchComponent>> entry : standardcomponents.entrySet() ) {\n      if( components.get( entry.getKey() ) == null ) {\n        try {\n          SearchComponent comp = entry.getValue().newInstance();\n          comp.init( null ); // default components initialized with nothing\n          components.put( entry.getKey(), comp );\n        }\n        catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n        }\n      }\n    }\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b338a77d735377ad6a2b02379ce3000377ff8631","date":1244447757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents(SolrConfig).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents(SolrConfig).mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents( SolrConfig config )\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n\n    String xpath = \"searchComponent\";\n    NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, components );\n    loader.load( config.getResourceLoader(), (NodeList)config.evaluate( xpath, XPathConstants.NODESET ) );\n\n    final Map<String,Class<? extends SearchComponent>> standardcomponents \n        = new HashMap<String, Class<? extends SearchComponent>>();\n    standardcomponents.put( QueryComponent.COMPONENT_NAME,        QueryComponent.class        );\n    standardcomponents.put( FacetComponent.COMPONENT_NAME,        FacetComponent.class        );\n    standardcomponents.put( MoreLikeThisComponent.COMPONENT_NAME, MoreLikeThisComponent.class );\n    standardcomponents.put( HighlightComponent.COMPONENT_NAME,    HighlightComponent.class    );\n    standardcomponents.put( StatsComponent.COMPONENT_NAME,        StatsComponent.class        );\n    standardcomponents.put( DebugComponent.COMPONENT_NAME,        DebugComponent.class        );\n    for( Map.Entry<String, Class<? extends SearchComponent>> entry : standardcomponents.entrySet() ) {\n      if( components.get( entry.getKey() ) == null ) {\n        try {\n          SearchComponent comp = entry.getValue().newInstance();\n          comp.init( null ); // default components initialized with nothing\n          components.put( entry.getKey(), comp );\n        }\n        catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n        }\n      }\n    }\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private static Map<String, SearchComponent> loadSearchComponents( SolrConfig config )\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n  \n    String xpath = \"searchComponent\";\n    NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, components );\n    loader.load( config.getResourceLoader(), (NodeList)config.evaluate( xpath, XPathConstants.NODESET ) );\n  \n    final Map<String,Class<? extends SearchComponent>> standardcomponents \n        = new HashMap<String, Class<? extends SearchComponent>>();\n    standardcomponents.put( QueryComponent.COMPONENT_NAME,        QueryComponent.class        );\n    standardcomponents.put( FacetComponent.COMPONENT_NAME,        FacetComponent.class        );\n    standardcomponents.put( MoreLikeThisComponent.COMPONENT_NAME, MoreLikeThisComponent.class );\n    standardcomponents.put( HighlightComponent.COMPONENT_NAME,    HighlightComponent.class    );\n    standardcomponents.put( StatsComponent.COMPONENT_NAME,        StatsComponent.class        );\n    standardcomponents.put( DebugComponent.COMPONENT_NAME,        DebugComponent.class        );\n    for( Map.Entry<String, Class<? extends SearchComponent>> entry : standardcomponents.entrySet() ) {\n      if( components.get( entry.getKey() ) == null ) {\n        try {\n          SearchComponent comp = entry.getValue().newInstance();\n          comp.init( null ); // default components initialized with nothing\n          components.put( entry.getKey(), comp );\n        }\n        catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n        }\n      }\n    }\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb","date":1244526657,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents(SolrConfig).mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n\n    String xpath = \"searchComponent\";\n    NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, components );\n    loader.load( solrConfig.getResourceLoader(), (NodeList)solrConfig.evaluate( xpath, XPathConstants.NODESET ) );\n\n    final Map<String,Class<? extends SearchComponent>> standardcomponents \n        = new HashMap<String, Class<? extends SearchComponent>>();\n    standardcomponents.put( QueryComponent.COMPONENT_NAME,        QueryComponent.class        );\n    standardcomponents.put( FacetComponent.COMPONENT_NAME,        FacetComponent.class        );\n    standardcomponents.put( MoreLikeThisComponent.COMPONENT_NAME, MoreLikeThisComponent.class );\n    standardcomponents.put( HighlightComponent.COMPONENT_NAME,    HighlightComponent.class    );\n    standardcomponents.put( StatsComponent.COMPONENT_NAME,        StatsComponent.class        );\n    standardcomponents.put( DebugComponent.COMPONENT_NAME,        DebugComponent.class        );\n    for( Map.Entry<String, Class<? extends SearchComponent>> entry : standardcomponents.entrySet() ) {\n      if( components.get( entry.getKey() ) == null ) {\n        try {\n          SearchComponent comp = entry.getValue().newInstance();\n          comp.init( null ); // default components initialized with nothing\n          components.put( entry.getKey(), comp );\n        }\n        catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n        }\n      }\n    }\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents( SolrConfig config )\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n\n    String xpath = \"searchComponent\";\n    NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, components );\n    loader.load( config.getResourceLoader(), (NodeList)config.evaluate( xpath, XPathConstants.NODESET ) );\n\n    final Map<String,Class<? extends SearchComponent>> standardcomponents \n        = new HashMap<String, Class<? extends SearchComponent>>();\n    standardcomponents.put( QueryComponent.COMPONENT_NAME,        QueryComponent.class        );\n    standardcomponents.put( FacetComponent.COMPONENT_NAME,        FacetComponent.class        );\n    standardcomponents.put( MoreLikeThisComponent.COMPONENT_NAME, MoreLikeThisComponent.class );\n    standardcomponents.put( HighlightComponent.COMPONENT_NAME,    HighlightComponent.class    );\n    standardcomponents.put( StatsComponent.COMPONENT_NAME,        StatsComponent.class        );\n    standardcomponents.put( DebugComponent.COMPONENT_NAME,        DebugComponent.class        );\n    for( Map.Entry<String, Class<? extends SearchComponent>> entry : standardcomponents.entrySet() ) {\n      if( components.get( entry.getKey() ) == null ) {\n        try {\n          SearchComponent comp = entry.getValue().newInstance();\n          comp.init( null ); // default components initialized with nothing\n          components.put( entry.getKey(), comp );\n        }\n        catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n        }\n      }\n    }\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":["b338a77d735377ad6a2b02379ce3000377ff8631"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"758a0ba5e213f4d1fc89087ae6e4678f7879e450":["0bbf67fac3bded29fa742c712e1ce3083b84b694"],"68f896937cecbd003415d5fd0616436eaa1fb336":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"0bbf67fac3bded29fa742c712e1ce3083b84b694":["68f896937cecbd003415d5fd0616436eaa1fb336"],"b338a77d735377ad6a2b02379ce3000377ff8631":["758a0ba5e213f4d1fc89087ae6e4678f7879e450"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68f896937cecbd003415d5fd0616436eaa1fb336"],"758a0ba5e213f4d1fc89087ae6e4678f7879e450":["b338a77d735377ad6a2b02379ce3000377ff8631"],"68f896937cecbd003415d5fd0616436eaa1fb336":["0bbf67fac3bded29fa742c712e1ce3083b84b694"],"0bbf67fac3bded29fa742c712e1ce3083b84b694":["758a0ba5e213f4d1fc89087ae6e4678f7879e450"],"b338a77d735377ad6a2b02379ce3000377ff8631":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}