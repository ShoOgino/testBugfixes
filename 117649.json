{"path":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","commits":[{"id":"c7bde94df914e38596e2ce6907c04bcca8925e19","date":1385775146,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"/dev/null","sourceNew":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int term = si.getOrd(doc);\n      if (map != null && term >= 0) {\n        term = (int) map.getGlobalOrd(subIndex, term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"/dev/null","sourceNew":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int term = si.getOrd(doc);\n      if (map != null && term >= 0) {\n        term = (int) map.getGlobalOrd(subIndex, term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595","date":1402950824,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int term = si.getOrd(doc);\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","sourceOld":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int term = si.getOrd(doc);\n      if (map != null && term >= 0) {\n        term = (int) map.getGlobalOrd(subIndex, term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","date":1402998114,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int term = si.getOrd(doc);\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","sourceOld":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int term = si.getOrd(doc);\n      if (map != null && term >= 0) {\n        term = (int) map.getGlobalOrd(subIndex, term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (doc > si.docID()) {\n        si.advance(doc);\n      }\n      int term;\n      if (doc == si.docID()) {\n        term = si.ordValue();\n      } else {\n        term = -1;\n      }\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","sourceOld":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int term = si.getOrd(doc);\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (doc > si.docID()) {\n        si.advance(doc);\n      }\n      int term;\n      if (doc == si.docID()) {\n        term = si.ordValue();\n      } else {\n        term = -1;\n      }\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","sourceOld":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int term = si.getOrd(doc);\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (doc > si.docID()) {\n        si.advance(doc);\n      }\n      int term;\n      if (doc == si.docID()) {\n        term = si.ordValue();\n      } else {\n        term = -1;\n      }\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","sourceOld":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int term = si.getOrd(doc);\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int term;\n      if (si.advanceExact(doc)) {\n        term = si.ordValue();\n      } else {\n        term = -1;\n      }\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","sourceOld":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (doc > si.docID()) {\n        si.advance(doc);\n      }\n      int term;\n      if (doc == si.docID()) {\n        term = si.ordValue();\n      } else {\n        term = -1;\n      }\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int term;\n      if (si.advanceExact(doc)) {\n        term = si.ordValue();\n      } else {\n        term = -1;\n      }\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","sourceOld":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (doc > si.docID()) {\n        si.advance(doc);\n      }\n      int term;\n      if (doc == si.docID()) {\n        term = si.ordValue();\n      } else {\n        term = -1;\n      }\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#accumSingleGeneric(int[],int,SortedDocValues,DocIdSetIterator,int,OrdinalMap).mjava","sourceNew":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      int term;\n      if (si.advanceExact(doc)) {\n        term = si.ordValue();\n      } else {\n        term = -1;\n      }\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","sourceOld":"  /** accumulates per-segment single-valued facet counts, mapping to global ordinal space on-the-fly */\n  static void accumSingleGeneric(int counts[], int startTermIndex, SortedDocValues si, DocIdSetIterator disi, int subIndex, OrdinalMap map) throws IOException {\n    final LongValues ordmap = map == null ? null : map.getGlobalOrds(subIndex);\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (doc > si.docID()) {\n        si.advance(doc);\n      }\n      int term;\n      if (doc == si.docID()) {\n        term = si.ordValue();\n      } else {\n        term = -1;\n      }\n      if (map != null && term >= 0) {\n        term = (int) ordmap.get(term);\n      }\n      int arrIdx = term-startTermIndex;\n      if (arrIdx>=0 && arrIdx<counts.length) counts[arrIdx]++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b":["c7bde94df914e38596e2ce6907c04bcca8925e19","9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7bde94df914e38596e2ce6907c04bcca8925e19"],"9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595":["c7bde94df914e38596e2ce6907c04bcca8925e19"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"c7bde94df914e38596e2ce6907c04bcca8925e19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b":[],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","c7bde94df914e38596e2ce6907c04bcca8925e19"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595":["f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"c7bde94df914e38596e2ce6907c04bcca8925e19":["f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","9b25d26ad3e8f824d95db88ecc5e5d9d71d3c595"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}