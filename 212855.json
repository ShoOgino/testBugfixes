{"path":"lucene/core/src/java/org/apache/lucene/search/ControlledRealTimeReopenThread#ControlledRealTimeReopenThread(IndexWriter,ReferenceManager[T],double,double).mjava","commits":[{"id":"427bf5b96e9aacef8f01879bc1b93c3619c43439","date":1464134313,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ControlledRealTimeReopenThread#ControlledRealTimeReopenThread(IndexWriter,ReferenceManager[T],double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ControlledRealTimeReopenThread#ControlledRealTimeReopenThread(TrackingIndexWriter,ReferenceManager[T],double,double).mjava","sourceNew":"  /**\n   * Create ControlledRealTimeReopenThread, to periodically\n   * reopen the a {@link ReferenceManager}.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur, when no\n   *        caller is waiting for a specific generation to\n   *        become visible.\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific generation to\n   *        become visible.\n   */\n  public ControlledRealTimeReopenThread(IndexWriter writer, ReferenceManager<T> manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.writer = writer;\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addListener(new HandleRefresh());\n  }\n\n","sourceOld":"  /**\n   * Create ControlledRealTimeReopenThread, to periodically\n   * reopen the a {@link ReferenceManager}.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur, when no\n   *        caller is waiting for a specific generation to\n   *        become visible.\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific generation to\n   *        become visible.\n   */\n  public ControlledRealTimeReopenThread(TrackingIndexWriter writer, ReferenceManager<T> manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.writer = writer;\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addListener(new HandleRefresh());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ControlledRealTimeReopenThread#ControlledRealTimeReopenThread(IndexWriter,ReferenceManager[T],double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ControlledRealTimeReopenThread#ControlledRealTimeReopenThread(TrackingIndexWriter,ReferenceManager[T],double,double).mjava","sourceNew":"  /**\n   * Create ControlledRealTimeReopenThread, to periodically\n   * reopen the a {@link ReferenceManager}.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur, when no\n   *        caller is waiting for a specific generation to\n   *        become visible.\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific generation to\n   *        become visible.\n   */\n  public ControlledRealTimeReopenThread(IndexWriter writer, ReferenceManager<T> manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.writer = writer;\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addListener(new HandleRefresh());\n  }\n\n","sourceOld":"  /**\n   * Create ControlledRealTimeReopenThread, to periodically\n   * reopen the a {@link ReferenceManager}.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur, when no\n   *        caller is waiting for a specific generation to\n   *        become visible.\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific generation to\n   *        become visible.\n   */\n  public ControlledRealTimeReopenThread(TrackingIndexWriter writer, ReferenceManager<T> manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.writer = writer;\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addListener(new HandleRefresh());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ControlledRealTimeReopenThread#ControlledRealTimeReopenThread(IndexWriter,ReferenceManager[T],double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ControlledRealTimeReopenThread#ControlledRealTimeReopenThread(TrackingIndexWriter,ReferenceManager[T],double,double).mjava","sourceNew":"  /**\n   * Create ControlledRealTimeReopenThread, to periodically\n   * reopen the a {@link ReferenceManager}.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur, when no\n   *        caller is waiting for a specific generation to\n   *        become visible.\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific generation to\n   *        become visible.\n   */\n  public ControlledRealTimeReopenThread(IndexWriter writer, ReferenceManager<T> manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.writer = writer;\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addListener(new HandleRefresh());\n  }\n\n","sourceOld":"  /**\n   * Create ControlledRealTimeReopenThread, to periodically\n   * reopen the a {@link ReferenceManager}.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur, when no\n   *        caller is waiting for a specific generation to\n   *        become visible.\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific generation to\n   *        become visible.\n   */\n  public ControlledRealTimeReopenThread(TrackingIndexWriter writer, ReferenceManager<T> manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.writer = writer;\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addListener(new HandleRefresh());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ControlledRealTimeReopenThread#ControlledRealTimeReopenThread(IndexWriter,ReferenceManager[T],double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create ControlledRealTimeReopenThread, to periodically\n   * reopen the a {@link ReferenceManager}.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur, when no\n   *        caller is waiting for a specific generation to\n   *        become visible.\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific generation to\n   *        become visible.\n   */\n  public ControlledRealTimeReopenThread(IndexWriter writer, ReferenceManager<T> manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.writer = writer;\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addListener(new HandleRefresh());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ControlledRealTimeReopenThread#ControlledRealTimeReopenThread(IndexWriter,ReferenceManager[T],double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ControlledRealTimeReopenThread#ControlledRealTimeReopenThread(IndexWriter,ReferenceManager[T],double,double).mjava","sourceNew":"  /**\n   * Create ControlledRealTimeReopenThread, to periodically\n   * reopen the {@link ReferenceManager}.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur, when no\n   *        caller is waiting for a specific generation to\n   *        become visible.\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific generation to\n   *        become visible.\n   */\n  public ControlledRealTimeReopenThread(IndexWriter writer, ReferenceManager<T> manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.writer = writer;\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addListener(new HandleRefresh());\n  }\n\n","sourceOld":"  /**\n   * Create ControlledRealTimeReopenThread, to periodically\n   * reopen the a {@link ReferenceManager}.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur, when no\n   *        caller is waiting for a specific generation to\n   *        become visible.\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific generation to\n   *        become visible.\n   */\n  public ControlledRealTimeReopenThread(IndexWriter writer, ReferenceManager<T> manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.writer = writer;\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addListener(new HandleRefresh());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6483e4260c08168709c02238ae083a51519a28dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","427bf5b96e9aacef8f01879bc1b93c3619c43439"],"191128ac5b85671b1671e2c857437694283b6ebf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6483e4260c08168709c02238ae083a51519a28dd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"427bf5b96e9aacef8f01879bc1b93c3619c43439":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","427bf5b96e9aacef8f01879bc1b93c3619c43439"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"427bf5b96e9aacef8f01879bc1b93c3619c43439":["6483e4260c08168709c02238ae083a51519a28dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}