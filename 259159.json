{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupFacetCollector.GroupedFacetResult#getFacetEntries(int,int).mjava","commits":[{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupFacetCollector.GroupedFacetResult#getFacetEntries(int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractGroupFacetCollector.GroupedFacetResult#getFacetEntries(int,int).mjava","sourceNew":"    /**\n     * Returns a list of facet entries to be rendered based on the specified offset and limit.\n     * The facet entries are retrieved from the facet entries collected during merging.\n     *\n     * @param offset The offset in the collected facet entries during merging\n     * @param limit The number of facets to return starting from the offset.\n     * @return a list of facet entries to be rendered based on the specified offset and limit\n     */\n    public List<FacetEntry> getFacetEntries(int offset, int limit) {\n      List<FacetEntry> entries = new LinkedList<>();\n\n      int skipped = 0;\n      int included = 0;\n      for (FacetEntry facetEntry : facetEntries) {\n        if (skipped < offset) {\n          skipped++;\n          continue;\n        }\n        if (included++ >= limit) {\n          break;\n        }\n        entries.add(facetEntry);\n      }\n      return entries;\n    }\n\n","sourceOld":"    /**\n     * Returns a list of facet entries to be rendered based on the specified offset and limit.\n     * The facet entries are retrieved from the facet entries collected during merging.\n     *\n     * @param offset The offset in the collected facet entries during merging\n     * @param limit The number of facets to return starting from the offset.\n     * @return a list of facet entries to be rendered based on the specified offset and limit\n     */\n    public List<FacetEntry> getFacetEntries(int offset, int limit) {\n      List<FacetEntry> entries = new LinkedList<>();\n\n      int skipped = 0;\n      int included = 0;\n      for (FacetEntry facetEntry : facetEntries) {\n        if (skipped < offset) {\n          skipped++;\n          continue;\n        }\n        if (included++ >= limit) {\n          break;\n        }\n        entries.add(facetEntry);\n      }\n      return entries;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupFacetCollector.GroupedFacetResult#getFacetEntries(int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractGroupFacetCollector.GroupedFacetResult#getFacetEntries(int,int).mjava","sourceNew":"    /**\n     * Returns a list of facet entries to be rendered based on the specified offset and limit.\n     * The facet entries are retrieved from the facet entries collected during merging.\n     *\n     * @param offset The offset in the collected facet entries during merging\n     * @param limit The number of facets to return starting from the offset.\n     * @return a list of facet entries to be rendered based on the specified offset and limit\n     */\n    public List<FacetEntry> getFacetEntries(int offset, int limit) {\n      List<FacetEntry> entries = new LinkedList<>();\n\n      int skipped = 0;\n      int included = 0;\n      for (FacetEntry facetEntry : facetEntries) {\n        if (skipped < offset) {\n          skipped++;\n          continue;\n        }\n        if (included++ >= limit) {\n          break;\n        }\n        entries.add(facetEntry);\n      }\n      return entries;\n    }\n\n","sourceOld":"    /**\n     * Returns a list of facet entries to be rendered based on the specified offset and limit.\n     * The facet entries are retrieved from the facet entries collected during merging.\n     *\n     * @param offset The offset in the collected facet entries during merging\n     * @param limit The number of facets to return starting from the offset.\n     * @return a list of facet entries to be rendered based on the specified offset and limit\n     */\n    public List<FacetEntry> getFacetEntries(int offset, int limit) {\n      List<FacetEntry> entries = new LinkedList<>();\n\n      int skipped = 0;\n      int included = 0;\n      for (FacetEntry facetEntry : facetEntries) {\n        if (skipped < offset) {\n          skipped++;\n          continue;\n        }\n        if (included++ >= limit) {\n          break;\n        }\n        entries.add(facetEntry);\n      }\n      return entries;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"20e94e61fe5291647346b70437617e6b6c370408":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}