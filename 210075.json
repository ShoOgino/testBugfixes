{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField,BytesRefBuilder).mjava","commits":[{"id":"c8fef7b93de1912f1554371b19f6d4ef5f8c0acd","date":1445009862,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField,BytesRefBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private void storedToIndexed(StorableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField,BytesRefBuilder).mjava","sourceNew":"  private void storedToIndexed(StorableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCodedBytes(LegacyNumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCodedBytes(LegacyNumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = LegacyNumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          LegacyNumericUtils.intToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = LegacyNumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          LegacyNumericUtils.longToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":"  private void storedToIndexed(StorableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField,BytesRefBuilder).mjava","sourceNew":"  private void storedToIndexed(IndexableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCodedBytes(LegacyNumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCodedBytes(LegacyNumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = LegacyNumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          LegacyNumericUtils.intToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = LegacyNumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          LegacyNumericUtils.longToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":"  private void storedToIndexed(StorableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCodedBytes(LegacyNumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCodedBytes(LegacyNumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = LegacyNumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          LegacyNumericUtils.intToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = LegacyNumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          LegacyNumericUtils.longToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8fef7b93de1912f1554371b19f6d4ef5f8c0acd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["c8fef7b93de1912f1554371b19f6d4ef5f8c0acd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"c8fef7b93de1912f1554371b19f6d4ef5f8c0acd":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8fef7b93de1912f1554371b19f6d4ef5f8c0acd"],"770342641f7b505eaa8dccdc666158bff2419109":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}