{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardAnalyzer#testAlphanumericSA().mjava","commits":[{"id":"91a5e37a1dee5ad8d3fe6d55228839d5d0412999","date":1412798723,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardAnalyzer#testAlphanumericSA().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStandardAnalyzer#testAlphanumericSA().mjava","sourceNew":"  /* Tests from StandardAnalyzer, just to show behavior is similar */\n  public void testAlphanumericSA() throws Exception {\n    // alphanumeric tokens\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"B2B\", new String[]{\"B2B\"});\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"2B\", new String[]{\"2B\"});\n  }\n\n","sourceOld":"  /* Tests from StandardAnalyzer, just to show behavior is similar */\n  public void testAlphanumericSA() throws Exception {\n    // alphanumeric tokens\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"B2B\", new String[]{\"B2B\"});\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"2B\", new String[]{\"2B\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardAnalyzer#testAlphanumericSA().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStandardAnalyzer#testAlphanumericSA().mjava","sourceNew":"  /* Tests from StandardAnalyzer, just to show behavior is similar */\n  public void testAlphanumericSA() throws Exception {\n    // alphanumeric tokens\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"B2B\", new String[]{\"B2B\"});\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"2B\", new String[]{\"2B\"});\n  }\n\n","sourceOld":"  /* Tests from StandardAnalyzer, just to show behavior is similar */\n  public void testAlphanumericSA() throws Exception {\n    // alphanumeric tokens\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"B2B\", new String[]{\"B2B\"});\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"2B\", new String[]{\"2B\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/standard/TestStandardAnalyzer#testAlphanumericSA().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardAnalyzer#testAlphanumericSA().mjava","sourceNew":"  /* Tests from StandardAnalyzer, just to show behavior is similar */\n  public void testAlphanumericSA() throws Exception {\n    // alphanumeric tokens\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"B2B\", new String[]{\"B2B\"});\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"2B\", new String[]{\"2B\"});\n  }\n\n","sourceOld":"  /* Tests from StandardAnalyzer, just to show behavior is similar */\n  public void testAlphanumericSA() throws Exception {\n    // alphanumeric tokens\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"B2B\", new String[]{\"B2B\"});\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"2B\", new String[]{\"2B\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/standard/TestStandardAnalyzer#testAlphanumericSA().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardAnalyzer#testAlphanumericSA().mjava","sourceNew":"  /* Tests from StandardAnalyzer, just to show behavior is similar */\n  public void testAlphanumericSA() throws Exception {\n    // alphanumeric tokens\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"B2B\", new String[]{\"B2B\"});\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"2B\", new String[]{\"2B\"});\n  }\n\n","sourceOld":"  /* Tests from StandardAnalyzer, just to show behavior is similar */\n  public void testAlphanumericSA() throws Exception {\n    // alphanumeric tokens\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"B2B\", new String[]{\"B2B\"});\n    BaseTokenStreamTestCase.assertAnalyzesTo(a, \"2B\", new String[]{\"2B\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91a5e37a1dee5ad8d3fe6d55228839d5d0412999"],"91a5e37a1dee5ad8d3fe6d55228839d5d0412999":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["91a5e37a1dee5ad8d3fe6d55228839d5d0412999"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["91a5e37a1dee5ad8d3fe6d55228839d5d0412999","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"91a5e37a1dee5ad8d3fe6d55228839d5d0412999":["55980207f1977bd1463465de1659b821347e2fa8","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","91a5e37a1dee5ad8d3fe6d55228839d5d0412999"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}