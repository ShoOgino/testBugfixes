{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String,char).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String,char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(String,char).mjava","sourceNew":"  /** Construct from a given path, separating path components with {@code delimiter}. */\n  public FacetLabel(final String pathString, final char delimiter) {\n    if (pathString.length() > MAX_CATEGORY_PATH_LENGTH) {\n      throw new IllegalArgumentException(\"category path exceeds maximum allowed path length: max=\"\n              + MAX_CATEGORY_PATH_LENGTH + \" len=\" + pathString.length()\n              + \" path=\" + pathString.substring(0, 30) + \"...\");\n    }\n\n    String[] comps = pathString.split(Pattern.quote(Character.toString(delimiter)));\n    if (comps.length == 1 && comps[0].isEmpty()) {\n      components = null;\n      length = 0;\n    } else {\n      for (String comp : comps) {\n        if (comp == null || comp.isEmpty()) {\n          throw new IllegalArgumentException(\"empty or null components not allowed: \" + Arrays.toString(comps));\n        }\n      }\n      components = comps;\n      length = components.length;\n    }\n  }\n\n","sourceOld":"  /** Construct from a given path, separating path components with {@code delimiter}. */\n  public CategoryPath(final String pathString, final char delimiter) {\n    if (pathString.length() > MAX_CATEGORY_PATH_LENGTH) {\n      throw new IllegalArgumentException(\"category path exceeds maximum allowed path length: max=\"\n              + MAX_CATEGORY_PATH_LENGTH + \" len=\" + pathString.length()\n              + \" path=\" + pathString.substring(0, 30) + \"...\");\n    }\n\n    String[] comps = pathString.split(Pattern.quote(Character.toString(delimiter)));\n    if (comps.length == 1 && comps[0].isEmpty()) {\n      components = null;\n      length = 0;\n    } else {\n      for (String comp : comps) {\n        if (comp == null || comp.isEmpty()) {\n          throw new IllegalArgumentException(\"empty or null components not allowed: \" + Arrays.toString(comps));\n        }\n      }\n      components = comps;\n      length = components.length;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8379b33539c0646537abdbac9e81ce3c3fd222e5","date":1384894522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String,char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String,char).mjava","sourceNew":"  /** Construct from a given path, separating path components with {@code delimiter}. */\n  public FacetLabel(final String pathString, final char delimiter) {\n    if (pathString.length() > MAX_CATEGORY_PATH_LENGTH) {\n      throw new IllegalArgumentException(\"category path exceeds maximum allowed path length: max=\"\n              + MAX_CATEGORY_PATH_LENGTH + \" len=\" + pathString.length()\n              + \" path=\" + pathString.substring(0, 30) + \"...\");\n    }\n\n    // nocommit\n    String[] comps;\n    if (delimiter == '\\u001F') {\n      comps = DocumentBuilder.stringToPath(pathString);\n    } else {\n      comps = pathString.split(Pattern.quote(Character.toString(delimiter)));\n    }\n    if (comps.length == 1 && comps[0].isEmpty()) {\n      components = null;\n      length = 0;\n    } else {\n      for (String comp : comps) {\n        if (comp == null || comp.isEmpty()) {\n          throw new IllegalArgumentException(\"empty or null components not allowed: \" + Arrays.toString(comps));\n        }\n      }\n      components = comps;\n      length = components.length;\n    }\n  }\n\n","sourceOld":"  /** Construct from a given path, separating path components with {@code delimiter}. */\n  public FacetLabel(final String pathString, final char delimiter) {\n    if (pathString.length() > MAX_CATEGORY_PATH_LENGTH) {\n      throw new IllegalArgumentException(\"category path exceeds maximum allowed path length: max=\"\n              + MAX_CATEGORY_PATH_LENGTH + \" len=\" + pathString.length()\n              + \" path=\" + pathString.substring(0, 30) + \"...\");\n    }\n\n    String[] comps = pathString.split(Pattern.quote(Character.toString(delimiter)));\n    if (comps.length == 1 && comps[0].isEmpty()) {\n      components = null;\n      length = 0;\n    } else {\n      for (String comp : comps) {\n        if (comp == null || comp.isEmpty()) {\n          throw new IllegalArgumentException(\"empty or null components not allowed: \" + Arrays.toString(comps));\n        }\n      }\n      components = comps;\n      length = components.length;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String,char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String,char).mjava","sourceNew":"  /** Construct from a given path, separating path components with {@code delimiter}. */\n  public FacetLabel(final String pathString, final char delimiter) {\n    if (pathString.length() > MAX_CATEGORY_PATH_LENGTH) {\n      throw new IllegalArgumentException(\"category path exceeds maximum allowed path length: max=\"\n              + MAX_CATEGORY_PATH_LENGTH + \" len=\" + pathString.length()\n              + \" path=\" + pathString.substring(0, 30) + \"...\");\n    }\n\n    // nocommit\n    String[] comps;\n    if (delimiter == '\\u001F') {\n      comps = FacetsConfig.stringToPath(pathString);\n    } else {\n      comps = pathString.split(Pattern.quote(Character.toString(delimiter)));\n    }\n    if (comps.length == 1 && comps[0].isEmpty()) {\n      components = null;\n      length = 0;\n    } else {\n      for (String comp : comps) {\n        if (comp == null || comp.isEmpty()) {\n          throw new IllegalArgumentException(\"empty or null components not allowed: \" + Arrays.toString(comps));\n        }\n      }\n      components = comps;\n      length = components.length;\n    }\n  }\n\n","sourceOld":"  /** Construct from a given path, separating path components with {@code delimiter}. */\n  public FacetLabel(final String pathString, final char delimiter) {\n    if (pathString.length() > MAX_CATEGORY_PATH_LENGTH) {\n      throw new IllegalArgumentException(\"category path exceeds maximum allowed path length: max=\"\n              + MAX_CATEGORY_PATH_LENGTH + \" len=\" + pathString.length()\n              + \" path=\" + pathString.substring(0, 30) + \"...\");\n    }\n\n    // nocommit\n    String[] comps;\n    if (delimiter == '\\u001F') {\n      comps = DocumentBuilder.stringToPath(pathString);\n    } else {\n      comps = pathString.split(Pattern.quote(Character.toString(delimiter)));\n    }\n    if (comps.length == 1 && comps[0].isEmpty()) {\n      components = null;\n      length = 0;\n    } else {\n      for (String comp : comps) {\n        if (comp == null || comp.isEmpty()) {\n          throw new IllegalArgumentException(\"empty or null components not allowed: \" + Arrays.toString(comps));\n        }\n      }\n      components = comps;\n      length = components.length;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String,char).mjava","sourceNew":null,"sourceOld":"  /** Construct from a given path, separating path components with {@code delimiter}. */\n  public FacetLabel(final String pathString, final char delimiter) {\n    if (pathString.length() > MAX_CATEGORY_PATH_LENGTH) {\n      throw new IllegalArgumentException(\"category path exceeds maximum allowed path length: max=\"\n              + MAX_CATEGORY_PATH_LENGTH + \" len=\" + pathString.length()\n              + \" path=\" + pathString.substring(0, 30) + \"...\");\n    }\n\n    // nocommit\n    String[] comps;\n    if (delimiter == '\\u001F') {\n      comps = FacetsConfig.stringToPath(pathString);\n    } else {\n      comps = pathString.split(Pattern.quote(Character.toString(delimiter)));\n    }\n    if (comps.length == 1 && comps[0].isEmpty()) {\n      components = null;\n      length = 0;\n    } else {\n      for (String comp : comps) {\n        if (comp == null || comp.isEmpty()) {\n          throw new IllegalArgumentException(\"empty or null components not allowed: \" + Arrays.toString(comps));\n        }\n      }\n      components = comps;\n      length = components.length;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8379b33539c0646537abdbac9e81ce3c3fd222e5":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bbe9946d3cd818d329255e4c325597ac3480503e":["ae75def1e2525383b6e1397ed97c44387da9941c"],"ae75def1e2525383b6e1397ed97c44387da9941c":["8379b33539c0646537abdbac9e81ce3c3fd222e5"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8379b33539c0646537abdbac9e81ce3c3fd222e5":["ae75def1e2525383b6e1397ed97c44387da9941c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["8379b33539c0646537abdbac9e81ce3c3fd222e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bbe9946d3cd818d329255e4c325597ac3480503e":[],"ae75def1e2525383b6e1397ed97c44387da9941c":["bbe9946d3cd818d329255e4c325597ac3480503e"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","bbe9946d3cd818d329255e4c325597ac3480503e"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}