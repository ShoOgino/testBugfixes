{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws CorruptIndexException, IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws CorruptIndexException, IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws CorruptIndexException, IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":["52e9359ec09a0ce311e6ce95805998bebc7f7fd0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws CorruptIndexException, IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"181b1aa5a99534972fbfd5595cdbb38bba5f39ee","date":1350576187,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","sourceNew":"  private synchronized void updatePendingMerges(MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","sourceNew":"  private synchronized void updatePendingMerges(MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"62e52115b56781006682fd92c6938efaf174304d":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["181b1aa5a99534972fbfd5595cdbb38bba5f39ee"]},"commit2Childs":{"62e52115b56781006682fd92c6938efaf174304d":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["62e52115b56781006682fd92c6938efaf174304d","fe33227f6805edab2036cbb80645cc4e2d1fa424","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}