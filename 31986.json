{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int,IOContext).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor, IOContext context) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, context, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor, IOContext context) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, context, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor, IOContext context) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, context, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int,IOContext).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, context);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor, IOContext context) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, context, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"]},"commit2Childs":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}