{"path":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.id != null) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.id);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n    }\n    numDeletes++;\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.id != null) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.id);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n    }\n    numDeletes++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.id != null) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.id);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n    }\n    numDeletes++;\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.id != null) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.id);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n    }\n    numDeletes++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.id != null) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.id);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n    }\n    numDeletes++;\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.id != null) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.id);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n    }\n    numDeletes++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48ca93fd0adba286887078680f889a3ac95dc9b1","date":1310396563,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (cmd.id != null) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.id);\n      }\n      if (logDebug) { log.debug(\"delete {}\", cmd.id); }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n      if (logDebug) { log.debug(\"deleteByQuery {}\", cmd.query); }\n    }\n    numDeletes++;\n\n    if (next != null) next.processDelete(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.id != null) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.id);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n    }\n    numDeletes++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.getId());\n      }\n      if (logDebug) { log.debug(\"delete {}\", cmd.getId()); }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n      if (logDebug) { log.debug(\"deleteByQuery {}\", cmd.getQuery()); }\n    }\n    numDeletes++;\n\n    if (next != null) next.processDelete(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (cmd.id != null) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.id);\n      }\n      if (logDebug) { log.debug(\"delete {}\", cmd.id); }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n      if (logDebug) { log.debug(\"deleteByQuery {}\", cmd.query); }\n    }\n    numDeletes++;\n\n    if (next != null) next.processDelete(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.getId());\n      }\n      if (logDebug) { log.debug(\"delete {}\", cmd.getId()); }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n      if (logDebug) { log.debug(\"deleteByQuery {}\", cmd.getQuery()); }\n    }\n    numDeletes++;\n\n    if (next != null) next.processDelete(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (cmd.id != null) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.id);\n      }\n      if (logDebug) { log.debug(\"delete {}\", cmd.id); }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n      if (logDebug) { log.debug(\"deleteByQuery {}\", cmd.query); }\n    }\n    numDeletes++;\n\n    if (next != null) next.processDelete(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.getId());\n      }\n      if (logDebug) { log.debug(\"delete {}\", cmd.getId()); }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n      if (logDebug) { log.debug(\"deleteByQuery {}\", cmd.getQuery()); }\n    }\n    numDeletes++;\n\n    if (next != null) next.processDelete(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (cmd.id != null) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.id);\n      }\n      if (logDebug) { log.debug(\"delete {}\", cmd.id); }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n      if (logDebug) { log.debug(\"deleteByQuery {}\", cmd.query); }\n    }\n    numDeletes++;\n\n    if (next != null) next.processDelete(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7df102cd01cbcdc65bfbb247817437014b84ff2d","date":1329962410,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        deletes.add(msg);\n      }\n      if (logDebug) { log.debug(\"delete {}\", cmd.getId()); }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.query;\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n      if (logDebug) { log.debug(\"deleteByQuery {}\", cmd.getQuery()); }\n    }\n    numDeletes++;\n\n    if (next != null) next.processDelete(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.getId());\n      }\n      if (logDebug) { log.debug(\"delete {}\", cmd.getId()); }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n      if (logDebug) { log.debug(\"deleteByQuery {}\", cmd.getQuery()); }\n    }\n    numDeletes++;\n\n    if (next != null) next.processDelete(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a5ba68d45a5ef4a6777115f56d95504aa4e66b1","date":1330047610,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (logDebug) { log.debug(cmd.toString()); }\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        deletes.add(msg);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.query;\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        toLog.add(\"deleteByQuery\", msg);\n      }\n    }\n    numDeletes++;\n\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        deletes.add(msg);\n      }\n      if (logDebug) { log.debug(\"delete {}\", cmd.getId()); }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.query;\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n      if (logDebug) { log.debug(\"deleteByQuery {}\", cmd.getQuery()); }\n    }\n    numDeletes++;\n\n    if (next != null) next.processDelete(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff2d7326b1f013c8da9bad45b1e98a3d16c38575","date":1330406992,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString()); }\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        deletes.add(msg);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.query;\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        toLog.add(\"deleteByQuery\", msg);\n      }\n    }\n    numDeletes++;\n\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (logDebug) { log.debug(cmd.toString()); }\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        deletes.add(msg);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.query;\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        toLog.add(\"deleteByQuery\", msg);\n      }\n    }\n    numDeletes++;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString()); }\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        deletes.add(msg);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.query;\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        toLog.add(\"deleteByQuery\", msg);\n      }\n    }\n    numDeletes++;\n\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        deletes.add(cmd.getId());\n      }\n      if (logDebug) { log.debug(\"delete {}\", cmd.getId()); }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        toLog.add(\"deleteByQuery\", cmd.query);\n      }\n      if (logDebug) { log.debug(\"deleteByQuery {}\", cmd.getQuery()); }\n    }\n    numDeletes++;\n\n    if (next != null) next.processDelete(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ad3cc14db22043cdeb3c36e3dc1065c2406fc24","date":1357262117,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString() + \" \" + req); }\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        deletes.add(msg);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.query;\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        toLog.add(\"deleteByQuery\", msg);\n      }\n    }\n    numDeletes++;\n\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString()); }\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        deletes.add(msg);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.query;\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        toLog.add(\"deleteByQuery\", msg);\n      }\n    }\n    numDeletes++;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString() + \" \" + req); }\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        deletes.add(msg);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.query;\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        toLog.add(\"deleteByQuery\", msg);\n      }\n    }\n    numDeletes++;\n\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString()); }\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        deletes.add(msg);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.query;\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        toLog.add(\"deleteByQuery\", msg);\n      }\n    }\n    numDeletes++;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString() + \" \" + req); }\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        deletes.add(msg);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.query;\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        toLog.add(\"deleteByQuery\", msg);\n      }\n    }\n    numDeletes++;\n\n  }\n\n","sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString() + \" \" + req); }\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<String>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        deletes.add(msg);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.query;\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        toLog.add(\"deleteByQuery\", msg);\n      }\n    }\n    numDeletes++;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessor[LogUpdateProcessorFactory]#processDelete(DeleteUpdateCommand).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n    if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString() + \" \" + req); }\n    if (next != null) next.processDelete(cmd);\n\n    if (cmd.isDeleteById()) {\n      if (deletes == null) {\n        deletes = new ArrayList<>();\n        toLog.add(\"delete\",deletes);\n      }\n      if (deletes.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.getId();\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        deletes.add(msg);\n      }\n    } else {\n      if (toLog.size() < maxNumToLog) {\n        long version = cmd.getVersion();\n        String msg = cmd.query;\n        if (version != 0) msg = msg + \" (\" + version + ')';\n        toLog.add(\"deleteByQuery\", msg);\n      }\n    }\n    numDeletes++;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["ff2d7326b1f013c8da9bad45b1e98a3d16c38575","3ad3cc14db22043cdeb3c36e3dc1065c2406fc24"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3ad3cc14db22043cdeb3c36e3dc1065c2406fc24"],"ff2d7326b1f013c8da9bad45b1e98a3d16c38575":["6a5ba68d45a5ef4a6777115f56d95504aa4e66b1"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","ff2d7326b1f013c8da9bad45b1e98a3d16c38575"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["48ca93fd0adba286887078680f889a3ac95dc9b1","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3ad3cc14db22043cdeb3c36e3dc1065c2406fc24":["ff2d7326b1f013c8da9bad45b1e98a3d16c38575"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["48ca93fd0adba286887078680f889a3ac95dc9b1","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"7df102cd01cbcdc65bfbb247817437014b84ff2d":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a5ba68d45a5ef4a6777115f56d95504aa4e66b1":["7df102cd01cbcdc65bfbb247817437014b84ff2d"],"48ca93fd0adba286887078680f889a3ac95dc9b1":["c26f00b574427b55127e869b935845554afde1fa"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["48ca93fd0adba286887078680f889a3ac95dc9b1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9367dbf5b00d7764583d991c1888f4acc9c9991a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"ff2d7326b1f013c8da9bad45b1e98a3d16c38575":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","3ad3cc14db22043cdeb3c36e3dc1065c2406fc24"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["48ca93fd0adba286887078680f889a3ac95dc9b1"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3ad3cc14db22043cdeb3c36e3dc1065c2406fc24":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"7df102cd01cbcdc65bfbb247817437014b84ff2d":["6a5ba68d45a5ef4a6777115f56d95504aa4e66b1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6a5ba68d45a5ef4a6777115f56d95504aa4e66b1":["ff2d7326b1f013c8da9bad45b1e98a3d16c38575"],"48ca93fd0adba286887078680f889a3ac95dc9b1":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","7df102cd01cbcdc65bfbb247817437014b84ff2d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}