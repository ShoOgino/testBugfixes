{"path":"lucene/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.Reader#maybeSeek().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.Reader#maybeSeek().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexInput.Reader#maybeSeek().mjava","sourceNew":"    private final void maybeSeek() throws IOException {\n      if (seekPending) {\n        if (pendingFP != lastBlockFP) {\n          // need new block\n          in.seek(pendingFP);\n          blockReader.seek(pendingFP);\n          lastBlockFP = pendingFP;\n          blockSize = blockReader.readBlock();\n        }\n        upto = pendingUpto;\n\n        // TODO: if we were more clever when writing the\n        // index, such that a seek point wouldn't be written\n        // until the int encoder \"committed\", we could avoid\n        // this (likely minor) inefficiency:\n\n        // This is necessary for int encoders that are\n        // non-causal, ie must see future int values to\n        // encode the current ones.\n        while(upto >= blockSize) {\n          upto -= blockSize;\n          lastBlockFP = in.getFilePointer();\n          blockSize = blockReader.readBlock();\n        }\n        seekPending = false;\n      }\n    }\n\n","sourceOld":"    private final void maybeSeek() throws IOException {\n      if (seekPending) {\n        if (pendingFP != lastBlockFP) {\n          // need new block\n          in.seek(pendingFP);\n          blockReader.seek(pendingFP);\n          lastBlockFP = pendingFP;\n          blockSize = blockReader.readBlock();\n        }\n        upto = pendingUpto;\n\n        // TODO: if we were more clever when writing the\n        // index, such that a seek point wouldn't be written\n        // until the int encoder \"committed\", we could avoid\n        // this (likely minor) inefficiency:\n\n        // This is necessary for int encoders that are\n        // non-causal, ie must see future int values to\n        // encode the current ones.\n        while(upto >= blockSize) {\n          upto -= blockSize;\n          lastBlockFP = in.getFilePointer();\n          blockSize = blockReader.readBlock();\n        }\n        seekPending = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.Reader#maybeSeek().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexInput.Reader#maybeSeek().mjava","sourceNew":"    private final void maybeSeek() throws IOException {\n      if (seekPending) {\n        if (pendingFP != lastBlockFP) {\n          // need new block\n          in.seek(pendingFP);\n          blockReader.seek(pendingFP);\n          lastBlockFP = pendingFP;\n          blockSize = blockReader.readBlock();\n        }\n        upto = pendingUpto;\n\n        // TODO: if we were more clever when writing the\n        // index, such that a seek point wouldn't be written\n        // until the int encoder \"committed\", we could avoid\n        // this (likely minor) inefficiency:\n\n        // This is necessary for int encoders that are\n        // non-causal, ie must see future int values to\n        // encode the current ones.\n        while(upto >= blockSize) {\n          upto -= blockSize;\n          lastBlockFP = in.getFilePointer();\n          blockSize = blockReader.readBlock();\n        }\n        seekPending = false;\n      }\n    }\n\n","sourceOld":"    private final void maybeSeek() throws IOException {\n      if (seekPending) {\n        if (pendingFP != lastBlockFP) {\n          // need new block\n          in.seek(pendingFP);\n          blockReader.seek(pendingFP);\n          lastBlockFP = pendingFP;\n          blockSize = blockReader.readBlock();\n        }\n        upto = pendingUpto;\n\n        // TODO: if we were more clever when writing the\n        // index, such that a seek point wouldn't be written\n        // until the int encoder \"committed\", we could avoid\n        // this (likely minor) inefficiency:\n\n        // This is necessary for int encoders that are\n        // non-causal, ie must see future int values to\n        // encode the current ones.\n        while(upto >= blockSize) {\n          upto -= blockSize;\n          lastBlockFP = in.getFilePointer();\n          blockSize = blockReader.readBlock();\n        }\n        seekPending = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}