{"path":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_introSort(T[],int,int).mjava","commits":[{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_introSort(T[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_quickSort(T[],int,int).mjava","sourceNew":"  /**\n   * Sorts the given array slice in natural order. This method uses the intro sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T extends Comparable<? super T>> void introSort(T[] a, int fromIndex, int toIndex) {\n    if (toIndex-fromIndex <= 1) return;\n    final Comparator<T> comp = naturalComparator();\n    introSort(a, fromIndex, toIndex, comp);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array slice in natural order. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T extends Comparable<? super T>> void quickSort(T[] a, int fromIndex, int toIndex) {\n    if (toIndex-fromIndex <= 1) return;\n    getSorter(a).quickSort(fromIndex, toIndex-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b2ad55da6687f9ff04ee9e4cd044e46a0dd09b4","date":1367599683,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_introSort(T[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_introSort(T[],int,int).mjava","sourceNew":"  /**\n   * Sorts the given array slice in natural order. This method uses the intro sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T extends Comparable<? super T>> void introSort(T[] a, int fromIndex, int toIndex) {\n    if (toIndex-fromIndex <= 1) return;\n    introSort(a, fromIndex, toIndex, ArrayUtil.<T>naturalComparator());\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array slice in natural order. This method uses the intro sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T extends Comparable<? super T>> void introSort(T[] a, int fromIndex, int toIndex) {\n    if (toIndex-fromIndex <= 1) return;\n    final Comparator<T> comp = naturalComparator();\n    introSort(a, fromIndex, toIndex, comp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b51ee14e04858fe1f47f241ac29486de23b215b5","date":1456734355,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_introSort(T[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_introSort(T[],int,int).mjava","sourceNew":"  /**\n   * Sorts the given array slice in natural order. This method uses the intro sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T extends Comparable<? super T>> void introSort(T[] a, int fromIndex, int toIndex) {\n    if (toIndex-fromIndex <= 1) return;\n    introSort(a, fromIndex, toIndex, Comparator.naturalOrder());\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array slice in natural order. This method uses the intro sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T extends Comparable<? super T>> void introSort(T[] a, int fromIndex, int toIndex) {\n    if (toIndex-fromIndex <= 1) return;\n    introSort(a, fromIndex, toIndex, ArrayUtil.<T>naturalComparator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_introSort(T[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_introSort(T[],int,int).mjava","sourceNew":"  /**\n   * Sorts the given array slice in natural order. This method uses the intro sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T extends Comparable<? super T>> void introSort(T[] a, int fromIndex, int toIndex) {\n    if (toIndex-fromIndex <= 1) return;\n    introSort(a, fromIndex, toIndex, Comparator.naturalOrder());\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array slice in natural order. This method uses the intro sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T extends Comparable<? super T>> void introSort(T[] a, int fromIndex, int toIndex) {\n    if (toIndex-fromIndex <= 1) return;\n    introSort(a, fromIndex, toIndex, ArrayUtil.<T>naturalComparator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b2ad55da6687f9ff04ee9e4cd044e46a0dd09b4":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"af2638813028b254a88b418ebeafb541afb49653":["9b2ad55da6687f9ff04ee9e4cd044e46a0dd09b4","b51ee14e04858fe1f47f241ac29486de23b215b5"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["9b2ad55da6687f9ff04ee9e4cd044e46a0dd09b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"9b2ad55da6687f9ff04ee9e4cd044e46a0dd09b4":["af2638813028b254a88b418ebeafb541afb49653","b51ee14e04858fe1f47f241ac29486de23b215b5"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["9b2ad55da6687f9ff04ee9e4cd044e46a0dd09b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}