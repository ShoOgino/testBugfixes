{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#multipleAdditiveTreesTestExplain().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#multipleAdditiveTreesTestExplain().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore\n  @Test\n  public void multipleAdditiveTreesTestExplain() throws Exception {\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*,score,[fv]\");\n    query.add(\"rows\", \"3\");\n\n    query.add(\"rq\",\n        \"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}\");\n\n    // test out the explain feature, make sure it returns something\n    query.setParam(\"debugQuery\", \"on\");\n    String qryResult = JQ(\"/query\" + query.toQueryString());\n\n    qryResult = qryResult.replaceAll(\"\\n\", \" \");\n    // FIXME containsString doesn't exist.\n    // assertThat(qryResult, containsString(\"\\\"debug\\\":{\"));\n    // qryResult = qryResult.substring(qryResult.indexOf(\"debug\"));\n    //\n    // assertThat(qryResult, containsString(\"\\\"explain\\\":{\"));\n    // qryResult = qryResult.substring(qryResult.indexOf(\"explain\"));\n    //\n    // assertThat(qryResult, containsString(\"multipleadditivetreesmodel\"));\n    // assertThat(qryResult,\n    // containsString(MultipleAdditiveTreesModel.class.getCanonicalName()));\n    //\n    // assertThat(qryResult, containsString(\"-100.0 = tree 0\"));\n    // assertThat(qryResult, containsString(\"50.0 = tree 0\"));\n    // assertThat(qryResult, containsString(\"-20.0 = tree 1\"));\n    // assertThat(qryResult, containsString(\"'matchedTitle':1.0 > 0.5\"));\n    // assertThat(qryResult, containsString(\"'matchedTitle':0.0 <= 0.5\"));\n    //\n    // assertThat(qryResult, containsString(\" Go Right \"));\n    // assertThat(qryResult, containsString(\" Go Left \"));\n    // assertThat(qryResult,\n    // containsString(\"'this_feature_doesnt_exist' does not exist in FV\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#multipleAdditiveTreesTestExplain().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore\n  @Test\n  public void multipleAdditiveTreesTestExplain() throws Exception {\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*,score,[fv]\");\n    query.add(\"rows\", \"3\");\n\n    query.add(\"rq\",\n        \"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}\");\n\n    // test out the explain feature, make sure it returns something\n    query.setParam(\"debugQuery\", \"on\");\n    String qryResult = JQ(\"/query\" + query.toQueryString());\n\n    qryResult = qryResult.replaceAll(\"\\n\", \" \");\n    // FIXME containsString doesn't exist.\n    // assertThat(qryResult, containsString(\"\\\"debug\\\":{\"));\n    // qryResult = qryResult.substring(qryResult.indexOf(\"debug\"));\n    //\n    // assertThat(qryResult, containsString(\"\\\"explain\\\":{\"));\n    // qryResult = qryResult.substring(qryResult.indexOf(\"explain\"));\n    //\n    // assertThat(qryResult, containsString(\"multipleadditivetreesmodel\"));\n    // assertThat(qryResult,\n    // containsString(MultipleAdditiveTreesModel.class.getCanonicalName()));\n    //\n    // assertThat(qryResult, containsString(\"-100.0 = tree 0\"));\n    // assertThat(qryResult, containsString(\"50.0 = tree 0\"));\n    // assertThat(qryResult, containsString(\"-20.0 = tree 1\"));\n    // assertThat(qryResult, containsString(\"'matchedTitle':1.0 > 0.5\"));\n    // assertThat(qryResult, containsString(\"'matchedTitle':0.0 <= 0.5\"));\n    //\n    // assertThat(qryResult, containsString(\" Go Right \"));\n    // assertThat(qryResult, containsString(\" Go Left \"));\n    // assertThat(qryResult,\n    // containsString(\"'this_feature_doesnt_exist' does not exist in FV\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07ef8d46ad3265812d247126beb45b283763afee","date":1481143602,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#multipleAdditiveTreesTestExplain().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#multipleAdditiveTreesTestExplain().mjava","sourceNew":"  @Ignore\n  @Test\n  public void multipleAdditiveTreesTestExplain() throws Exception {\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*,score,[fv]\");\n    query.add(\"rows\", \"3\");\n\n    query.add(\"rq\",\n        \"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}\");\n\n    // test out the explain feature, make sure it returns something\n    query.setParam(\"debugQuery\", \"on\");\n\n    String qryResult = JQ(\"/query\" + query.toQueryString());\n    qryResult = qryResult.replaceAll(\"\\n\", \" \");\n\n    assertThat(qryResult, containsString(\"\\\"debug\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"debug\"));\n\n    assertThat(qryResult, containsString(\"\\\"explain\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"explain\"));\n\n    assertThat(qryResult, containsString(\"multipleadditivetreesmodel\"));\n    assertThat(qryResult, containsString(MultipleAdditiveTreesModel.class.getCanonicalName()));\n\n    assertThat(qryResult, containsString(\"-100.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"50.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"-20.0 = tree 1\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':1.0 > 0.5\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':0.0 <= 0.5\"));\n\n    assertThat(qryResult, containsString(\" Go Right \"));\n    assertThat(qryResult, containsString(\" Go Left \"));\n    assertThat(qryResult, containsString(\"'this_feature_doesnt_exist' does not exist in FV\"));\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void multipleAdditiveTreesTestExplain() throws Exception {\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*,score,[fv]\");\n    query.add(\"rows\", \"3\");\n\n    query.add(\"rq\",\n        \"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}\");\n\n    // test out the explain feature, make sure it returns something\n    query.setParam(\"debugQuery\", \"on\");\n    String qryResult = JQ(\"/query\" + query.toQueryString());\n\n    qryResult = qryResult.replaceAll(\"\\n\", \" \");\n    // FIXME containsString doesn't exist.\n    // assertThat(qryResult, containsString(\"\\\"debug\\\":{\"));\n    // qryResult = qryResult.substring(qryResult.indexOf(\"debug\"));\n    //\n    // assertThat(qryResult, containsString(\"\\\"explain\\\":{\"));\n    // qryResult = qryResult.substring(qryResult.indexOf(\"explain\"));\n    //\n    // assertThat(qryResult, containsString(\"multipleadditivetreesmodel\"));\n    // assertThat(qryResult,\n    // containsString(MultipleAdditiveTreesModel.class.getCanonicalName()));\n    //\n    // assertThat(qryResult, containsString(\"-100.0 = tree 0\"));\n    // assertThat(qryResult, containsString(\"50.0 = tree 0\"));\n    // assertThat(qryResult, containsString(\"-20.0 = tree 1\"));\n    // assertThat(qryResult, containsString(\"'matchedTitle':1.0 > 0.5\"));\n    // assertThat(qryResult, containsString(\"'matchedTitle':0.0 <= 0.5\"));\n    //\n    // assertThat(qryResult, containsString(\" Go Right \"));\n    // assertThat(qryResult, containsString(\" Go Left \"));\n    // assertThat(qryResult,\n    // containsString(\"'this_feature_doesnt_exist' does not exist in FV\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#multipleAdditiveTreesTestExplain().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#multipleAdditiveTreesTestExplain().mjava","sourceNew":"  @Ignore\n  @Test\n  public void multipleAdditiveTreesTestExplain() throws Exception {\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*,score,[fv]\");\n    query.add(\"rows\", \"3\");\n\n    query.add(\"rq\",\n        \"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}\");\n\n    // test out the explain feature, make sure it returns something\n    query.setParam(\"debugQuery\", \"on\");\n\n    String qryResult = JQ(\"/query\" + query.toQueryString());\n    qryResult = qryResult.replaceAll(\"\\n\", \" \");\n\n    assertThat(qryResult, containsString(\"\\\"debug\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"debug\"));\n\n    assertThat(qryResult, containsString(\"\\\"explain\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"explain\"));\n\n    assertThat(qryResult, containsString(\"multipleadditivetreesmodel\"));\n    assertThat(qryResult, containsString(MultipleAdditiveTreesModel.class.getCanonicalName()));\n\n    assertThat(qryResult, containsString(\"-100.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"50.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"-20.0 = tree 1\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':1.0 > 0.5\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':0.0 <= 0.5\"));\n\n    assertThat(qryResult, containsString(\" Go Right \"));\n    assertThat(qryResult, containsString(\" Go Left \"));\n    assertThat(qryResult, containsString(\"'this_feature_doesnt_exist' does not exist in FV\"));\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void multipleAdditiveTreesTestExplain() throws Exception {\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*,score,[fv]\");\n    query.add(\"rows\", \"3\");\n\n    query.add(\"rq\",\n        \"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}\");\n\n    // test out the explain feature, make sure it returns something\n    query.setParam(\"debugQuery\", \"on\");\n    String qryResult = JQ(\"/query\" + query.toQueryString());\n\n    qryResult = qryResult.replaceAll(\"\\n\", \" \");\n    // FIXME containsString doesn't exist.\n    // assertThat(qryResult, containsString(\"\\\"debug\\\":{\"));\n    // qryResult = qryResult.substring(qryResult.indexOf(\"debug\"));\n    //\n    // assertThat(qryResult, containsString(\"\\\"explain\\\":{\"));\n    // qryResult = qryResult.substring(qryResult.indexOf(\"explain\"));\n    //\n    // assertThat(qryResult, containsString(\"multipleadditivetreesmodel\"));\n    // assertThat(qryResult,\n    // containsString(MultipleAdditiveTreesModel.class.getCanonicalName()));\n    //\n    // assertThat(qryResult, containsString(\"-100.0 = tree 0\"));\n    // assertThat(qryResult, containsString(\"50.0 = tree 0\"));\n    // assertThat(qryResult, containsString(\"-20.0 = tree 1\"));\n    // assertThat(qryResult, containsString(\"'matchedTitle':1.0 > 0.5\"));\n    // assertThat(qryResult, containsString(\"'matchedTitle':0.0 <= 0.5\"));\n    //\n    // assertThat(qryResult, containsString(\" Go Right \"));\n    // assertThat(qryResult, containsString(\" Go Left \"));\n    // assertThat(qryResult,\n    // containsString(\"'this_feature_doesnt_exist' does not exist in FV\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a15f1becef8c1a78ba9b896882779793eeda1397","date":1496861090,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#doTestMultipleAdditiveTreesExplain().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#multipleAdditiveTreesTestExplain().mjava","sourceNew":"  private void doTestMultipleAdditiveTreesExplain() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*,score,[fv]\");\n    query.add(\"rows\", \"3\");\n\n    query.add(\"rq\",\n        \"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}\");\n\n    // test out the explain feature, make sure it returns something\n    query.setParam(\"debugQuery\", \"on\");\n\n    String qryResult = JQ(\"/query\" + query.toQueryString());\n    qryResult = qryResult.replaceAll(\"\\n\", \" \");\n\n    assertThat(qryResult, containsString(\"\\\"debug\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"debug\"));\n\n    assertThat(qryResult, containsString(\"\\\"explain\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"explain\"));\n\n    assertThat(qryResult, containsString(\"multipleadditivetreesmodel\"));\n    assertThat(qryResult, containsString(MultipleAdditiveTreesModel.class.getSimpleName()));\n\n    assertThat(qryResult, containsString(\"-100.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"50.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"-20.0 = tree 1\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':1.0 > 0.5\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':0.0 <= 0.5\"));\n\n    assertThat(qryResult, containsString(\" Go Right \"));\n    assertThat(qryResult, containsString(\" Go Left \"));\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void multipleAdditiveTreesTestExplain() throws Exception {\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*,score,[fv]\");\n    query.add(\"rows\", \"3\");\n\n    query.add(\"rq\",\n        \"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}\");\n\n    // test out the explain feature, make sure it returns something\n    query.setParam(\"debugQuery\", \"on\");\n\n    String qryResult = JQ(\"/query\" + query.toQueryString());\n    qryResult = qryResult.replaceAll(\"\\n\", \" \");\n\n    assertThat(qryResult, containsString(\"\\\"debug\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"debug\"));\n\n    assertThat(qryResult, containsString(\"\\\"explain\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"explain\"));\n\n    assertThat(qryResult, containsString(\"multipleadditivetreesmodel\"));\n    assertThat(qryResult, containsString(MultipleAdditiveTreesModel.class.getCanonicalName()));\n\n    assertThat(qryResult, containsString(\"-100.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"50.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"-20.0 = tree 1\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':1.0 > 0.5\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':0.0 <= 0.5\"));\n\n    assertThat(qryResult, containsString(\" Go Right \"));\n    assertThat(qryResult, containsString(\" Go Left \"));\n    assertThat(qryResult, containsString(\"'this_feature_doesnt_exist' does not exist in FV\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#doTestMultipleAdditiveTreesExplain().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#multipleAdditiveTreesTestExplain().mjava","sourceNew":"  private void doTestMultipleAdditiveTreesExplain() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*,score,[fv]\");\n    query.add(\"rows\", \"3\");\n\n    query.add(\"rq\",\n        \"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}\");\n\n    // test out the explain feature, make sure it returns something\n    query.setParam(\"debugQuery\", \"on\");\n\n    String qryResult = JQ(\"/query\" + query.toQueryString());\n    qryResult = qryResult.replaceAll(\"\\n\", \" \");\n\n    assertThat(qryResult, containsString(\"\\\"debug\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"debug\"));\n\n    assertThat(qryResult, containsString(\"\\\"explain\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"explain\"));\n\n    assertThat(qryResult, containsString(\"multipleadditivetreesmodel\"));\n    assertThat(qryResult, containsString(MultipleAdditiveTreesModel.class.getSimpleName()));\n\n    assertThat(qryResult, containsString(\"-100.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"50.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"-20.0 = tree 1\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':1.0 > 0.5\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':0.0 <= 0.5\"));\n\n    assertThat(qryResult, containsString(\" Go Right \"));\n    assertThat(qryResult, containsString(\" Go Left \"));\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void multipleAdditiveTreesTestExplain() throws Exception {\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*,score,[fv]\");\n    query.add(\"rows\", \"3\");\n\n    query.add(\"rq\",\n        \"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}\");\n\n    // test out the explain feature, make sure it returns something\n    query.setParam(\"debugQuery\", \"on\");\n\n    String qryResult = JQ(\"/query\" + query.toQueryString());\n    qryResult = qryResult.replaceAll(\"\\n\", \" \");\n\n    assertThat(qryResult, containsString(\"\\\"debug\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"debug\"));\n\n    assertThat(qryResult, containsString(\"\\\"explain\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"explain\"));\n\n    assertThat(qryResult, containsString(\"multipleadditivetreesmodel\"));\n    assertThat(qryResult, containsString(MultipleAdditiveTreesModel.class.getCanonicalName()));\n\n    assertThat(qryResult, containsString(\"-100.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"50.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"-20.0 = tree 1\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':1.0 > 0.5\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':0.0 <= 0.5\"));\n\n    assertThat(qryResult, containsString(\" Go Right \"));\n    assertThat(qryResult, containsString(\" Go Left \"));\n    assertThat(qryResult, containsString(\"'this_feature_doesnt_exist' does not exist in FV\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#doTestMultipleAdditiveTreesExplain().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#multipleAdditiveTreesTestExplain().mjava","sourceNew":"  private void doTestMultipleAdditiveTreesExplain() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*,score,[fv]\");\n    query.add(\"rows\", \"3\");\n\n    query.add(\"rq\",\n        \"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}\");\n\n    // test out the explain feature, make sure it returns something\n    query.setParam(\"debugQuery\", \"on\");\n\n    String qryResult = JQ(\"/query\" + query.toQueryString());\n    qryResult = qryResult.replaceAll(\"\\n\", \" \");\n\n    assertThat(qryResult, containsString(\"\\\"debug\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"debug\"));\n\n    assertThat(qryResult, containsString(\"\\\"explain\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"explain\"));\n\n    assertThat(qryResult, containsString(\"multipleadditivetreesmodel\"));\n    assertThat(qryResult, containsString(MultipleAdditiveTreesModel.class.getSimpleName()));\n\n    assertThat(qryResult, containsString(\"-100.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"50.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"-20.0 = tree 1\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':1.0 > 0.5\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':0.0 <= 0.5\"));\n\n    assertThat(qryResult, containsString(\" Go Right \"));\n    assertThat(qryResult, containsString(\" Go Left \"));\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void multipleAdditiveTreesTestExplain() throws Exception {\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*,score,[fv]\");\n    query.add(\"rows\", \"3\");\n\n    query.add(\"rq\",\n        \"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}\");\n\n    // test out the explain feature, make sure it returns something\n    query.setParam(\"debugQuery\", \"on\");\n\n    String qryResult = JQ(\"/query\" + query.toQueryString());\n    qryResult = qryResult.replaceAll(\"\\n\", \" \");\n\n    assertThat(qryResult, containsString(\"\\\"debug\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"debug\"));\n\n    assertThat(qryResult, containsString(\"\\\"explain\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"explain\"));\n\n    assertThat(qryResult, containsString(\"multipleadditivetreesmodel\"));\n    assertThat(qryResult, containsString(MultipleAdditiveTreesModel.class.getCanonicalName()));\n\n    assertThat(qryResult, containsString(\"-100.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"50.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"-20.0 = tree 1\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':1.0 > 0.5\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':0.0 <= 0.5\"));\n\n    assertThat(qryResult, containsString(\" Go Right \"));\n    assertThat(qryResult, containsString(\" Go Left \"));\n    assertThat(qryResult, containsString(\"'this_feature_doesnt_exist' does not exist in FV\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestMultipleAdditiveTreesModel#multipleAdditiveTreesTestExplain().mjava","sourceNew":null,"sourceOld":"  @Ignore\n  @Test\n  public void multipleAdditiveTreesTestExplain() throws Exception {\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*,score,[fv]\");\n    query.add(\"rows\", \"3\");\n\n    query.add(\"rq\",\n        \"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}\");\n\n    // test out the explain feature, make sure it returns something\n    query.setParam(\"debugQuery\", \"on\");\n\n    String qryResult = JQ(\"/query\" + query.toQueryString());\n    qryResult = qryResult.replaceAll(\"\\n\", \" \");\n\n    assertThat(qryResult, containsString(\"\\\"debug\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"debug\"));\n\n    assertThat(qryResult, containsString(\"\\\"explain\\\":{\"));\n    qryResult = qryResult.substring(qryResult.indexOf(\"explain\"));\n\n    assertThat(qryResult, containsString(\"multipleadditivetreesmodel\"));\n    assertThat(qryResult, containsString(MultipleAdditiveTreesModel.class.getCanonicalName()));\n\n    assertThat(qryResult, containsString(\"-100.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"50.0 = tree 0\"));\n    assertThat(qryResult, containsString(\"-20.0 = tree 1\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':1.0 > 0.5\"));\n    assertThat(qryResult, containsString(\"'matchedTitle':0.0 <= 0.5\"));\n\n    assertThat(qryResult, containsString(\" Go Right \"));\n    assertThat(qryResult, containsString(\" Go Left \"));\n    assertThat(qryResult, containsString(\"'this_feature_doesnt_exist' does not exist in FV\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"07ef8d46ad3265812d247126beb45b283763afee":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a15f1becef8c1a78ba9b896882779793eeda1397":["07ef8d46ad3265812d247126beb45b283763afee"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["07ef8d46ad3265812d247126beb45b283763afee","a15f1becef8c1a78ba9b896882779793eeda1397"],"9856095f7afb5a607bf5e65077615ed91273508c":["9720b151fde2073f4e401450f4574e5f31c2d0ff","07ef8d46ad3265812d247126beb45b283763afee"],"28288370235ed02234a64753cdbf0c6ec096304a":["07ef8d46ad3265812d247126beb45b283763afee","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["07ef8d46ad3265812d247126beb45b283763afee","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["07ef8d46ad3265812d247126beb45b283763afee","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"07ef8d46ad3265812d247126beb45b283763afee":["a15f1becef8c1a78ba9b896882779793eeda1397","f344bb33ca91f48e99c061980115b46fa84fc8f5","9856095f7afb5a607bf5e65077615ed91273508c","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a15f1becef8c1a78ba9b896882779793eeda1397":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}