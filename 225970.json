{"path":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#estimateCompressedSize(int[],int).mjava","commits":[{"id":"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5","date":1342443326,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#estimateCompressedSize(int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#estimateCompressedSize(int[],int,int).mjava","sourceNew":"  /**\n   * Iterate the whole block to get maximum exception bits, \n   * and estimate compressed size without forced exception.\n   * TODO: foresee forced exception for better estimation\n   */\n  static int estimateCompressedSize(final int[] data, int numBits) {\n    int size=data.length;\n    int totalBytes=(numBits*size+7)/8;   // always round to byte\n    int excNum=0;\n    int curExcBytes=1;\n    for (int i=0; i<size; ++i) {\n      if ((data[i] & ~MASK[numBits]) != 0) {   // exception\n        excNum++;\n        if (curExcBytes<2 && (data[i] & ~MASK[8]) != 0) { // exceed 1 byte exception\n          curExcBytes=2;\n        }\n        if (curExcBytes<4 && (data[i] & ~MASK[16]) != 0) { // exceed 2 byte exception\n          curExcBytes=4;\n        }\n      }\n    }\n    if (curExcBytes==2) {\n      totalBytes=((totalBytes+1)/2)*2;  // round up to 2x bytes before filling exceptions\n    }\n    else if (curExcBytes==4) {\n      totalBytes=((totalBytes+3)/4)*4;  // round up to 4x bytes\n    }\n    totalBytes+=excNum*curExcBytes;\n\n    return totalBytes/4*4;  // round up to ints\n  }\n\n","sourceOld":"  /**\n   * Iterate the whole block to get maximum exception bits, \n   * and estimate compressed size without forced exception.\n   * TODO: foresee forced exception for better estimation\n   */\n  static int estimateCompressedSize(final int[] data, int size, int numBits) {\n    int totalBytes=(numBits*size+7)/8;   // always round to byte\n    int excNum=0;\n    int curExcBytes=1;\n    for (int i=0; i<size; ++i) {\n      if ((data[i] & ~MASK[numBits]) != 0) {   // exception\n        excNum++;\n        if (curExcBytes<2 && (data[i] & ~MASK[8]) != 0) { // exceed 1 byte exception\n          curExcBytes=2;\n        }\n        if (curExcBytes<4 && (data[i] & ~MASK[16]) != 0) { // exceed 2 byte exception\n          curExcBytes=4;\n        }\n      }\n    }\n    if (curExcBytes==2) {\n      totalBytes=((totalBytes+1)/2)*2;  // round up to 2x bytes before filling exceptions\n    }\n    else if (curExcBytes==4) {\n      totalBytes=((totalBytes+3)/4)*4;  // round up to 4x bytes\n    }\n    totalBytes+=excNum*curExcBytes;\n\n    return totalBytes/4*4+HEADER_INT_SIZE;  // round up to ints\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#estimateCompressedSize(int[],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Iterate the whole block to get maximum exception bits, \n   * and estimate compressed size without forced exception.\n   * TODO: foresee forced exception for better estimation\n   */\n  static int estimateCompressedSize(final int[] data, int numBits) {\n    int size=data.length;\n    int totalBytes=(numBits*size+7)/8;   // always round to byte\n    int excNum=0;\n    int curExcBytes=1;\n    for (int i=0; i<size; ++i) {\n      if ((data[i] & ~MASK[numBits]) != 0) {   // exception\n        excNum++;\n        if (curExcBytes<2 && (data[i] & ~MASK[8]) != 0) { // exceed 1 byte exception\n          curExcBytes=2;\n        }\n        if (curExcBytes<4 && (data[i] & ~MASK[16]) != 0) { // exceed 2 byte exception\n          curExcBytes=4;\n        }\n      }\n    }\n    if (curExcBytes==2) {\n      totalBytes=((totalBytes+1)/2)*2;  // round up to 2x bytes before filling exceptions\n    }\n    else if (curExcBytes==4) {\n      totalBytes=((totalBytes+3)/4)*4;  // round up to 4x bytes\n    }\n    totalBytes+=excNum*curExcBytes;\n\n    return totalBytes/4*4;  // round up to ints\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}