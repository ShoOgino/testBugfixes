{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getSynonymAnalyzer(Analyzer,SynonymMap,int).mjava","commits":[{"id":"ea82415927cafd7c8b8bceca08f31a63db1cbdde","date":1133588579,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getSynonymAnalyzer(Analyzer,SynonymMap,int).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Returns an analyzer wrapper that wraps the underlying child analyzer's\n\t * token stream into a {@link SynonymTokenFilter}.\n\t * \n\t * @param child\n\t *            the underlying child analyzer\n\t * @param synonyms\n\t *            the map used to extract synonyms for terms\n\t * @param maxSynonyms\n\t *            the maximum number of synonym tokens to return per underlying\n\t *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n\t */\n\tpublic static Analyzer getSynonymAnalyzer(final Analyzer child, \n\t\t\tfinal SynonymMap synonyms, final int maxSynonyms) {\n\t\t\n\t\tif (child == null) \n\t\t\tthrow new IllegalArgumentException(\"child analyzer must not be null\");\n\t\tif (synonyms == null)\n\t\t\tthrow new IllegalArgumentException(\"synonyms must not be null\");\n\t\tif (maxSynonyms < 0) \n\t\t\tthrow new IllegalArgumentException(\"maxSynonyms must not be negative\");\n\t\tif (maxSynonyms == 0)\n\t\t\treturn child; // no need to wrap\n\t\n\t\treturn new Analyzer() {\n\t\t\tpublic TokenStream tokenStream(String fieldName, Reader reader) {\n\t\t\t\treturn new SynonymTokenFilter(\n\t\t\t\t\tchild.tokenStream(fieldName, reader), synonyms, maxSynonyms);\n\t\t\t}\n\t\t};\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bae93f7963db7dbae2fece3941cdbcb1369eaeb","date":1133766624,"type":3,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getSynonymAnalyzer(Analyzer,SynonymMap,int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getSynonymAnalyzer(Analyzer,SynonymMap,int).mjava","sourceNew":"\t/**\n\t * Returns an analyzer wrapper that wraps the underlying child analyzer's\n\t * token stream into a {@link SynonymTokenFilter}.\n\t * \n\t * @param child\n\t *            the underlying child analyzer\n\t * @param synonyms\n\t *            the map used to extract synonyms for terms\n\t * @param maxSynonyms\n\t *            the maximum number of synonym tokens to return per underlying\n\t *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n\t * @return a new analyzer\n\t */\n\tpublic static Analyzer getSynonymAnalyzer(final Analyzer child, \n\t\t\tfinal SynonymMap synonyms, final int maxSynonyms) {\n\t\t\n\t\tif (child == null) \n\t\t\tthrow new IllegalArgumentException(\"child analyzer must not be null\");\n\t\tif (synonyms == null)\n\t\t\tthrow new IllegalArgumentException(\"synonyms must not be null\");\n\t\tif (maxSynonyms < 0) \n\t\t\tthrow new IllegalArgumentException(\"maxSynonyms must not be negative\");\n\t\tif (maxSynonyms == 0)\n\t\t\treturn child; // no need to wrap\n\t\n\t\treturn new Analyzer() {\n\t\t\tpublic TokenStream tokenStream(String fieldName, Reader reader) {\n\t\t\t\treturn new SynonymTokenFilter(\n\t\t\t\t\tchild.tokenStream(fieldName, reader), synonyms, maxSynonyms);\n\t\t\t}\n\t\t};\n\t}\n\n","sourceOld":"\t/**\n\t * Returns an analyzer wrapper that wraps the underlying child analyzer's\n\t * token stream into a {@link SynonymTokenFilter}.\n\t * \n\t * @param child\n\t *            the underlying child analyzer\n\t * @param synonyms\n\t *            the map used to extract synonyms for terms\n\t * @param maxSynonyms\n\t *            the maximum number of synonym tokens to return per underlying\n\t *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n\t */\n\tpublic static Analyzer getSynonymAnalyzer(final Analyzer child, \n\t\t\tfinal SynonymMap synonyms, final int maxSynonyms) {\n\t\t\n\t\tif (child == null) \n\t\t\tthrow new IllegalArgumentException(\"child analyzer must not be null\");\n\t\tif (synonyms == null)\n\t\t\tthrow new IllegalArgumentException(\"synonyms must not be null\");\n\t\tif (maxSynonyms < 0) \n\t\t\tthrow new IllegalArgumentException(\"maxSynonyms must not be negative\");\n\t\tif (maxSynonyms == 0)\n\t\t\treturn child; // no need to wrap\n\t\n\t\treturn new Analyzer() {\n\t\t\tpublic TokenStream tokenStream(String fieldName, Reader reader) {\n\t\t\t\treturn new SynonymTokenFilter(\n\t\t\t\t\tchild.tokenStream(fieldName, reader), synonyms, maxSynonyms);\n\t\t\t}\n\t\t};\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getSynonymAnalyzer(Analyzer,SynonymMap,int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getSynonymAnalyzer(Analyzer,SynonymMap,int).mjava","sourceNew":"  /**\n   * Returns an analyzer wrapper that wraps the underlying child analyzer's\n   * token stream into a {@link SynonymTokenFilter}.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param synonyms\n   *            the map used to extract synonyms for terms\n   * @param maxSynonyms\n   *            the maximum number of synonym tokens to return per underlying\n   *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return a new analyzer\n   */\n  public static Analyzer getSynonymAnalyzer(final Analyzer child, \n      final SynonymMap synonyms, final int maxSynonyms) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"synonyms must not be null\");\n    if (maxSynonyms < 0) \n      throw new IllegalArgumentException(\"maxSynonyms must not be negative\");\n    if (maxSynonyms == 0)\n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new SynonymTokenFilter(\n          child.tokenStream(fieldName, reader), synonyms, maxSynonyms);\n      }\n    };\n  }\n\n","sourceOld":"\t/**\n\t * Returns an analyzer wrapper that wraps the underlying child analyzer's\n\t * token stream into a {@link SynonymTokenFilter}.\n\t * \n\t * @param child\n\t *            the underlying child analyzer\n\t * @param synonyms\n\t *            the map used to extract synonyms for terms\n\t * @param maxSynonyms\n\t *            the maximum number of synonym tokens to return per underlying\n\t *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n\t * @return a new analyzer\n\t */\n\tpublic static Analyzer getSynonymAnalyzer(final Analyzer child, \n\t\t\tfinal SynonymMap synonyms, final int maxSynonyms) {\n\t\t\n\t\tif (child == null) \n\t\t\tthrow new IllegalArgumentException(\"child analyzer must not be null\");\n\t\tif (synonyms == null)\n\t\t\tthrow new IllegalArgumentException(\"synonyms must not be null\");\n\t\tif (maxSynonyms < 0) \n\t\t\tthrow new IllegalArgumentException(\"maxSynonyms must not be negative\");\n\t\tif (maxSynonyms == 0)\n\t\t\treturn child; // no need to wrap\n\t\n\t\treturn new Analyzer() {\n\t\t\tpublic TokenStream tokenStream(String fieldName, Reader reader) {\n\t\t\t\treturn new SynonymTokenFilter(\n\t\t\t\t\tchild.tokenStream(fieldName, reader), synonyms, maxSynonyms);\n\t\t\t}\n\t\t};\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d68e5c46e6a5ebdf4dafec4a123344092b915cc0","date":1256752193,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getSynonymAnalyzer(Analyzer,SynonymMap,int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getSynonymAnalyzer(Analyzer,SynonymMap,int).mjava","sourceNew":"  /**\n   * Returns an analyzer wrapper that wraps the underlying child analyzer's\n   * token stream into a {@link SynonymTokenFilter}.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param synonyms\n   *            the map used to extract synonyms for terms\n   * @param maxSynonyms\n   *            the maximum number of synonym tokens to return per underlying\n   *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return a new analyzer\n   */\n  public static Analyzer getSynonymAnalyzer(final Analyzer child, \n      final SynonymMap synonyms, final int maxSynonyms) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"synonyms must not be null\");\n    if (maxSynonyms < 0) \n      throw new IllegalArgumentException(\"maxSynonyms must not be negative\");\n    if (maxSynonyms == 0)\n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new SynonymTokenFilter(\n          child.tokenStream(fieldName, reader), synonyms, maxSynonyms);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns an analyzer wrapper that wraps the underlying child analyzer's\n   * token stream into a {@link SynonymTokenFilter}.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param synonyms\n   *            the map used to extract synonyms for terms\n   * @param maxSynonyms\n   *            the maximum number of synonym tokens to return per underlying\n   *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return a new analyzer\n   */\n  public static Analyzer getSynonymAnalyzer(final Analyzer child, \n      final SynonymMap synonyms, final int maxSynonyms) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"synonyms must not be null\");\n    if (maxSynonyms < 0) \n      throw new IllegalArgumentException(\"maxSynonyms must not be negative\");\n    if (maxSynonyms == 0)\n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new SynonymTokenFilter(\n          child.tokenStream(fieldName, reader), synonyms, maxSynonyms);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea82415927cafd7c8b8bceca08f31a63db1cbdde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["3bae93f7963db7dbae2fece3941cdbcb1369eaeb"],"3bae93f7963db7dbae2fece3941cdbcb1369eaeb":["ea82415927cafd7c8b8bceca08f31a63db1cbdde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"]},"commit2Childs":{"ea82415927cafd7c8b8bceca08f31a63db1cbdde":["3bae93f7963db7dbae2fece3941cdbcb1369eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea82415927cafd7c8b8bceca08f31a63db1cbdde"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"3bae93f7963db7dbae2fece3941cdbcb1369eaeb":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}