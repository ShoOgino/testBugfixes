{"path":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random.nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    Document doc = new Document();\n    Field field = newField(fieldName, \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      field.setValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random.nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    Document doc = new Document();\n    Field field = newField(fieldName, \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      field.setValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random.nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    Document doc = new Document();\n    Field field = newField(fieldName, \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random.nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    Document doc = new Document();\n    Field field = newField(fieldName, \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      field.setValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":["a09096fda3618d6f041c36896a70ce7f8715b09c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newField(fieldName, \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random.nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    Document doc = new Document();\n    Field field = newField(fieldName, \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newField(fieldName, \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":["c5145e7af5e55022ec6ba083c0aef480e49e0d3b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    List<String> terms = new ArrayList<String>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new SortedDocValuesField(fieldName, new BytesRef());\n    doc.add(dvField);\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      dvField.setBytesValue(new BytesRef(s));\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new SortedDocValuesField(fieldName, new BytesRef());\n    doc.add(dvField);\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      dvField.setBytesValue(new BytesRef(s));\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new SortedDocValuesField(fieldName, new BytesRef());\n    doc.add(dvField);\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      dvField.setBytesValue(new BytesRef(s));\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new SortedDocValuesField(fieldName, new BytesRef());\n    doc.add(dvField);\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      dvField.setBytesValue(new BytesRef(s));\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new SortedDocValuesField(fieldName, new BytesRef());\n    doc.add(dvField);\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      dvField.setBytesValue(new BytesRef(s));\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new SortedDocValuesField(fieldName, new BytesRef());\n    doc.add(dvField);\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      dvField.setBytesValue(new BytesRef(s));\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    fieldName = random().nextBoolean() ? \"field\" : \"\"; // sometimes use an empty string as field name\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    Document doc = new Document();\n    Field field = newStringField(fieldName, \"\", Field.Store.NO);\n    doc.add(field);\n    Field dvField = new SortedDocValuesField(fieldName, new BytesRef());\n    doc.add(dvField);\n    List<String> terms = new ArrayList<>();\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      field.setStringValue(s);\n      dvField.setBytesValue(new BytesRef(s));\n      terms.add(s);\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      // utf16 order\n      Collections.sort(terms);\n      System.out.println(\"UTF16 order:\");\n      for(String s : terms) {\n        System.out.println(\"  \" + UnicodeUtil.toHexString(s));\n      }\n    }\n    \n    reader = writer.getReader();\n    searcher1 = newSearcher(reader);\n    searcher2 = newSearcher(reader);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"6613659748fe4411a7dcf85266e55db1f95f7315":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}