{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#projectAddReplica(Cell,ReplicaInfo,Consumer[Row.OperationInfo],boolean).mjava","commits":[{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#projectAddReplica(Cell,ReplicaInfo,Consumer[Row.OperationInfo],boolean).mjava","pathOld":"/dev/null","sourceNew":"  //When a replica is added, freedisk should be incremented\n  @Override\n  public void projectAddReplica(Cell cell, ReplicaInfo ri, Consumer<Row.OperationInfo> ops, boolean strictMode) {\n    //go through other replicas of this shard and copy the index size value into this\n    for (Row row : cell.getRow().session.matrix) {\n      row.forEachReplica(replicaInfo -> {\n        if (ri != replicaInfo &&\n            ri.getCollection().equals(replicaInfo.getCollection()) &&\n            ri.getShard().equals(replicaInfo.getShard()) &&\n            ri.getVariable(CORE_IDX.tagName) == null &&\n            replicaInfo.getVariable(CORE_IDX.tagName) != null) {\n          ri.getVariables().put(CORE_IDX.tagName, validate(CORE_IDX.tagName, replicaInfo.getVariable(CORE_IDX.tagName), false));\n        }\n      });\n    }\n    Double idxSize = (Double) validate(CORE_IDX.tagName, ri.getVariable(CORE_IDX.tagName), false);\n    if (idxSize == null) return;\n    Double currFreeDisk = cell.val == null ? 0.0d : (Double) cell.val;\n    cell.val = currFreeDisk - idxSize;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#projectAddReplica(Cell,Replica,Consumer[Row.OperationInfo],boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#projectAddReplica(Cell,ReplicaInfo,Consumer[Row.OperationInfo],boolean).mjava","sourceNew":"  //When a replica is added, freedisk should be incremented\n  @Override\n  public void projectAddReplica(Cell cell, Replica ri, Consumer<Row.OperationInfo> ops, boolean strictMode) {\n    //go through other replicas of this shard and copy the index size value into this\n    for (Row row : cell.getRow().session.matrix) {\n      row.forEachReplica(replicaInfo -> {\n        if (ri != replicaInfo &&\n            ri.getCollection().equals(replicaInfo.getCollection()) &&\n            ri.getShard().equals(replicaInfo.getShard()) &&\n            ri.get(CORE_IDX.tagName) == null &&\n            replicaInfo.get(CORE_IDX.tagName) != null) {\n          ri.getProperties().put(CORE_IDX.tagName, validate(CORE_IDX.tagName, replicaInfo.get(CORE_IDX.tagName), false));\n        }\n      });\n    }\n    Double idxSize = (Double) validate(CORE_IDX.tagName, ri.get(CORE_IDX.tagName), false);\n    if (idxSize == null) return;\n    Double currFreeDisk = cell.val == null ? 0.0d : (Double) cell.val;\n    cell.val = currFreeDisk - idxSize;\n  }\n\n","sourceOld":"  //When a replica is added, freedisk should be incremented\n  @Override\n  public void projectAddReplica(Cell cell, ReplicaInfo ri, Consumer<Row.OperationInfo> ops, boolean strictMode) {\n    //go through other replicas of this shard and copy the index size value into this\n    for (Row row : cell.getRow().session.matrix) {\n      row.forEachReplica(replicaInfo -> {\n        if (ri != replicaInfo &&\n            ri.getCollection().equals(replicaInfo.getCollection()) &&\n            ri.getShard().equals(replicaInfo.getShard()) &&\n            ri.getVariable(CORE_IDX.tagName) == null &&\n            replicaInfo.getVariable(CORE_IDX.tagName) != null) {\n          ri.getVariables().put(CORE_IDX.tagName, validate(CORE_IDX.tagName, replicaInfo.getVariable(CORE_IDX.tagName), false));\n        }\n      });\n    }\n    Double idxSize = (Double) validate(CORE_IDX.tagName, ri.getVariable(CORE_IDX.tagName), false);\n    if (idxSize == null) return;\n    Double currFreeDisk = cell.val == null ? 0.0d : (Double) cell.val;\n    cell.val = currFreeDisk - idxSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}