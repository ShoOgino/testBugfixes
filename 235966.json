{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testDuplicateFSAString().mjava","commits":[{"id":"0a28fdc05be0e02739d9a885bea368eec99b51c6","date":1364357509,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testDuplicateFSAString().mjava","pathOld":"/dev/null","sourceNew":"  public void testDuplicateFSAString() throws Exception {\n    String str = \"foobar\";\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n    IntsRef ints = new IntsRef();\n    for(int i=0; i<10; i++) {\n      b.add(Util.toIntsRef(new BytesRef(str), ints), outputs.getNoOutput());\n    }\n    FST<Object> fst = b.finish();\n    \n    // count the input paths\n    int count = 0; \n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<Object>(fst);\n    while(fstEnum.next()!=null) {\n      count++;  \n    }\n    assertEquals(1, count);\n    \n    assertNotNull(Util.get(fst, new BytesRef(str)));\n    assertNull(Util.get(fst, new BytesRef(\"foobaz\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testDuplicateFSAString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testDuplicateFSAString().mjava","sourceNew":"  public void testDuplicateFSAString() throws Exception {\n    String str = \"foobar\";\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    IntsRef ints = new IntsRef();\n    for(int i=0; i<10; i++) {\n      b.add(Util.toIntsRef(new BytesRef(str), ints), outputs.getNoOutput());\n    }\n    FST<Object> fst = b.finish();\n    \n    // count the input paths\n    int count = 0; \n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(fst);\n    while(fstEnum.next()!=null) {\n      count++;  \n    }\n    assertEquals(1, count);\n    \n    assertNotNull(Util.get(fst, new BytesRef(str)));\n    assertNull(Util.get(fst, new BytesRef(\"foobaz\")));\n  }\n\n","sourceOld":"  public void testDuplicateFSAString() throws Exception {\n    String str = \"foobar\";\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n    IntsRef ints = new IntsRef();\n    for(int i=0; i<10; i++) {\n      b.add(Util.toIntsRef(new BytesRef(str), ints), outputs.getNoOutput());\n    }\n    FST<Object> fst = b.finish();\n    \n    // count the input paths\n    int count = 0; \n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<Object>(fst);\n    while(fstEnum.next()!=null) {\n      count++;  \n    }\n    assertEquals(1, count);\n    \n    assertNotNull(Util.get(fst, new BytesRef(str)));\n    assertNull(Util.get(fst, new BytesRef(\"foobaz\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d245db17aaa41b338dae9da5d4edba4dd6f61612","date":1394644847,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testDuplicateFSAString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testDuplicateFSAString().mjava","sourceNew":"  public void testDuplicateFSAString() throws Exception {\n    String str = \"foobar\";\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    IntsRef ints = new IntsRef();\n    for(int i=0; i<10; i++) {\n      b.add(Util.toIntsRef(new BytesRef(str), ints), outputs.getNoOutput());\n    }\n    FST<Object> fst = b.finish();\n\n    // count the input paths\n    int count = 0;\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(fst);\n    while(fstEnum.next()!=null) {\n      count++;\n    }\n    assertEquals(1, count);\n\n    assertNotNull(Util.get(fst, new BytesRef(str)));\n    assertNull(Util.get(fst, new BytesRef(\"foobaz\")));\n  }\n\n","sourceOld":"  public void testDuplicateFSAString() throws Exception {\n    String str = \"foobar\";\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    IntsRef ints = new IntsRef();\n    for(int i=0; i<10; i++) {\n      b.add(Util.toIntsRef(new BytesRef(str), ints), outputs.getNoOutput());\n    }\n    FST<Object> fst = b.finish();\n    \n    // count the input paths\n    int count = 0; \n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(fst);\n    while(fstEnum.next()!=null) {\n      count++;  \n    }\n    assertEquals(1, count);\n    \n    assertNotNull(Util.get(fst, new BytesRef(str)));\n    assertNull(Util.get(fst, new BytesRef(\"foobaz\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testDuplicateFSAString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testDuplicateFSAString().mjava","sourceNew":"  public void testDuplicateFSAString() throws Exception {\n    String str = \"foobar\";\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    IntsRefBuilder ints = new IntsRefBuilder();\n    for(int i=0; i<10; i++) {\n      b.add(Util.toIntsRef(new BytesRef(str), ints), outputs.getNoOutput());\n    }\n    FST<Object> fst = b.finish();\n\n    // count the input paths\n    int count = 0;\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(fst);\n    while(fstEnum.next()!=null) {\n      count++;\n    }\n    assertEquals(1, count);\n\n    assertNotNull(Util.get(fst, new BytesRef(str)));\n    assertNull(Util.get(fst, new BytesRef(\"foobaz\")));\n  }\n\n","sourceOld":"  public void testDuplicateFSAString() throws Exception {\n    String str = \"foobar\";\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    IntsRef ints = new IntsRef();\n    for(int i=0; i<10; i++) {\n      b.add(Util.toIntsRef(new BytesRef(str), ints), outputs.getNoOutput());\n    }\n    FST<Object> fst = b.finish();\n\n    // count the input paths\n    int count = 0;\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(fst);\n    while(fstEnum.next()!=null) {\n      count++;\n    }\n    assertEquals(1, count);\n\n    assertNotNull(Util.get(fst, new BytesRef(str)));\n    assertNull(Util.get(fst, new BytesRef(\"foobaz\")));\n  }\n\n","bugFix":["0a28fdc05be0e02739d9a885bea368eec99b51c6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testDuplicateFSAString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testDuplicateFSAString().mjava","sourceNew":"  public void testDuplicateFSAString() throws Exception {\n    String str = \"foobar\";\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final FSTCompiler<Object> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n    IntsRefBuilder ints = new IntsRefBuilder();\n    for(int i=0; i<10; i++) {\n      fstCompiler.add(Util.toIntsRef(new BytesRef(str), ints), outputs.getNoOutput());\n    }\n    FST<Object> fst = fstCompiler.compile();\n\n    // count the input paths\n    int count = 0;\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(fst);\n    while(fstEnum.next()!=null) {\n      count++;\n    }\n    assertEquals(1, count);\n\n    assertNotNull(Util.get(fst, new BytesRef(str)));\n    assertNull(Util.get(fst, new BytesRef(\"foobaz\")));\n  }\n\n","sourceOld":"  public void testDuplicateFSAString() throws Exception {\n    String str = \"foobar\";\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    IntsRefBuilder ints = new IntsRefBuilder();\n    for(int i=0; i<10; i++) {\n      b.add(Util.toIntsRef(new BytesRef(str), ints), outputs.getNoOutput());\n    }\n    FST<Object> fst = b.finish();\n\n    // count the input paths\n    int count = 0;\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(fst);\n    while(fstEnum.next()!=null) {\n      count++;\n    }\n    assertEquals(1, count);\n\n    assertNotNull(Util.get(fst, new BytesRef(str)));\n    assertNull(Util.get(fst, new BytesRef(\"foobaz\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testDuplicateFSAString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testDuplicateFSAString().mjava","sourceNew":"  public void testDuplicateFSAString() throws Exception {\n    String str = \"foobar\";\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final FSTCompiler<Object> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n    IntsRefBuilder ints = new IntsRefBuilder();\n    for(int i=0; i<10; i++) {\n      fstCompiler.add(Util.toIntsRef(new BytesRef(str), ints), outputs.getNoOutput());\n    }\n    FST<Object> fst = fstCompiler.compile();\n\n    // count the input paths\n    int count = 0;\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(fst);\n    while(fstEnum.next()!=null) {\n      count++;\n    }\n    assertEquals(1, count);\n\n    assertNotNull(Util.get(fst, new BytesRef(str)));\n    assertNull(Util.get(fst, new BytesRef(\"foobaz\")));\n  }\n\n","sourceOld":"  public void testDuplicateFSAString() throws Exception {\n    String str = \"foobar\";\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Builder<Object> b = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    IntsRefBuilder ints = new IntsRefBuilder();\n    for(int i=0; i<10; i++) {\n      b.add(Util.toIntsRef(new BytesRef(str), ints), outputs.getNoOutput());\n    }\n    FST<Object> fst = b.finish();\n\n    // count the input paths\n    int count = 0;\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(fst);\n    while(fstEnum.next()!=null) {\n      count++;\n    }\n    assertEquals(1, count);\n\n    assertNotNull(Util.get(fst, new BytesRef(str)));\n    assertNull(Util.get(fst, new BytesRef(\"foobaz\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a28fdc05be0e02739d9a885bea368eec99b51c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0a28fdc05be0e02739d9a885bea368eec99b51c6"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"0a28fdc05be0e02739d9a885bea368eec99b51c6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a28fdc05be0e02739d9a885bea368eec99b51c6"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}