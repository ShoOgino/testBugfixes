{"path":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocsEnum.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocsEnum.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocsEnum.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocsEnum.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final InvertedFields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    InvertedFields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        InvertedFields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        InvertedFields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final InvertedFields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    InvertedFields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        InvertedFields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        InvertedFields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, 0);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, 0);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, 0);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, 0);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, 0);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, 0);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, 0);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, 0);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, 0);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, 0);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, 0);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, 0);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, 0);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, 0);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, 0);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, 0);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, 0);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, 0);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, 0);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, 0);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, 0);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, 0);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, 0);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, 0);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, 0);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, 0);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, 0);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"641a23a95cee1e280f172cdfe6289ea3d010ebf1","date":1351978859,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, liveDocs, docs, 0);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, 0);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, 0);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, null, docs, 0);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, 0);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, 0);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, liveDocs, docs, DocsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, DocsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, DocsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, liveDocs, docs, 0);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, 0);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, 0);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, liveDocs, docs, DocsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, DocsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, DocsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, liveDocs, docs, 0);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, 0);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, 0);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, liveDocs, docs, DocsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, DocsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, DocsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, liveDocs, docs, DocsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, DocsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, DocsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, liveDocs, docs, DocsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, DocsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, DocsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, liveDocs, docs, DocsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, DocsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, DocsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, DocsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, DocsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, DocsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random(), termsEnum, liveDocs, docs, DocsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, DocsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, DocsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8028ab7a24273833d53d35eb160dba5b57283cf5","date":1416767720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields.size() == 0) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, DocsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, DocsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, DocsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, DocsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, DocsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, DocsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5852238ea080052ba2e86f3ce658d9c224417d45","date":1416922812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, DocsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, DocsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, DocsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields.size() == 0) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, DocsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, DocsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, DocsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, PostingsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, PostingsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, PostingsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.FLAG_ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.FLAG_ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, PostingsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, PostingsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, DocsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, DocsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, DocsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, DocsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, DocsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, DocsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, PostingsEnum.NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, PostingsEnum.FLAG_NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, PostingsEnum.FLAG_NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, PostingsEnum.FLAG_NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.FLAG_ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.FLAG_ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FLAG_FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, PostingsEnum.FLAG_FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, PostingsEnum.FLAG_FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, PostingsEnum.NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              // nocommit: check\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, PostingsEnum.NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc4c56406857196c12c90c43a9bd87bbf2a6f82b","date":1427828038,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, PostingsEnum.NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (terms3.hasPositions()) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, PostingsEnum.NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              // nocommit: check\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, PostingsEnum.NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (terms3.hasPositions()) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, PostingsEnum.NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator();\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, PostingsEnum.NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator();\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (terms3.hasPositions()) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator();\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator();\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, PostingsEnum.NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (terms3.hasPositions()) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator(null);\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator(null);\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator();\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, docs, PostingsEnum.NONE);\n        while(nextNonDeletedDoc(docs, liveDocs) != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator();\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (nextNonDeletedDoc(termDocs1, liveDocs1) == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || nextNonDeletedDoc(termDocs2, liveDocs2) == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextNonDeletedDoc(termDocs1, liveDocs1));\n\n      assertTrue(nextNonDeletedDoc(termDocs2, liveDocs2) != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextNonDeletedDoc(termDocs2, liveDocs2));\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(dpEnum, PostingsEnum.ALL);\n              if (terms3.hasPositions()) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator();\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          if (liveDocs1 != null && liveDocs1.get(d) == false) {\n            continue;\n          }\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator();\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs2 != null && liveDocs2.get(docs2.docID()) == false) {\n            continue;\n          }\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertEquals(term1, term2);\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator();\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, liveDocs, docs, PostingsEnum.NONE);\n        while(docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator();\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, liveDocs1, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (terms3.hasPositions()) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(null, dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, null, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator();\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, liveDocs1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator();\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, liveDocs2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    if (MultiFields.getIndexedFields(r1).isEmpty()) {\n      assertTrue(MultiFields.getIndexedFields(r2).isEmpty());\n      return;\n    }\n    final Terms terms1 = MultiFields.getTerms(r1, idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getTerms(r2, idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator();\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Terms terms2 = MultiFields.getTerms(r2, idField);\n    if (terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, docs, PostingsEnum.NONE);\n        while(nextNonDeletedDoc(docs, liveDocs) != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator();\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (nextNonDeletedDoc(termDocs1, liveDocs1) == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || nextNonDeletedDoc(termDocs2, liveDocs2) == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextNonDeletedDoc(termDocs1, liveDocs1));\n\n      assertTrue(nextNonDeletedDoc(termDocs2, liveDocs2) != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextNonDeletedDoc(termDocs2, liveDocs2));\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(dpEnum, PostingsEnum.ALL);\n              if (terms3.hasPositions()) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Iterator<String> fields1Enum = MultiFields.getIndexedFields(r1).stream().sorted().iterator();\n    final Iterator<String> fields2Enum = MultiFields.getIndexedFields(r2).stream().sorted().iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = MultiFields.getTerms(r1, field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator();\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          if (liveDocs1 != null && liveDocs1.get(d) == false) {\n            continue;\n          }\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = MultiFields.getTerms(r2, field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator();\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs2 != null && liveDocs2.get(docs2.docID()) == false) {\n            continue;\n          }\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertEquals(term1, term2);\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator();\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    Terms terms2 = fields.terms(idField);\n    if (fields.size() == 0 || terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, docs, PostingsEnum.NONE);\n        while(nextNonDeletedDoc(docs, liveDocs) != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator();\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (nextNonDeletedDoc(termDocs1, liveDocs1) == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || nextNonDeletedDoc(termDocs2, liveDocs2) == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextNonDeletedDoc(termDocs1, liveDocs1));\n\n      assertTrue(nextNonDeletedDoc(termDocs2, liveDocs2) != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextNonDeletedDoc(termDocs2, liveDocs2));\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(dpEnum, PostingsEnum.ALL);\n              if (terms3.hasPositions()) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Fields fields1 = MultiFields.getFields(r1);\n    final Iterator<String> fields1Enum = fields1.iterator();\n    final Fields fields2 = MultiFields.getFields(r2);\n    final Iterator<String> fields2Enum = fields2.iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = fields1.terms(field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator();\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          if (liveDocs1 != null && liveDocs1.get(d) == false) {\n            continue;\n          }\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = fields2.terms(field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator();\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs2 != null && liveDocs2.get(docs2.docID()) == false) {\n            continue;\n          }\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertEquals(term1, term2);\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    if (FieldInfos.getIndexedFields(r1).isEmpty()) {\n      assertTrue(FieldInfos.getIndexedFields(r2).isEmpty());\n      return;\n    }\n    final Terms terms1 = MultiTerms.getTerms(r1, idField);\n    if (terms1 == null) {\n      assertTrue(MultiTerms.getTerms(r2, idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator();\n\n    final Bits liveDocs1 = MultiBits.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiBits.getLiveDocs(r2);\n    \n    Terms terms2 = MultiTerms.getTerms(r2, idField);\n    if (terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiBits.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, docs, PostingsEnum.NONE);\n        while(nextNonDeletedDoc(docs, liveDocs) != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator();\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (nextNonDeletedDoc(termDocs1, liveDocs1) == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || nextNonDeletedDoc(termDocs2, liveDocs2) == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextNonDeletedDoc(termDocs1, liveDocs1));\n\n      assertTrue(nextNonDeletedDoc(termDocs2, liveDocs2) != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextNonDeletedDoc(termDocs2, liveDocs2));\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(dpEnum, PostingsEnum.ALL);\n              if (terms3.hasPositions()) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Iterator<String> fields1Enum = FieldInfos.getIndexedFields(r1).stream().sorted().iterator();\n    final Iterator<String> fields2Enum = FieldInfos.getIndexedFields(r2).stream().sorted().iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = MultiTerms.getTerms(r1, field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator();\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          if (liveDocs1 != null && liveDocs1.get(d) == false) {\n            continue;\n          }\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = MultiTerms.getTerms(r2, field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator();\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs2 != null && liveDocs2.get(docs2.docID()) == false) {\n            continue;\n          }\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertEquals(term1, term2);\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    if (MultiFields.getIndexedFields(r1).isEmpty()) {\n      assertTrue(MultiFields.getIndexedFields(r2).isEmpty());\n      return;\n    }\n    final Terms terms1 = MultiFields.getTerms(r1, idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getTerms(r2, idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator();\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Terms terms2 = MultiFields.getTerms(r2, idField);\n    if (terms2 == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      Bits liveDocs = MultiFields.getLiveDocs(r1);\n      PostingsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = TestUtil.docs(random(), termsEnum, docs, PostingsEnum.NONE);\n        while(nextNonDeletedDoc(docs, liveDocs) != DocIdSetIterator.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    TermsEnum termsEnum2 = terms2.iterator();\n\n    PostingsEnum termDocs1 = null;\n    PostingsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = TestUtil.docs(random(), termsEnum, termDocs1, PostingsEnum.NONE);\n      if (termsEnum2.seekExact(term)) {\n        termDocs2 = TestUtil.docs(random(), termsEnum2, termDocs2, PostingsEnum.NONE);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (nextNonDeletedDoc(termDocs1, liveDocs1) == DocIdSetIterator.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || nextNonDeletedDoc(termDocs2, liveDocs2) == DocIdSetIterator.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextNonDeletedDoc(termDocs1, liveDocs1));\n\n      assertTrue(nextNonDeletedDoc(termDocs2, liveDocs2) != DocIdSetIterator.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextNonDeletedDoc(termDocs2, liveDocs2));\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv1) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv1.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(dpEnum, PostingsEnum.ALL);\n              if (terms3.hasPositions()) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          PostingsEnum dpEnum = null;\n          PostingsEnum dEnum = null;\n          for (String field : tv2) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = tv2.terms(field);\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator();\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.postings(dpEnum, PostingsEnum.ALL);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = TestUtil.docs(random(), termsEnum3, dEnum, PostingsEnum.FREQS);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final Iterator<String> fields1Enum = MultiFields.getIndexedFields(r1).stream().sorted().iterator();\n    final Iterator<String> fields2Enum = MultiFields.getIndexedFields(r2).stream().sorted().iterator();\n\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    PostingsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          if (!fields1Enum.hasNext()) {\n            break;\n          }\n          field1 = fields1Enum.next();\n          Terms terms = MultiFields.getTerms(r1, field1);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum1 = terms.iterator();\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = TestUtil.docs(random(), termsEnum1, docs1, PostingsEnum.FREQS);\n        while (docs1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          if (liveDocs1 != null && liveDocs1.get(d) == false) {\n            continue;\n          }\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          if (!fields2Enum.hasNext()) {\n            break;\n          }\n          field2 = fields2Enum.next();\n          Terms terms = MultiFields.getTerms(r2, field2);\n          if (terms == null) {\n            continue;\n          }\n          termsEnum2 = terms.iterator();\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = TestUtil.docs(random(), termsEnum2, docs2, PostingsEnum.FREQS);\n        while (docs2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs2 != null && liveDocs2.get(docs2.docID()) == false) {\n            continue;\n          }\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertEquals(term1, term2);\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["641a23a95cee1e280f172cdfe6289ea3d010ebf1","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cb5311f0bff57ce15a23909f4cfb953773630534":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"5852238ea080052ba2e86f3ce658d9c224417d45":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","fc4c56406857196c12c90c43a9bd87bbf2a6f82b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["d6f074e73200c07d54f242d3880a8da5a35ff97b","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"641a23a95cee1e280f172cdfe6289ea3d010ebf1":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"fc4c56406857196c12c90c43a9bd87bbf2a6f82b":["cb5311f0bff57ce15a23909f4cfb953773630534"],"6613659748fe4411a7dcf85266e55db1f95f7315":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["02331260bb246364779cb6f04919ca47900d01bb"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"51f5280f31484820499077f41fcdfe92d527d9dc":["5852238ea080052ba2e86f3ce658d9c224417d45"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["6613659748fe4411a7dcf85266e55db1f95f7315"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["641a23a95cee1e280f172cdfe6289ea3d010ebf1"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"02331260bb246364779cb6f04919ca47900d01bb":["322360ac5185a8446d3e0b530b2068bef67cd3d5"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"cb5311f0bff57ce15a23909f4cfb953773630534":["fc4c56406857196c12c90c43a9bd87bbf2a6f82b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"5852238ea080052ba2e86f3ce658d9c224417d45":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["02331260bb246364779cb6f04919ca47900d01bb"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"641a23a95cee1e280f172cdfe6289ea3d010ebf1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"fc4c56406857196c12c90c43a9bd87bbf2a6f82b":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"6613659748fe4411a7dcf85266e55db1f95f7315":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","641a23a95cee1e280f172cdfe6289ea3d010ebf1"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["cb5311f0bff57ce15a23909f4cfb953773630534","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["5852238ea080052ba2e86f3ce658d9c224417d45"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["322360ac5185a8446d3e0b530b2068bef67cd3d5","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["6613659748fe4411a7dcf85266e55db1f95f7315"],"02331260bb246364779cb6f04919ca47900d01bb":["fb07ab105350b80ed9d63ca64b117084ed7391bc","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c7869f64c874ebf7f317d22c00baf2b6857797a6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}