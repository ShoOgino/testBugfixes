{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","commits":[{"id":"e8550173e67bccdaad7c5cbb85fb81886fecfcb7","date":1376943063,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          bytesReader.fillSlice(result, fixedLength * (long)docID, fixedLength);\n        }\n      };\n    } else {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          bytesReader.fillSlice(result, startAddress, (int) (endAddress - startAddress));\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          bytesReader.fillSlice(result, fixedLength * (long)docID, fixedLength);\n        }\n      };\n    } else {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          bytesReader.fillSlice(result, startAddress, (int) (endAddress - startAddress));\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          bytesReader.fillSlice(result, fixedLength * (long)docID, fixedLength);\n        }\n      };\n    } else {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          bytesReader.fillSlice(result, startAddress, (int) (endAddress - startAddress));\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dac1db31006989ae24922811f00f909d30f1391d","date":1387560411,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          bytesReader.fillSlice(result, fixedLength * (long)docID, fixedLength);\n        }\n      };\n    } else {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          bytesReader.fillSlice(result, startAddress, (int) (endAddress - startAddress));\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          bytesReader.fillSlice(result, fixedLength * (long)docID, fixedLength);\n        }\n      };\n    } else {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          bytesReader.fillSlice(result, startAddress, (int) (endAddress - startAddress));\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BytesAndAddresses loadBinary(FieldInfo field) throws IOException {\n    BytesAndAddresses bytesAndAddresses = new BytesAndAddresses();\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    bytesAndAddresses.reader = bytes.freeze(true);\n    ramBytesUsed.addAndGet(bytesAndAddresses.reader.ramBytesUsed());\n    if (entry.minLength != entry.maxLength) {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      bytesAndAddresses.addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytesAndAddresses.addresses.ramBytesUsed());\n    }\n    return bytesAndAddresses;\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          bytesReader.fillSlice(result, fixedLength * (long)docID, fixedLength);\n        }\n      };\n    } else {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          bytesReader.fillSlice(result, startAddress, (int) (endAddress - startAddress));\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1893644d5f20456c9524b28e826293d767db65","date":1401985804,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BytesAndAddresses loadBinary(FieldInfo field) throws IOException {\n    BytesAndAddresses bytesAndAddresses = new BytesAndAddresses();\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    bytesAndAddresses.reader = bytes.freeze(true);\n    ramBytesUsed.addAndGet(bytesAndAddresses.reader.ramBytesUsed());\n    if (entry.minLength != entry.maxLength) {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      bytesAndAddresses.addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytesAndAddresses.addresses.ramBytesUsed());\n    }\n    return bytesAndAddresses;\n  }\n\n","sourceOld":"  private BytesAndAddresses loadBinary(FieldInfo field) throws IOException {\n    BytesAndAddresses bytesAndAddresses = new BytesAndAddresses();\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    bytesAndAddresses.reader = bytes.freeze(true);\n    ramBytesUsed.addAndGet(bytesAndAddresses.reader.ramBytesUsed());\n    if (entry.minLength != entry.maxLength) {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      bytesAndAddresses.addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytesAndAddresses.addresses.ramBytesUsed());\n    }\n    return bytesAndAddresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BytesAndAddresses loadBinary(FieldInfo field) throws IOException {\n    BytesAndAddresses bytesAndAddresses = new BytesAndAddresses();\n    BinaryEntry entry = binaries.get(field.name);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    bytesAndAddresses.reader = bytes.freeze(true);\n    ramBytesUsed.addAndGet(bytesAndAddresses.reader.ramBytesUsed());\n    if (entry.minLength != entry.maxLength) {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      bytesAndAddresses.addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytesAndAddresses.addresses.ramBytesUsed());\n    }\n    return bytesAndAddresses;\n  }\n\n","sourceOld":"  private BytesAndAddresses loadBinary(FieldInfo field) throws IOException {\n    BytesAndAddresses bytesAndAddresses = new BytesAndAddresses();\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    bytesAndAddresses.reader = bytes.freeze(true);\n    ramBytesUsed.addAndGet(bytesAndAddresses.reader.ramBytesUsed());\n    if (entry.minLength != entry.maxLength) {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      bytesAndAddresses.addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytesAndAddresses.addresses.ramBytesUsed());\n    }\n    return bytesAndAddresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BytesAndAddresses loadBinary(FieldInfo field) throws IOException {\n    BytesAndAddresses bytesAndAddresses = new BytesAndAddresses();\n    BinaryEntry entry = binaries.get(field.name);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    bytesAndAddresses.reader = bytes.freeze(true);\n    if (!merging) {\n      ramBytesUsed.addAndGet(bytesAndAddresses.reader.ramBytesUsed());\n    }\n    if (entry.minLength != entry.maxLength) {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      bytesAndAddresses.addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      if (!merging) {\n        ramBytesUsed.addAndGet(bytesAndAddresses.addresses.ramBytesUsed());\n      }\n    }\n    return bytesAndAddresses;\n  }\n\n","sourceOld":"  private BytesAndAddresses loadBinary(FieldInfo field) throws IOException {\n    BytesAndAddresses bytesAndAddresses = new BytesAndAddresses();\n    BinaryEntry entry = binaries.get(field.name);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    bytesAndAddresses.reader = bytes.freeze(true);\n    ramBytesUsed.addAndGet(bytesAndAddresses.reader.ramBytesUsed());\n    if (entry.minLength != entry.maxLength) {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      bytesAndAddresses.addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytesAndAddresses.addresses.ramBytesUsed());\n    }\n    return bytesAndAddresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BytesAndAddresses loadBinary(FieldInfo field) throws IOException {\n    BytesAndAddresses bytesAndAddresses = new BytesAndAddresses();\n    BinaryEntry entry = binaries.get(field.name);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    bytesAndAddresses.reader = bytes.freeze(true);\n    if (!merging) {\n      ramBytesUsed.addAndGet(bytesAndAddresses.reader.ramBytesUsed());\n    }\n    if (entry.minLength != entry.maxLength) {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      bytesAndAddresses.addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      if (!merging) {\n        ramBytesUsed.addAndGet(bytesAndAddresses.addresses.ramBytesUsed());\n      }\n    }\n    return bytesAndAddresses;\n  }\n\n","sourceOld":"  private BytesAndAddresses loadBinary(FieldInfo field) throws IOException {\n    BytesAndAddresses bytesAndAddresses = new BytesAndAddresses();\n    BinaryEntry entry = binaries.get(field.name);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    bytesAndAddresses.reader = bytes.freeze(true);\n    ramBytesUsed.addAndGet(bytesAndAddresses.reader.ramBytesUsed());\n    if (entry.minLength != entry.maxLength) {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      bytesAndAddresses.addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytesAndAddresses.addresses.ramBytesUsed());\n    }\n    return bytesAndAddresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e1de7ca6cb231a67006f9dc4842722d219629fb","date":1453654393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BytesAndAddresses loadBinary(FieldInfo field) throws IOException {\n    BytesAndAddresses bytesAndAddresses = new BytesAndAddresses();\n    BinaryEntry entry = binaries.get(field.name);\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    bytesAndAddresses.reader = bytes.freeze(true);\n    if (!merging) {\n      ramBytesUsed.addAndGet(bytesAndAddresses.reader.ramBytesUsed());\n    }\n    if (entry.minLength != entry.maxLength) {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      bytesAndAddresses.addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      if (!merging) {\n        ramBytesUsed.addAndGet(bytesAndAddresses.addresses.ramBytesUsed());\n      }\n    }\n    return bytesAndAddresses;\n  }\n\n","sourceOld":"  private BytesAndAddresses loadBinary(FieldInfo field) throws IOException {\n    BytesAndAddresses bytesAndAddresses = new BytesAndAddresses();\n    BinaryEntry entry = binaries.get(field.name);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    bytesAndAddresses.reader = bytes.freeze(true);\n    if (!merging) {\n      ramBytesUsed.addAndGet(bytesAndAddresses.reader.ramBytesUsed());\n    }\n    if (entry.minLength != entry.maxLength) {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      bytesAndAddresses.addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      if (!merging) {\n        ramBytesUsed.addAndGet(bytesAndAddresses.addresses.ramBytesUsed());\n      }\n    }\n    return bytesAndAddresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":null,"sourceOld":"  private BytesAndAddresses loadBinary(FieldInfo field) throws IOException {\n    BytesAndAddresses bytesAndAddresses = new BytesAndAddresses();\n    BinaryEntry entry = binaries.get(field.name);\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    bytesAndAddresses.reader = bytes.freeze(true);\n    if (!merging) {\n      ramBytesUsed.addAndGet(bytesAndAddresses.reader.ramBytesUsed());\n    }\n    if (entry.minLength != entry.maxLength) {\n      data.seek(data.getFilePointer() + entry.missingBytes);\n      bytesAndAddresses.addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      if (!merging) {\n        ramBytesUsed.addAndGet(bytesAndAddresses.addresses.ramBytesUsed());\n      }\n    }\n    return bytesAndAddresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db1893644d5f20456c9524b28e826293d767db65":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["dac1db31006989ae24922811f00f909d30f1391d"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f80fee115148a0e4a0574560be06b494de821":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"24f89e8a6aac05753cde4c83d62a74356098200d":["3e1de7ca6cb231a67006f9dc4842722d219629fb"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0936055c0eed56be3e4ae5c9db5b0e355390736a","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dac1db31006989ae24922811f00f909d30f1391d":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["db1893644d5f20456c9524b28e826293d767db65"],"3e1de7ca6cb231a67006f9dc4842722d219629fb":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"db1893644d5f20456c9524b28e826293d767db65":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["db1893644d5f20456c9524b28e826293d767db65"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","dac1db31006989ae24922811f00f909d30f1391d"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9bb9a29a5e71a90295f175df8919802993142c9a":["3e1de7ca6cb231a67006f9dc4842722d219629fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"dac1db31006989ae24922811f00f909d30f1391d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"3e1de7ca6cb231a67006f9dc4842722d219629fb":["24f89e8a6aac05753cde4c83d62a74356098200d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}