{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2","date":1341667852,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, IOUtils.CHARSET_UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, IOUtils.CHARSET_UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, IOUtils.CHARSET_UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, IOUtils.CHARSET_UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, IOUtils.CHARSET_UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, IOUtils.CHARSET_UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, IOUtils.CHARSET_UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, IOUtils.CHARSET_UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, IOUtils.CHARSET_UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, IOUtils.CHARSET_UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, IOUtils.CHARSET_UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, IOUtils.CHARSET_UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, StandardCharsets.UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, StandardCharsets.UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, IOUtils.CHARSET_UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, IOUtils.CHARSET_UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, StandardCharsets.UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, StandardCharsets.UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, IOUtils.CHARSET_UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, IOUtils.CHARSET_UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, StandardCharsets.UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, StandardCharsets.UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, StandardCharsets.UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, StandardCharsets.UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, StandardCharsets.UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, StandardCharsets.UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, StandardCharsets.UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, StandardCharsets.UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, StandardCharsets.UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, StandardCharsets.UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, StandardCharsets.UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, StandardCharsets.UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      Path path = Paths.get(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (Files.exists(path)) {\n        reader = Files.newBufferedReader(path, StandardCharsets.UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, StandardCharsets.UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      // note: we use a decoding reader, so if your queries are screwed up you know\n      if (file.exists()) {\n        reader = IOUtils.getDecodingReader(file, StandardCharsets.UTF_8);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = IOUtils.getDecodingReader(asStream, StandardCharsets.UTF_8);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7d89d7e4e5101347833eea558851bf4209218619"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["7d89d7e4e5101347833eea558851bf4209218619"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2acf500f78aa12b92e371fd89c719291986b6b90"],"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","1e2d1edb0d4b63db0ffa514a529fb559609dbcd2"],"f4abec28b874149a7223e32cc7a01704c27790de":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"7d89d7e4e5101347833eea558851bf4209218619":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","ff4227bb146f97aabae888091c19e48c88dbb0db"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1e2d1edb0d4b63db0ffa514a529fb559609dbcd2","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"379db3ad24c4f0214f30a122265a6d6be003a99d":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}