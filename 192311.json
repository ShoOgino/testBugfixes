{"path":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","pathOld":"/dev/null","sourceNew":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","sourceNew":null,"sourceOld":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","pathOld":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","sourceNew":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","sourceOld":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","pathOld":"/dev/null","sourceNew":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a3ee7c72e7539c6ad4b8494808b7d64c210febf","date":1269122965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","sourceNew":"  @Test\n  public void testVector() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","sourceOld":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf9131d3b4803e07671776c2ef680a38c90594b0","date":1269364762,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","sourceNew":"  @Test\n  public void testVector() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      ignoreException(\"Illegal number of sources\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    resetExceptionIgnores();\n\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testVector() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","sourceNew":"  @Test\n  public void testVector() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      ignoreException(\"Illegal number of sources\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    resetExceptionIgnores();\n\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testVector() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      ignoreException(\"Illegal number of sources\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    resetExceptionIgnores();\n\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","sourceNew":"  @Test\n  public void testVector() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      ignoreException(\"Illegal number of sources\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    resetExceptionIgnores();\n\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testVector() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      ignoreException(\"Illegal number of sources\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    resetExceptionIgnores();\n\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","sourceNew":"  @Test\n  public void testVector() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      ignoreException(\"Illegal number of sources\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    resetExceptionIgnores();\n\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testVector() throws Exception {\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      ignoreException(\"Illegal number of sources\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    resetExceptionIgnores();\n\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a3ee7c72e7539c6ad4b8494808b7d64c210febf":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["bf9131d3b4803e07671776c2ef680a38c90594b0"],"c26f00b574427b55127e869b935845554afde1fa":["bf9131d3b4803e07671776c2ef680a38c90594b0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"bf9131d3b4803e07671776c2ef680a38c90594b0":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["bf9131d3b4803e07671776c2ef680a38c90594b0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"9a3ee7c72e7539c6ad4b8494808b7d64c210febf":["bf9131d3b4803e07671776c2ef680a38c90594b0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"bf9131d3b4803e07671776c2ef680a38c90594b0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}