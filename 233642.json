{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","sourceNew":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if(name == null){\n        LOG.warn(\"Entity does not have a name\");\n        name= \"\"+System.nanoTime();\n      }\n      if(name.indexOf(\".\") != -1){\n        throw new DataImportHandlerException(SEVERE, \"Entity name must not have period (.): '\" + name);\n      }      \n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","sourceOld":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if(name == null){\n        LOG.warn(\"Entity does not have a name\");\n        name= \"\"+System.nanoTime();\n      }\n      if(name.indexOf(\".\") != -1){\n        throw new DataImportHandlerException(SEVERE, \"Entity name must not have period (.): '\" + name);\n      }      \n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","sourceNew":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if(name == null){\n        LOG.warn(\"Entity does not have a name\");\n        name= \"\"+System.nanoTime();\n      }\n      if(name.indexOf(\".\") != -1){\n        throw new DataImportHandlerException(SEVERE, \"Entity name must not have period (.): '\" + name);\n      }      \n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","sourceOld":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if(name == null){\n        LOG.warn(\"Entity does not have a name\");\n        name= \"\"+System.nanoTime();\n      }\n      if(name.indexOf(\".\") != -1){\n        throw new DataImportHandlerException(SEVERE, \"Entity name must not have period (.): '\" + name);\n      }      \n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","sourceNew":null,"sourceOld":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if(name == null){\n        LOG.warn(\"Entity does not have a name\");\n        name= \"\"+System.nanoTime();\n      }\n      if(name.indexOf(\".\") != -1){\n        throw new DataImportHandlerException(SEVERE, \"Entity name must not have period (.): '\" + name);\n      }      \n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}