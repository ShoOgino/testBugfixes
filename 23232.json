{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#AndQuery().mjava","commits":[{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#AndQuery().mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/parser/QueryParser#AndQuery().mjava","sourceNew":"  final public SrndQuery AndQuery() throws ParseException {\n  SrndQuery q;\n  ArrayList<SrndQuery> queries = null;\n  Token oprt = null;\n    q = NotQuery();\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[1] = jj_gen;\n        break label_3;\n      }\n      oprt = jj_consume_token(AND);\n                   /* keep only last used operator */\n      if (queries == null) {\n        queries = new ArrayList<SrndQuery>();\n        queries.add(q);\n      }\n      q = NotQuery();\n      queries.add(q);\n    }\n   {if (true) return (queries == null) ? q : getAndQuery(queries, true /* infix */, oprt);}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public SrndQuery AndQuery() throws ParseException {\n  SrndQuery q;\n  ArrayList<SrndQuery> queries = null;\n  Token oprt = null;\n    q = NotQuery();\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[1] = jj_gen;\n        break label_3;\n      }\n      oprt = jj_consume_token(AND);\n                   /* keep only last used operator */\n      if (queries == null) {\n        queries = new ArrayList<SrndQuery>();\n        queries.add(q);\n      }\n      q = NotQuery();\n      queries.add(q);\n    }\n   {if (true) return (queries == null) ? q : getAndQuery(queries, true /* infix */, oprt);}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#AndQuery().mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#AndQuery().mjava","sourceNew":"  final public SrndQuery AndQuery() throws ParseException {\n  SrndQuery q;\n  ArrayList<SrndQuery> queries = null;\n  Token oprt = null;\n    q = NotQuery();\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[1] = jj_gen;\n        break label_3;\n      }\n      oprt = jj_consume_token(AND);\n                   /* keep only last used operator */\n      if (queries == null) {\n        queries = new ArrayList<SrndQuery>();\n        queries.add(q);\n      }\n      q = NotQuery();\n      queries.add(q);\n    }\n   {if (true) return (queries == null) ? q : getAndQuery(queries, true /* infix */, oprt);}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public SrndQuery AndQuery() throws ParseException {\n  SrndQuery q;\n  ArrayList<SrndQuery> queries = null;\n  Token oprt = null;\n    q = NotQuery();\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[1] = jj_gen;\n        break label_3;\n      }\n      oprt = jj_consume_token(AND);\n                   /* keep only last used operator */\n      if (queries == null) {\n        queries = new ArrayList<SrndQuery>();\n        queries.add(q);\n      }\n      q = NotQuery();\n      queries.add(q);\n    }\n   {if (true) return (queries == null) ? q : getAndQuery(queries, true /* infix */, oprt);}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a53a291ad9b1cc050d846b68758c061a55d52734":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}