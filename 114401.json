{"path":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n      try {\n        pieces = (List<Object>) codec.unmarshal(in);\n      } finally {\n        in.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<Object>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","sourceNew":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n      try {\n        pieces = (List<Object>) codec.unmarshal(in);\n      } finally {\n        in.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n      try {\n        pieces = (List<Object>) codec.unmarshal(in);\n      } finally {\n        in.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<Object>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","sourceNew":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n      try {\n        pieces = (List<Object>) codec.unmarshal(in);\n        boolean b = false;\n        for (Object o : pieces) {\n          if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {\n            b = true; break;\n          }\n        }\n        if (b) {\n          in.reset();\n          pieces = (List<Object>) codec.unmarshal(in);\n        }\n      } finally {\n        in.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n      try {\n        pieces = (List<Object>) codec.unmarshal(in);\n      } finally {\n        in.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7","date":1457008564,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","sourceNew":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n      try {\n        pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        boolean b = false;\n        for (Object o : pieces) {\n          if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {\n            b = true; break;\n          }\n        }\n        if (b) {\n          in.reset();\n          pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        }\n      } finally {\n        in.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n      try {\n        pieces = (List<Object>) codec.unmarshal(in);\n        boolean b = false;\n        for (Object o : pieces) {\n          if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {\n            b = true; break;\n          }\n        }\n        if (b) {\n          in.reset();\n          pieces = (List<Object>) codec.unmarshal(in);\n        }\n      } finally {\n        in.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","sourceNew":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n      try {\n        pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        boolean b = false;\n        for (Object o : pieces) {\n          if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {\n            b = true; break;\n          }\n        }\n        if (b) {\n          in.reset();\n          pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        }\n      } finally {\n        in.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n      try {\n        pieces = (List<Object>) codec.unmarshal(in);\n        boolean b = false;\n        for (Object o : pieces) {\n          if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {\n            b = true; break;\n          }\n        }\n        if (b) {\n          in.reset();\n          pieces = (List<Object>) codec.unmarshal(in);\n        }\n      } finally {\n        in.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","sourceNew":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream in = new ByteArrayInputStream(rawData)){\n        pieces = (List<Object>) jbc.unmarshal(in);\n        boolean b = false;\n        for (Object o : pieces) {\n          if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {\n            b = true; break;\n          }\n        }\n        if (b) {\n          in.reset();\n          pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n      try {\n        pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        boolean b = false;\n        for (Object o : pieces) {\n          if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {\n            b = true; break;\n          }\n        }\n        if (b) {\n          in.reset();\n          pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        }\n      } finally {\n        in.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","sourceNew":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream in = new ByteArrayInputStream(rawData)){\n        pieces = (List<Object>) jbc.unmarshal(in);\n        boolean b = false;\n        for (Object o : pieces) {\n          if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {\n            b = true; break;\n          }\n        }\n        if (b) {\n          in.reset();\n          pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n      try {\n        pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        boolean b = false;\n        for (Object o : pieces) {\n          if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {\n            b = true; break;\n          }\n        }\n        if (b) {\n          in.reset();\n          pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        }\n      } finally {\n        in.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","sourceNew":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream in = new ByteArrayInputStream(rawData)){\n        pieces = (List<Object>) jbc.unmarshal(in);\n        boolean b = false;\n        for (Object o : pieces) {\n          if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {\n            b = true; break;\n          }\n        }\n        if (b) {\n          in.reset();\n          pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n      try {\n        pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        boolean b = false;\n        for (Object o : pieces) {\n          if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {\n            b = true; break;\n          }\n        }\n        if (b) {\n          in.reset();\n          pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        }\n      } finally {\n        in.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#parseSerializedTotem(String).mjava","sourceNew":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream in = new ByteArrayInputStream(rawData)){\n        pieces = (List<Object>) jbc.unmarshal(in);\n        boolean b = false;\n        for (Object o : pieces) {\n          if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {\n            b = true; break;\n          }\n        }\n        if (b) {\n          in.reset();\n          pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses the serialized version of a CursorMark from a client \n   * (which must conform to the existing sortSpec) and populates this object.\n   *\n   * @see #getSerializedTotem\n   */\n  public void parseSerializedTotem(final String serialized) {\n    if (CURSOR_MARK_START.equals(serialized)) {\n      values = null;\n      return;\n    }\n    final SortField[] sortFields = sortSpec.getSort().getSort();\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n\n    List<Object> pieces = null;\n    try {\n      final byte[] rawData = Base64.base64ToByteArray(serialized);\n      try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream in = new ByteArrayInputStream(rawData)){\n        pieces = (List<Object>) jbc.unmarshal(in);\n        boolean b = false;\n        for (Object o : pieces) {\n          if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {\n            b = true; break;\n          }\n        }\n        if (b) {\n          in.reset();\n          pieces = (List<Object>) new JavaBinCodec().unmarshal(in);\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              \"Unable to parse '\"+CURSOR_MARK_PARAM+\"' after totem: \" + \n                              \"value must either be '\"+CURSOR_MARK_START+\"' or the \" + \n                              \"'\"+CURSOR_MARK_NEXT+\"' returned by a previous search: \"\n                              + serialized, ex);\n    }\n    assert null != pieces : \"pieces wasn't parsed?\";\n\n    if (sortFields.length != pieces.size()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n                              CURSOR_MARK_PARAM+\" does not work with current sort (wrong size): \" + serialized);\n    }\n\n\n    this.values = new ArrayList<>(sortFields.length);\n\n    final BytesRef tmpBytes = new BytesRef();\n    for (int i = 0; i < sortFields.length; i++) {\n\n      SortField curSort = sortFields[i];\n      SchemaField curField = schemaFields.get(i);\n      Object rawValue = pieces.get(i);\n\n      if (null != curField) {\n        FieldType curType = curField.getType();\n        rawValue = curType.unmarshalSortValue(rawValue);\n      } \n\n      this.values.add(rawValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["28288370235ed02234a64753cdbf0c6ec096304a"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7"],"3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"28288370235ed02234a64753cdbf0c6ec096304a":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"]},"commit2Childs":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7"],"3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"28288370235ed02234a64753cdbf0c6ec096304a":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}