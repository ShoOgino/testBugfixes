{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"99eb4a732d1a908f4636ace52928876136bf1896":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["99eb4a732d1a908f4636ace52928876136bf1896","db4fdbf3d262768eabc027cd8321edca0cd11fa8","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}