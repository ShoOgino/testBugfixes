{"path":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","commits":[{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","sourceNew":"  public void testDiskFull() throws IOException {\n    // test writeBytes\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    final byte[] bytes = new byte[] { 1, 2};\n    IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.writeBytes(bytes, bytes.length); // first write should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.writeBytes(bytes, bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n    \n    // test copyBytes\n    dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.copyBytes(new ByteArrayDataInput(bytes), bytes.length); // first copy should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.copyBytes(new ByteArrayDataInput(bytes), bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDiskFull() throws IOException {\n    // test writeBytes\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    final byte[] bytes = new byte[] { 1, 2};\n    IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.writeBytes(bytes, bytes.length); // first write should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.writeBytes(bytes, bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n    \n    // test copyBytes\n    dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.copyBytes(new ByteArrayDataInput(bytes), bytes.length); // first copy should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.copyBytes(new ByteArrayDataInput(bytes), bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd8a7e622c1138188be79e193b1dc52f3f0889a5","date":1564419078,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","sourceNew":"  public void testDiskFull() throws IOException {\n    // test writeBytes\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    final byte[] bytes = new byte[] { 1, 2};\n    IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.writeBytes(bytes, bytes.length); // first write should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n\n    IndexOutput out2 = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    expectThrows(IOException.class, () -> out2.writeBytes(bytes, bytes.length));\n    out2.close();\n    dir.close();\n    \n    // test copyBytes\n    dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.copyBytes(new ByteArrayDataInput(bytes), bytes.length); // first copy should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n\n    IndexOutput out3 = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    expectThrows(IOException.class, () -> out3.copyBytes(new ByteArrayDataInput(bytes), bytes.length));\n    out3.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDiskFull() throws IOException {\n    // test writeBytes\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    final byte[] bytes = new byte[] { 1, 2};\n    IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.writeBytes(bytes, bytes.length); // first write should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.writeBytes(bytes, bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n    \n    // test copyBytes\n    dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.copyBytes(new ByteArrayDataInput(bytes), bytes.length); // first copy should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.copyBytes(new ByteArrayDataInput(bytes), bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","sourceNew":"  public void testDiskFull() throws IOException {\n    // test writeBytes\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    final byte[] bytes = new byte[] { 1, 2};\n    IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.writeBytes(bytes, bytes.length); // first write should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n\n    IndexOutput out2 = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    expectThrows(IOException.class, () -> out2.writeBytes(bytes, bytes.length));\n    out2.close();\n    dir.close();\n    \n    // test copyBytes\n    dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.copyBytes(new ByteArrayDataInput(bytes), bytes.length); // first copy should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n\n    IndexOutput out3 = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    expectThrows(IOException.class, () -> out3.copyBytes(new ByteArrayDataInput(bytes), bytes.length));\n    out3.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDiskFull() throws IOException {\n    // test writeBytes\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    final byte[] bytes = new byte[] { 1, 2};\n    IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.writeBytes(bytes, bytes.length); // first write should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.writeBytes(bytes, bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n    \n    // test copyBytes\n    dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.copyBytes(new ByteArrayDataInput(bytes), bytes.length); // first copy should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.copyBytes(new ByteArrayDataInput(bytes), bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","cd8a7e622c1138188be79e193b1dc52f3f0889a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd8a7e622c1138188be79e193b1dc52f3f0889a5"]},"commit2Childs":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd8a7e622c1138188be79e193b1dc52f3f0889a5","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}