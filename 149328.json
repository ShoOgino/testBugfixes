{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#finish().mjava","commits":[{"id":"06a4493f0c732d2928d1a4f773f15d19434aa8ba","date":1405856163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#finish().mjava","pathOld":"/dev/null","sourceNew":"  /** Call this once you are done adding states/transitions. */\n  public void finish() {\n    Automaton automaton = builder.finish();\n\n    // System.out.println(\"before det:\\n\" + automaton.toDot());\n\n    Transition t = new Transition();\n\n    // TODO: should we add \"eps back to initial node\" for all states,\n    // and det that?  then we don't need to revisit initial node at\n    // every position?  but automaton could blow up?  And, this makes it\n    // harder to skip useless positions at search time?\n\n    if (anyTermID != -1) {\n\n      // Make sure there are no leading or trailing ANY:\n      int count = automaton.initTransition(0, t);\n      for(int i=0;i<count;i++) {\n        automaton.getNextTransition(t);\n        if (anyTermID >= t.min && anyTermID <= t.max) {\n          throw new IllegalStateException(\"automaton cannot lead with an ANY transition\");\n        }\n      }\n\n      int numStates = automaton.getNumStates();\n      for(int i=0;i<numStates;i++) {\n        count = automaton.initTransition(i, t);\n        for(int j=0;j<count;j++) {\n          automaton.getNextTransition(t);\n          if (automaton.isAccept(t.dest) && anyTermID >= t.min && anyTermID <= t.max) {\n            throw new IllegalStateException(\"automaton cannot end with an ANY transition\");\n          }\n        }\n      }\n\n      int termCount = termToID.size();\n\n      // We have to carefully translate these transitions so automaton\n      // realizes they also match all other terms:\n      Automaton newAutomaton = new Automaton();\n      for(int i=0;i<numStates;i++) {\n        newAutomaton.createState();\n        newAutomaton.setAccept(i, automaton.isAccept(i));\n      }\n\n      for(int i=0;i<numStates;i++) {\n        count = automaton.initTransition(i, t);\n        for(int j=0;j<count;j++) {\n          automaton.getNextTransition(t);\n          int min, max;\n          if (t.min <= anyTermID && anyTermID <= t.max) {\n            // Match any term\n            min = 0;\n            max = termCount-1;\n          } else {\n            min = t.min;\n            max = t.max;\n          }\n          newAutomaton.addTransition(t.source, t.dest, min, max);\n        }\n      }\n      newAutomaton.finishState();\n      automaton = newAutomaton;\n    }\n\n    det = Operations.removeDeadStates(Operations.determinize(automaton));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#finish().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#finish().mjava","sourceNew":"  /** Call this once you are done adding states/transitions. */\n  public void finish() {\n    finish(DEFAULT_MAX_DETERMINIZED_STATES);\n  }\n\n","sourceOld":"  /** Call this once you are done adding states/transitions. */\n  public void finish() {\n    Automaton automaton = builder.finish();\n\n    // System.out.println(\"before det:\\n\" + automaton.toDot());\n\n    Transition t = new Transition();\n\n    // TODO: should we add \"eps back to initial node\" for all states,\n    // and det that?  then we don't need to revisit initial node at\n    // every position?  but automaton could blow up?  And, this makes it\n    // harder to skip useless positions at search time?\n\n    if (anyTermID != -1) {\n\n      // Make sure there are no leading or trailing ANY:\n      int count = automaton.initTransition(0, t);\n      for(int i=0;i<count;i++) {\n        automaton.getNextTransition(t);\n        if (anyTermID >= t.min && anyTermID <= t.max) {\n          throw new IllegalStateException(\"automaton cannot lead with an ANY transition\");\n        }\n      }\n\n      int numStates = automaton.getNumStates();\n      for(int i=0;i<numStates;i++) {\n        count = automaton.initTransition(i, t);\n        for(int j=0;j<count;j++) {\n          automaton.getNextTransition(t);\n          if (automaton.isAccept(t.dest) && anyTermID >= t.min && anyTermID <= t.max) {\n            throw new IllegalStateException(\"automaton cannot end with an ANY transition\");\n          }\n        }\n      }\n\n      int termCount = termToID.size();\n\n      // We have to carefully translate these transitions so automaton\n      // realizes they also match all other terms:\n      Automaton newAutomaton = new Automaton();\n      for(int i=0;i<numStates;i++) {\n        newAutomaton.createState();\n        newAutomaton.setAccept(i, automaton.isAccept(i));\n      }\n\n      for(int i=0;i<numStates;i++) {\n        count = automaton.initTransition(i, t);\n        for(int j=0;j<count;j++) {\n          automaton.getNextTransition(t);\n          int min, max;\n          if (t.min <= anyTermID && anyTermID <= t.max) {\n            // Match any term\n            min = 0;\n            max = termCount-1;\n          } else {\n            min = t.min;\n            max = t.max;\n          }\n          newAutomaton.addTransition(t.source, t.dest, min, max);\n        }\n      }\n      newAutomaton.finishState();\n      automaton = newAutomaton;\n    }\n\n    det = Operations.removeDeadStates(Operations.determinize(automaton));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}