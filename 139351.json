{"path":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsProducer#files(Directory,SegmentInfo,Set[String]).mjava","commits":[{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":2,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsProducer#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsReader#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    // TODO: This is what SI always did... but we can do this cleaner?\n    // like first FI that has norms but doesn't have separate norms?\n    final String normsFileName = IndexFileNames.segmentFileName(info.name, \"\", SimpleTextNormsConsumer.NORMS_EXTENSION);\n    if (dir.fileExists(normsFileName)) {\n      files.add(normsFileName);\n    }\n  }\n\n","sourceOld":"  static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    // TODO: This is what SI always did... but we can do this cleaner?\n    // like first FI that has norms but doesn't have separate norms?\n    final String normsFileName = IndexFileNames.segmentFileName(info.name, \"\", Lucene40NormsWriter.NORMS_EXTENSION);\n    if (dir.fileExists(normsFileName)) {\n      files.add(normsFileName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsProducer#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsProducer#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    FieldInfos fieldInfos = info.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.normsPresent()) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", SimpleTextNormsConsumer.NORMS_EXTENSION));\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    // TODO: This is what SI always did... but we can do this cleaner?\n    // like first FI that has norms but doesn't have separate norms?\n    final String normsFileName = IndexFileNames.segmentFileName(info.name, \"\", SimpleTextNormsConsumer.NORMS_EXTENSION);\n    if (dir.fileExists(normsFileName)) {\n      files.add(normsFileName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsProducer#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsProducer#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    FieldInfos fieldInfos = info.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.normsPresent()) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", SimpleTextNormsConsumer.NORMS_EXTENSION));\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  static void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    FieldInfos fieldInfos = info.getFieldInfos();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.normsPresent()) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", SimpleTextNormsConsumer.NORMS_EXTENSION));\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}