{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeStringUnion(Collection[BytesRef]).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeStringUnion(Collection[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringUnionLight(Collection[BytesRef]).mjava","sourceNew":"  /**\n   * Returns a new (deterministic and minimal) automaton that accepts the union\n   * of the given collection of {@link BytesRef}s representing UTF-8 encoded\n   * strings.\n   * \n   * @param utf8Strings\n   *          The input strings, UTF-8 encoded. The collection must be in sorted\n   *          order.\n   * \n   * @return An {@link Automaton} accepting all input strings. The resulting\n   *         automaton is codepoint based (full unicode codepoints on\n   *         transitions).\n   */\n  public static Automaton makeStringUnion(Collection<BytesRef> utf8Strings) {\n    if (utf8Strings.isEmpty()) {\n      return makeEmpty();\n    } else {\n      return DaciukMihovAutomatonBuilder.build(utf8Strings);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic and minimal) automaton that accepts the union\n   * of the given collection of {@link BytesRef}s representing UTF-8 encoded\n   * strings.\n   * \n   * @param utf8Strings\n   *          The input strings, UTF-8 encoded. The collection must be in sorted\n   *          order.\n   * \n   * @return An {@link Automaton} accepting all input strings. The resulting\n   *         automaton is codepoint based (full unicode codepoints on\n   *         transitions).\n   */\n  public static LightAutomaton makeStringUnionLight(Collection<BytesRef> utf8Strings) {\n    if (utf8Strings.isEmpty()) {\n      return makeEmptyLight();\n    } else {\n      return DaciukMihovAutomatonBuilderLight.build(utf8Strings);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeStringUnion(Collection[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringUnion(Collection[BytesRef]).mjava","sourceNew":"  /**\n   * Returns a new (deterministic and minimal) automaton that accepts the union\n   * of the given collection of {@link BytesRef}s representing UTF-8 encoded\n   * strings.\n   * \n   * @param utf8Strings\n   *          The input strings, UTF-8 encoded. The collection must be in sorted\n   *          order.\n   * \n   * @return An {@link Automaton} accepting all input strings. The resulting\n   *         automaton is codepoint based (full unicode codepoints on\n   *         transitions).\n   */\n  public static Automaton makeStringUnion(Collection<BytesRef> utf8Strings) {\n    if (utf8Strings.isEmpty()) {\n      return makeEmpty();\n    } else {\n      return DaciukMihovAutomatonBuilder.build(utf8Strings);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic and minimal) automaton that accepts the union\n   * of the given collection of {@link BytesRef}s representing UTF-8 encoded\n   * strings.\n   * \n   * @param utf8Strings\n   *          The input strings, UTF-8 encoded. The collection must be in sorted\n   *          order.\n   * \n   * @return An {@link Automaton} accepting all input strings. The resulting\n   *         automaton is codepoint based (full unicode codepoints on\n   *         transitions).\n   */\n  public static Automaton makeStringUnion(Collection<BytesRef> utf8Strings) {\n    if (utf8Strings.isEmpty()) {\n      return makeEmpty();\n    } else {\n      return DaciukMihovAutomatonBuilder.build(utf8Strings);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}