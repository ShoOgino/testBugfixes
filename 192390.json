{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","pathOld":"/dev/null","sourceNew":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == pointsPerLeafBlock) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we flush a new segment, where we write between max/2 and max per leaf block,\n        // so merged segments will behave differently from newly flushed segments:\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f064248a931db23d37d7383fcae17d0909a7f9c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f064248a931db23d37d7383fcae17d0909a7f9c6","date":1470227646,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","sourceNew":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we flush a new segment, where we write between max/2 and max per leaf block,\n        // so merged segments will behave differently from newly flushed segments:\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","sourceOld":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == pointsPerLeafBlock) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we flush a new segment, where we write between max/2 and max per leaf block,\n        // so merged segments will behave differently from newly flushed segments:\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","bugFix":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","pathOld":"/dev/null","sourceNew":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we flush a new segment, where we write between max/2 and max per leaf block,\n        // so merged segments will behave differently from newly flushed segments:\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","pathOld":"/dev/null","sourceNew":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we flush a new segment, where we write between max/2 and max per leaf block,\n        // so merged segments will behave differently from newly flushed segments:\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9","date":1481155163,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","sourceNew":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we write N > 1 dimensional points where we write between max/2 and max per leaf block\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","sourceOld":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we flush a new segment, where we write between max/2 and max per leaf block,\n        // so merged segments will behave differently from newly flushed segments:\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","sourceNew":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we write N > 1 dimensional points where we write between max/2 and max per leaf block\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","sourceOld":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we flush a new segment, where we write between max/2 and max per leaf block,\n        // so merged segments will behave differently from newly flushed segments:\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb3390124f6c070b73005f7d1d06e28733988224","date":1555579478,"type":3,"author":"Zhao Yang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","sourceNew":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount + leafCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + leafCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we write N > 1 dimensional points where we write between max/2 and max per leaf block\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","sourceOld":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we write N > 1 dimensional points where we write between max/2 and max per leaf block\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","bugFix":null,"bugIntro":["d27e4011f75a6a0d8e2906aef8348a1692e85473"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b","date":1561536972,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","sourceNew":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      if (leafCount == 0 || Arrays.mismatch(leafValues, (leafCount - 1) * bytesPerDim, leafCount * bytesPerDim, packedValue, 0, bytesPerDim) != -1) {\n        leafCardinality++;\n      }\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount + leafCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + leafCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we write N > 1 dimensional points where we write between max/2 and max per leaf block\n        writeLeafBlock(leafCardinality);\n        leafCardinality = 0;\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","sourceOld":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount + leafCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + leafCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we write N > 1 dimensional points where we write between max/2 and max per leaf block\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d27e4011f75a6a0d8e2906aef8348a1692e85473","date":1579187506,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","sourceNew":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      if (leafCount == 0 || Arrays.mismatch(leafValues, (leafCount - 1) * bytesPerDim, leafCount * bytesPerDim, packedValue, 0, bytesPerDim) != -1) {\n        leafCardinality++;\n      }\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount + leafCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + (valueCount + leafCount) + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we write N > 1 dimensional points where we write between max/2 and max per leaf block\n        writeLeafBlock(leafCardinality);\n        leafCardinality = 0;\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","sourceOld":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      if (leafCount == 0 || Arrays.mismatch(leafValues, (leafCount - 1) * bytesPerDim, leafCount * bytesPerDim, packedValue, 0, bytesPerDim) != -1) {\n        leafCardinality++;\n      }\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount + leafCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + leafCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we write N > 1 dimensional points where we write between max/2 and max per leaf block\n        writeLeafBlock(leafCardinality);\n        leafCardinality = 0;\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","bugFix":["bb3390124f6c070b73005f7d1d06e28733988224"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","sourceNew":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(config, valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      if (leafCount == 0 || Arrays.mismatch(leafValues, (leafCount - 1) * config.bytesPerDim, leafCount * config.bytesPerDim, packedValue, 0, config.bytesPerDim) != -1) {\n        leafCardinality++;\n      }\n      System.arraycopy(packedValue, 0, leafValues, leafCount * config.packedBytesLength, config.packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount + leafCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + (valueCount + leafCount) + \" values\");\n      }\n\n      if (leafCount == config.maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we write N > 1 dimensional points where we write between max/2 and max per leaf block\n        writeLeafBlock(leafCardinality);\n        leafCardinality = 0;\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","sourceOld":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      if (leafCount == 0 || Arrays.mismatch(leafValues, (leafCount - 1) * bytesPerDim, leafCount * bytesPerDim, packedValue, 0, bytesPerDim) != -1) {\n        leafCardinality++;\n      }\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount + leafCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + (valueCount + leafCount) + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we write N > 1 dimensional points where we write between max/2 and max per leaf block\n        writeLeafBlock(leafCardinality);\n        leafCardinality = 0;\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb3390124f6c070b73005f7d1d06e28733988224":["c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"d27e4011f75a6a0d8e2906aef8348a1692e85473":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["d27e4011f75a6a0d8e2906aef8348a1692e85473"],"f064248a931db23d37d7383fcae17d0909a7f9c6":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["bb3390124f6c070b73005f7d1d06e28733988224"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f064248a931db23d37d7383fcae17d0909a7f9c6"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f064248a931db23d37d7383fcae17d0909a7f9c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["f064248a931db23d37d7383fcae17d0909a7f9c6"]},"commit2Childs":{"bb3390124f6c070b73005f7d1d06e28733988224":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b"],"d27e4011f75a6a0d8e2906aef8348a1692e85473":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f064248a931db23d37d7383fcae17d0909a7f9c6":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["d27e4011f75a6a0d8e2906aef8348a1692e85473"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["f064248a931db23d37d7383fcae17d0909a7f9c6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["bb3390124f6c070b73005f7d1d06e28733988224","9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}