{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","commits":[{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    zkStateReader.getConfigManager().downloadConfigDir(configName, downloadPath);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b383da3a1e6eafef69dcf770a23232fbbd06501","date":1425913316,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","sourceNew":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    connect();\n    zkStateReader.getConfigManager().downloadConfigDir(configName, downloadPath);\n  }\n\n","sourceOld":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    zkStateReader.getConfigManager().downloadConfigDir(configName, downloadPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","sourceNew":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    connect();\n    zkStateReader.getConfigManager().downloadConfigDir(configName, downloadPath);\n  }\n\n","sourceOld":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    zkStateReader.getConfigManager().downloadConfigDir(configName, downloadPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","sourceNew":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    assertZKStateProvider().downloadConfig(configName, downloadPath);\n  }\n\n","sourceOld":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    connect();\n    zkStateReader.getConfigManager().downloadConfigDir(configName, downloadPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4663b9e22a09eac4becf443aa5d3bd244c2efbed","date":1480145012,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","sourceNew":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  @Deprecated\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    assertZKStateProvider().downloadConfig(configName, downloadPath);\n  }\n\n","sourceOld":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    assertZKStateProvider().downloadConfig(configName, downloadPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","sourceNew":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  @Deprecated\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    assertZKStateProvider().downloadConfig(configName, downloadPath);\n  }\n\n","sourceOld":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    connect();\n    zkStateReader.getConfigManager().downloadConfigDir(configName, downloadPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3a6e00d9c1340cd02920b7777125e53a1a97bdb","date":1480386947,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","sourceNew":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   *\n   * @deprecated Please use {@link ZkClientClusterStateProvider#downloadConfig(String, Path)} instead\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  @Deprecated\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    assertZKStateProvider().downloadConfig(configName, downloadPath);\n  }\n\n","sourceOld":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  @Deprecated\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    assertZKStateProvider().downloadConfig(configName, downloadPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","sourceNew":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   *\n   * @deprecated Please use {@link ZkClientClusterStateProvider#downloadConfig(String, Path)} instead\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  @Deprecated\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    assertZKStateProvider().downloadConfig(configName, downloadPath);\n  }\n\n","sourceOld":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  @Deprecated\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    assertZKStateProvider().downloadConfig(configName, downloadPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","sourceNew":null,"sourceOld":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   *\n   * @deprecated Please use {@link ZkClientClusterStateProvider#downloadConfig(String, Path)} instead\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  @Deprecated\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    assertZKStateProvider().downloadConfig(configName, downloadPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","sourceNew":null,"sourceOld":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   *\n   * @deprecated Please use {@link ZkClientClusterStateProvider#downloadConfig(String, Path)} instead\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  @Deprecated\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    assertZKStateProvider().downloadConfig(configName, downloadPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#downloadConfig(String,Path).mjava","sourceNew":null,"sourceOld":"  /**\n   * Download a named config from Zookeeper to a location on the filesystem\n   *\n   * @deprecated Please use {@link ZkClientClusterStateProvider#downloadConfig(String, Path)} instead\n   * @param configName    the name of the config\n   * @param downloadPath  the path to write config files to\n   * @throws IOException  if an I/O exception occurs\n   */\n  @Deprecated\n  public void downloadConfig(String configName, Path downloadPath) throws IOException {\n    assertZKStateProvider().downloadConfig(configName, downloadPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"63a1978c6710c767fa084741e3d6424840003a62":["f3a6e00d9c1340cd02920b7777125e53a1a97bdb"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["0b383da3a1e6eafef69dcf770a23232fbbd06501"],"f3a6e00d9c1340cd02920b7777125e53a1a97bdb":["4663b9e22a09eac4becf443aa5d3bd244c2efbed"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["f3a6e00d9c1340cd02920b7777125e53a1a97bdb","63a1978c6710c767fa084741e3d6424840003a62"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c8a2521797f14d1d697a17a0069f5619cd211a6","0b383da3a1e6eafef69dcf770a23232fbbd06501"],"4663b9e22a09eac4becf443aa5d3bd244c2efbed":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"727bb765ff2542275f6d31f67be18d7104bae148":["0b383da3a1e6eafef69dcf770a23232fbbd06501","4663b9e22a09eac4becf443aa5d3bd244c2efbed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0b383da3a1e6eafef69dcf770a23232fbbd06501":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"9856095f7afb5a607bf5e65077615ed91273508c":["727bb765ff2542275f6d31f67be18d7104bae148","f3a6e00d9c1340cd02920b7777125e53a1a97bdb"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["f3a6e00d9c1340cd02920b7777125e53a1a97bdb","63a1978c6710c767fa084741e3d6424840003a62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0b383da3a1e6eafef69dcf770a23232fbbd06501"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["4663b9e22a09eac4becf443aa5d3bd244c2efbed"],"f3a6e00d9c1340cd02920b7777125e53a1a97bdb":["63a1978c6710c767fa084741e3d6424840003a62","e9017cf144952056066919f1ebc7897ff9bd71b1","9856095f7afb5a607bf5e65077615ed91273508c","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"4663b9e22a09eac4becf443aa5d3bd244c2efbed":["f3a6e00d9c1340cd02920b7777125e53a1a97bdb","727bb765ff2542275f6d31f67be18d7104bae148"],"727bb765ff2542275f6d31f67be18d7104bae148":["9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"0b383da3a1e6eafef69dcf770a23232fbbd06501":["3eaeb36333664e8cb92108ef03f68a7b90beb759","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","727bb765ff2542275f6d31f67be18d7104bae148"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}