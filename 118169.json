{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectMonotonic#doTestMonotonicBinarySearchAgainstLongArray(Directory,long[],int).mjava","commits":[{"id":"70a4487b07c49a1861c05720e04624826ecbe9fa","date":1580924108,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectMonotonic#doTestMonotonicBinarySearchAgainstLongArray(Directory,long[],int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestMonotonicBinarySearchAgainstLongArray(Directory dir, long[] array, int blockShift) throws IOException {\n    try (IndexOutput metaOut = dir.createOutput(\"meta\", IOContext.DEFAULT);\n        IndexOutput dataOut = dir.createOutput(\"data\", IOContext.DEFAULT)) {\n      DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(metaOut, dataOut, array.length, blockShift);\n      for (long l : array) {\n        writer.add(l);\n      }\n      writer.finish();\n    }\n\n    try (IndexInput metaIn = dir.openInput(\"meta\", IOContext.READONCE);\n        IndexInput dataIn = dir.openInput(\"data\", IOContext.READ)) {\n      DirectMonotonicReader.Meta meta = DirectMonotonicReader.loadMeta(metaIn, array.length, blockShift);\n      DirectMonotonicReader reader = DirectMonotonicReader.getInstance(meta, dataIn.randomAccessSlice(0L, dir.fileLength(\"data\")));\n\n      if (array.length == 0) {\n        assertEquals(-1, reader.binarySearch(0, array.length, 42L));\n      } else {\n        for (int i = 0; i < array.length; ++i) {\n          final long index = reader.binarySearch(0, array.length, array[i]);\n          assertTrue(index >= 0);\n          assertTrue(index < array.length);\n          assertEquals(array[i], array[(int) index]);\n        }\n        if (array[0] != Long.MIN_VALUE) {\n          assertEquals(-1, reader.binarySearch(0, array.length, array[0] - 1));\n        }\n        if (array[array.length - 1] != Long.MAX_VALUE) {\n          assertEquals(-1 - array.length, reader.binarySearch(0, array.length, array[array.length - 1] + 1));\n        }\n        for (int i = 0; i < array.length - 2; ++i) {\n          if (array[i] + 1 < array[i+1]) {\n            final long intermediate = random().nextBoolean() ? array[i] + 1 : array[i+1] - 1;\n            final long index = reader.binarySearch(0, array.length, intermediate);\n            assertTrue(index < 0);\n            final int insertionPoint = Math.toIntExact(-1 -index);\n            assertTrue(insertionPoint > 0);\n            assertTrue(insertionPoint < array.length);\n            assertTrue(array[insertionPoint] > intermediate);\n            assertTrue(array[insertionPoint-1] < intermediate);\n          }\n        }\n      }\n    }\n    dir.deleteFile(\"meta\");\n    dir.deleteFile(\"data\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70a4487b07c49a1861c05720e04624826ecbe9fa"]},"commit2Childs":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70a4487b07c49a1861c05720e04624826ecbe9fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}