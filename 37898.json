{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortTwoFields().mjava","sourceNew":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortTwoFields().mjava","sourceNew":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortTwoFields().mjava","sourceNew":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b3768e97375c7a745c68f0b54710e8bedccc11","date":1406635606,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","sourceNew":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["ca4fceda8952824659b70592789c13150641c3d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","sourceNew":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","sourceNew":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","sourceNew":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","sourceNew":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortTwoFields().mjava","sourceNew":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting with two fields */\n  public void testSortTwoFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"tievalue\", \"tied\", Field.Store.NO));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    Map<String,Type> mappings = new HashMap<>();\n    mappings.put(\"tievalue\", Type.SORTED);\n    mappings.put(\"value\", Type.SORTED);\n    \n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), mappings);\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    // tievalue, then value\n    Sort sort = new Sort(new SortField(\"tievalue\", SortField.Type.STRING),\n                         new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["d0ef034a4f10871667ae75181537775ddcf8ade4","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["b0b3768e97375c7a745c68f0b54710e8bedccc11"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b3768e97375c7a745c68f0b54710e8bedccc11":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"83870855d82aba6819217abeff5a40779dbb28b4":["d0ef034a4f10871667ae75181537775ddcf8ade4","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d0ef034a4f10871667ae75181537775ddcf8ade4","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["b0b3768e97375c7a745c68f0b54710e8bedccc11","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b0b3768e97375c7a745c68f0b54710e8bedccc11":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}