{"path":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","commits":[{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","sourceNew":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    for(String fileName : cache.listAll()) {\n      unCache(fileName);\n    }\n    cache.close();\n    delegate.close();\n  }\n\n","sourceOld":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    for(String fileName : cache.listAll()) {\n      unCache(fileName);\n    }\n    cache.close();\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592e183306e8e4efabf3e7e08d3e709c9b97dbb","date":1324403520,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","sourceNew":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    // NOTE: technically we shouldn't have to do this, ie,\n    // IndexWriter should have sync'd all files, but we do\n    // it for defensive reasons... or in case the app is\n    // doing something custom (creating outputs directly w/o\n    // using IndexWriter):\n    for(String fileName : cache.listAll()) {\n      unCache(fileName);\n    }\n    cache.close();\n    delegate.close();\n  }\n\n","sourceOld":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    for(String fileName : cache.listAll()) {\n      unCache(fileName);\n    }\n    cache.close();\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#close().mjava","sourceNew":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    // NOTE: technically we shouldn't have to do this, ie,\n    // IndexWriter should have sync'd all files, but we do\n    // it for defensive reasons... or in case the app is\n    // doing something custom (creating outputs directly w/o\n    // using IndexWriter):\n    for(String fileName : cache.listAll()) {\n      unCache(fileName);\n    }\n    cache.close();\n    delegate.close();\n  }\n\n","sourceOld":"  /** Close this directory, which flushes any cached files\n   *  to the delegate and then closes the delegate. */\n  @Override\n  public void close() throws IOException {\n    // NOTE: technically we shouldn't have to do this, ie,\n    // IndexWriter should have sync'd all files, but we do\n    // it for defensive reasons... or in case the app is\n    // doing something custom (creating outputs directly w/o\n    // using IndexWriter):\n    for(String fileName : cache.listAll()) {\n      unCache(fileName);\n    }\n    cache.close();\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f592e183306e8e4efabf3e7e08d3e709c9b97dbb":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"f592e183306e8e4efabf3e7e08d3e709c9b97dbb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}