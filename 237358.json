{"path":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","commits":[{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  /**\n   * @param dir\n   * @param lockPath\n   * @param rawLockType\n   * @return\n   * @throws IOException\n   */\n  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","sourceNew":"  /**\n   * @param dir\n   * @param lockPath\n   * @param rawLockType\n   * @return\n   * @throws IOException\n   */\n  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * @param dir\n   * @param lockPath\n   * @param rawLockType\n   * @return\n   * @throws IOException\n   */\n  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","sourceNew":"  /**\n   * @param dir\n   * @param lockPath\n   * @param rawLockType\n   * @return\n   * @throws IOException\n   */\n  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * @param dir\n   * @param lockPath\n   * @param rawLockType\n   * @return\n   * @throws IOException\n   */\n  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","sourceNew":"  /**\n   * @param dir\n   * @param lockPath\n   * @param rawLockType\n   * @return\n   * @throws IOException\n   */\n  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * @param dir\n   * @param lockPath\n   * @param rawLockType\n   * @return\n   * @throws IOException\n   */\n  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","sourceNew":"  /**\n   * @param dir\n   * @param lockPath\n   * @param rawLockType\n   * @return\n   * @throws IOException\n   */\n  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * @param dir\n   * @param lockPath\n   * @param rawLockType\n   * @return\n   * @throws IOException\n   */\n  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f42adde674c3832964de02a512782c0d752a1ff7","date":1347295064,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","sourceNew":"  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * @param dir\n   * @param lockPath\n   * @param rawLockType\n   * @return\n   * @throws IOException\n   */\n  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","sourceNew":"  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"hdfs\".equals(lockType)) {\n      Directory del = dir;\n      \n      if (dir instanceof NRTCachingDirectory) {\n        del = ((NRTCachingDirectory) del).getDelegate();\n      }\n      \n      if (del instanceof BlockDirectory) {\n        del = ((BlockDirectory) del).getDirectory();\n      }\n      \n      if (!(del instanceof HdfsDirectory)) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Directory: \"\n            + del.getClass().getName()\n            + \", but hdfs lock factory can only be used with HdfsDirectory\");\n      }\n\n      dir.setLockFactory(new HdfsLockFactory(((HdfsDirectory)del).getHdfsDirPath(), ((HdfsDirectory)del).getConfiguration()));\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","sourceNew":"  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"hdfs\".equals(lockType)) {\n      Directory del = dir;\n      \n      if (dir instanceof NRTCachingDirectory) {\n        del = ((NRTCachingDirectory) del).getDelegate();\n      }\n      \n      if (del instanceof BlockDirectory) {\n        del = ((BlockDirectory) del).getDirectory();\n      }\n      \n      if (!(del instanceof HdfsDirectory)) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Directory: \"\n            + del.getClass().getName()\n            + \", but hdfs lock factory can only be used with HdfsDirectory\");\n      }\n\n      dir.setLockFactory(new HdfsLockFactory(((HdfsDirectory)del).getHdfsDirPath(), ((HdfsDirectory)del).getConfiguration()));\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","sourceNew":"  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(new File(lockPath).toPath()));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(new File(lockPath).toPath()));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"hdfs\".equals(lockType)) {\n      Directory del = dir;\n      \n      if (dir instanceof NRTCachingDirectory) {\n        del = ((NRTCachingDirectory) del).getDelegate();\n      }\n      \n      if (del instanceof BlockDirectory) {\n        del = ((BlockDirectory) del).getDirectory();\n      }\n      \n      if (!(del instanceof HdfsDirectory)) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Directory: \"\n            + del.getClass().getName()\n            + \", but hdfs lock factory can only be used with HdfsDirectory\");\n      }\n\n      dir.setLockFactory(new HdfsLockFactory(((HdfsDirectory)del).getHdfsDirPath(), ((HdfsDirectory)del).getConfiguration()));\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"hdfs\".equals(lockType)) {\n      Directory del = dir;\n      \n      if (dir instanceof NRTCachingDirectory) {\n        del = ((NRTCachingDirectory) del).getDelegate();\n      }\n      \n      if (del instanceof BlockDirectory) {\n        del = ((BlockDirectory) del).getDirectory();\n      }\n      \n      if (!(del instanceof HdfsDirectory)) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Directory: \"\n            + del.getClass().getName()\n            + \", but hdfs lock factory can only be used with HdfsDirectory\");\n      }\n\n      dir.setLockFactory(new HdfsLockFactory(((HdfsDirectory)del).getHdfsDirPath(), ((HdfsDirectory)del).getConfiguration()));\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0a506fe165b26e024afa1aec8a4a7d758e837ff","date":1410971446,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","sourceNew":null,"sourceOld":"  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(new File(lockPath).toPath()));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(new File(lockPath).toPath()));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"hdfs\".equals(lockType)) {\n      Directory del = dir;\n      \n      if (dir instanceof NRTCachingDirectory) {\n        del = ((NRTCachingDirectory) del).getDelegate();\n      }\n      \n      if (del instanceof BlockDirectory) {\n        del = ((BlockDirectory) del).getDirectory();\n      }\n      \n      if (!(del instanceof HdfsDirectory)) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Directory: \"\n            + del.getClass().getName()\n            + \", but hdfs lock factory can only be used with HdfsDirectory\");\n      }\n\n      dir.setLockFactory(new HdfsLockFactory(((HdfsDirectory)del).getHdfsDirPath(), ((HdfsDirectory)del).getConfiguration()));\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["f4abec28b874149a7223e32cc7a01704c27790de"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["f42adde674c3832964de02a512782c0d752a1ff7"],"f42adde674c3832964de02a512782c0d752a1ff7":["2acf500f78aa12b92e371fd89c719291986b6b90"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["f42adde674c3832964de02a512782c0d752a1ff7","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e22ffe8cc51a892ae103df018822d7873e901c2a","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"2acf500f78aa12b92e371fd89c719291986b6b90":["e22ffe8cc51a892ae103df018822d7873e901c2a","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"f4abec28b874149a7223e32cc7a01704c27790de":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"46d8ada1fff8d18cb197c38c7983225162599948":["e22ffe8cc51a892ae103df018822d7873e901c2a","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f4abec28b874149a7223e32cc7a01704c27790de"],"f42adde674c3832964de02a512782c0d752a1ff7":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["f42adde674c3832964de02a512782c0d752a1ff7","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}