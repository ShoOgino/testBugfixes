{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getMetrics(String,MetricFilter).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getMetrics(String,MetricFilter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieve matching metrics and their names.\n   * @param registry registry name.\n   * @param metricFilter filter (null is equivalent to {@link MetricFilter#ALL}).\n   * @return map of matching names and metrics\n   */\n  public Map<String, Metric> getMetrics(String registry, MetricFilter metricFilter) {\n    if (metricFilter == null || metricFilter == MetricFilter.ALL) {\n      return registry(registry).getMetrics();\n    }\n    return registry(registry).getMetrics().entrySet().stream()\n        .filter(entry -> metricFilter.matches(entry.getKey(), entry.getValue()))\n        .collect(Collectors.toMap(entry -> entry.getKey(), entry -> entry.getValue()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getMetrics(String,MetricFilter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieve matching metrics and their names.\n   * @param registry registry name.\n   * @param metricFilter filter (null is equivalent to {@link MetricFilter#ALL}).\n   * @return map of matching names and metrics\n   */\n  public Map<String, Metric> getMetrics(String registry, MetricFilter metricFilter) {\n    if (metricFilter == null || metricFilter == MetricFilter.ALL) {\n      return registry(registry).getMetrics();\n    }\n    return registry(registry).getMetrics().entrySet().stream()\n        .filter(entry -> metricFilter.matches(entry.getKey(), entry.getValue()))\n        .collect(Collectors.toMap(entry -> entry.getKey(), entry -> entry.getValue()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getMetrics(String,MetricFilter).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getMetrics(String,MetricFilter).mjava","sourceNew":"  /**\n   * Retrieve matching metrics and their names.\n   *\n   * @param registry     registry name.\n   * @param metricFilter filter (null is equivalent to {@link MetricFilter#ALL}).\n   * @return map of matching names and metrics\n   */\n  public Map<String, Metric> getMetrics(String registry, MetricFilter metricFilter) {\n    if (metricFilter == null || metricFilter == MetricFilter.ALL) {\n      return registry(registry).getMetrics();\n    }\n    return registry(registry).getMetrics().entrySet().stream()\n        .filter(entry -> metricFilter.matches(entry.getKey(), entry.getValue()))\n        .collect(Collectors.toMap(entry -> entry.getKey(), entry -> entry.getValue()));\n  }\n\n","sourceOld":"  /**\n   * Retrieve matching metrics and their names.\n   * @param registry registry name.\n   * @param metricFilter filter (null is equivalent to {@link MetricFilter#ALL}).\n   * @return map of matching names and metrics\n   */\n  public Map<String, Metric> getMetrics(String registry, MetricFilter metricFilter) {\n    if (metricFilter == null || metricFilter == MetricFilter.ALL) {\n      return registry(registry).getMetrics();\n    }\n    return registry(registry).getMetrics().entrySet().stream()\n        .filter(entry -> metricFilter.matches(entry.getKey(), entry.getValue()))\n        .collect(Collectors.toMap(entry -> entry.getKey(), entry -> entry.getValue()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}