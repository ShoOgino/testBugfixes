{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/NumericRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof ParametricRangeQueryNode) {\n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(StringUtils\n            .toString(parametricRangeNode.getField()));\n        \n        if (fieldConfig != null) {\n          \n          NumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n            ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            Number lowerNumber, upperNumber;\n            \n            try {\n              lowerNumber = numberFormat.parse(lower.getTextAsString());\n              \n            } catch (ParseException e) {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.COULD_NOT_PARSE_NUMBER, lower\n                      .getTextAsString(), numberFormat.getClass()\n                      .getCanonicalName()), e);\n            }\n            \n            try {\n              upperNumber = numberFormat.parse(upper.getTextAsString());\n              \n            } catch (ParseException e) {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.COULD_NOT_PARSE_NUMBER, upper\n                      .getTextAsString(), numberFormat.getClass()\n                      .getCanonicalName()), e);\n            }\n            \n            switch (numericConfig.getType()) {\n              case LONG:\n                upperNumber = upperNumber.longValue();\n                lowerNumber = lowerNumber.longValue();\n                break;\n              case INT:\n                upperNumber = upperNumber.intValue();\n                lowerNumber = lowerNumber.intValue();\n                break;\n              case DOUBLE:\n                upperNumber = upperNumber.doubleValue();\n                lowerNumber = lowerNumber.doubleValue();\n                break;\n              case FLOAT:\n                upperNumber = upperNumber.floatValue();\n                lowerNumber = lowerNumber.floatValue();\n            }\n            \n            NumericQueryNode lowerNode = new NumericQueryNode(\n                parametricRangeNode.getField(), lowerNumber, numberFormat);\n            NumericQueryNode upperNode = new NumericQueryNode(\n                parametricRangeNode.getField(), upperNumber, numberFormat);\n            \n            boolean upperInclusive = upper.getOperator() == CompareOperator.LE;\n            boolean lowerInclusive = lower.getOperator() == CompareOperator.GE;\n            \n            return new NumericRangeQueryNode(lowerNode, upperNode,\n                lowerInclusive, upperInclusive, numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof ParametricRangeQueryNode) {\n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(StringUtils\n            .toString(parametricRangeNode.getField()));\n        \n        if (fieldConfig != null) {\n          \n          NumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n            ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            Number lowerNumber, upperNumber;\n            \n            try {\n              lowerNumber = numberFormat.parse(lower.getTextAsString());\n              \n            } catch (ParseException e) {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.COULD_NOT_PARSE_NUMBER, lower\n                      .getTextAsString(), numberFormat.getClass()\n                      .getCanonicalName()), e);\n            }\n            \n            try {\n              upperNumber = numberFormat.parse(upper.getTextAsString());\n              \n            } catch (ParseException e) {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.COULD_NOT_PARSE_NUMBER, upper\n                      .getTextAsString(), numberFormat.getClass()\n                      .getCanonicalName()), e);\n            }\n            \n            switch (numericConfig.getType()) {\n              case LONG:\n                upperNumber = upperNumber.longValue();\n                lowerNumber = lowerNumber.longValue();\n                break;\n              case INT:\n                upperNumber = upperNumber.intValue();\n                lowerNumber = lowerNumber.intValue();\n                break;\n              case DOUBLE:\n                upperNumber = upperNumber.doubleValue();\n                lowerNumber = lowerNumber.doubleValue();\n                break;\n              case FLOAT:\n                upperNumber = upperNumber.floatValue();\n                lowerNumber = lowerNumber.floatValue();\n            }\n            \n            NumericQueryNode lowerNode = new NumericQueryNode(\n                parametricRangeNode.getField(), lowerNumber, numberFormat);\n            NumericQueryNode upperNode = new NumericQueryNode(\n                parametricRangeNode.getField(), upperNumber, numberFormat);\n            \n            boolean upperInclusive = upper.getOperator() == CompareOperator.LE;\n            boolean lowerInclusive = lower.getOperator() == CompareOperator.GE;\n            \n            return new NumericRangeQueryNode(lowerNode, upperNode,\n                lowerInclusive, upperInclusive, numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91b7614171e0a6a82351457c2870d2a0124ba9a","date":1312225025,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof ParametricRangeQueryNode) {\n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(StringUtils\n            .toString(parametricRangeNode.getField()));\n        \n        if (fieldConfig != null) {\n          \n          NumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n            ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n            \n            String lowerText = lower.getTextAsString();\n            String upperText = upper.getTextAsString();\n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            Number lowerNumber = null, upperNumber = null;\n            \n             if (lowerText.length() > 0) {\n              \n              try {\n                lowerNumber = numberFormat.parse(lowerText);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, lower\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n            }\n            \n             if (upperText.length() > 0) {\n            \n              try {\n                upperNumber = numberFormat.parse(upperText);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, upper\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n            \n            }\n            \n            switch (numericConfig.getType()) {\n              case LONG:\n                if (upperNumber != null) upperNumber = upperNumber.longValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.longValue();\n                break;\n              case INT:\n                if (upperNumber != null) upperNumber = upperNumber.intValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.intValue();\n                break;\n              case DOUBLE:\n                if (upperNumber != null) upperNumber = upperNumber.doubleValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.doubleValue();\n                break;\n              case FLOAT:\n                if (upperNumber != null) upperNumber = upperNumber.floatValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.floatValue();\n            }\n            \n            NumericQueryNode lowerNode = new NumericQueryNode(\n                parametricRangeNode.getField(), lowerNumber, numberFormat);\n            NumericQueryNode upperNode = new NumericQueryNode(\n                parametricRangeNode.getField(), upperNumber, numberFormat);\n            \n            boolean upperInclusive = upper == null\n                | upper.getOperator() == CompareOperator.LE;\n            boolean lowerInclusive = lower == null\n                | lower.getOperator() == CompareOperator.GE;\n            \n            return new NumericRangeQueryNode(lowerNode, upperNode,\n                lowerInclusive, upperInclusive, numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof ParametricRangeQueryNode) {\n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(StringUtils\n            .toString(parametricRangeNode.getField()));\n        \n        if (fieldConfig != null) {\n          \n          NumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n            ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            Number lowerNumber, upperNumber;\n            \n            try {\n              lowerNumber = numberFormat.parse(lower.getTextAsString());\n              \n            } catch (ParseException e) {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.COULD_NOT_PARSE_NUMBER, lower\n                      .getTextAsString(), numberFormat.getClass()\n                      .getCanonicalName()), e);\n            }\n            \n            try {\n              upperNumber = numberFormat.parse(upper.getTextAsString());\n              \n            } catch (ParseException e) {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.COULD_NOT_PARSE_NUMBER, upper\n                      .getTextAsString(), numberFormat.getClass()\n                      .getCanonicalName()), e);\n            }\n            \n            switch (numericConfig.getType()) {\n              case LONG:\n                upperNumber = upperNumber.longValue();\n                lowerNumber = lowerNumber.longValue();\n                break;\n              case INT:\n                upperNumber = upperNumber.intValue();\n                lowerNumber = lowerNumber.intValue();\n                break;\n              case DOUBLE:\n                upperNumber = upperNumber.doubleValue();\n                lowerNumber = lowerNumber.doubleValue();\n                break;\n              case FLOAT:\n                upperNumber = upperNumber.floatValue();\n                lowerNumber = lowerNumber.floatValue();\n            }\n            \n            NumericQueryNode lowerNode = new NumericQueryNode(\n                parametricRangeNode.getField(), lowerNumber, numberFormat);\n            NumericQueryNode upperNode = new NumericQueryNode(\n                parametricRangeNode.getField(), upperNumber, numberFormat);\n            \n            boolean upperInclusive = upper.getOperator() == CompareOperator.LE;\n            boolean lowerInclusive = lower.getOperator() == CompareOperator.GE;\n            \n            return new NumericRangeQueryNode(lowerNode, upperNode,\n                lowerInclusive, upperInclusive, numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":["a7e86426ca0513cfc495c3a2c0bb0c7abe03988d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25","date":1315500470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(StringUtils\n            .toString(termRangeNode.getField()));\n        \n        if (fieldConfig != null) {\n          \n          NumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            FieldQueryNode lower = termRangeNode.getLowerBound();\n            FieldQueryNode upper = termRangeNode.getUpperBound();\n            \n            String lowerText = lower.getTextAsString();\n            String upperText = upper.getTextAsString();\n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            Number lowerNumber = null, upperNumber = null;\n            \n             if (lowerText.length() > 0) {\n              \n              try {\n                lowerNumber = numberFormat.parse(lowerText);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, lower\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n            }\n            \n             if (upperText.length() > 0) {\n            \n              try {\n                upperNumber = numberFormat.parse(upperText);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, upper\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n            \n            }\n            \n            switch (numericConfig.getType()) {\n              case LONG:\n                if (upperNumber != null) upperNumber = upperNumber.longValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.longValue();\n                break;\n              case INT:\n                if (upperNumber != null) upperNumber = upperNumber.intValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.intValue();\n                break;\n              case DOUBLE:\n                if (upperNumber != null) upperNumber = upperNumber.doubleValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.doubleValue();\n                break;\n              case FLOAT:\n                if (upperNumber != null) upperNumber = upperNumber.floatValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.floatValue();\n            }\n            \n            NumericQueryNode lowerNode = new NumericQueryNode(\n                termRangeNode.getField(), lowerNumber, numberFormat);\n            NumericQueryNode upperNode = new NumericQueryNode(\n                termRangeNode.getField(), upperNumber, numberFormat);\n            \n            boolean lowerInclusive = termRangeNode.isLowerInclusive();\n            boolean upperInclusive = termRangeNode.isUpperInclusive();\n            \n            return new NumericRangeQueryNode(lowerNode, upperNode,\n                lowerInclusive, upperInclusive, numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof ParametricRangeQueryNode) {\n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(StringUtils\n            .toString(parametricRangeNode.getField()));\n        \n        if (fieldConfig != null) {\n          \n          NumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n            ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n            \n            String lowerText = lower.getTextAsString();\n            String upperText = upper.getTextAsString();\n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            Number lowerNumber = null, upperNumber = null;\n            \n             if (lowerText.length() > 0) {\n              \n              try {\n                lowerNumber = numberFormat.parse(lowerText);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, lower\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n            }\n            \n             if (upperText.length() > 0) {\n            \n              try {\n                upperNumber = numberFormat.parse(upperText);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, upper\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n            \n            }\n            \n            switch (numericConfig.getType()) {\n              case LONG:\n                if (upperNumber != null) upperNumber = upperNumber.longValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.longValue();\n                break;\n              case INT:\n                if (upperNumber != null) upperNumber = upperNumber.intValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.intValue();\n                break;\n              case DOUBLE:\n                if (upperNumber != null) upperNumber = upperNumber.doubleValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.doubleValue();\n                break;\n              case FLOAT:\n                if (upperNumber != null) upperNumber = upperNumber.floatValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.floatValue();\n            }\n            \n            NumericQueryNode lowerNode = new NumericQueryNode(\n                parametricRangeNode.getField(), lowerNumber, numberFormat);\n            NumericQueryNode upperNode = new NumericQueryNode(\n                parametricRangeNode.getField(), upperNumber, numberFormat);\n            \n            boolean upperInclusive = upper == null\n                | upper.getOperator() == CompareOperator.LE;\n            boolean lowerInclusive = lower == null\n                | lower.getOperator() == CompareOperator.GE;\n            \n            return new NumericRangeQueryNode(lowerNode, upperNode,\n                lowerInclusive, upperInclusive, numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(StringUtils\n            .toString(termRangeNode.getField()));\n        \n        if (fieldConfig != null) {\n          \n          NumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            FieldQueryNode lower = termRangeNode.getLowerBound();\n            FieldQueryNode upper = termRangeNode.getUpperBound();\n            \n            String lowerText = lower.getTextAsString();\n            String upperText = upper.getTextAsString();\n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            Number lowerNumber = null, upperNumber = null;\n            \n             if (lowerText.length() > 0) {\n              \n              try {\n                lowerNumber = numberFormat.parse(lowerText);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, lower\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n            }\n            \n             if (upperText.length() > 0) {\n            \n              try {\n                upperNumber = numberFormat.parse(upperText);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, upper\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n            \n            }\n            \n            switch (numericConfig.getType()) {\n              case LONG:\n                if (upperNumber != null) upperNumber = upperNumber.longValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.longValue();\n                break;\n              case INT:\n                if (upperNumber != null) upperNumber = upperNumber.intValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.intValue();\n                break;\n              case DOUBLE:\n                if (upperNumber != null) upperNumber = upperNumber.doubleValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.doubleValue();\n                break;\n              case FLOAT:\n                if (upperNumber != null) upperNumber = upperNumber.floatValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.floatValue();\n            }\n            \n            NumericQueryNode lowerNode = new NumericQueryNode(\n                termRangeNode.getField(), lowerNumber, numberFormat);\n            NumericQueryNode upperNode = new NumericQueryNode(\n                termRangeNode.getField(), upperNumber, numberFormat);\n            \n            boolean lowerInclusive = termRangeNode.isLowerInclusive();\n            boolean upperInclusive = termRangeNode.isUpperInclusive();\n            \n            return new NumericRangeQueryNode(lowerNode, upperNode,\n                lowerInclusive, upperInclusive, numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(StringUtils\n            .toString(termRangeNode.getField()));\n        \n        if (fieldConfig != null) {\n          \n          NumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            FieldQueryNode lower = termRangeNode.getLowerBound();\n            FieldQueryNode upper = termRangeNode.getUpperBound();\n            \n            String lowerText = lower.getTextAsString();\n            String upperText = upper.getTextAsString();\n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            Number lowerNumber = null, upperNumber = null;\n            \n             if (lowerText.length() > 0) {\n              \n              try {\n                lowerNumber = numberFormat.parse(lowerText);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, lower\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n            }\n            \n             if (upperText.length() > 0) {\n            \n              try {\n                upperNumber = numberFormat.parse(upperText);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, upper\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n            \n            }\n            \n            switch (numericConfig.getType()) {\n              case LONG:\n                if (upperNumber != null) upperNumber = upperNumber.longValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.longValue();\n                break;\n              case INT:\n                if (upperNumber != null) upperNumber = upperNumber.intValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.intValue();\n                break;\n              case DOUBLE:\n                if (upperNumber != null) upperNumber = upperNumber.doubleValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.doubleValue();\n                break;\n              case FLOAT:\n                if (upperNumber != null) upperNumber = upperNumber.floatValue();\n                if (lowerNumber != null) lowerNumber = lowerNumber.floatValue();\n            }\n            \n            NumericQueryNode lowerNode = new NumericQueryNode(\n                termRangeNode.getField(), lowerNumber, numberFormat);\n            NumericQueryNode upperNode = new NumericQueryNode(\n                termRangeNode.getField(), upperNumber, numberFormat);\n            \n            boolean lowerInclusive = termRangeNode.isLowerInclusive();\n            boolean upperInclusive = termRangeNode.isUpperInclusive();\n            \n            return new NumericRangeQueryNode(lowerNode, upperNode,\n                lowerInclusive, upperInclusive, numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}