{"path":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<String>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random.nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newField(\"field\", v, StringField.TYPE_UNSTORED);\n      doc.add(f);\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random.nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = new IndexSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<String>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random.nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newField(\"field\", v, StringField.TYPE_UNSTORED);\n      doc.add(f);\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random.nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = new IndexSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<String>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newField(\"field\", v, StringField.TYPE_UNSTORED);\n      doc.add(f);\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = new IndexSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<String>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random.nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newField(\"field\", v, StringField.TYPE_UNSTORED);\n      doc.add(f);\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random.nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = new IndexSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<String>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = new IndexSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<String>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newField(\"field\", v, StringField.TYPE_UNSTORED);\n      doc.add(f);\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = new IndexSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":["52bf390445fec2fc909f2bc6bd8597a64d8524e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<String>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<String>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = new IndexSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<String>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.shutdown();\n    final TopDocs hits = newSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.shutdown();\n    final TopDocs hits = newSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new FilteredQuery(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\")))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new FilteredQuery(new MatchAllDocsQuery(),\n                                                     new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\")))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryWrapperFilter#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    w.w.getConfig().setMaxBufferedDocs(17);\n    final int numDocs = atLeast(100);\n    final Set<String> aDocs = new HashSet<>();\n    for(int i=0;i<numDocs;i++) {\n      final Document doc = new Document();\n      final String v;\n      if (random().nextInt(5) == 4) {\n        v = \"a\";\n        aDocs.add(\"\"+i);\n      } else {\n        v = \"b\";\n      }\n      final Field f = newStringField(\"field\", v, Field.Store.NO);\n      doc.add(f);\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      w.addDocument(doc);\n    }\n\n    final int numDelDocs = atLeast(10);\n    for(int i=0;i<numDelDocs;i++) {\n      final String delID = \"\"+random().nextInt(numDocs);\n      w.deleteDocuments(new Term(\"id\", delID));\n      aDocs.remove(delID);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n    final TopDocs hits = newSearcher(r).search(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))),\n                                                     numDocs);\n    assertEquals(aDocs.size(), hits.totalHits);\n    for(ScoreDoc sd: hits.scoreDocs) {\n      assertTrue(aDocs.contains(r.document(sd.doc).get(\"id\")));\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"1db68e96dd908fcd79ef809095822736aa601d08":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["1db68e96dd908fcd79ef809095822736aa601d08"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"1db68e96dd908fcd79ef809095822736aa601d08":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}