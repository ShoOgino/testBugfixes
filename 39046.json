{"path":"src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","commits":[{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"src/java/org/apache/solr/request/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}