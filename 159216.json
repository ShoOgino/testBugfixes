{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseExamples().mjava","commits":[{"id":"2f668753a17905d6065d2addeaa90a9c51500b75","date":1329317165,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseExamples().mjava","pathOld":"/dev/null","sourceNew":"  /** Test the parsing of example scripts **/\n  public void testParseExamples() throws Exception {\n    // hackedy-hack-hack\n    boolean foundFiles = false;\n    final File examplesDir = new File(ConfLoader.class.getResource(\".\").toURI());\n    for (File algFile : examplesDir.listFiles(new FileFilter() {\n      public boolean accept(File pathname) { return pathname.isFile() && pathname.getName().endsWith(\".alg\"); }\n    })) {\n      try {\n        Config config = new Config(new FileReader(algFile));\n        String contentSource = config.get(\"content.source\", null);\n        if (contentSource != null) { Class.forName(contentSource); }\n        config.set(\"work.dir\", new File(TEMP_DIR,\"work\").getAbsolutePath());\n        config.set(\"content.source\", MockContentSource.class.getName());\n        String dir = config.get(\"content.source\", null);\n        if (dir != null) { Class.forName(dir); }\n        config.set(\"directory\", RAMDirectory.class.getName());\n        if (config.get(\"line.file.out\", null) != null) {\n          config.set(\"line.file.out\", new File(TEMP_DIR,\"o.txt\").getAbsolutePath());\n        }\n        if (config.get(\"query.maker\", null) != null) {\n          Class.forName(config.get(\"query.maker\", null));\n          config.set(\"query.maker\", MockQueryMaker.class.getName());\n        }\n        PerfRunData data = new PerfRunData(config);\n        new Algorithm(data);\n      } catch (Throwable t) {\n        t.printStackTrace();\n        fail(\"Could not parse sample file: \" + algFile + \" reason:\"\n            + t.getClass() + \":\" + t.getMessage());\n      }\n      foundFiles = true;\n    }\n    if (!foundFiles) {\n      fail(\"could not find any .alg files!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseExamples().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseExamples().mjava","sourceNew":"  /** Test the parsing of example scripts **/\n  public void testParseExamples() throws Exception {\n    // hackedy-hack-hack\n    boolean foundFiles = false;\n    final File examplesDir = new File(ConfLoader.class.getResource(\".\").toURI());\n    for (File algFile : examplesDir.listFiles(new FileFilter() {\n      public boolean accept(File pathname) { return pathname.isFile() && pathname.getName().endsWith(\".alg\"); }\n    })) {\n      try {\n        Config config = new Config(new FileReader(algFile));\n        String contentSource = config.get(\"content.source\", null);\n        if (contentSource != null) { Class.forName(contentSource); }\n        config.set(\"work.dir\", new File(TEMP_DIR,\"work\").getAbsolutePath());\n        config.set(\"content.source\", MockContentSource.class.getName());\n        String dir = config.get(\"content.source\", null);\n        if (dir != null) { Class.forName(dir); }\n        config.set(\"directory\", RAMDirectory.class.getName());\n        if (config.get(\"line.file.out\", null) != null) {\n          config.set(\"line.file.out\", new File(TEMP_DIR,\"o.txt\").getAbsolutePath());\n        }\n        if (config.get(\"query.maker\", null) != null) {\n          Class.forName(config.get(\"query.maker\", null));\n          config.set(\"query.maker\", MockQueryMaker.class.getName());\n        }\n        PerfRunData data = new PerfRunData(config);\n        new Algorithm(data);\n      } catch (Throwable t) {\n        t.printStackTrace();\n        fail(\"Could not parse sample file: \" + algFile + \" reason:\"\n            + t.getClass() + \":\" + t.getMessage());\n      }\n      foundFiles = true;\n    }\n    if (!foundFiles) {\n      fail(\"could not find any .alg files!\");\n    }\n  }\n\n","sourceOld":"  /** Test the parsing of example scripts **/\n  public void testParseExamples() throws Exception {\n    // hackedy-hack-hack\n    boolean foundFiles = false;\n    final File examplesDir = new File(ConfLoader.class.getResource(\".\").toURI());\n    for (File algFile : examplesDir.listFiles(new FileFilter() {\n      public boolean accept(File pathname) { return pathname.isFile() && pathname.getName().endsWith(\".alg\"); }\n    })) {\n      try {\n        Config config = new Config(new FileReader(algFile));\n        String contentSource = config.get(\"content.source\", null);\n        if (contentSource != null) { Class.forName(contentSource); }\n        config.set(\"work.dir\", new File(TEMP_DIR,\"work\").getAbsolutePath());\n        config.set(\"content.source\", MockContentSource.class.getName());\n        String dir = config.get(\"content.source\", null);\n        if (dir != null) { Class.forName(dir); }\n        config.set(\"directory\", RAMDirectory.class.getName());\n        if (config.get(\"line.file.out\", null) != null) {\n          config.set(\"line.file.out\", new File(TEMP_DIR,\"o.txt\").getAbsolutePath());\n        }\n        if (config.get(\"query.maker\", null) != null) {\n          Class.forName(config.get(\"query.maker\", null));\n          config.set(\"query.maker\", MockQueryMaker.class.getName());\n        }\n        PerfRunData data = new PerfRunData(config);\n        new Algorithm(data);\n      } catch (Throwable t) {\n        t.printStackTrace();\n        fail(\"Could not parse sample file: \" + algFile + \" reason:\"\n            + t.getClass() + \":\" + t.getMessage());\n      }\n      foundFiles = true;\n    }\n    if (!foundFiles) {\n      fail(\"could not find any .alg files!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2f668753a17905d6065d2addeaa90a9c51500b75"],"2f668753a17905d6065d2addeaa90a9c51500b75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f668753a17905d6065d2addeaa90a9c51500b75":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f668753a17905d6065d2addeaa90a9c51500b75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}