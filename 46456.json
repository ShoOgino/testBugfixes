{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5","date":1320922486,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params, shardRequest);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"541f6605a29362fa8a42f33b69069e7da5178034","date":1337786849,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false); \n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        Integer alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT); \n        Integer maxResultsForSuggest = params.getInt(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params);\n        \n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount != null) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n          \n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q,\n            extendedResults, collate, isCorrectlySpelled);\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, suggestions);\n        }\n        NamedList response = new SimpleOrderedMap();\n        response.add(\"suggestions\", suggestions);\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["8e65acce892eede973379cb2fb3b90ea49a4a5ed","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","55b8276f00bacdbaefed6689ef19a4d3a309bf10"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false); \n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        Integer alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT); \n        Integer maxResultsForSuggest = params.getInt(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params);\n        \n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount != null) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n          \n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q,\n            extendedResults, collate, isCorrectlySpelled);\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, suggestions);\n        }\n        NamedList response = new SimpleOrderedMap();\n        response.add(\"suggestions\", suggestions);\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getIndexReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params);\n        SpellingOptions options = new SpellingOptions(tokens, reader, count, onlyMorePopular, extendedResults,\n                accuracy, customParams);                       \n        SpellingResult spellingResult = spellChecker.getSuggestions(options);\n        if (spellingResult != null) {\n        \tNamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults, collate);\t\t\t\t\t\n\t\t\t\t\tif (collate) {\t\t\t\t\t\t\n\t\t\t\t\t\taddCollationsToResponse(params, spellingResult, rb, q, suggestions);\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(\"suggestions\", suggestions);\n\t\t\t\t\trb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad9ec888e587ca9a3279368245cdf00aabdc108","date":1338832525,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    \n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false); \n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        Integer alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT); \n        Integer maxResultsForSuggest = params.getInt(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST);\n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n        \n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount != null) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n          \n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q,\n            extendedResults, collate, isCorrectlySpelled);\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, suggestions, spellChecker.isSuggestionsMayOverlap());\n        }\n        NamedList response = new SimpleOrderedMap();\n        response.add(\"suggestions\", suggestions);\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false); \n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        Integer alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT); \n        Integer maxResultsForSuggest = params.getInt(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST);\n        SolrParams customParams = getCustomParams(getDictionaryName(params), params);\n        \n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount != null) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n          \n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q,\n            extendedResults, collate, isCorrectlySpelled);\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, suggestions);\n        }\n        NamedList response = new SimpleOrderedMap();\n        response.add(\"suggestions\", suggestions);\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist: \" + getDictionaryName(params));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b8276f00bacdbaefed6689ef19a4d3a309bf10","date":1399312570,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    \n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false); \n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0); \n        Integer maxResultsForSuggest = params.getInt(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST);\n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n        \n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n          \n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q,\n            extendedResults, collate, isCorrectlySpelled);\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, suggestions, spellChecker.isSuggestionsMayOverlap());\n        }\n        NamedList response = new SimpleOrderedMap();\n        response.add(\"suggestions\", suggestions);\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    \n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false); \n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        Integer alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT); \n        Integer maxResultsForSuggest = params.getInt(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST);\n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n        \n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount != null) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n          \n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q,\n            extendedResults, collate, isCorrectlySpelled);\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, suggestions, spellChecker.isSuggestionsMayOverlap());\n        }\n        NamedList response = new SimpleOrderedMap();\n        response.add(\"suggestions\", suggestions);\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","bugFix":["541f6605a29362fa8a42f33b69069e7da5178034"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    \n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false); \n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0); \n        Integer maxResultsForSuggest = params.getInt(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST);\n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n        \n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n          \n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n        \n        NamedList response = new SimpleOrderedMap();\n        \n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n        \n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        \n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        \n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    \n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false); \n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0); \n        Integer maxResultsForSuggest = params.getInt(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST);\n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n        \n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n          \n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q,\n            extendedResults, collate, isCorrectlySpelled);\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, suggestions, spellChecker.isSuggestionsMayOverlap());\n        }\n        NamedList response = new SimpleOrderedMap();\n        response.add(\"suggestions\", suggestions);\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8e65acce892eede973379cb2fb3b90ea49a4a5ed","date":1409839025,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    \n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false); \n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0); \n        Integer maxResultsForSuggest = params.getInt(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST);\n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n        \n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n          \n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n        \n        NamedList response = new SimpleOrderedMap();        \n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n        \n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }        \n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n        \n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    \n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false); \n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0); \n        Integer maxResultsForSuggest = params.getInt(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST);\n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n        \n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n          \n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n        \n        NamedList response = new SimpleOrderedMap();\n        \n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n        \n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        \n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        \n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","bugFix":["343d2d9477b299075fa3a19a46e654b6c3bf552b","541f6605a29362fa8a42f33b69069e7da5178034"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90","date":1443533495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        Integer maxResultsForSuggest = params.getInt(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST);\n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    \n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false); \n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0); \n        Integer maxResultsForSuggest = params.getInt(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST);\n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n        \n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n          \n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n        \n        NamedList response = new SimpleOrderedMap();        \n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n        \n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }        \n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n        \n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f6eb2e42e0de57b9d737aa322902b2d3029149","date":1450381224,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        Integer maxResultsForSuggest = params.getInt(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST);\n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"862753d1e2f4853f389dcb115747661e7bc0e384","date":1485438193,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        response.add(\"suggestions\", toNamedList(shardRequest, spellingResult, q, extendedResults));\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        response.add(\"suggestions\", toNamedList(shardRequest, spellingResult, q, extendedResults));\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"374570062523b2011ca513a2276525ff3ddf222d","date":1494268002,"type":3,"author":"jdyer1","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        response.add(\"suggestions\", toNamedList(shardRequest, spellingResult, q, extendedResults));\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        response.add(\"suggestions\", toNamedList(shardRequest, spellingResult, q, extendedResults));\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Number hitsLong = (Number) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsLong == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsLong.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","bugFix":["541f6605a29362fa8a42f33b69069e7da5178034"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Number hitsLong = (Number) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsLong == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsLong.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Number hitsLong = (Number) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsLong == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsLong.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Integer hitsInteger = (Integer) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsInteger == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsInteger.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Number hitsLong = (Number) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsLong == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsLong.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList response = new SimpleOrderedMap();\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    boolean shardRequest = \"true\".equals(params.get(ShardParams.IS_SHARD));\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR, DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS, false);\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        float accuracy = params.getFloat(SPELLCHECK_ACCURACY, Float.MIN_VALUE);\n        int alternativeTermCount = params.getInt(SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT, 0);\n        //If specified, this can be a discrete # of results, or a percentage of fq results.\n        Integer maxResultsForSuggest = maxResultsForSuggest(rb);\n        \n        ModifiableSolrParams customParams = new ModifiableSolrParams();\n        for (String checkerName : getDictionaryNames(params)) {\n          customParams.add(getCustomParams(checkerName, params));\n        }\n\n        Number hitsLong = (Number) rb.rsp.getToLog().get(\"hits\");\n        long hits = 0;\n        if (hitsLong == null) {\n          hits = rb.getNumberDocumentsFound();\n        } else {\n          hits = hitsLong.longValue();\n        }\n        \n        SpellingResult spellingResult = null;\n        if (maxResultsForSuggest == null || hits <= maxResultsForSuggest) {\n          SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;\n          if (onlyMorePopular) {\n            suggestMode = SuggestMode.SUGGEST_MORE_POPULAR;\n          } else if (alternativeTermCount > 0) {\n            suggestMode = SuggestMode.SUGGEST_ALWAYS;\n          }\n\n          IndexReader reader = rb.req.getSearcher().getIndexReader();\n          SpellingOptions options = new SpellingOptions(tokens, reader, count,\n              alternativeTermCount, suggestMode, extendedResults, accuracy,\n              customParams);\n          spellingResult = spellChecker.getSuggestions(options);\n        } else {\n          spellingResult = new SpellingResult();\n        }\n        boolean isCorrectlySpelled = hits > (maxResultsForSuggest==null ? 0 : maxResultsForSuggest);\n\n        NamedList response = new SimpleOrderedMap();\n        NamedList suggestions = toNamedList(shardRequest, spellingResult, q, extendedResults);\n        response.add(\"suggestions\", suggestions);\n\n        if (extendedResults) {\n          response.add(\"correctlySpelled\", isCorrectlySpelled);\n        }\n        if (collate) {\n          addCollationsToResponse(params, spellingResult, rb, q, response, spellChecker.isSuggestionsMayOverlap());\n        }\n        if (shardRequest) {\n          addOriginalTermsToResponse(response, tokens);\n        }\n\n        rb.rsp.add(\"spellcheck\", response);\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionaries do not exist: \" + getDictionaryNameAsSingleString(getDictionaryNames(params)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51f6eb2e42e0de57b9d737aa322902b2d3029149":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"862753d1e2f4853f389dcb115747661e7bc0e384":["51f6eb2e42e0de57b9d737aa322902b2d3029149"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["541f6605a29362fa8a42f33b69069e7da5178034"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["51f6eb2e42e0de57b9d737aa322902b2d3029149","862753d1e2f4853f389dcb115747661e7bc0e384"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["55b8276f00bacdbaefed6689ef19a4d3a309bf10"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["374570062523b2011ca513a2276525ff3ddf222d"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["374570062523b2011ca513a2276525ff3ddf222d","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["28288370235ed02234a64753cdbf0c6ec096304a"],"541f6605a29362fa8a42f33b69069e7da5178034":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5"],"374570062523b2011ca513a2276525ff3ddf222d":["862753d1e2f4853f389dcb115747661e7bc0e384"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["862753d1e2f4853f389dcb115747661e7bc0e384","374570062523b2011ca513a2276525ff3ddf222d"],"8e65acce892eede973379cb2fb3b90ea49a4a5ed":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5","541f6605a29362fa8a42f33b69069e7da5178034"],"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55b8276f00bacdbaefed6689ef19a4d3a309bf10":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"]},"commit2Childs":{"51f6eb2e42e0de57b9d737aa322902b2d3029149":["862753d1e2f4853f389dcb115747661e7bc0e384","598b5d23aa7c9732bf473c21a9cd309c44599394"],"862753d1e2f4853f389dcb115747661e7bc0e384":["598b5d23aa7c9732bf473c21a9cd309c44599394","374570062523b2011ca513a2276525ff3ddf222d","e9017cf144952056066919f1ebc7897ff9bd71b1"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["55b8276f00bacdbaefed6689ef19a4d3a309bf10"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"c26f00b574427b55127e869b935845554afde1fa":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["51f6eb2e42e0de57b9d737aa322902b2d3029149"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"541f6605a29362fa8a42f33b69069e7da5178034":["0ad9ec888e587ca9a3279368245cdf00aabdc108","3599646b4d4c346cf74d334813488b8b337b5bf5"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"374570062523b2011ca513a2276525ff3ddf222d":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"8e65acce892eede973379cb2fb3b90ea49a4a5ed":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5":["541f6605a29362fa8a42f33b69069e7da5178034","3599646b4d4c346cf74d334813488b8b337b5bf5"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"55b8276f00bacdbaefed6689ef19a4d3a309bf10":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","3599646b4d4c346cf74d334813488b8b337b5bf5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}