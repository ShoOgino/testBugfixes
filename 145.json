{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","sourceNew":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","sourceOld":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f7cc7c185412da66c1d0089d9e75da01329a00","date":1353364851,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","sourceNew":"      public void seekExact(long ord) throws IOException {\n        assert ord >= 0 && ord <= numOrd;\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","sourceOld":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.SortedDocValuesImpl.SortedDocValuesEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","sourceNew":"      @Override\n      public void seekExact(long ord) throws IOException {\n        assert ord >= 0 && ord < numOrd;\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","sourceOld":"      public void seekExact(long ord) throws IOException {\n        assert ord >= 0 && ord <= numOrd;\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","sourceNew":"      @Override\n      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","sourceOld":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","sourceNew":null,"sourceOld":"      @Override\n      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["29f7cc7c185412da66c1d0089d9e75da01329a00"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["29f7cc7c185412da66c1d0089d9e75da01329a00","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}