{"path":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testMultipleSorts().mjava","commits":[{"id":"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","date":1532111887,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testMultipleSorts().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultipleSorts() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    int numDocs = 1000;\n\n    //10 unique values\n    String[] str_vals = new String[10];\n    for (int i=0; i<str_vals.length; i++) {\n      str_vals[i] = TestUtil.randomSimpleString(random(), 10);\n    }\n\n    float[] float_vals = new float[10];\n    float_vals[0] = 0.0f;\n    float_vals[1] = +0.0f;\n    float_vals[2] = -0.0f;\n    float_vals[3] = +0.00001f;\n    float_vals[4] = +0.000011f;\n    float_vals[5] = Float.MAX_VALUE;\n    float_vals[6] = Float.MIN_VALUE;\n    float_vals[7] = 1/3f; //0.33333334\n    float_vals[8] = 0.33333333f;\n    float_vals[9] = random().nextFloat();\n\n    for (int i = 0; i < numDocs; i++) {\n      int number = TestUtil.nextInt(random(), 0, 9);\n      assertU(adoc(\"id\", String.valueOf(i),\n          \"floatdv\", String.valueOf(number),\n          \"intdv\", String.valueOf(number),\n          \"stringdv\", String.valueOf(str_vals[number]),\n          \"longdv\", String.valueOf(number),\n          \"doubledv\", String.valueOf(number),\n          \"datedv\", randomSkewedDate(),\n          \"booleandv\", String.valueOf(random().nextBoolean()),\n          \"field1_s_dv\", String.valueOf(str_vals[number]),\n          \"field2_i_p\", String.valueOf(number),\n          \"field3_l_p\", String.valueOf(number)));\n      if (numDocs % 3000 ==0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    validateSort(numDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3550ab475f4e1badfcc93dd6c0c56462e85a8798","date":1532373719,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testMultipleSorts().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testMultipleSorts().mjava","sourceNew":"  @Test\n  public void testMultipleSorts() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    int numDocs = 1000;\n\n    //10 unique values\n    String[] str_vals = new String[10];\n    for (int i=0; i<str_vals.length; i++) {\n      str_vals[i] = TestUtil.randomSimpleString(random(), 10);\n    }\n\n    float[] float_vals = new float[10];\n    float_vals[0] = 0.0f;\n    float_vals[1] = +0.0f;\n    float_vals[2] = -0.0f;\n    float_vals[3] = +0.00001f;\n    float_vals[4] = +0.000011f;\n    float_vals[5] = Float.MAX_VALUE;\n    float_vals[6] = Float.MIN_VALUE;\n    float_vals[7] = 1/3f; //0.33333334\n    float_vals[8] = 0.33333333f;\n    float_vals[9] = random().nextFloat();\n\n    for (int i = 0; i < numDocs; i++) {\n      int number = TestUtil.nextInt(random(), 0, 9);\n      assertU(adoc(\"id\", String.valueOf(i),\n          \"floatdv\", String.valueOf(number),\n          \"intdv\", String.valueOf(number),\n          \"stringdv\", String.valueOf(str_vals[number]),\n          \"longdv\", String.valueOf(number),\n          \"doubledv\", String.valueOf(number),\n          \"datedv\", randomSkewedDate(),\n          \"booleandv\", String.valueOf(random().nextBoolean()),\n          \"field1_s_dv\", String.valueOf(str_vals[number]),\n          \"field2_i_p\", String.valueOf(number),\n          \"field3_l_p\", String.valueOf(number)));\n      if (numDocs % 300 ==0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    validateSort(numDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleSorts() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    int numDocs = 1000;\n\n    //10 unique values\n    String[] str_vals = new String[10];\n    for (int i=0; i<str_vals.length; i++) {\n      str_vals[i] = TestUtil.randomSimpleString(random(), 10);\n    }\n\n    float[] float_vals = new float[10];\n    float_vals[0] = 0.0f;\n    float_vals[1] = +0.0f;\n    float_vals[2] = -0.0f;\n    float_vals[3] = +0.00001f;\n    float_vals[4] = +0.000011f;\n    float_vals[5] = Float.MAX_VALUE;\n    float_vals[6] = Float.MIN_VALUE;\n    float_vals[7] = 1/3f; //0.33333334\n    float_vals[8] = 0.33333333f;\n    float_vals[9] = random().nextFloat();\n\n    for (int i = 0; i < numDocs; i++) {\n      int number = TestUtil.nextInt(random(), 0, 9);\n      assertU(adoc(\"id\", String.valueOf(i),\n          \"floatdv\", String.valueOf(number),\n          \"intdv\", String.valueOf(number),\n          \"stringdv\", String.valueOf(str_vals[number]),\n          \"longdv\", String.valueOf(number),\n          \"doubledv\", String.valueOf(number),\n          \"datedv\", randomSkewedDate(),\n          \"booleandv\", String.valueOf(random().nextBoolean()),\n          \"field1_s_dv\", String.valueOf(str_vals[number]),\n          \"field2_i_p\", String.valueOf(number),\n          \"field3_l_p\", String.valueOf(number)));\n      if (numDocs % 3000 ==0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    validateSort(numDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7eb5b8b79759ebbe90a0605a50c666ba0b83789","date":1535046490,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testMultipleSorts().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testMultipleSorts().mjava","sourceNew":"  @Test\n  public void testMultipleSorts() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    int numDocs = 1000*40;\n\n    //10 unique values\n    String[] str_vals = new String[10];\n    for (int i=0; i<str_vals.length; i++) {\n      str_vals[i] = TestUtil.randomSimpleString(random(), 10);\n    }\n\n    float[] float_vals = new float[10];\n    float_vals[0] = 0.0f;\n    float_vals[1] = +0.0f;\n    float_vals[2] = -0.0f;\n    float_vals[3] = +0.00001f;\n    float_vals[4] = +0.000011f;\n    float_vals[5] = Float.MAX_VALUE;\n    float_vals[6] = Float.MIN_VALUE;\n    float_vals[7] = 1/3f; //0.33333334\n    float_vals[8] = 0.33333333f;\n    float_vals[9] = random().nextFloat();\n\n    for (int i = 0; i < numDocs; i++) {\n      int number = TestUtil.nextInt(random(), 0, 9);\n      assertU(adoc(\"id\", String.valueOf(i),\n          \"floatdv\", String.valueOf(number),\n          \"intdv\", String.valueOf(number),\n          \"stringdv\", String.valueOf(str_vals[number]),\n          \"longdv\", String.valueOf(number),\n          \"doubledv\", String.valueOf(number),\n          \"datedv\", randomSkewedDate(),\n          \"booleandv\", String.valueOf(random().nextBoolean()),\n          \"field1_s_dv\", String.valueOf(str_vals[number]),\n          \"field2_i_p\", String.valueOf(number),\n          \"field3_l_p\", String.valueOf(number)));\n      if (numDocs % 300 ==0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    validateSort(numDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleSorts() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    int numDocs = 1000;\n\n    //10 unique values\n    String[] str_vals = new String[10];\n    for (int i=0; i<str_vals.length; i++) {\n      str_vals[i] = TestUtil.randomSimpleString(random(), 10);\n    }\n\n    float[] float_vals = new float[10];\n    float_vals[0] = 0.0f;\n    float_vals[1] = +0.0f;\n    float_vals[2] = -0.0f;\n    float_vals[3] = +0.00001f;\n    float_vals[4] = +0.000011f;\n    float_vals[5] = Float.MAX_VALUE;\n    float_vals[6] = Float.MIN_VALUE;\n    float_vals[7] = 1/3f; //0.33333334\n    float_vals[8] = 0.33333333f;\n    float_vals[9] = random().nextFloat();\n\n    for (int i = 0; i < numDocs; i++) {\n      int number = TestUtil.nextInt(random(), 0, 9);\n      assertU(adoc(\"id\", String.valueOf(i),\n          \"floatdv\", String.valueOf(number),\n          \"intdv\", String.valueOf(number),\n          \"stringdv\", String.valueOf(str_vals[number]),\n          \"longdv\", String.valueOf(number),\n          \"doubledv\", String.valueOf(number),\n          \"datedv\", randomSkewedDate(),\n          \"booleandv\", String.valueOf(random().nextBoolean()),\n          \"field1_s_dv\", String.valueOf(str_vals[number]),\n          \"field2_i_p\", String.valueOf(number),\n          \"field3_l_p\", String.valueOf(number)));\n      if (numDocs % 300 ==0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    validateSort(numDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f571cc9c02e9680ae753e2fa28815957be73142","date":1535097755,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testMultipleSorts().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testMultipleSorts().mjava","sourceNew":"  @Test\n  public void testMultipleSorts() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    int numDocs = 1000;\n\n    //10 unique values\n    String[] str_vals = new String[10];\n    for (int i=0; i<str_vals.length; i++) {\n      str_vals[i] = TestUtil.randomSimpleString(random(), 10);\n    }\n\n    float[] float_vals = new float[10];\n    float_vals[0] = 0.0f;\n    float_vals[1] = +0.0f;\n    float_vals[2] = -0.0f;\n    float_vals[3] = +0.00001f;\n    float_vals[4] = +0.000011f;\n    float_vals[5] = Float.MAX_VALUE;\n    float_vals[6] = Float.MIN_VALUE;\n    float_vals[7] = 1/3f; //0.33333334\n    float_vals[8] = 0.33333333f;\n    float_vals[9] = random().nextFloat();\n\n    for (int i = 0; i < numDocs; i++) {\n      int number = TestUtil.nextInt(random(), 0, 9);\n      assertU(adoc(\"id\", String.valueOf(i),\n          \"floatdv\", String.valueOf(number),\n          \"intdv\", String.valueOf(number),\n          \"stringdv\", String.valueOf(str_vals[number]),\n          \"longdv\", String.valueOf(number),\n          \"doubledv\", String.valueOf(number),\n          \"datedv\", randomSkewedDate(),\n          \"booleandv\", String.valueOf(random().nextBoolean()),\n          \"field1_s_dv\", String.valueOf(str_vals[number]),\n          \"field2_i_p\", String.valueOf(number),\n          \"field3_l_p\", String.valueOf(number)));\n      if (numDocs % 300 ==0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    validateSort(numDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleSorts() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    int numDocs = 1000*40;\n\n    //10 unique values\n    String[] str_vals = new String[10];\n    for (int i=0; i<str_vals.length; i++) {\n      str_vals[i] = TestUtil.randomSimpleString(random(), 10);\n    }\n\n    float[] float_vals = new float[10];\n    float_vals[0] = 0.0f;\n    float_vals[1] = +0.0f;\n    float_vals[2] = -0.0f;\n    float_vals[3] = +0.00001f;\n    float_vals[4] = +0.000011f;\n    float_vals[5] = Float.MAX_VALUE;\n    float_vals[6] = Float.MIN_VALUE;\n    float_vals[7] = 1/3f; //0.33333334\n    float_vals[8] = 0.33333333f;\n    float_vals[9] = random().nextFloat();\n\n    for (int i = 0; i < numDocs; i++) {\n      int number = TestUtil.nextInt(random(), 0, 9);\n      assertU(adoc(\"id\", String.valueOf(i),\n          \"floatdv\", String.valueOf(number),\n          \"intdv\", String.valueOf(number),\n          \"stringdv\", String.valueOf(str_vals[number]),\n          \"longdv\", String.valueOf(number),\n          \"doubledv\", String.valueOf(number),\n          \"datedv\", randomSkewedDate(),\n          \"booleandv\", String.valueOf(random().nextBoolean()),\n          \"field1_s_dv\", String.valueOf(str_vals[number]),\n          \"field2_i_p\", String.valueOf(number),\n          \"field3_l_p\", String.valueOf(number)));\n      if (numDocs % 300 ==0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    validateSort(numDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7eb5b8b79759ebbe90a0605a50c666ba0b83789":["3550ab475f4e1badfcc93dd6c0c56462e85a8798"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3550ab475f4e1badfcc93dd6c0c56462e85a8798":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"0f571cc9c02e9680ae753e2fa28815957be73142":["a7eb5b8b79759ebbe90a0605a50c666ba0b83789"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f571cc9c02e9680ae753e2fa28815957be73142"]},"commit2Childs":{"a7eb5b8b79759ebbe90a0605a50c666ba0b83789":["0f571cc9c02e9680ae753e2fa28815957be73142"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["3550ab475f4e1badfcc93dd6c0c56462e85a8798"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"3550ab475f4e1badfcc93dd6c0c56462e85a8798":["a7eb5b8b79759ebbe90a0605a50c666ba0b83789"],"0f571cc9c02e9680ae753e2fa28815957be73142":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}