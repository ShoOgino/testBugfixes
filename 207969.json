{"path":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","pathOld":"/dev/null","sourceNew":"  /** Setting to turn on usage of a compound file. When on, multiple files\n   *  for each segment are merged into a single file once the segment creation\n   *  is finished. This is done regardless of what directory is in use.\n   */\n  public boolean getUseCompoundFile() {\n    return useCompoundFile;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5c50fb5a9642f4ed360182284e90e872b6c9e61","date":1092250748,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","sourceNew":"  /** Get the current setting of whether to use the compound file format.\n   *  Note that this just returns the value you set with setUseCompoundFile(boolean)\n   *  or the default. You cannot use this to query the status of an existing index.\n   *  @see #setUseCompoundFile(boolean)\n   */\n  public boolean getUseCompoundFile() {\n    return useCompoundFile;\n  }\n\n","sourceOld":"  /** Setting to turn on usage of a compound file. When on, multiple files\n   *  for each segment are merged into a single file once the segment creation\n   *  is finished. This is done regardless of what directory is in use.\n   */\n  public boolean getUseCompoundFile() {\n    return useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","sourceNew":"  /** Get the current setting of whether to use the compound file format.\n   *  Note that this just returns the value you set with setUseCompoundFile(boolean)\n   *  or the default. You cannot use this to query the status of an existing index.\n   *  @see #setUseCompoundFile(boolean)\n   */\n  public boolean getUseCompoundFile() {\n    ensureOpen();\n    return useCompoundFile;\n  }\n\n","sourceOld":"  /** Get the current setting of whether to use the compound file format.\n   *  Note that this just returns the value you set with setUseCompoundFile(boolean)\n   *  or the default. You cannot use this to query the status of an existing index.\n   *  @see #setUseCompoundFile(boolean)\n   */\n  public boolean getUseCompoundFile() {\n    return useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","sourceNew":"  /** <p>Get the current setting of whether newly flushed\n   *  segments will use the compound file format.  Note that\n   *  this just returns the value previously set with\n   *  setUseCompoundFile(boolean), or the default value\n   *  (true).  You cannot use this to query the status of\n   *  previously flushed segments.</p>\n   *\n   *  <p>Note that this method is a convenience method: it\n   *  just calls mergePolicy.getUseCompoundFile as long as\n   *  mergePolicy is an instance of {@link LogMergePolicy}.\n   *  Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   *  @see #setUseCompoundFile(boolean)\n   */\n  public boolean getUseCompoundFile() {\n    return getLogMergePolicy().getUseCompoundFile();\n  }\n\n","sourceOld":"  /** Get the current setting of whether to use the compound file format.\n   *  Note that this just returns the value you set with setUseCompoundFile(boolean)\n   *  or the default. You cannot use this to query the status of an existing index.\n   *  @see #setUseCompoundFile(boolean)\n   */\n  public boolean getUseCompoundFile() {\n    ensureOpen();\n    return useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","sourceNew":"  /** <p>Get the current setting of whether newly flushed\n   *  segments will use the compound file format.  Note that\n   *  this just returns the value previously set with\n   *  setUseCompoundFile(boolean), or the default value\n   *  (true).  You cannot use this to query the status of\n   *  previously flushed segments.</p>\n   *\n   *  <p>Note that this method is a convenience method: it\n   *  just calls mergePolicy.getUseCompoundFile as long as\n   *  mergePolicy is an instance of {@link LogMergePolicy}.\n   *  Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   *  @see #setUseCompoundFile(boolean)\n   *  @deprecated use {@link LogMergePolicy#getUseCompoundDocStore()} and\n   *  {@link LogMergePolicy#getUseCompoundFile()} directly.\n   */\n  public boolean getUseCompoundFile() {\n    return getLogMergePolicy().getUseCompoundFile();\n  }\n\n","sourceOld":"  /** <p>Get the current setting of whether newly flushed\n   *  segments will use the compound file format.  Note that\n   *  this just returns the value previously set with\n   *  setUseCompoundFile(boolean), or the default value\n   *  (true).  You cannot use this to query the status of\n   *  previously flushed segments.</p>\n   *\n   *  <p>Note that this method is a convenience method: it\n   *  just calls mergePolicy.getUseCompoundFile as long as\n   *  mergePolicy is an instance of {@link LogMergePolicy}.\n   *  Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   *  @see #setUseCompoundFile(boolean)\n   */\n  public boolean getUseCompoundFile() {\n    return getLogMergePolicy().getUseCompoundFile();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","sourceNew":"  /** <p>Get the current setting of whether newly flushed\n   *  segments will use the compound file format.  Note that\n   *  this just returns the value previously set with\n   *  setUseCompoundFile(boolean), or the default value\n   *  (true).  You cannot use this to query the status of\n   *  previously flushed segments.</p>\n   *\n   *  <p>Note that this method is a convenience method: it\n   *  just calls mergePolicy.getUseCompoundFile as long as\n   *  mergePolicy is an instance of {@link LogMergePolicy}.\n   *  Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   *  @see #setUseCompoundFile(boolean)\n   */\n  public boolean getUseCompoundFile() {\n    return getLogMergePolicy().getUseCompoundFile();\n  }\n\n","sourceOld":"  /** <p>Get the current setting of whether newly flushed\n   *  segments will use the compound file format.  Note that\n   *  this just returns the value previously set with\n   *  setUseCompoundFile(boolean), or the default value\n   *  (true).  You cannot use this to query the status of\n   *  previously flushed segments.</p>\n   *\n   *  <p>Note that this method is a convenience method: it\n   *  just calls mergePolicy.getUseCompoundFile as long as\n   *  mergePolicy is an instance of {@link LogMergePolicy}.\n   *  Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   *  @see #setUseCompoundFile(boolean)\n   *  @deprecated use {@link LogMergePolicy#getUseCompoundDocStore()} and\n   *  {@link LogMergePolicy#getUseCompoundFile()} directly.\n   */\n  public boolean getUseCompoundFile() {\n    return getLogMergePolicy().getUseCompoundFile();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","sourceNew":"  /** <p>Get the current setting of whether newly flushed\n   *  segments will use the compound file format.  Note that\n   *  this just returns the value previously set with\n   *  setUseCompoundFile(boolean), or the default value\n   *  (true).  You cannot use this to query the status of\n   *  previously flushed segments.</p>\n   *\n   *  <p>Note that this method is a convenience method: it\n   *  just calls mergePolicy.getUseCompoundFile as long as\n   *  mergePolicy is an instance of {@link LogMergePolicy}.\n   *  Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   *  @see #setUseCompoundFile(boolean)\n   *  @deprecated use {@link LogMergePolicy#getUseCompoundDocStore()} and\n   *  {@link LogMergePolicy#getUseCompoundFile()} directly.\n   */\n  public boolean getUseCompoundFile() {\n    return getLogMergePolicy().getUseCompoundFile();\n  }\n\n","sourceOld":"  /** <p>Get the current setting of whether newly flushed\n   *  segments will use the compound file format.  Note that\n   *  this just returns the value previously set with\n   *  setUseCompoundFile(boolean), or the default value\n   *  (true).  You cannot use this to query the status of\n   *  previously flushed segments.</p>\n   *\n   *  <p>Note that this method is a convenience method: it\n   *  just calls mergePolicy.getUseCompoundFile as long as\n   *  mergePolicy is an instance of {@link LogMergePolicy}.\n   *  Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   *  @see #setUseCompoundFile(boolean)\n   */\n  public boolean getUseCompoundFile() {\n    return getLogMergePolicy().getUseCompoundFile();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getUseCompoundFile().mjava","sourceNew":"  /** <p>Get the current setting of whether newly flushed\n   *  segments will use the compound file format.  Note that\n   *  this just returns the value previously set with\n   *  setUseCompoundFile(boolean), or the default value\n   *  (true).  You cannot use this to query the status of\n   *  previously flushed segments.</p>\n   *\n   *  <p>Note that this method is a convenience method: it\n   *  just calls mergePolicy.getUseCompoundFile as long as\n   *  mergePolicy is an instance of {@link LogMergePolicy}.\n   *  Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   *  @see #setUseCompoundFile(boolean)\n   *  @deprecated use {@link LogMergePolicy#getUseCompoundDocStore()} and\n   *  {@link LogMergePolicy#getUseCompoundFile()} directly.\n   */\n  public boolean getUseCompoundFile() {\n    return getLogMergePolicy().getUseCompoundFile();\n  }\n\n","sourceOld":"  /** <p>Get the current setting of whether newly flushed\n   *  segments will use the compound file format.  Note that\n   *  this just returns the value previously set with\n   *  setUseCompoundFile(boolean), or the default value\n   *  (true).  You cannot use this to query the status of\n   *  previously flushed segments.</p>\n   *\n   *  <p>Note that this method is a convenience method: it\n   *  just calls mergePolicy.getUseCompoundFile as long as\n   *  mergePolicy is an instance of {@link LogMergePolicy}.\n   *  Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   *  @see #setUseCompoundFile(boolean)\n   *  @deprecated use {@link LogMergePolicy#getUseCompoundDocStore()} and\n   *  {@link LogMergePolicy#getUseCompoundFile()} directly.\n   */\n  public boolean getUseCompoundFile() {\n    return getLogMergePolicy().getUseCompoundFile();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["e5c50fb5a9642f4ed360182284e90e872b6c9e61"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"e5c50fb5a9642f4ed360182284e90e872b6c9e61":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"e5c50fb5a9642f4ed360182284e90e872b6c9e61":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["e5c50fb5a9642f4ed360182284e90e872b6c9e61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}