{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testIterator().mjava","commits":[{"id":"e2169aa913b569633d459103a3f33f602568a0b9","date":1254758477,"type":0,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testIterator().mjava","pathOld":"/dev/null","sourceNew":"  public void testIterator() throws IOException {\n\n    WhitespaceTokenizer wst = new WhitespaceTokenizer(new StringReader(\"one two three four five\"));\n    ShingleMatrixFilter smf = new ShingleMatrixFilter(wst, 2, 2, '_', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    int i;\n    for(i=0; smf.incrementToken(); i++);\n    assertEquals(4, i);\n\n    // call next once more. this should return false again rather than throwing an exception (LUCENE-1939)\n    assertFalse(smf.incrementToken());\n\n    System.currentTimeMillis();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testIterator().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testIterator().mjava","sourceNew":"  public void testIterator() throws IOException {\n\n    WhitespaceTokenizer wst = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(\"one two three four five\"));\n    ShingleMatrixFilter smf = new ShingleMatrixFilter(wst, 2, 2, '_', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    int i;\n    for(i=0; smf.incrementToken(); i++);\n    assertEquals(4, i);\n\n    // call next once more. this should return false again rather than throwing an exception (LUCENE-1939)\n    assertFalse(smf.incrementToken());\n\n    System.currentTimeMillis();\n\n  }\n\n","sourceOld":"  public void testIterator() throws IOException {\n\n    WhitespaceTokenizer wst = new WhitespaceTokenizer(new StringReader(\"one two three four five\"));\n    ShingleMatrixFilter smf = new ShingleMatrixFilter(wst, 2, 2, '_', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    int i;\n    for(i=0; smf.incrementToken(); i++);\n    assertEquals(4, i);\n\n    // call next once more. this should return false again rather than throwing an exception (LUCENE-1939)\n    assertFalse(smf.incrementToken());\n\n    System.currentTimeMillis();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testIterator().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testIterator().mjava","sourceNew":"  public void testIterator() throws IOException {\n\n    WhitespaceTokenizer wst = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"one two three four five\"));\n    ShingleMatrixFilter smf = new ShingleMatrixFilter(wst, 2, 2, '_', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    int i;\n    for(i=0; smf.incrementToken(); i++) {}\n    assertEquals(4, i);\n\n    // call next once more. this should return false again rather than throwing an exception (LUCENE-1939)\n    assertFalse(smf.incrementToken());\n\n    System.currentTimeMillis();\n\n  }\n\n","sourceOld":"  public void testIterator() throws IOException {\n\n    WhitespaceTokenizer wst = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(\"one two three four five\"));\n    ShingleMatrixFilter smf = new ShingleMatrixFilter(wst, 2, 2, '_', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    int i;\n    for(i=0; smf.incrementToken(); i++);\n    assertEquals(4, i);\n\n    // call next once more. this should return false again rather than throwing an exception (LUCENE-1939)\n    assertFalse(smf.incrementToken());\n\n    System.currentTimeMillis();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testIterator().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testIterator().mjava","sourceNew":"  public void testIterator() throws IOException {\n\n    WhitespaceTokenizer wst = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"one two three four five\"));\n    ShingleMatrixFilter smf = new ShingleMatrixFilter(wst, 2, 2, '_', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    int i;\n    for(i=0; smf.incrementToken(); i++) {}\n    assertEquals(4, i);\n\n    // call next once more. this should return false again rather than throwing an exception (LUCENE-1939)\n    assertFalse(smf.incrementToken());\n\n    System.currentTimeMillis();\n\n  }\n\n","sourceOld":"  public void testIterator() throws IOException {\n\n    WhitespaceTokenizer wst = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"one two three four five\"));\n    ShingleMatrixFilter smf = new ShingleMatrixFilter(wst, 2, 2, '_', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    int i;\n    for(i=0; smf.incrementToken(); i++) {}\n    assertEquals(4, i);\n\n    // call next once more. this should return false again rather than throwing an exception (LUCENE-1939)\n    assertFalse(smf.incrementToken());\n\n    System.currentTimeMillis();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2169aa913b569633d459103a3f33f602568a0b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["e2169aa913b569633d459103a3f33f602568a0b9"]},"commit2Childs":{"e2169aa913b569633d459103a3f33f602568a0b9":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2169aa913b569633d459103a3f33f602568a0b9"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}