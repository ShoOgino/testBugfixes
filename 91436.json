{"path":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","commits":[{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build().mjava","sourceNew":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index.index, new SimpleAnalyzer(), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build() {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index, new SimpleAnalyzer(), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= rand.nextInt();\n                if (maxR < r) {\n                    maxR = r;\n                }\n                if (r < minR) {\n                    minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","sourceNew":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index.index, new SimpleAnalyzer(Version.LUCENE_CURRENT), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index.index, new SimpleAnalyzer(), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","sourceNew":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index.index, new SimpleAnalyzer(TEST_VERSION_CURRENT), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index.index, new SimpleAnalyzer(Version.LUCENE_CURRENT), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","sourceNew":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n          IndexWriter writer = new IndexWriter(index.index, new IndexWriterConfig(\n              TEST_VERSION_CURRENT).setAnalyzer(\n                  new SimpleAnalyzer(TEST_VERSION_CURRENT))\n                  .setOpenMode(OpenMode.CREATE));\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index.index, new SimpleAnalyzer(TEST_VERSION_CURRENT), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","sourceNew":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index.index, new SimpleAnalyzer(TEST_VERSION_CURRENT), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n          IndexWriter writer = new IndexWriter(index.index, new IndexWriterConfig(\n              TEST_VERSION_CURRENT).setAnalyzer(\n                  new SimpleAnalyzer(TEST_VERSION_CURRENT))\n                  .setOpenMode(OpenMode.CREATE));\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","sourceNew":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n          IndexWriter writer = new IndexWriter(index.index, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n                  .setOpenMode(OpenMode.CREATE));\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index.index, new SimpleAnalyzer(TEST_VERSION_CURRENT), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","sourceNew":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n          IndexWriter writer = new IndexWriter(index.index, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n                  .setOpenMode(OpenMode.CREATE));\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n          IndexWriter writer = new IndexWriter(index.index, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n                  .setOpenMode(OpenMode.CREATE));\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"b33dc4652df2747e38f9782fde82bd426b77c538":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["b33dc4652df2747e38f9782fde82bd426b77c538"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b33dc4652df2747e38f9782fde82bd426b77c538":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b33dc4652df2747e38f9782fde82bd426b77c538"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}