{"path":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Set[SegmentInfo]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  private boolean isOptimized(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    final int numSegments = infos.size();\n    int numToOptimize = 0;\n    SegmentInfo optimizeInfo = null;\n    for(int i=0;i<numSegments && numToOptimize <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      if (segmentsToOptimize.contains(info)) {\n        numToOptimize++;\n        optimizeInfo = info;\n      }\n    }\n\n    return numToOptimize <= maxNumSegments &&\n      (numToOptimize != 1 || isOptimized(optimizeInfo));\n  }\n\n","sourceOld":"  private boolean isOptimized(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    final int numSegments = infos.size();\n    int numToOptimize = 0;\n    SegmentInfo optimizeInfo = null;\n    for(int i=0;i<numSegments && numToOptimize <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      if (segmentsToOptimize.contains(info)) {\n        numToOptimize++;\n        optimizeInfo = info;\n      }\n    }\n\n    return numToOptimize <= maxNumSegments &&\n      (numToOptimize != 1 || isOptimized(optimizeInfo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8723a3379c08ae0b4ba0cf4f246306f86ad8362d","date":1287582680,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  protected boolean isOptimized(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    final int numSegments = infos.size();\n    int numToOptimize = 0;\n    SegmentInfo optimizeInfo = null;\n    for(int i=0;i<numSegments && numToOptimize <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      if (segmentsToOptimize.contains(info)) {\n        numToOptimize++;\n        optimizeInfo = info;\n      }\n    }\n\n    return numToOptimize <= maxNumSegments &&\n      (numToOptimize != 1 || isOptimized(optimizeInfo));\n  }\n\n","sourceOld":"  private boolean isOptimized(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    final int numSegments = infos.size();\n    int numToOptimize = 0;\n    SegmentInfo optimizeInfo = null;\n    for(int i=0;i<numSegments && numToOptimize <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      if (segmentsToOptimize.contains(info)) {\n        numToOptimize++;\n        optimizeInfo = info;\n      }\n    }\n\n    return numToOptimize <= maxNumSegments &&\n      (numToOptimize != 1 || isOptimized(optimizeInfo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  protected boolean isOptimized(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    final int numSegments = infos.size();\n    int numToOptimize = 0;\n    SegmentInfo optimizeInfo = null;\n    for(int i=0;i<numSegments && numToOptimize <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      if (segmentsToOptimize.contains(info)) {\n        numToOptimize++;\n        optimizeInfo = info;\n      }\n    }\n\n    return numToOptimize <= maxNumSegments &&\n      (numToOptimize != 1 || isOptimized(optimizeInfo));\n  }\n\n","sourceOld":"  private boolean isOptimized(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    final int numSegments = infos.size();\n    int numToOptimize = 0;\n    SegmentInfo optimizeInfo = null;\n    for(int i=0;i<numSegments && numToOptimize <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      if (segmentsToOptimize.contains(info)) {\n        numToOptimize++;\n        optimizeInfo = info;\n      }\n    }\n\n    return numToOptimize <= maxNumSegments &&\n      (numToOptimize != 1 || isOptimized(optimizeInfo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  protected boolean isOptimized(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    final int numSegments = infos.size();\n    int numToOptimize = 0;\n    SegmentInfo optimizeInfo = null;\n    for(int i=0;i<numSegments && numToOptimize <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      if (segmentsToOptimize.contains(info)) {\n        numToOptimize++;\n        optimizeInfo = info;\n      }\n    }\n\n    return numToOptimize <= maxNumSegments &&\n      (numToOptimize != 1 || isOptimized(optimizeInfo));\n  }\n\n","sourceOld":"  private boolean isOptimized(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    final int numSegments = infos.size();\n    int numToOptimize = 0;\n    SegmentInfo optimizeInfo = null;\n    for(int i=0;i<numSegments && numToOptimize <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      if (segmentsToOptimize.contains(info)) {\n        numToOptimize++;\n        optimizeInfo = info;\n      }\n    }\n\n    return numToOptimize <= maxNumSegments &&\n      (numToOptimize != 1 || isOptimized(optimizeInfo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  protected boolean isOptimized(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n    final int numSegments = infos.size();\n    int numToOptimize = 0;\n    SegmentInfo optimizeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToOptimize <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToOptimize.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToOptimize++;\n        optimizeInfo = info;\n      }\n    }\n\n    return numToOptimize <= maxNumSegments &&\n      (numToOptimize != 1 || !segmentIsOriginal || isOptimized(optimizeInfo));\n  }\n\n","sourceOld":"  protected boolean isOptimized(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    final int numSegments = infos.size();\n    int numToOptimize = 0;\n    SegmentInfo optimizeInfo = null;\n    for(int i=0;i<numSegments && numToOptimize <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      if (segmentsToOptimize.contains(info)) {\n        numToOptimize++;\n        optimizeInfo = info;\n      }\n    }\n\n    return numToOptimize <= maxNumSegments &&\n      (numToOptimize != 1 || isOptimized(optimizeInfo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  protected boolean isOptimized(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n    final int numSegments = infos.size();\n    int numToOptimize = 0;\n    SegmentInfo optimizeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToOptimize <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToOptimize.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToOptimize++;\n        optimizeInfo = info;\n      }\n    }\n\n    return numToOptimize <= maxNumSegments &&\n      (numToOptimize != 1 || !segmentIsOriginal || isOptimized(optimizeInfo));\n  }\n\n","sourceOld":"  protected boolean isOptimized(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    final int numSegments = infos.size();\n    int numToOptimize = 0;\n    SegmentInfo optimizeInfo = null;\n    for(int i=0;i<numSegments && numToOptimize <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      if (segmentsToOptimize.contains(info)) {\n        numToOptimize++;\n        optimizeInfo = info;\n      }\n    }\n\n    return numToOptimize <= maxNumSegments &&\n      (numToOptimize != 1 || isOptimized(optimizeInfo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["8723a3379c08ae0b4ba0cf4f246306f86ad8362d","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8017ab6544f30f93b106e419e7298173bad77f69":["9454a6510e2db155fb01faa5c049b06ece95fab9","8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"8723a3379c08ae0b4ba0cf4f246306f86ad8362d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8017ab6544f30f93b106e419e7298173bad77f69":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"8723a3379c08ae0b4ba0cf4f246306f86ad8362d":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}