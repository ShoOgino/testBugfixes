{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory(random);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory(random);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(newField(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(newField(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(new Field(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(newField(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(newField(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(newField(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(newField(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(newField(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(newField(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(newField(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(newField(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(newField(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(newField(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    modifier.deleteDocuments(term);\n    modifier.commit();\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(newField(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc\n        .add(newField(\"city\", text[i], Field.Store.YES,\n                       Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      modifier.addDocument(doc);\n    }\n    modifier.optimize();\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c7f8e68717c68517265937c911e1ce9f25750247","132903c28af3aa6f67284b78de91c0f0a99488c2"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"c7f8e68717c68517265937c911e1ce9f25750247":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","60ba444201d2570214b6fcf1d15600dc1a01f548","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}