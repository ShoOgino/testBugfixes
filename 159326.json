{"path":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","83870855d82aba6819217abeff5a40779dbb28b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}