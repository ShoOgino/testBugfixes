{"path":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","commits":[{"id":"d17ffdbce80d3dce181982a9cd16f4f90bc8619a","date":1357583592,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba","date":1393290187,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a","date":1429073859,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            DocTransformer t = factory.create(disp, augmenterParams, req);\n            if(t!=null) {\n              augmenters.addTransformer( t );\n            }\n          }\n          else {\n            //throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown DocTransformer: \"+augmenterName);\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97054ceae268680b440507fbba9c4e80fd86125f","date":1433272560,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            DocTransformer t = factory.create(disp, augmenterParams, req);\n            if(t!=null) {\n              if(!_wantsAllFields) {\n                String[] extra = t.getExtraRequestFields();\n                if(extra!=null) {\n                  for(String f : extra) {\n                    fields.add(f); // also request this field from IndexSearcher\n                  }\n                }\n              }\n              augmenters.addTransformer( t );\n            }\n          }\n          else {\n            //throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown DocTransformer: \"+augmenterName);\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            DocTransformer t = factory.create(disp, augmenterParams, req);\n            if(t!=null) {\n              augmenters.addTransformer( t );\n            }\n          }\n          else {\n            //throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown DocTransformer: \"+augmenterName);\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38ca217ed6d5f3a34fa2c919fcc8e61b5926fc69","date":1435159703,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            DocTransformer t = factory.create(disp, augmenterParams, req);\n            if(t!=null) {\n              if(!_wantsAllFields) {\n                Set<String> extra = t.getExtraRequestFields();\n                if(extra!=null) {\n                  for(String f : extra) {\n                    fields.add(f); // also request this field from IndexSearcher\n                  }\n                }\n              }\n              augmenters.addTransformer( t );\n            }\n          }\n          else {\n            //throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown DocTransformer: \"+augmenterName);\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            DocTransformer t = factory.create(disp, augmenterParams, req);\n            if(t!=null) {\n              if(!_wantsAllFields) {\n                String[] extra = t.getExtraRequestFields();\n                if(extra!=null) {\n                  for(String f : extra) {\n                    fields.add(f); // also request this field from IndexSearcher\n                  }\n                }\n              }\n              augmenters.addTransformer( t );\n            }\n          }\n          else {\n            //throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown DocTransformer: \"+augmenterName);\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439d326bfccd70f331f5368a13cfb0dda9898e04","date":1435303798,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            DocTransformer t = factory.create(disp, augmenterParams, req);\n            if(t!=null) {\n              if(!_wantsAllFields) {\n                String[] extra = t.getExtraRequestFields();\n                if(extra!=null) {\n                  for(String f : extra) {\n                    fields.add(f); // also request this field from IndexSearcher\n                  }\n                }\n              }\n              augmenters.addTransformer( t );\n            }\n          }\n          else {\n            //throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown DocTransformer: \"+augmenterName);\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            DocTransformer t = factory.create(disp, augmenterParams, req);\n            if(t!=null) {\n              if(!_wantsAllFields) {\n                Set<String> extra = t.getExtraRequestFields();\n                if(extra!=null) {\n                  for(String f : extra) {\n                    fields.add(f); // also request this field from IndexSearcher\n                  }\n                }\n              }\n              augmenters.addTransformer( t );\n            }\n          }\n          else {\n            //throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown DocTransformer: \"+augmenterName);\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"051c3069a96e986b8fa0435398a73a922ce85418","date":1447853599,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      StrParser sp = new StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            DocTransformer t = factory.create(disp, augmenterParams, req);\n            if(t!=null) {\n              if(!_wantsAllFields) {\n                String[] extra = t.getExtraRequestFields();\n                if(extra!=null) {\n                  for(String f : extra) {\n                    fields.add(f); // also request this field from IndexSearcher\n                  }\n                }\n              }\n              augmenters.addTransformer( t );\n            }\n          }\n          else {\n            //throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown DocTransformer: \"+augmenterName);\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            DocTransformer t = factory.create(disp, augmenterParams, req);\n            if(t!=null) {\n              if(!_wantsAllFields) {\n                String[] extra = t.getExtraRequestFields();\n                if(extra!=null) {\n                  for(String f : extra) {\n                    fields.add(f); // also request this field from IndexSearcher\n                  }\n                }\n              }\n              augmenters.addTransformer( t );\n            }\n          }\n          else {\n            //throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown DocTransformer: \"+augmenterName);\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a2e3a7d2549a34fb7ec9be55424e41388025336","date":1452801298,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      StrParser sp = new StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          ModifiableSolrParams augmenterParams = new ModifiableSolrParams();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterParams, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterParams.get(\"type\");\n          augmenterParams.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            DocTransformer t = factory.create(disp, augmenterParams, req);\n            if(t!=null) {\n              if(!_wantsAllFields) {\n                String[] extra = t.getExtraRequestFields();\n                if(extra!=null) {\n                  for(String f : extra) {\n                    fields.add(f); // also request this field from IndexSearcher\n                  }\n                }\n              }\n              augmenters.addTransformer( t );\n            }\n          }\n          else {\n            //throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown DocTransformer: \"+augmenterName);\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      StrParser sp = new StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField(field, key, augmenters, false);\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField(field, key, augmenters, false);\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            DocTransformer t = factory.create(disp, augmenterParams, req);\n            if(t!=null) {\n              if(!_wantsAllFields) {\n                String[] extra = t.getExtraRequestFields();\n                if(extra!=null) {\n                  for(String f : extra) {\n                    fields.add(f); // also request this field from IndexSearcher\n                  }\n                }\n              }\n              augmenters.addTransformer( t );\n            }\n          }\n          else {\n            //throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown DocTransformer: \"+augmenterName);\n          }\n          addField(field, disp, augmenters, true);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n          funcStr = sp.val.substring(start, sp.pos);\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          addField(funcStr, key, augmenters, true);\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            addField(field, key, augmenters, false);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bbe4071a9e5fdbe880c93e2adac10a688e43f4ba"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a2e3a7d2549a34fb7ec9be55424e41388025336":["051c3069a96e986b8fa0435398a73a922ce85418"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a","bbe4071a9e5fdbe880c93e2adac10a688e43f4ba"],"439d326bfccd70f331f5368a13cfb0dda9898e04":["38ca217ed6d5f3a34fa2c919fcc8e61b5926fc69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"051c3069a96e986b8fa0435398a73a922ce85418":["439d326bfccd70f331f5368a13cfb0dda9898e04"],"97054ceae268680b440507fbba9c4e80fd86125f":["c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a"],"38ca217ed6d5f3a34fa2c919fcc8e61b5926fc69":["97054ceae268680b440507fbba9c4e80fd86125f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a2e3a7d2549a34fb7ec9be55424e41388025336"]},"commit2Childs":{"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a":["97054ceae268680b440507fbba9c4e80fd86125f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["bbe4071a9e5fdbe880c93e2adac10a688e43f4ba","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"3a2e3a7d2549a34fb7ec9be55424e41388025336":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"439d326bfccd70f331f5368a13cfb0dda9898e04":["051c3069a96e986b8fa0435398a73a922ce85418"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"051c3069a96e986b8fa0435398a73a922ce85418":["3a2e3a7d2549a34fb7ec9be55424e41388025336"],"97054ceae268680b440507fbba9c4e80fd86125f":["38ca217ed6d5f3a34fa2c919fcc8e61b5926fc69"],"38ca217ed6d5f3a34fa2c919fcc8e61b5926fc69":["439d326bfccd70f331f5368a13cfb0dda9898e04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}