{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.RequestReplicationTracker#getAchievedRf().mjava","commits":[{"id":"9d22d0f5940f155267b250876fa797ff69e8e6e7","date":1400540695,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.RequestReplicationTracker#getAchievedRf().mjava","pathOld":"/dev/null","sourceNew":"    // gives the replication factor that was achieved for this request\n    public int getAchievedRf() {\n      // look across all shards to find the minimum achieved replication\n      // factor ... unless the client is using direct updates from CloudSolrServer\n      // there may be multiple shards at play here\n      int achievedRf = 1;\n      if (onLeaderShardId != null) {\n        synchronized (nodeErrorTracker) {\n          for (AtomicInteger nodeErrors : nodeErrorTracker.values()) {\n            if (nodeErrors.get() == 0) \n              ++achievedRf;\n          }\n        }\n      } else {\n        // the node driving this updateRequest is not a leader and so\n        // it only forwards to other leaders, so its local result doesn't count\n        achievedRf = Integer.MAX_VALUE;\n      }\n      \n      // min achieved may come from a request to another leader\n      synchronized (otherLeaderRf) {\n        for (Integer otherRf : otherLeaderRf.values()) {\n          if (otherRf < achievedRf)\n            achievedRf = otherRf;\n        }\n      }\n      \n      return (achievedRf == Integer.MAX_VALUE) ? 1 : achievedRf;\n    }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.RequestReplicationTracker#getAchievedRf().mjava","pathOld":"/dev/null","sourceNew":"    // gives the replication factor that was achieved for this request\n    public int getAchievedRf() {\n      // look across all shards to find the minimum achieved replication\n      // factor ... unless the client is using direct updates from CloudSolrServer\n      // there may be multiple shards at play here\n      int achievedRf = 1;\n      if (onLeaderShardId != null) {\n        synchronized (nodeErrorTracker) {\n          for (AtomicInteger nodeErrors : nodeErrorTracker.values()) {\n            if (nodeErrors.get() == 0) \n              ++achievedRf;\n          }\n        }\n      } else {\n        // the node driving this updateRequest is not a leader and so\n        // it only forwards to other leaders, so its local result doesn't count\n        achievedRf = Integer.MAX_VALUE;\n      }\n      \n      // min achieved may come from a request to another leader\n      synchronized (otherLeaderRf) {\n        for (Integer otherRf : otherLeaderRf.values()) {\n          if (otherRf < achievedRf)\n            achievedRf = otherRf;\n        }\n      }\n      \n      return (achievedRf == Integer.MAX_VALUE) ? 1 : achievedRf;\n    }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615bf5b56d95ed8c9bf06a402db6c817d6bff21a","date":1509492118,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.RequestReplicationTracker#getAchievedRf().mjava","sourceNew":null,"sourceOld":"    // gives the replication factor that was achieved for this request\n    public int getAchievedRf() {\n      // look across all shards to find the minimum achieved replication\n      // factor ... unless the client is using direct updates from CloudSolrServer\n      // there may be multiple shards at play here\n      int achievedRf = 1;\n      if (onLeaderShardId != null) {\n        synchronized (nodeErrorTracker) {\n          for (AtomicInteger nodeErrors : nodeErrorTracker.values()) {\n            if (nodeErrors.get() == 0) \n              ++achievedRf;\n          }\n        }\n      } else {\n        // the node driving this updateRequest is not a leader and so\n        // it only forwards to other leaders, so its local result doesn't count\n        achievedRf = Integer.MAX_VALUE;\n      }\n      \n      // min achieved may come from a request to another leader\n      synchronized (otherLeaderRf) {\n        for (Integer otherRf : otherLeaderRf.values()) {\n          if (otherRf < achievedRf)\n            achievedRf = otherRf;\n        }\n      }\n      \n      return (achievedRf == Integer.MAX_VALUE) ? 1 : achievedRf;\n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9d22d0f5940f155267b250876fa797ff69e8e6e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["9d22d0f5940f155267b250876fa797ff69e8e6e7"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d22d0f5940f155267b250876fa797ff69e8e6e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"]},"commit2Childs":{"9d22d0f5940f155267b250876fa797ff69e8e6e7":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a","b7605579001505896d48b07160075a5c8b8e128e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d22d0f5940f155267b250876fa797ff69e8e6e7","b7605579001505896d48b07160075a5c8b8e128e"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}