{"path":"backwards/src/java/org/apache/lucene/analysis/standard/StandardFilter#incrementToken().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/analysis/standard/StandardFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the next token in the stream, or null at EOS.\n   * <p>Removes <tt>'s</tt> from the end of words.\n   * <p>Removes dots from acronyms.\n   */\n  @Override\n  public final boolean incrementToken() throws java.io.IOException {\n    if (!input.incrementToken()) {\n      return false;\n    }\n\n    char[] buffer = termAtt.termBuffer();\n    final int bufferLength = termAtt.termLength();\n    final String type = typeAtt.type();\n\n    if (type == APOSTROPHE_TYPE &&      // remove 's\n  bufferLength >= 2 &&\n        buffer[bufferLength-2] == '\\'' &&\n        (buffer[bufferLength-1] == 's' || buffer[bufferLength-1] == 'S')) {\n      // Strip last 2 characters off\n      termAtt.setTermLength(bufferLength - 2);\n    } else if (type == ACRONYM_TYPE) {      // remove dots\n      int upto = 0;\n      for(int i=0;i<bufferLength;i++) {\n        char c = buffer[i];\n        if (c != '.')\n          buffer[upto++] = c;\n      }\n      termAtt.setTermLength(upto);\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/analysis/standard/StandardFilter#incrementToken().mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/standard/StandardFilter#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS.\n   * <p>Removes <tt>'s</tt> from the end of words.\n   * <p>Removes dots from acronyms.\n   */\n  @Override\n  public final boolean incrementToken() throws java.io.IOException {\n    if (!input.incrementToken()) {\n      return false;\n    }\n\n    char[] buffer = termAtt.termBuffer();\n    final int bufferLength = termAtt.termLength();\n    final String type = typeAtt.type();\n\n    if (type == APOSTROPHE_TYPE &&      // remove 's\n  bufferLength >= 2 &&\n        buffer[bufferLength-2] == '\\'' &&\n        (buffer[bufferLength-1] == 's' || buffer[bufferLength-1] == 'S')) {\n      // Strip last 2 characters off\n      termAtt.setTermLength(bufferLength - 2);\n    } else if (type == ACRONYM_TYPE) {      // remove dots\n      int upto = 0;\n      for(int i=0;i<bufferLength;i++) {\n        char c = buffer[i];\n        if (c != '.')\n          buffer[upto++] = c;\n      }\n      termAtt.setTermLength(upto);\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS.\n   * <p>Removes <tt>'s</tt> from the end of words.\n   * <p>Removes dots from acronyms.\n   */\n  @Override\n  public final boolean incrementToken() throws java.io.IOException {\n    if (!input.incrementToken()) {\n      return false;\n    }\n\n    char[] buffer = termAtt.termBuffer();\n    final int bufferLength = termAtt.termLength();\n    final String type = typeAtt.type();\n\n    if (type == APOSTROPHE_TYPE &&      // remove 's\n  bufferLength >= 2 &&\n        buffer[bufferLength-2] == '\\'' &&\n        (buffer[bufferLength-1] == 's' || buffer[bufferLength-1] == 'S')) {\n      // Strip last 2 characters off\n      termAtt.setTermLength(bufferLength - 2);\n    } else if (type == ACRONYM_TYPE) {      // remove dots\n      int upto = 0;\n      for(int i=0;i<bufferLength;i++) {\n        char c = buffer[i];\n        if (c != '.')\n          buffer[upto++] = c;\n      }\n      termAtt.setTermLength(upto);\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}