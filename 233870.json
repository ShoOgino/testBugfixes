{"path":"lucene/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","sourceNew":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // same doc and pp.position, so decide by actual term positions. \n        // rely on: pp.position == tp.position - offset. \n        return pp1.offset < pp2.offset;\n      else\n        return pp1.position < pp2.position;\n    else\n      return pp1.doc < pp2.doc;\n  }\n\n","sourceOld":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // same doc and pp.position, so decide by actual term positions. \n        // rely on: pp.position == tp.position - offset. \n        return pp1.offset < pp2.offset;\n      else\n        return pp1.position < pp2.position;\n    else\n      return pp1.doc < pp2.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0852ebe96f807ea1c84a88f9aaa4985a2088594","date":1304368766,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","sourceNew":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // same doc and pp.position, so decide by actual term positions. \n        // rely on: pp.position == tp.position - offset. \n        if (pp1.offset == pp2.offset) {\n          return pp1.ord < pp2.ord;\n        } else {\n          return pp1.offset < pp2.offset;\n        }\n      else {\n        return pp1.position < pp2.position;\n      }\n    else {\n      return pp1.doc < pp2.doc;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // same doc and pp.position, so decide by actual term positions. \n        // rely on: pp.position == tp.position - offset. \n        return pp1.offset < pp2.offset;\n      else\n        return pp1.position < pp2.position;\n    else\n      return pp1.doc < pp2.doc;\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702","b3e493496c35fb4f17315b8827d1ba1ae1585554"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","sourceNew":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // same doc and pp.position, so decide by actual term positions. \n        // rely on: pp.position == tp.position - offset. \n        if (pp1.offset == pp2.offset) {\n          return pp1.ord < pp2.ord;\n        } else {\n          return pp1.offset < pp2.offset;\n        }\n      else {\n        return pp1.position < pp2.position;\n      }\n    else {\n      return pp1.doc < pp2.doc;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // same doc and pp.position, so decide by actual term positions. \n        // rely on: pp.position == tp.position - offset. \n        return pp1.offset < pp2.offset;\n      else\n        return pp1.position < pp2.position;\n    else\n      return pp1.doc < pp2.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","sourceNew":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // same doc and pp.position, so decide by actual term positions. \n        // rely on: pp.position == tp.position - offset. \n        if (pp1.offset == pp2.offset) {\n          return pp1.ord < pp2.ord;\n        } else {\n          return pp1.offset < pp2.offset;\n        }\n      else {\n        return pp1.position < pp2.position;\n      }\n    else {\n      return pp1.doc < pp2.doc;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // same doc and pp.position, so decide by actual term positions. \n        // rely on: pp.position == tp.position - offset. \n        return pp1.offset < pp2.offset;\n      else\n        return pp1.position < pp2.position;\n    else\n      return pp1.doc < pp2.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","sourceNew":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // same doc and pp.position, so decide by actual term positions. \n        // rely on: pp.position == tp.position - offset. \n        if (pp1.offset == pp2.offset) {\n          return pp1.ord < pp2.ord;\n        } else {\n          return pp1.offset < pp2.offset;\n        }\n      else {\n        return pp1.position < pp2.position;\n      }\n    else {\n      return pp1.doc < pp2.doc;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // same doc and pp.position, so decide by actual term positions. \n        // rely on: pp.position == tp.position - offset. \n        if (pp1.offset == pp2.offset) {\n          return pp1.ord < pp2.ord;\n        } else {\n          return pp1.offset < pp2.offset;\n        }\n      else {\n        return pp1.position < pp2.position;\n      }\n    else {\n      return pp1.doc < pp2.doc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0852ebe96f807ea1c84a88f9aaa4985a2088594":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f0852ebe96f807ea1c84a88f9aaa4985a2088594"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","f0852ebe96f807ea1c84a88f9aaa4985a2088594"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["9454a6510e2db155fb01faa5c049b06ece95fab9","f0852ebe96f807ea1c84a88f9aaa4985a2088594"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f0852ebe96f807ea1c84a88f9aaa4985a2088594":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f0852ebe96f807ea1c84a88f9aaa4985a2088594","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}