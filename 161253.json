{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","sourceNew":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","sourceNew":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","sourceNew":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three\", Field.Store.NO));\n    doc = new Document();\n    doc.add(newTextField(\"field2\", \"one two three\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","sourceNew":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three\", Field.Store.NO));\n    doc = new Document();\n    doc.add(newTextField(\"field2\", \"one two three\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.shutdown();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three\", Field.Store.NO));\n    doc = new Document();\n    doc.add(newTextField(\"field2\", \"one two three\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","sourceNew":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three\", Field.Store.NO));\n    doc = new Document();\n    doc.add(newTextField(\"field2\", \"one two three\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three\", Field.Store.NO));\n    doc = new Document();\n    doc.add(newTextField(\"field2\", \"one two three\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.shutdown();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","sourceNew":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three\", Field.Store.NO));\n    doc = new Document();\n    doc.add(newTextField(\"field2\", \"one two three\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator().next());\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three\", Field.Store.NO));\n    doc = new Document();\n    doc.add(newTextField(\"field2\", \"one two three\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","sourceNew":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three\", Field.Store.NO));\n    doc = new Document();\n    doc.add(newTextField(\"field2\", \"one two three\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiTerms.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator().next());\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three\", Field.Store.NO));\n    doc = new Document();\n    doc.add(newTextField(\"field2\", \"one two three\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator().next());\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}