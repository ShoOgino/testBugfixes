{"path":"lucene/backwards/src/java/org/apache/lucene/index/TermsHashPerField#rehashPostings(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/TermsHashPerField#rehashPostings(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/TermsHashPerField#rehashPostings(int).mjava","sourceNew":"  /** Called when postings hash is too small (> 50%\n   *  occupied) or too large (< 20% occupied). */\n  void rehashPostings(final int newSize) {\n\n    final int newMask = newSize-1;\n\n    RawPostingList[] newHash = new RawPostingList[newSize];\n    for(int i=0;i<postingsHashSize;i++) {\n      RawPostingList p0 = postingsHash[i];\n      if (p0 != null) {\n        int code;\n        if (perThread.primary) {\n          final int start = p0.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n          final char[] text = charPool.buffers[p0.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n          int pos = start;\n          while(text[pos] != 0xffff)\n            pos++;\n          code = 0;\n          while (pos > start)\n            code = (code*31) + text[--pos];\n        } else\n          code = p0.textStart;\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != null) {\n          final int inc = ((code>>8)+code)|1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != null);\n        }\n        newHash[hashPos] = p0;\n      }\n    }\n\n    postingsHashMask = newMask;\n    postingsHash = newHash;\n    postingsHashSize = newSize;\n    postingsHashHalfSize = newSize >> 1;\n  }\n\n","sourceOld":"  /** Called when postings hash is too small (> 50%\n   *  occupied) or too large (< 20% occupied). */\n  void rehashPostings(final int newSize) {\n\n    final int newMask = newSize-1;\n\n    RawPostingList[] newHash = new RawPostingList[newSize];\n    for(int i=0;i<postingsHashSize;i++) {\n      RawPostingList p0 = postingsHash[i];\n      if (p0 != null) {\n        int code;\n        if (perThread.primary) {\n          final int start = p0.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n          final char[] text = charPool.buffers[p0.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n          int pos = start;\n          while(text[pos] != 0xffff)\n            pos++;\n          code = 0;\n          while (pos > start)\n            code = (code*31) + text[--pos];\n        } else\n          code = p0.textStart;\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != null) {\n          final int inc = ((code>>8)+code)|1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != null);\n        }\n        newHash[hashPos] = p0;\n      }\n    }\n\n    postingsHashMask = newMask;\n    postingsHash = newHash;\n    postingsHashSize = newSize;\n    postingsHashHalfSize = newSize >> 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/TermsHashPerField#rehashPostings(int).mjava","sourceNew":null,"sourceOld":"  /** Called when postings hash is too small (> 50%\n   *  occupied) or too large (< 20% occupied). */\n  void rehashPostings(final int newSize) {\n\n    final int newMask = newSize-1;\n\n    RawPostingList[] newHash = new RawPostingList[newSize];\n    for(int i=0;i<postingsHashSize;i++) {\n      RawPostingList p0 = postingsHash[i];\n      if (p0 != null) {\n        int code;\n        if (perThread.primary) {\n          final int start = p0.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n          final char[] text = charPool.buffers[p0.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n          int pos = start;\n          while(text[pos] != 0xffff)\n            pos++;\n          code = 0;\n          while (pos > start)\n            code = (code*31) + text[--pos];\n        } else\n          code = p0.textStart;\n\n        int hashPos = code & newMask;\n        assert hashPos >= 0;\n        if (newHash[hashPos] != null) {\n          final int inc = ((code>>8)+code)|1;\n          do {\n            code += inc;\n            hashPos = code & newMask;\n          } while (newHash[hashPos] != null);\n        }\n        newHash[hashPos] = p0;\n      }\n    }\n\n    postingsHashMask = newMask;\n    postingsHash = newHash;\n    postingsHashSize = newSize;\n    postingsHashHalfSize = newSize >> 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}