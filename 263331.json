{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming.SleepingSolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","commits":[{"id":"e87998750c1408b8af3248e55cff794d51d37166","date":1501426220,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming.SleepingSolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n      if (sleepTime.get() > 0) {\n        TestCloudSearcherWarming.coreNodeNameRef.set(newSearcher.getCore().getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        TestCloudSearcherWarming.coreNameRef.set(newSearcher.getCore().getName());\n        log.info(\"Sleeping for {} on newSearcher: {}, currentSearcher: {} belonging to (newest) core: {}, id: {}\", sleepTime.get(), newSearcher, currentSearcher, newSearcher.getCore().getName(), newSearcher.getCore());\n        try {\n          Thread.sleep(sleepTime.get());\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n        log.info(\"Finished sleeping for {} on newSearcher: {}, currentSearcher: {} belonging to (newest) core: {}, id: {}\", sleepTime.get(), newSearcher, currentSearcher, newSearcher.getCore().getName(), newSearcher.getCore());\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming.SleepingSolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n      if (sleepTime.get() > 0) {\n        TestCloudSearcherWarming.coreNodeNameRef.set(newSearcher.getCore().getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        TestCloudSearcherWarming.coreNameRef.set(newSearcher.getCore().getName());\n        log.info(\"Sleeping for {} on newSearcher: {}, currentSearcher: {} belonging to (newest) core: {}, id: {}\", sleepTime.get(), newSearcher, currentSearcher, newSearcher.getCore().getName(), newSearcher.getCore());\n        try {\n          Thread.sleep(sleepTime.get());\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n        log.info(\"Finished sleeping for {} on newSearcher: {}, currentSearcher: {} belonging to (newest) core: {}, id: {}\", sleepTime.get(), newSearcher, currentSearcher, newSearcher.getCore().getName(), newSearcher.getCore());\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e11a537632711f18086a2730feb888a041b5998","date":1558798804,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming.SleepingSolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming.SleepingSolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n      if (sleepTime.get() > 0) {\n        TestCloudSearcherWarming.coreNodeNameRef.set(newSearcher.getCore().getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        TestCloudSearcherWarming.coreNameRef.set(newSearcher.getCore().getName());\n        log.info(\"Sleeping for {} on newSearcher: {}, currentSearcher: {} belonging to (newest) core: {}, id: {}\", sleepTime.get(), newSearcher, currentSearcher, newSearcher.getCore().getName(), newSearcher.getCore());\n        try {\n          Thread.sleep(sleepTime.get());\n        } catch (InterruptedException e) {\n          log.warn(\"newSearcher was interupdated\", e);\n        }\n        log.info(\"Finished sleeping for {} on newSearcher: {}, currentSearcher: {} belonging to (newest) core: {}, id: {}\", sleepTime.get(), newSearcher, currentSearcher, newSearcher.getCore().getName(), newSearcher.getCore());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n      if (sleepTime.get() > 0) {\n        TestCloudSearcherWarming.coreNodeNameRef.set(newSearcher.getCore().getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        TestCloudSearcherWarming.coreNameRef.set(newSearcher.getCore().getName());\n        log.info(\"Sleeping for {} on newSearcher: {}, currentSearcher: {} belonging to (newest) core: {}, id: {}\", sleepTime.get(), newSearcher, currentSearcher, newSearcher.getCore().getName(), newSearcher.getCore());\n        try {\n          Thread.sleep(sleepTime.get());\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n        log.info(\"Finished sleeping for {} on newSearcher: {}, currentSearcher: {} belonging to (newest) core: {}, id: {}\", sleepTime.get(), newSearcher, currentSearcher, newSearcher.getCore().getName(), newSearcher.getCore());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming.SleepingSolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming.SleepingSolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n      if (sleepTime.get() > 0) {\n        TestCloudSearcherWarming.coreNodeNameRef.set(newSearcher.getCore().getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        TestCloudSearcherWarming.coreNameRef.set(newSearcher.getCore().getName());\n        if (log.isInfoEnabled()) {\n          log.info(\"Sleeping for {} on newSearcher: {}, currentSearcher: {} belonging to (newest) core: {}, id: {}\"\n              , sleepTime.get(), newSearcher, currentSearcher, newSearcher.getCore().getName(), newSearcher.getCore());\n        }\n        try {\n          Thread.sleep(sleepTime.get());\n        } catch (InterruptedException e) {\n          log.warn(\"newSearcher was interupdated\", e);\n        }\n        if (log.isInfoEnabled()) {\n          log.info(\"Finished sleeping for {} on newSearcher: {}, currentSearcher: {} belonging to (newest) core: {}, id: {}\"\n              , sleepTime.get(), newSearcher, currentSearcher, newSearcher.getCore().getName(), newSearcher.getCore());\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n      if (sleepTime.get() > 0) {\n        TestCloudSearcherWarming.coreNodeNameRef.set(newSearcher.getCore().getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        TestCloudSearcherWarming.coreNameRef.set(newSearcher.getCore().getName());\n        log.info(\"Sleeping for {} on newSearcher: {}, currentSearcher: {} belonging to (newest) core: {}, id: {}\", sleepTime.get(), newSearcher, currentSearcher, newSearcher.getCore().getName(), newSearcher.getCore());\n        try {\n          Thread.sleep(sleepTime.get());\n        } catch (InterruptedException e) {\n          log.warn(\"newSearcher was interupdated\", e);\n        }\n        log.info(\"Finished sleeping for {} on newSearcher: {}, currentSearcher: {} belonging to (newest) core: {}, id: {}\", sleepTime.get(), newSearcher, currentSearcher, newSearcher.getCore().getName(), newSearcher.getCore());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e11a537632711f18086a2730feb888a041b5998":["e87998750c1408b8af3248e55cff794d51d37166"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e87998750c1408b8af3248e55cff794d51d37166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["7e11a537632711f18086a2730feb888a041b5998"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"e87998750c1408b8af3248e55cff794d51d37166":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7e11a537632711f18086a2730feb888a041b5998":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","e87998750c1408b8af3248e55cff794d51d37166"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e87998750c1408b8af3248e55cff794d51d37166":["7e11a537632711f18086a2730feb888a041b5998","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}