{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#createRank(FixedBitSet,byte).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#createRank(FixedBitSet,byte).mjava","pathOld":"/dev/null","sourceNew":"  // Creates a DENSE rank-entry (the number of set bits up to a given point) for the buffer.\n  // One rank-entry for every {@code 2^denseRankPower} bits, with each rank-entry using 2 bytes.\n  // Represented as a byte[] for fast flushing and mirroring of the retrieval representation.\n  private static byte[] createRank(FixedBitSet buffer, byte denseRankPower) {\n    final int longsPerRank = 1 << (denseRankPower-6);\n    final int rankMark = longsPerRank-1;\n    final int rankIndexShift = denseRankPower-7; // 6 for the long (2^6) + 1 for 2 bytes/entry\n    final byte[] rank = new byte[DENSE_BLOCK_LONGS >> rankIndexShift];\n    final long[] bits = buffer.getBits();\n    int bitCount = 0;\n    for (int word = 0 ; word < DENSE_BLOCK_LONGS ; word++) {\n      if ((word & rankMark) == 0) { // Every longsPerRank longs\n        rank[word >> rankIndexShift] = (byte)(bitCount>>8);\n        rank[(word >> rankIndexShift)+1] = (byte)(bitCount & 0xFF);\n      }\n      bitCount += Long.bitCount(bits[word]);\n    }\n    return rank;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#createRank(FixedBitSet,byte).mjava","pathOld":"/dev/null","sourceNew":"  // Creates a DENSE rank-entry (the number of set bits up to a given point) for the buffer.\n  // One rank-entry for every {@code 2^denseRankPower} bits, with each rank-entry using 2 bytes.\n  // Represented as a byte[] for fast flushing and mirroring of the retrieval representation.\n  private static byte[] createRank(FixedBitSet buffer, byte denseRankPower) {\n    final int longsPerRank = 1 << (denseRankPower-6);\n    final int rankMark = longsPerRank-1;\n    final int rankIndexShift = denseRankPower-7; // 6 for the long (2^6) + 1 for 2 bytes/entry\n    final byte[] rank = new byte[DENSE_BLOCK_LONGS >> rankIndexShift];\n    final long[] bits = buffer.getBits();\n    int bitCount = 0;\n    for (int word = 0 ; word < DENSE_BLOCK_LONGS ; word++) {\n      if ((word & rankMark) == 0) { // Every longsPerRank longs\n        rank[word >> rankIndexShift] = (byte)(bitCount>>8);\n        rank[(word >> rankIndexShift)+1] = (byte)(bitCount & 0xFF);\n      }\n      bitCount += Long.bitCount(bits[word]);\n    }\n    return rank;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}