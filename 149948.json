{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree.Edge#contains(double,double).mjava","commits":[{"id":"034996547ca41c5004216fdd0178acbf06438da2","date":1461284133,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree.Edge#contains(double,double).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Returns true if the point crosses this edge subtree an odd number of times\n     * <p>\n     * See <a href=\"https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\">\n     * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.\n     */\n    // ported to java from https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\n    // original code under the BSD license (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html#License%20to%20Use)\n    //\n    // Copyright (c) 1970-2003, Wm. Randolph Franklin\n    //\n    // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated \n    // documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation \n    // the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and \n    // to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n    //\n    // 1. Redistributions of source code must retain the above copyright \n    //    notice, this list of conditions and the following disclaimers.\n    // 2. Redistributions in binary form must reproduce the above copyright \n    //    notice in the documentation and/or other materials provided with \n    //    the distribution.\n    // 3. The name of W. Randolph Franklin may not be used to endorse or \n    //    promote products derived from this Software without specific \n    //    prior written permission. \n    //\n    // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED \n    // TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL \n    // THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \n    // CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS \n    // IN THE SOFTWARE. \n    boolean contains(double latitude, double longitude) {\n      // crossings algorithm is an odd-even algorithm, so we descend the tree xor'ing results along our path\n      boolean res = false;\n      if (latitude <= max) {\n        if (lat1 > latitude != lat2 > latitude) {\n          if (longitude < (lon1 - lon2) * (latitude - lat2) / (lat1 - lat2) + lon2) {\n            res = true;\n          }\n        }\n        if (left != null) {\n          res ^= left.contains(latitude, longitude);\n        }\n        if (right != null && latitude >= low) {\n          res ^= right.contains(latitude, longitude);\n        }\n      }\n      return res;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree.Edge#contains(double,double).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Returns true if the point crosses this edge subtree an odd number of times\n     * <p>\n     * See <a href=\"https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\">\n     * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.\n     */\n    // ported to java from https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\n    // original code under the BSD license (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html#License%20to%20Use)\n    //\n    // Copyright (c) 1970-2003, Wm. Randolph Franklin\n    //\n    // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated \n    // documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation \n    // the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and \n    // to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n    //\n    // 1. Redistributions of source code must retain the above copyright \n    //    notice, this list of conditions and the following disclaimers.\n    // 2. Redistributions in binary form must reproduce the above copyright \n    //    notice in the documentation and/or other materials provided with \n    //    the distribution.\n    // 3. The name of W. Randolph Franklin may not be used to endorse or \n    //    promote products derived from this Software without specific \n    //    prior written permission. \n    //\n    // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED \n    // TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL \n    // THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \n    // CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS \n    // IN THE SOFTWARE. \n    boolean contains(double latitude, double longitude) {\n      // crossings algorithm is an odd-even algorithm, so we descend the tree xor'ing results along our path\n      boolean res = false;\n      if (latitude <= max) {\n        if (lat1 > latitude != lat2 > latitude) {\n          if (longitude < (lon1 - lon2) * (latitude - lat2) / (lat1 - lat2) + lon2) {\n            res = true;\n          }\n        }\n        if (left != null) {\n          res ^= left.contains(latitude, longitude);\n        }\n        if (right != null && latitude >= low) {\n          res ^= right.contains(latitude, longitude);\n        }\n      }\n      return res;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D.Edge#contains(double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree.Edge#contains(double,double).mjava","sourceNew":"    /** \n     * Returns true if the point crosses this edge subtree an odd number of times\n     * <p>\n     * See <a href=\"https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\">\n     * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.\n     */\n    // ported to java from https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\n    // original code under the BSD license (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html#License%20to%20Use)\n    //\n    // Copyright (c) 1970-2003, Wm. Randolph Franklin\n    //\n    // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated \n    // documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation \n    // the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and \n    // to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n    //\n    // 1. Redistributions of source code must retain the above copyright \n    //    notice, this list of conditions and the following disclaimers.\n    // 2. Redistributions in binary form must reproduce the above copyright \n    //    notice in the documentation and/or other materials provided with \n    //    the distribution.\n    // 3. The name of W. Randolph Franklin may not be used to endorse or \n    //    promote products derived from this Software without specific \n    //    prior written permission. \n    //\n    // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED \n    // TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL \n    // THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \n    // CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS \n    // IN THE SOFTWARE. \n    boolean contains(double latitude, double longitude) {\n      // crossings algorithm is an odd-even algorithm, so we descend the tree xor'ing results along our path\n      boolean res = false;\n      if (latitude <= max) {\n        if (lat1 > latitude != lat2 > latitude) {\n          if (longitude < (lon1 - lon2) * (latitude - lat2) / (lat1 - lat2) + lon2) {\n            res = true;\n          }\n        }\n        if (left != null) {\n          res ^= left.contains(latitude, longitude);\n        }\n        if (right != null && latitude >= low) {\n          res ^= right.contains(latitude, longitude);\n        }\n      }\n      return res;\n    }\n\n","sourceOld":"    /** \n     * Returns true if the point crosses this edge subtree an odd number of times\n     * <p>\n     * See <a href=\"https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\">\n     * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.\n     */\n    // ported to java from https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\n    // original code under the BSD license (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html#License%20to%20Use)\n    //\n    // Copyright (c) 1970-2003, Wm. Randolph Franklin\n    //\n    // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated \n    // documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation \n    // the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and \n    // to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n    //\n    // 1. Redistributions of source code must retain the above copyright \n    //    notice, this list of conditions and the following disclaimers.\n    // 2. Redistributions in binary form must reproduce the above copyright \n    //    notice in the documentation and/or other materials provided with \n    //    the distribution.\n    // 3. The name of W. Randolph Franklin may not be used to endorse or \n    //    promote products derived from this Software without specific \n    //    prior written permission. \n    //\n    // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED \n    // TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL \n    // THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \n    // CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS \n    // IN THE SOFTWARE. \n    boolean contains(double latitude, double longitude) {\n      // crossings algorithm is an odd-even algorithm, so we descend the tree xor'ing results along our path\n      boolean res = false;\n      if (latitude <= max) {\n        if (lat1 > latitude != lat2 > latitude) {\n          if (longitude < (lon1 - lon2) * (latitude - lat2) / (lat1 - lat2) + lon2) {\n            res = true;\n          }\n        }\n        if (left != null) {\n          res ^= left.contains(latitude, longitude);\n        }\n        if (right != null && latitude >= low) {\n          res ^= right.contains(latitude, longitude);\n        }\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D.Edge#contains(double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree.Edge#contains(double,double).mjava","sourceNew":"    /** \n     * Returns true if the point crosses this edge subtree an odd number of times\n     * <p>\n     * See <a href=\"https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\">\n     * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.\n     */\n    // ported to java from https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\n    // original code under the BSD license (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html#License%20to%20Use)\n    //\n    // Copyright (c) 1970-2003, Wm. Randolph Franklin\n    //\n    // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated \n    // documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation \n    // the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and \n    // to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n    //\n    // 1. Redistributions of source code must retain the above copyright \n    //    notice, this list of conditions and the following disclaimers.\n    // 2. Redistributions in binary form must reproduce the above copyright \n    //    notice in the documentation and/or other materials provided with \n    //    the distribution.\n    // 3. The name of W. Randolph Franklin may not be used to endorse or \n    //    promote products derived from this Software without specific \n    //    prior written permission. \n    //\n    // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED \n    // TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL \n    // THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \n    // CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS \n    // IN THE SOFTWARE. \n    boolean contains(double latitude, double longitude) {\n      // crossings algorithm is an odd-even algorithm, so we descend the tree xor'ing results along our path\n      boolean res = false;\n      if (latitude <= max) {\n        if (lat1 > latitude != lat2 > latitude) {\n          if (longitude < (lon1 - lon2) * (latitude - lat2) / (lat1 - lat2) + lon2) {\n            res = true;\n          }\n        }\n        if (left != null) {\n          res ^= left.contains(latitude, longitude);\n        }\n        if (right != null && latitude >= low) {\n          res ^= right.contains(latitude, longitude);\n        }\n      }\n      return res;\n    }\n\n","sourceOld":"    /** \n     * Returns true if the point crosses this edge subtree an odd number of times\n     * <p>\n     * See <a href=\"https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\">\n     * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.\n     */\n    // ported to java from https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\n    // original code under the BSD license (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html#License%20to%20Use)\n    //\n    // Copyright (c) 1970-2003, Wm. Randolph Franklin\n    //\n    // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated \n    // documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation \n    // the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and \n    // to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n    //\n    // 1. Redistributions of source code must retain the above copyright \n    //    notice, this list of conditions and the following disclaimers.\n    // 2. Redistributions in binary form must reproduce the above copyright \n    //    notice in the documentation and/or other materials provided with \n    //    the distribution.\n    // 3. The name of W. Randolph Franklin may not be used to endorse or \n    //    promote products derived from this Software without specific \n    //    prior written permission. \n    //\n    // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED \n    // TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL \n    // THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \n    // CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS \n    // IN THE SOFTWARE. \n    boolean contains(double latitude, double longitude) {\n      // crossings algorithm is an odd-even algorithm, so we descend the tree xor'ing results along our path\n      boolean res = false;\n      if (latitude <= max) {\n        if (lat1 > latitude != lat2 > latitude) {\n          if (longitude < (lon1 - lon2) * (latitude - lat2) / (lat1 - lat2) + lon2) {\n            res = true;\n          }\n        }\n        if (left != null) {\n          res ^= left.contains(latitude, longitude);\n        }\n        if (right != null && latitude >= low) {\n          res ^= right.contains(latitude, longitude);\n        }\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","034996547ca41c5004216fdd0178acbf06438da2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","925fce43f3bac029d912b9b7de03c789e258a333"],"034996547ca41c5004216fdd0178acbf06438da2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"]},"commit2Childs":{"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","034996547ca41c5004216fdd0178acbf06438da2"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"034996547ca41c5004216fdd0178acbf06438da2":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}