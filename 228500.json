{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#getStopWords().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#getStopWords().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#getStopWords().mjava","sourceNew":"  /**\n   * Provides information on which stop words have been identified for all fields\n   *\n   * @return the stop words (as terms)\n   */\n  public Term[] getStopWords() {\n    List<Term> allStopWords = new ArrayList<Term>();\n    for (String fieldName : stopWordsPerField.keySet()) {\n      Set<String> stopWords = stopWordsPerField.get(fieldName);\n      for (String text : stopWords) {\n        allStopWords.add(new Term(fieldName, text));\n      }\n    }\n    return allStopWords.toArray(new Term[allStopWords.size()]);\n\t}\n\n","sourceOld":"  /**\n   * Provides information on which stop words have been identified for all fields\n   *\n   * @return the stop words (as terms)\n   */\n  public Term[] getStopWords() {\n    List<Term> allStopWords = new ArrayList<Term>();\n    for (String fieldName : stopWordsPerField.keySet()) {\n      Set<String> stopWords = stopWordsPerField.get(fieldName);\n      for (String text : stopWords) {\n        allStopWords.add(new Term(fieldName, text));\n      }\n    }\n    return allStopWords.toArray(new Term[allStopWords.size()]);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#getStopWords().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#getStopWords().mjava","sourceNew":"  /**\n   * Provides information on which stop words have been identified for all fields\n   *\n   * @return the stop words (as terms)\n   */\n  public Term[] getStopWords() {\n    List<Term> allStopWords = new ArrayList<Term>();\n    for (String fieldName : stopWordsPerField.keySet()) {\n      Set<String> stopWords = stopWordsPerField.get(fieldName);\n      for (String text : stopWords) {\n        allStopWords.add(new Term(fieldName, text));\n      }\n    }\n    return allStopWords.toArray(new Term[allStopWords.size()]);\n  }\n\n","sourceOld":"  /**\n   * Provides information on which stop words have been identified for all fields\n   *\n   * @return the stop words (as terms)\n   */\n  public Term[] getStopWords() {\n    List<Term> allStopWords = new ArrayList<Term>();\n    for (String fieldName : stopWordsPerField.keySet()) {\n      Set<String> stopWords = stopWordsPerField.get(fieldName);\n      for (String text : stopWords) {\n        allStopWords.add(new Term(fieldName, text));\n      }\n    }\n    return allStopWords.toArray(new Term[allStopWords.size()]);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#getStopWords().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#getStopWords().mjava","sourceNew":"  /**\n   * Provides information on which stop words have been identified for all fields\n   *\n   * @return the stop words (as terms)\n   */\n  public Term[] getStopWords() {\n    List<Term> allStopWords = new ArrayList<>();\n    for (String fieldName : stopWordsPerField.keySet()) {\n      Set<String> stopWords = stopWordsPerField.get(fieldName);\n      for (String text : stopWords) {\n        allStopWords.add(new Term(fieldName, text));\n      }\n    }\n    return allStopWords.toArray(new Term[allStopWords.size()]);\n  }\n\n","sourceOld":"  /**\n   * Provides information on which stop words have been identified for all fields\n   *\n   * @return the stop words (as terms)\n   */\n  public Term[] getStopWords() {\n    List<Term> allStopWords = new ArrayList<Term>();\n    for (String fieldName : stopWordsPerField.keySet()) {\n      Set<String> stopWords = stopWordsPerField.get(fieldName);\n      for (String text : stopWords) {\n        allStopWords.add(new Term(fieldName, text));\n      }\n    }\n    return allStopWords.toArray(new Term[allStopWords.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#getStopWords().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#getStopWords().mjava","sourceNew":"  /**\n   * Provides information on which stop words have been identified for all fields\n   *\n   * @return the stop words (as terms)\n   */\n  public Term[] getStopWords() {\n    List<Term> allStopWords = new ArrayList<>();\n    for (Map.Entry<String, Set<String>> entry : stopWordsPerField.entrySet()) {\n      String field = entry.getKey();\n      Set<String> stopWords = entry.getValue();\n\n      for (String text : stopWords) {\n        allStopWords.add(new Term(field, text));\n      }\n    }\n    return allStopWords.toArray(new Term[allStopWords.size()]);\n  }\n\n","sourceOld":"  /**\n   * Provides information on which stop words have been identified for all fields\n   *\n   * @return the stop words (as terms)\n   */\n  public Term[] getStopWords() {\n    List<Term> allStopWords = new ArrayList<>();\n    for (String fieldName : stopWordsPerField.keySet()) {\n      Set<String> stopWords = stopWordsPerField.get(fieldName);\n      for (String text : stopWords) {\n        allStopWords.add(new Term(fieldName, text));\n      }\n    }\n    return allStopWords.toArray(new Term[allStopWords.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#getStopWords().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#getStopWords().mjava","sourceNew":"  /**\n   * Provides information on which stop words have been identified for all fields\n   *\n   * @return the stop words (as terms)\n   */\n  public Term[] getStopWords() {\n    List<Term> allStopWords = new ArrayList<>();\n    for (Map.Entry<String, Set<String>> entry : stopWordsPerField.entrySet()) {\n      String field = entry.getKey();\n      Set<String> stopWords = entry.getValue();\n\n      for (String text : stopWords) {\n        allStopWords.add(new Term(field, text));\n      }\n    }\n    return allStopWords.toArray(new Term[allStopWords.size()]);\n  }\n\n","sourceOld":"  /**\n   * Provides information on which stop words have been identified for all fields\n   *\n   * @return the stop words (as terms)\n   */\n  public Term[] getStopWords() {\n    List<Term> allStopWords = new ArrayList<>();\n    for (String fieldName : stopWordsPerField.keySet()) {\n      Set<String> stopWords = stopWordsPerField.get(fieldName);\n      for (String text : stopWords) {\n        allStopWords.add(new Term(fieldName, text));\n      }\n    }\n    return allStopWords.toArray(new Term[allStopWords.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b0b597c65628ca9e73913a07e81691f8229bae35":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}