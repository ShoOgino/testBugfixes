{"path":"src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","sourceNew":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();  \n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next()) \n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n            \n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<Object>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        } \n      } \n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","sourceOld":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();  \n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next()) \n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n            \n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<Object>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        } \n      } \n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","sourceNew":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();  \n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next()) \n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n            \n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<Object>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        } \n      } \n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","sourceOld":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();  \n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next()) \n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n            \n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<Object>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        } \n      } \n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}