{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,AtomicReaderContext...).mjava","commits":[{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,AtomicReaderContext...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Creates a searcher from a top-level {@link ReaderContext} with and\n   * executes searches on the given leave slice exclusively instead of searching\n   * over all leaves. This constructor should be used to run one or more leaves\n   * within a single thread. Hence, for scorer and filter this looks like an\n   * ordinary search in the hierarchy such that there is no difference between\n   * single and multi-threaded.\n   * \n   * @lucene.experimental\n   * */\n  public IndexSearcher(ReaderContext topLevel, AtomicReaderContext... leaves) {\n    assert assertLeaves(topLevel, leaves);\n    readerContext = topLevel;\n    reader = topLevel.reader;\n    leafContexts = leaves;\n    executor = null;\n    subSearchers = null;\n    closeReader = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,AtomicReaderContext...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Creates a searcher from a top-level {@link ReaderContext} with and\n   * executes searches on the given leave slice exclusively instead of searching\n   * over all leaves. This constructor should be used to run one or more leaves\n   * within a single thread. Hence, for scorer and filter this looks like an\n   * ordinary search in the hierarchy such that there is no difference between\n   * single and multi-threaded.\n   * \n   * @lucene.experimental\n   * */\n  public IndexSearcher(ReaderContext topLevel, AtomicReaderContext... leaves) {\n    assert assertLeaves(topLevel, leaves);\n    readerContext = topLevel;\n    reader = topLevel.reader;\n    leafContexts = leaves;\n    executor = null;\n    subSearchers = null;\n    closeReader = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30da203d7de68a87a16025523a483a96c24f4291","date":1296686055,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,AtomicReaderContext...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Creates a searcher from a top-level {@link ReaderContext} with and\n   * executes searches on the given leave slice exclusively instead of searching\n   * over all leaves. This constructor should be used to run one or more leaves\n   * within a single thread. Hence, for scorer and filter this looks like an\n   * ordinary search in the hierarchy such that there is no difference between\n   * single and multi-threaded.\n   * \n   * @lucene.experimental\n   * */\n  public IndexSearcher(ReaderContext topLevel, AtomicReaderContext... leaves) {\n    assert assertLeaves(topLevel, leaves);\n    readerContext = topLevel;\n    reader = topLevel.reader;\n    leafContexts = leaves;\n    executor = null;\n    subSearchers = null;\n    closeReader = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,AtomicReaderContext...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Creates a searcher from a top-level {@link ReaderContext} with and\n   * executes searches on the given leave slice exclusively instead of searching\n   * over all leaves. This constructor should be used to run one or more leaves\n   * within a single thread. Hence, for scorer and filter this looks like an\n   * ordinary search in the hierarchy such that there is no difference between\n   * single and multi-threaded.\n   * \n   * @lucene.experimental\n   * */\n  public IndexSearcher(ReaderContext topLevel, AtomicReaderContext... leaves) {\n    assert assertLeaves(topLevel, leaves);\n    readerContext = topLevel;\n    reader = topLevel.reader;\n    leafContexts = leaves;\n    executor = null;\n    subSearchers = null;\n    closeReader = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c220849f876de24a79f756f65b3eb045db59f63f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30da203d7de68a87a16025523a483a96c24f4291":["c220849f876de24a79f756f65b3eb045db59f63f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c220849f876de24a79f756f65b3eb045db59f63f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","30da203d7de68a87a16025523a483a96c24f4291"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30da203d7de68a87a16025523a483a96c24f4291"]},"commit2Childs":{"c220849f876de24a79f756f65b3eb045db59f63f":["30da203d7de68a87a16025523a483a96c24f4291","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c220849f876de24a79f756f65b3eb045db59f63f","868da859b43505d9d2a023bfeae6dd0c795f5295"],"30da203d7de68a87a16025523a483a96c24f4291":["bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}