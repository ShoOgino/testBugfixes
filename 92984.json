{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"/dev/null","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getReplicasMap().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getReplicasMap().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getReplicasMap().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":["29372a57b7e46d222a80429ad6b96413b7319eea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getReplicasMap().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getReplicasMap().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getReplicasMap().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getReplicasMap().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e9a4e19fa07de19aaf213f827f735ac5672ee6a","date":1354917997,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getName().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (replica.getName().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = replica.getName();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getName()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getReplicas().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getReplicasMap().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":["29372a57b7e46d222a80429ad6b96413b7319eea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getName().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (replica.getName().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = replica.getName();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getName()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getReplicas().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getReplicasMap().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = replica.getName();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getName()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getName().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (replica.getName().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = replica.getName();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getName()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getReplicas().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":["29372a57b7e46d222a80429ad6b96413b7319eea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = replica.getNodeName();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getName()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = replica.getName();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getName()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = replica.getNodeName();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getName()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = replica.getName();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getName()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23309b24be211197fb56350988f69c94e8a0394a","date":1383353069,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        Set<Entry<String,Replica>> entries = slice.getReplicasMap().entrySet();\n        for (Entry<String,Replica> entry : entries) {\n          Replica replica = entry.getValue();\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = entry.getKey();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getName()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = replica.getNodeName();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getName()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":["29372a57b7e46d222a80429ad6b96413b7319eea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29372a57b7e46d222a80429ad6b96413b7319eea","date":1390584196,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys, List<SolrServer> clients) throws Exception {\n    updateMappingsFromZk(jettys, clients, false);\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getNodeName().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        Set<Entry<String,Replica>> entries = slice.getReplicasMap().entrySet();\n        for (Entry<String,Replica> entry : entries) {\n          Replica replica = entry.getValue();\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = entry.getKey();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getName()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(), jetties.size());\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94","217c5e3cedf564c6d370670858e1b1edab16fcac","6ef6348b84bf0f8a649826b69a70ac815ff560e2","d9405f486872f1e416304dfe389741f4ee2f8a4d","23309b24be211197fb56350988f69c94e8a0394a","4d3e8520fd031bab31fd0e4d480e55958bc45efe","7321b77a7bc3edfebd637ef273e9dfaa9969eba6","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","0e9a4e19fa07de19aaf213f827f735ac5672ee6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrClient]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys, List<SolrClient> clients) throws Exception {\n    updateMappingsFromZk(jettys, clients, false);\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys, List<SolrServer> clients) throws Exception {\n    updateMappingsFromZk(jettys, clients, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"fa64435b5902ce266c23755a4a00691a3285dab8":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","0e9a4e19fa07de19aaf213f827f735ac5672ee6a"],"bafca15d8e408346a67f4282ad1143b88023893b":["29372a57b7e46d222a80429ad6b96413b7319eea"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["fa64435b5902ce266c23755a4a00691a3285dab8"],"0e9a4e19fa07de19aaf213f827f735ac5672ee6a":["c5a558d54519c651068ddb202f03befefb1514a7"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"29372a57b7e46d222a80429ad6b96413b7319eea":["23309b24be211197fb56350988f69c94e8a0394a"],"23309b24be211197fb56350988f69c94e8a0394a":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"c5a558d54519c651068ddb202f03befefb1514a7":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"f2126b84bd093fa3d921582a109a0ee578c28126":["fa64435b5902ce266c23755a4a00691a3285dab8","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["0e9a4e19fa07de19aaf213f827f735ac5672ee6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7","f2126b84bd093fa3d921582a109a0ee578c28126"],"0e9a4e19fa07de19aaf213f827f735ac5672ee6a":["407687e67faf6e1f02a211ca078d8e3eed631027","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","23309b24be211197fb56350988f69c94e8a0394a"],"29372a57b7e46d222a80429ad6b96413b7319eea":["bafca15d8e408346a67f4282ad1143b88023893b"],"23309b24be211197fb56350988f69c94e8a0394a":["29372a57b7e46d222a80429ad6b96413b7319eea"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c5a558d54519c651068ddb202f03befefb1514a7":["0e9a4e19fa07de19aaf213f827f735ac5672ee6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["fa64435b5902ce266c23755a4a00691a3285dab8","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}