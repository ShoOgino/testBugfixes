{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testStressTryIncRef().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testStressTryIncRef().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testStressTryIncRef().mjava","sourceNew":"  public void testStressTryIncRef() throws CorruptIndexException, LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    DirectoryReader r = DirectoryReader.open(dir);\n    int numThreads = atLeast(2);\n    \n    IncThread[] threads = new IncThread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new IncThread(r, random);\n      threads[i].start();\n    }\n    Thread.sleep(100);\n\n    assertTrue(r.tryIncRef());\n    r.decRef();\n    r.close();\n\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      assertNull(threads[i].failed);\n    }\n    assertFalse(r.tryIncRef());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStressTryIncRef() throws CorruptIndexException, LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    DirectoryReader r = DirectoryReader.open(dir);\n    int numThreads = atLeast(2);\n    \n    IncThread[] threads = new IncThread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new IncThread(r, random);\n      threads[i].start();\n    }\n    Thread.sleep(100);\n\n    assertTrue(r.tryIncRef());\n    r.decRef();\n    r.close();\n\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      assertNull(threads[i].failed);\n    }\n    assertFalse(r.tryIncRef());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testStressTryIncRef().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testStressTryIncRef().mjava","sourceNew":"  public void testStressTryIncRef() throws CorruptIndexException, LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    DirectoryReader r = DirectoryReader.open(dir);\n    int numThreads = atLeast(2);\n    \n    IncThread[] threads = new IncThread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new IncThread(r, random);\n      threads[i].start();\n    }\n    Thread.sleep(100);\n  \n    assertTrue(r.tryIncRef());\n    r.decRef();\n    r.close();\n  \n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      assertNull(threads[i].failed);\n    }\n    assertFalse(r.tryIncRef());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStressTryIncRef() throws CorruptIndexException, LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    DirectoryReader r = DirectoryReader.open(dir);\n    int numThreads = atLeast(2);\n    \n    IncThread[] threads = new IncThread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new IncThread(r, random);\n      threads[i].start();\n    }\n    Thread.sleep(100);\n\n    assertTrue(r.tryIncRef());\n    r.decRef();\n    r.close();\n\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      assertNull(threads[i].failed);\n    }\n    assertFalse(r.tryIncRef());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}