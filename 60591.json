{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCreateNodeSet().mjava","commits":[{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCreateNodeSet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreateNodeSet() throws Exception {\n\n    JettySolrRunner jetty1 = cluster.getRandomJetty(random());\n    JettySolrRunner jetty2 = cluster.getRandomJetty(random());\n\n    List<String> baseUrls = ImmutableList.of(jetty1.getBaseUrl().toString(), jetty2.getBaseUrl().toString());\n\n    CollectionAdminRequest.createCollection(\"nodeset_collection\", \"conf\", 2, 1)\n        .setCreateNodeSet(baseUrls.get(0) + \",\" + baseUrls.get(1))\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(\"nodeset_collection\");\n    for (Replica replica : collectionState.getReplicas()) {\n      String replicaUrl = replica.getCoreUrl();\n      boolean matchingJetty = false;\n      for (String jettyUrl : baseUrls) {\n        if (replicaUrl.startsWith(jettyUrl))\n          matchingJetty = true;\n      }\n      if (matchingJetty == false)\n        fail(\"Expected replica to be on \" + baseUrls + \" but was on \" + replicaUrl);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["273ff2f5b0b365591fcbe91ea23b5e97027ca60d","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCreateNodeSet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreateNodeSet() throws Exception {\n\n    JettySolrRunner jetty1 = cluster.getRandomJetty(random());\n    JettySolrRunner jetty2 = cluster.getRandomJetty(random());\n\n    List<String> baseUrls = ImmutableList.of(jetty1.getBaseUrl().toString(), jetty2.getBaseUrl().toString());\n\n    CollectionAdminRequest.createCollection(\"nodeset_collection\", \"conf\", 2, 1)\n        .setCreateNodeSet(baseUrls.get(0) + \",\" + baseUrls.get(1))\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(\"nodeset_collection\");\n    for (Replica replica : collectionState.getReplicas()) {\n      String replicaUrl = replica.getCoreUrl();\n      boolean matchingJetty = false;\n      for (String jettyUrl : baseUrls) {\n        if (replicaUrl.startsWith(jettyUrl))\n          matchingJetty = true;\n      }\n      if (matchingJetty == false)\n        fail(\"Expected replica to be on \" + baseUrls + \" but was on \" + replicaUrl);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCreateNodeSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCreateNodeSet().mjava","sourceNew":"  @Test\n  public void testCreateNodeSet() throws Exception {\n\n    JettySolrRunner jetty1 = cluster.getRandomJetty(random());\n    JettySolrRunner jetty2 = cluster.getRandomJetty(random());\n\n    List<String> baseUrls = ImmutableList.of(jetty1.getBaseUrl().toString(), jetty2.getBaseUrl().toString());\n\n    CollectionAdminRequest.createCollection(\"nodeset_collection\", \"conf\", 2, 1)\n        .setCreateNodeSet(baseUrls.get(0) + \",\" + baseUrls.get(1))\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(\"nodeset_collection\");\n    for (Replica replica : collectionState.getReplicas()) {\n      String replicaUrl = replica.getCoreUrl();\n      boolean matchingJetty = false;\n      for (String jettyUrl : baseUrls) {\n        if (replicaUrl.startsWith(jettyUrl))\n          matchingJetty = true;\n      }\n      if (matchingJetty == false)\n        fail(\"Expected replica to be on \" + baseUrls + \" but was on \" + replicaUrl);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateNodeSet() throws Exception {\n\n    JettySolrRunner jetty1 = cluster.getRandomJetty(random());\n    JettySolrRunner jetty2 = cluster.getRandomJetty(random());\n\n    List<String> baseUrls = ImmutableList.of(jetty1.getBaseUrl().toString(), jetty2.getBaseUrl().toString());\n\n    CollectionAdminRequest.createCollection(\"nodeset_collection\", \"conf\", 2, 1)\n        .setCreateNodeSet(baseUrls.get(0) + \",\" + baseUrls.get(1))\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(\"nodeset_collection\");\n    for (Replica replica : collectionState.getReplicas()) {\n      String replicaUrl = replica.getCoreUrl();\n      boolean matchingJetty = false;\n      for (String jettyUrl : baseUrls) {\n        if (replicaUrl.startsWith(jettyUrl))\n          matchingJetty = true;\n      }\n      if (matchingJetty == false)\n        fail(\"Expected replica to be on \" + baseUrls + \" but was on \" + replicaUrl);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCreateNodeSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCreateNodeSet().mjava","sourceNew":"  @Test\n  public void testCreateNodeSet() throws Exception {\n\n    JettySolrRunner jetty1 = cluster.getRandomJetty(random());\n    JettySolrRunner jetty2 = cluster.getRandomJetty(random());\n\n    List<String> baseUrls = ImmutableList.of(jetty1.getBaseUrl().toString(), jetty2.getBaseUrl().toString());\n\n    CollectionAdminRequest.createCollection(\"nodeset_collection\", \"conf\", 2, 1)\n        .setCreateNodeSet(baseUrls.get(0) + \",\" + baseUrls.get(1))\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(\"nodeset_collection\");\n    for (Replica replica : collectionState.getReplicas()) {\n      String replicaUrl = replica.getCoreUrl();\n      boolean matchingJetty = false;\n      for (String jettyUrl : baseUrls) {\n        if (replicaUrl.startsWith(jettyUrl))\n          matchingJetty = true;\n      }\n      if (matchingJetty == false)\n        fail(\"Expected replica to be on \" + baseUrls + \" but was on \" + replicaUrl);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateNodeSet() throws Exception {\n\n    JettySolrRunner jetty1 = cluster.getRandomJetty(random());\n    JettySolrRunner jetty2 = cluster.getRandomJetty(random());\n\n    List<String> baseUrls = ImmutableList.of(jetty1.getBaseUrl().toString(), jetty2.getBaseUrl().toString());\n\n    CollectionAdminRequest.createCollection(\"nodeset_collection\", \"conf\", 2, 1)\n        .setCreateNodeSet(baseUrls.get(0) + \",\" + baseUrls.get(1))\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(\"nodeset_collection\");\n    for (Replica replica : collectionState.getReplicas()) {\n      String replicaUrl = replica.getCoreUrl();\n      boolean matchingJetty = false;\n      for (String jettyUrl : baseUrls) {\n        if (replicaUrl.startsWith(jettyUrl))\n          matchingJetty = true;\n      }\n      if (matchingJetty == false)\n        fail(\"Expected replica to be on \" + baseUrls + \" but was on \" + replicaUrl);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a4efd3fffdd7acd625bb88e455c8097e17f75735","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["b94236357aaa22b76c10629851fe4e376e0cea82","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}