{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3808b3bd5067a1d82f3196d6888e821674263150","date":1283593066,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory(random);\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory(random);\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd641edd796340315609425e9f70819e6d9ef0e","date":1295970051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":null,"sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":null,"sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":null,"sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = newDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cfd641edd796340315609425e9f70819e6d9ef0e":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","1f653cfcf159baeaafe5d01682a911e95bba4012"],"3808b3bd5067a1d82f3196d6888e821674263150":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["cfd641edd796340315609425e9f70819e6d9ef0e"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3808b3bd5067a1d82f3196d6888e821674263150"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1f653cfcf159baeaafe5d01682a911e95bba4012","cfd641edd796340315609425e9f70819e6d9ef0e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["cfd641edd796340315609425e9f70819e6d9ef0e","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cfd641edd796340315609425e9f70819e6d9ef0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cfd641edd796340315609425e9f70819e6d9ef0e":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3808b3bd5067a1d82f3196d6888e821674263150":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["cfd641edd796340315609425e9f70819e6d9ef0e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["3808b3bd5067a1d82f3196d6888e821674263150"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}