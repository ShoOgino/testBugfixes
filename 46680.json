{"path":"lucene/backwards/src/java/org/apache/lucene/search/Similarity#scorePayload(int,String,int,int,byte[],int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/Similarity#scorePayload(int,String,int,int,byte[],int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/Similarity#scorePayload(int,String,int,int,byte[],int,int).mjava","sourceNew":"  /**\n   * Calculate a scoring factor based on the data in the payload.  Overriding implementations\n   * are responsible for interpreting what is in the payload.  Lucene makes no assumptions about\n   * what is in the byte array.\n   * <p>\n   * The default implementation returns 1.\n   *\n   * @param docId The docId currently being scored.  If this value is {@link #NO_DOC_ID_PROVIDED}, then it should be assumed that the PayloadQuery implementation does not provide document information\n   * @param fieldName The fieldName of the term this payload belongs to\n   * @param start The start position of the payload\n   * @param end The end position of the payload\n   * @param payload The payload byte array to be scored\n   * @param offset The offset into the payload array\n   * @param length The length in the array\n   * @return An implementation dependent float to be used as a scoring factor\n   *\n   */\n  public float scorePayload(int docId, String fieldName, int start, int end, byte [] payload, int offset, int length)\n  {\n    return 1;\n  }\n\n","sourceOld":"  /**\n   * Calculate a scoring factor based on the data in the payload.  Overriding implementations\n   * are responsible for interpreting what is in the payload.  Lucene makes no assumptions about\n   * what is in the byte array.\n   * <p>\n   * The default implementation returns 1.\n   *\n   * @param docId The docId currently being scored.  If this value is {@link #NO_DOC_ID_PROVIDED}, then it should be assumed that the PayloadQuery implementation does not provide document information\n   * @param fieldName The fieldName of the term this payload belongs to\n   * @param start The start position of the payload\n   * @param end The end position of the payload\n   * @param payload The payload byte array to be scored\n   * @param offset The offset into the payload array\n   * @param length The length in the array\n   * @return An implementation dependent float to be used as a scoring factor\n   *\n   */\n  public float scorePayload(int docId, String fieldName, int start, int end, byte [] payload, int offset, int length)\n  {\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/Similarity#scorePayload(int,String,int,int,byte[],int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Calculate a scoring factor based on the data in the payload.  Overriding implementations\n   * are responsible for interpreting what is in the payload.  Lucene makes no assumptions about\n   * what is in the byte array.\n   * <p>\n   * The default implementation returns 1.\n   *\n   * @param docId The docId currently being scored.  If this value is {@link #NO_DOC_ID_PROVIDED}, then it should be assumed that the PayloadQuery implementation does not provide document information\n   * @param fieldName The fieldName of the term this payload belongs to\n   * @param start The start position of the payload\n   * @param end The end position of the payload\n   * @param payload The payload byte array to be scored\n   * @param offset The offset into the payload array\n   * @param length The length in the array\n   * @return An implementation dependent float to be used as a scoring factor\n   *\n   */\n  public float scorePayload(int docId, String fieldName, int start, int end, byte [] payload, int offset, int length)\n  {\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}