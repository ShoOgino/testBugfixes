{"path":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","commits":[{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"323f871ffe96b871d8c534a614be60751bb023c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["323f871ffe96b871d8c534a614be60751bb023c2"],"c26f00b574427b55127e869b935845554afde1fa":["323f871ffe96b871d8c534a614be60751bb023c2","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","323f871ffe96b871d8c534a614be60751bb023c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["323f871ffe96b871d8c534a614be60751bb023c2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","323f871ffe96b871d8c534a614be60751bb023c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"323f871ffe96b871d8c534a614be60751bb023c2":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["323f871ffe96b871d8c534a614be60751bb023c2","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}