{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(stats, context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs(), true);\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(stats, context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(stats, context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(stats, context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs(), true);\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(stats, context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(stats, context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);\n        return result;\n      }\n    }\n\n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(stats, context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(stats, context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);\n        return result;\n      }\n    }\n\n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(stats, context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);          \n        return result;\n      }\n    }\n    \n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(stats, context);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(stats, context);\n        ComplexExplanation result = new ComplexExplanation();\n        result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n        Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n        result.addDetail(scoreExplanation);\n        result.setValue(scoreExplanation.getValue());\n        result.setMatch(true);\n        return result;\n      }\n    }\n\n    return new ComplexExplanation(false, 0.0f, \"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(context);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(stats, context);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4b6308fa66dc96de36abfae5d3e7c92c805e227","date":1432916588,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(simWeight, context);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(context);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context);\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(simWeight, context);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context, context.reader().getLiveDocs());\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(simWeight, context);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"557b118fdfb9d28b6cfe38fac273af58c4d51135","date":1445505363,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    Spans scorer = (Spans) scorer(context);\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(simWeight, context);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = (SpanScorer) scorer(context);\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(simWeight, context);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = scorer(context);\n    if (scorer != null) {\n      int newDoc = scorer.iterator().advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(simWeight, context);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    Spans scorer = (Spans) scorer(context);\n    if (scorer != null) {\n      int newDoc = scorer.advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(simWeight, context);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = scorer(context);\n    if (scorer != null) {\n      int newDoc = scorer.iterator().advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        LeafSimScorer docScorer = new LeafSimScorer(simScorer, context.reader(), true, Float.POSITIVE_INFINITY);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = scorer(context);\n    if (scorer != null) {\n      int newDoc = scorer.iterator().advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(simWeight, context);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c68bfb3354451a11c895b36484af94f27530b79","date":1515505336,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = scorer(context);\n    if (scorer != null) {\n      int newDoc = scorer.iterator().advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        LeafSimScorer docScorer = new LeafSimScorer(simScorer, context.reader(), true, Float.MAX_VALUE);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = scorer(context);\n    if (scorer != null) {\n      int newDoc = scorer.iterator().advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        LeafSimScorer docScorer = new LeafSimScorer(simScorer, context.reader(), true, Float.POSITIVE_INFINITY);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = scorer(context);\n    if (scorer != null) {\n      int newDoc = scorer.iterator().advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        LeafSimScorer docScorer = new LeafSimScorer(simScorer, context.reader(), true, Float.MAX_VALUE);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = scorer(context);\n    if (scorer != null) {\n      int newDoc = scorer.iterator().advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        SimScorer docScorer = similarity.simScorer(simWeight, context);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ea90bc076fbe82be472db33fc80b00eb0bff44f","date":1526486036,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = scorer(context);\n    if (scorer != null) {\n      int newDoc = scorer.iterator().advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        LeafSimScorer docScorer = new LeafSimScorer(simScorer, context.reader(), field, true);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    SpanScorer scorer = scorer(context);\n    if (scorer != null) {\n      int newDoc = scorer.iterator().advance(doc);\n      if (newDoc == doc) {\n        float freq = scorer.sloppyFreq();\n        LeafSimScorer docScorer = new LeafSimScorer(simScorer, context.reader(), true, Float.MAX_VALUE);\n        Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n        Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n        return Explanation.match(scoreExplanation.getValue(),\n            \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n            scoreExplanation);\n      }\n    }\n\n    return Explanation.noMatch(\"no matching term\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"b94236357aaa22b76c10629851fe4e376e0cea82":["7dd748bb245633a8195281556bb0e68a6ea97d18","0c68bfb3354451a11c895b36484af94f27530b79"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"0c68bfb3354451a11c895b36484af94f27530b79":["68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fb17639909a369c1e64866842e5c213440acc17e"],"fab172655716b96f7e42376116235017a922de3a":["fb17639909a369c1e64866842e5c213440acc17e","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"b94236357aaa22b76c10629851fe4e376e0cea82":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0c68bfb3354451a11c895b36484af94f27530b79":["b94236357aaa22b76c10629851fe4e376e0cea82"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["0c68bfb3354451a11c895b36484af94f27530b79"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}