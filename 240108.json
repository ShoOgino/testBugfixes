{"path":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"/dev/null","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      int sz = shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":null,"sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      int sz = shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      int sz = shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      int sz = shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"/dev/null","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      int sz = shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef02613bb5b67b98ca5caf41e8d6e016a0158923","date":1283980033,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      int sz = shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":["718ab708b1705aae7831111fcddfc834665eee61"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      int sz = shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1c5c000a4f7db9f84794088342aa428d80dfa37","date":1303079085,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":["718ab708b1705aae7831111fcddfc834665eee61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is 0 if we received less\n      // than the number requested (provided mincount==0 like it should be for\n      // a shard request)\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = 0;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#add(int,NamedList,int).mjava","sourceNew":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","sourceOld":"    void add(int shardNum, NamedList shardCounts, int numRequested) {\n      // shardCounts could be null if there was an exception\n      int sz = shardCounts == null ? 0 : shardCounts.size();\n      int numReceived = sz;\n\n      OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n      long last = 0;\n      for (int i=0; i<sz; i++) {\n        String name = shardCounts.getName(i);\n        long count = ((Number)shardCounts.getVal(i)).longValue();\n        if (name == null) {\n          missingCount += count;\n          numReceived--;\n        } else {\n          ShardFacetCount sfc = counts.get(name);\n          if (sfc == null) {\n            sfc = new ShardFacetCount();\n            sfc.name = name;\n            sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n            sfc.termNum = termNum++;\n            counts.put(name, sfc);\n          }\n          sfc.count += count;\n          terms.fastSet(sfc.termNum);\n          last = count;\n        }\n      }\n\n      // the largest possible missing term is initialMincount if we received less\n      // than the number requested.\n      if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n        last = initialMincount;\n      }\n\n      missingMaxPossible += last;\n      missingMax[shardNum] = last;\n      counted[shardNum] = terms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef02613bb5b67b98ca5caf41e8d6e016a0158923":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["d1c5c000a4f7db9f84794088342aa428d80dfa37","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ef02613bb5b67b98ca5caf41e8d6e016a0158923","d1c5c000a4f7db9f84794088342aa428d80dfa37"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d1c5c000a4f7db9f84794088342aa428d80dfa37"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ef02613bb5b67b98ca5caf41e8d6e016a0158923","d1c5c000a4f7db9f84794088342aa428d80dfa37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["d1c5c000a4f7db9f84794088342aa428d80dfa37"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"d1c5c000a4f7db9f84794088342aa428d80dfa37":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ef02613bb5b67b98ca5caf41e8d6e016a0158923":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233","d1c5c000a4f7db9f84794088342aa428d80dfa37"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"1da8d55113b689b06716246649de6f62430f15c0":["ef02613bb5b67b98ca5caf41e8d6e016a0158923","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"d1c5c000a4f7db9f84794088342aa428d80dfa37":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}