{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SimpleTerm#makeLuceneQueryFieldNoBoost(String,BasicQueryFactory).mjava","commits":[{"id":"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07","date":1270909388,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SimpleTerm#makeLuceneQueryFieldNoBoost(String,BasicQueryFactory).mjava","pathOld":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SimpleTerm#makeLuceneQueryFieldNoBoost(String,BasicQueryFactory).mjava","sourceNew":"  @Override\n  public Query makeLuceneQueryFieldNoBoost(final String fieldName, final BasicQueryFactory qf) {\n    return new Query() {\n      @Override\n      public String toString(String fn) {\n        return getClass().toString() + \" \" + fieldName + \" (\" + fn + \"?)\";\n      }\n      \n      @Override\n      public Query rewrite(IndexReader reader) throws IOException {\n        final List<Query> luceneSubQueries = new ArrayList<Query>();\n        visitMatchingTerms( reader, fieldName,\n            new MatchingTermVisitor() {\n              public void visitMatchingTerm(Term term) throws IOException {\n                luceneSubQueries.add(qf.newTermQuery(term));\n              }\n            });\n        return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n              : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n              : SrndBooleanQuery.makeBooleanQuery(\n                  /* luceneSubQueries all have default weight */\n                  luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */ \n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Query makeLuceneQueryFieldNoBoost(final String fieldName, final BasicQueryFactory qf) {\n    return new Query() {\n      @Override\n      public String toString(String fn) {\n        return getClass().toString() + \" \" + fieldName + \" (\" + fn + \"?)\";\n      }\n      \n      @Override\n      public Query rewrite(IndexReader reader) throws IOException {\n        final List<Query> luceneSubQueries = new ArrayList<Query>();\n        visitMatchingTerms( reader, fieldName,\n            new MatchingTermVisitor() {\n              public void visitMatchingTerm(Term term) throws IOException {\n                luceneSubQueries.add(qf.newTermQuery(term));\n              }\n            });\n        return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n              : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n              : SrndBooleanQuery.makeBooleanQuery(\n                  /* luceneSubQueries all have default weight */\n                  luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */ \n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTerm#makeLuceneQueryFieldNoBoost(String,BasicQueryFactory).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SimpleTerm#makeLuceneQueryFieldNoBoost(String,BasicQueryFactory).mjava","sourceNew":"  @Override\n  public Query makeLuceneQueryFieldNoBoost(final String fieldName, final BasicQueryFactory qf) {\n    return new Query() {\n      @Override\n      public String toString(String fn) {\n        return getClass().toString() + \" \" + fieldName + \" (\" + fn + \"?)\";\n      }\n      \n      @Override\n      public Query rewrite(IndexReader reader) throws IOException {\n        final List<Query> luceneSubQueries = new ArrayList<Query>();\n        visitMatchingTerms( reader, fieldName,\n            new MatchingTermVisitor() {\n              public void visitMatchingTerm(Term term) throws IOException {\n                luceneSubQueries.add(qf.newTermQuery(term));\n              }\n            });\n        return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n              : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n              : SrndBooleanQuery.makeBooleanQuery(\n                  /* luceneSubQueries all have default weight */\n                  luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */ \n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Query makeLuceneQueryFieldNoBoost(final String fieldName, final BasicQueryFactory qf) {\n    return new Query() {\n      @Override\n      public String toString(String fn) {\n        return getClass().toString() + \" \" + fieldName + \" (\" + fn + \"?)\";\n      }\n      \n      @Override\n      public Query rewrite(IndexReader reader) throws IOException {\n        final List<Query> luceneSubQueries = new ArrayList<Query>();\n        visitMatchingTerms( reader, fieldName,\n            new MatchingTermVisitor() {\n              public void visitMatchingTerm(Term term) throws IOException {\n                luceneSubQueries.add(qf.newTermQuery(term));\n              }\n            });\n        return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n              : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n              : SrndBooleanQuery.makeBooleanQuery(\n                  /* luceneSubQueries all have default weight */\n                  luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */ \n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a53a291ad9b1cc050d846b68758c061a55d52734":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a53a291ad9b1cc050d846b68758c061a55d52734"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}