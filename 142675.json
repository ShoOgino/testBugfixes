{"path":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","commits":[{"id":"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","date":1361894345,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a BytesRef range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return DocIdSet.EMPTY_DOCIDSET;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc06632ede7e48a5ddc6917badec25c8336feedc","date":1366983006,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a BytesRef range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a BytesRef range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return DocIdSet.EMPTY_DOCIDSET;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a BytesRef range filter using {@link AtomicReader#getSortedSetDocValues}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = DocValues.getSortedSet(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a BytesRef range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a BytesRef range filter using {@link AtomicReader#getSortedSetDocValues}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = DocValues.getSortedSet(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a BytesRef range filter using {@link AtomicReader#getSortedSetDocValues}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = DocValues.getSortedSet(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a BytesRef range filter using {@link AtomicReader#getSortedSetDocValues}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = DocValues.getSortedSet(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a BytesRef range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a BytesRef range filter using {@link AtomicReader#getSortedSetDocValues}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = DocValues.getSortedSet(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a BytesRef range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a BytesRef range filter using {@link org.apache.lucene.index.LeafReader#getSortedSetDocValues}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = DocValues.getSortedSet(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a BytesRef range filter using {@link AtomicReader#getSortedSetDocValues}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = DocValues.getSortedSet(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocTermOrdsRangeFilter#newBytesRefRange(String,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a BytesRef range filter using {@link org.apache.lucene.index.LeafReader#getSortedSetDocValues}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocTermOrdsRangeFilter newBytesRefRange(String field, BytesRef lowerVal, BytesRef upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocTermOrdsRangeFilter(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final SortedSetDocValues docTermOrds = DocValues.getSortedSet(context.reader(), field);\n        final long lowerPoint = lowerVal == null ? -1 : docTermOrds.lookupTerm(lowerVal);\n        final long upperPoint = upperVal == null ? -1 : docTermOrds.lookupTerm(upperVal);\n\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns -1, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == -1 && lowerVal == null) {\n          inclusiveLowerPoint = 0;\n        } else if (includeLower && lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint >= 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(0, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == -1 && upperVal == null) {\n          inclusiveUpperPoint = Long.MAX_VALUE;  \n        } else if (includeUpper && upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint >= 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint < 0 || inclusiveLowerPoint > inclusiveUpperPoint) {\n          return null;\n        }\n        \n        assert inclusiveLowerPoint >= 0 && inclusiveUpperPoint >= 0;\n        \n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            docTermOrds.setDocument(doc);\n            long ord;\n            while ((ord = docTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ord > inclusiveUpperPoint) {\n                return false;\n              } else if (ord >= inclusiveLowerPoint) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9274621789ce990dbfef455dabdf026bb3184821":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["dc06632ede7e48a5ddc6917badec25c8336feedc","9274621789ce990dbfef455dabdf026bb3184821"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"56572ec06f1407c066d6b7399413178b33176cd8":["dc06632ede7e48a5ddc6917badec25c8336feedc","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["484e80062d7ab2729bc82f0311d6a97dd913961a"]},"commit2Childs":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["9274621789ce990dbfef455dabdf026bb3184821"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}