{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermStatsEquals(String,TermsEnum,TermsEnum).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermStatsEquals(String,TermsEnum,TermsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermStats(TermsEnum,TermsEnum).mjava","sourceNew":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStatsEquals(String info, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws IOException {\n    assertEquals(info, leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (leftTermsEnum.totalTermFreq() != -1 && rightTermsEnum.totalTermFreq() != -1) {\n      assertEquals(info, leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","sourceOld":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws Exception {\n    assertEquals(info, leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (leftTermsEnum.totalTermFreq() != -1 && rightTermsEnum.totalTermFreq() != -1) {\n      assertEquals(info, leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermStatsEquals(String,TermsEnum,TermsEnum).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermStatsEquals(String,TermsEnum,TermsEnum).mjava","sourceNew":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStatsEquals(String info, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws IOException {\n    assertEquals(info, leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    assertEquals(info, leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n  }\n\n","sourceOld":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStatsEquals(String info, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws IOException {\n    assertEquals(info, leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (leftTermsEnum.totalTermFreq() != -1 && rightTermsEnum.totalTermFreq() != -1) {\n      assertEquals(info, leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermStatsEquals(String,TermsEnum,TermsEnum).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermStatsEquals(String,TermsEnum,TermsEnum).mjava","sourceNew":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStatsEquals(String info, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws IOException {\n    assertEquals(info, leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    assertEquals(info, leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n  }\n\n","sourceOld":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStatsEquals(String info, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws IOException {\n    assertEquals(info, leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (leftTermsEnum.totalTermFreq() != -1 && rightTermsEnum.totalTermFreq() != -1) {\n      assertEquals(info, leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"086ffe31d8fba0110227db122974163709ecc1b4":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["51c8450b3b616b6777f722ff4083c0bf946381a2","086ffe31d8fba0110227db122974163709ecc1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}