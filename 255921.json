{"path":"lucene/src/java/org/apache/lucene/index/Terms#intersect(CompiledAutomaton,BytesRef).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a TermsEnum that iterates over all terms that\n   *  are accepted by the provided {@link\n   *  CompiledAutomaton}.  If the <code>startTerm</code> is\n   *  provided then the returned enum will only accept terms\n   *  > <code>startTerm</code>, but you still must call\n   *  next() first to get to the first term.  Note that the\n   *  provided <code>startTerm</code> must be accepted by\n   *  the automaton.\n   *\n   * <p><b>NOTE</b>: the returned TermsEnum cannot\n   * seek</p>. */\n  public TermsEnum intersect(CompiledAutomaton compiled, final BytesRef startTerm) throws IOException {\n    // TODO: eventually we could support seekCeil/Exact on\n    // the returned enum, instead of only being able to seek\n    // at the start\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    if (startTerm == null) {\n      return new AutomatonTermsEnum(iterator(), compiled);\n    } else {\n      return new AutomatonTermsEnum(iterator(), compiled) {\n        @Override\n        protected BytesRef nextSeekTerm(BytesRef term) throws IOException {\n          if (term == null) {\n            term = startTerm;\n          }\n          return super.nextSeekTerm(term);\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"  /** Returns a TermsEnum that iterates over all terms that\n   *  are accepted by the provided {@link\n   *  CompiledAutomaton}.  If the <code>startTerm</code> is\n   *  provided then the returned enum will only accept terms\n   *  > <code>startTerm</code>, but you still must call\n   *  next() first to get to the first term.  Note that the\n   *  provided <code>startTerm</code> must be accepted by\n   *  the automaton.\n   *\n   * <p><b>NOTE</b>: the returned TermsEnum cannot\n   * seek</p>. */\n  public TermsEnum intersect(CompiledAutomaton compiled, final BytesRef startTerm) throws IOException {\n    // TODO: eventually we could support seekCeil/Exact on\n    // the returned enum, instead of only being able to seek\n    // at the start\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    if (startTerm == null) {\n      return new AutomatonTermsEnum(iterator(null), compiled);\n    } else {\n      return new AutomatonTermsEnum(iterator(null), compiled) {\n        @Override\n        protected BytesRef nextSeekTerm(BytesRef term) throws IOException {\n          if (term == null) {\n            term = startTerm;\n          }\n          return super.nextSeekTerm(term);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that iterates over all terms that\n   *  are accepted by the provided {@link\n   *  CompiledAutomaton}.  If the <code>startTerm</code> is\n   *  provided then the returned enum will only accept terms\n   *  > <code>startTerm</code>, but you still must call\n   *  next() first to get to the first term.  Note that the\n   *  provided <code>startTerm</code> must be accepted by\n   *  the automaton.\n   *\n   * <p><b>NOTE</b>: the returned TermsEnum cannot\n   * seek</p>. */\n  public TermsEnum intersect(CompiledAutomaton compiled, final BytesRef startTerm) throws IOException {\n    // TODO: eventually we could support seekCeil/Exact on\n    // the returned enum, instead of only being able to seek\n    // at the start\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    if (startTerm == null) {\n      return new AutomatonTermsEnum(iterator(), compiled);\n    } else {\n      return new AutomatonTermsEnum(iterator(), compiled) {\n        @Override\n        protected BytesRef nextSeekTerm(BytesRef term) throws IOException {\n          if (term == null) {\n            term = startTerm;\n          }\n          return super.nextSeekTerm(term);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Terms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"  /** Returns a TermsEnum that iterates over all terms that\n   *  are accepted by the provided {@link\n   *  CompiledAutomaton}.  If the <code>startTerm</code> is\n   *  provided then the returned enum will only accept terms\n   *  > <code>startTerm</code>, but you still must call\n   *  next() first to get to the first term.  Note that the\n   *  provided <code>startTerm</code> must be accepted by\n   *  the automaton.\n   *\n   * <p><b>NOTE</b>: the returned TermsEnum cannot\n   * seek</p>. */\n  public TermsEnum intersect(CompiledAutomaton compiled, final BytesRef startTerm) throws IOException {\n    // TODO: eventually we could support seekCeil/Exact on\n    // the returned enum, instead of only being able to seek\n    // at the start\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    if (startTerm == null) {\n      return new AutomatonTermsEnum(iterator(null), compiled);\n    } else {\n      return new AutomatonTermsEnum(iterator(null), compiled) {\n        @Override\n        protected BytesRef nextSeekTerm(BytesRef term) throws IOException {\n          if (term == null) {\n            term = startTerm;\n          }\n          return super.nextSeekTerm(term);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that iterates over all terms that\n   *  are accepted by the provided {@link\n   *  CompiledAutomaton}.  If the <code>startTerm</code> is\n   *  provided then the returned enum will only accept terms\n   *  > <code>startTerm</code>, but you still must call\n   *  next() first to get to the first term.  Note that the\n   *  provided <code>startTerm</code> must be accepted by\n   *  the automaton.\n   *\n   * <p><b>NOTE</b>: the returned TermsEnum cannot\n   * seek</p>. */\n  public TermsEnum intersect(CompiledAutomaton compiled, final BytesRef startTerm) throws IOException {\n    // TODO: eventually we could support seekCeil/Exact on\n    // the returned enum, instead of only being able to seek\n    // at the start\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    if (startTerm == null) {\n      return new AutomatonTermsEnum(iterator(null), compiled);\n    } else {\n      return new AutomatonTermsEnum(iterator(null), compiled) {\n        @Override\n        protected BytesRef nextSeekTerm(BytesRef term) throws IOException {\n          if (term == null) {\n            term = startTerm;\n          }\n          return super.nextSeekTerm(term);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}