{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testDocsEnum().mjava","commits":[{"id":"cb767289784b682dea51f9e6d7222add811edb77","date":1362902138,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testDocsEnum().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDocsEnum() throws Exception {\n    Term term = new Term(DOCS_ENUM_FIELD, DOCS_ENUM_TERM);\n    DocsEnum docs = reader.termDocsEnum(term);\n    Bits mappedLiveDocs = reader.getLiveDocs();\n    int doc;\n    int prev = -1;\n    while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (mappedLiveDocs != null) {\n        assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs.get(doc));\n      }\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(reader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs.get(prev));\n      }\n    }\n    \n    docs = reader.termDocsEnum(term);\n    doc = 0;\n    prev = -1;\n    while ((doc = docs.advance(doc)) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (mappedLiveDocs != null) {\n        assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs.get(doc));\n      }\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(reader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs.get(prev));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b064dbb1533155122c805e1d26c3fc1df1a599e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b064dbb1533155122c805e1d26c3fc1df1a599e0","date":1363340948,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testDocsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testDocsEnum().mjava","sourceNew":"  @Test\n  public void testDocsEnum() throws Exception {\n    Bits mappedLiveDocs = randomLiveDocs(reader.maxDoc());\n    TermsEnum termsEnum = reader.terms(DOCS_ENUM_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOCS_ENUM_TERM)));\n    DocsEnum docs = termsEnum.docs(mappedLiveDocs, null);\n\n    int doc;\n    int prev = -1;\n    while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(reader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n    \n    docs = termsEnum.docs(mappedLiveDocs, docs);\n    doc = -1;\n    prev = -1;\n    while ((doc = docs.advance(doc + 1)) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(reader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocsEnum() throws Exception {\n    Term term = new Term(DOCS_ENUM_FIELD, DOCS_ENUM_TERM);\n    DocsEnum docs = reader.termDocsEnum(term);\n    Bits mappedLiveDocs = reader.getLiveDocs();\n    int doc;\n    int prev = -1;\n    while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (mappedLiveDocs != null) {\n        assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs.get(doc));\n      }\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(reader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs.get(prev));\n      }\n    }\n    \n    docs = reader.termDocsEnum(term);\n    doc = 0;\n    prev = -1;\n    while ((doc = docs.advance(doc)) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (mappedLiveDocs != null) {\n        assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs.get(doc));\n      }\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(reader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs.get(prev));\n      }\n    }\n  }\n\n","bugFix":["cb767289784b682dea51f9e6d7222add811edb77"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a260e1fefced66a58d52044266f9fa20d81ae74b","date":1363613778,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testDocsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testDocsEnum().mjava","sourceNew":"  @Test\n  public void testDocsEnum() throws Exception {\n    Bits mappedLiveDocs = randomLiveDocs(reader.maxDoc());\n    TermsEnum termsEnum = reader.terms(DOCS_ENUM_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOCS_ENUM_TERM)));\n    DocsEnum docs = termsEnum.docs(mappedLiveDocs, null);\n\n    int doc;\n    int prev = -1;\n    while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(reader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n    while (++prev < reader.maxDoc()) {\n      assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n    }\n\n    DocsEnum reuse = docs;\n    docs = termsEnum.docs(mappedLiveDocs, reuse);\n    if (docs instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) docs).reused(reuse)); // make sure reuse worked\n    }\n    doc = -1;\n    prev = -1;\n    while ((doc = docs.advance(doc + 1)) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(reader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n    while (++prev < reader.maxDoc()) {\n      assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocsEnum() throws Exception {\n    Bits mappedLiveDocs = randomLiveDocs(reader.maxDoc());\n    TermsEnum termsEnum = reader.terms(DOCS_ENUM_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOCS_ENUM_TERM)));\n    DocsEnum docs = termsEnum.docs(mappedLiveDocs, null);\n\n    int doc;\n    int prev = -1;\n    while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(reader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n    \n    docs = termsEnum.docs(mappedLiveDocs, docs);\n    doc = -1;\n    prev = -1;\n    while ((doc = docs.advance(doc + 1)) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(reader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c17ec76fa103f80e80ed20ee425dbc357fb1356f","date":1414420673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testDocsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testDocsEnum().mjava","sourceNew":"  @Test\n  public void testDocsEnum() throws Exception {\n    Bits mappedLiveDocs = randomLiveDocs(sortedReader.maxDoc());\n    TermsEnum termsEnum = sortedReader.terms(DOCS_ENUM_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOCS_ENUM_TERM)));\n    DocsEnum docs = termsEnum.docs(mappedLiveDocs, null);\n\n    int doc;\n    int prev = -1;\n    while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(sortedReader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n    while (++prev < sortedReader.maxDoc()) {\n      assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n    }\n\n    DocsEnum reuse = docs;\n    docs = termsEnum.docs(mappedLiveDocs, reuse);\n    if (docs instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) docs).reused(reuse)); // make sure reuse worked\n    }\n    doc = -1;\n    prev = -1;\n    while ((doc = docs.advance(doc + 1)) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(sortedReader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n    while (++prev < sortedReader.maxDoc()) {\n      assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocsEnum() throws Exception {\n    Bits mappedLiveDocs = randomLiveDocs(reader.maxDoc());\n    TermsEnum termsEnum = reader.terms(DOCS_ENUM_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOCS_ENUM_TERM)));\n    DocsEnum docs = termsEnum.docs(mappedLiveDocs, null);\n\n    int doc;\n    int prev = -1;\n    while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(reader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n    while (++prev < reader.maxDoc()) {\n      assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n    }\n\n    DocsEnum reuse = docs;\n    docs = termsEnum.docs(mappedLiveDocs, reuse);\n    if (docs instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) docs).reused(reuse)); // make sure reuse worked\n    }\n    doc = -1;\n    prev = -1;\n    while ((doc = docs.advance(doc + 1)) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(reader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n    while (++prev < reader.maxDoc()) {\n      assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDocsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testDocsEnum().mjava","sourceNew":"  @Test\n  public void testDocsEnum() throws Exception {\n    Bits mappedLiveDocs = randomLiveDocs(sortedReader.maxDoc());\n    TermsEnum termsEnum = sortedReader.terms(DOCS_ENUM_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOCS_ENUM_TERM)));\n    DocsEnum docs = termsEnum.docs(mappedLiveDocs, null);\n\n    int doc;\n    int prev = -1;\n    while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(sortedReader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n    while (++prev < sortedReader.maxDoc()) {\n      assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n    }\n\n    DocsEnum reuse = docs;\n    docs = termsEnum.docs(mappedLiveDocs, reuse);\n    if (docs instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) docs).reused(reuse)); // make sure reuse worked\n    }\n    doc = -1;\n    prev = -1;\n    while ((doc = docs.advance(doc + 1)) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(sortedReader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n    while (++prev < sortedReader.maxDoc()) {\n      assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocsEnum() throws Exception {\n    Bits mappedLiveDocs = randomLiveDocs(sortedReader.maxDoc());\n    TermsEnum termsEnum = sortedReader.terms(DOCS_ENUM_FIELD).iterator(null);\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(DOCS_ENUM_TERM)));\n    DocsEnum docs = termsEnum.docs(mappedLiveDocs, null);\n\n    int doc;\n    int prev = -1;\n    while ((doc = docs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(sortedReader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n    while (++prev < sortedReader.maxDoc()) {\n      assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n    }\n\n    DocsEnum reuse = docs;\n    docs = termsEnum.docs(mappedLiveDocs, reuse);\n    if (docs instanceof SortingDocsEnum) {\n      assertTrue(((SortingDocsEnum) docs).reused(reuse)); // make sure reuse worked\n    }\n    doc = -1;\n    prev = -1;\n    while ((doc = docs.advance(doc + 1)) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue(\"document \" + doc + \" marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(doc));\n      assertEquals(\"incorrect value; doc \" + doc, sortedValues[doc].intValue(), Integer.parseInt(sortedReader.document(doc).get(ID_FIELD)));\n      while (++prev < doc) {\n        assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n      }\n    }\n    while (++prev < sortedReader.maxDoc()) {\n      assertFalse(\"document \" + prev + \" not marked as deleted\", mappedLiveDocs == null || mappedLiveDocs.get(prev));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a260e1fefced66a58d52044266f9fa20d81ae74b":["b064dbb1533155122c805e1d26c3fc1df1a599e0"],"b064dbb1533155122c805e1d26c3fc1df1a599e0":["cb767289784b682dea51f9e6d7222add811edb77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c17ec76fa103f80e80ed20ee425dbc357fb1356f":["a260e1fefced66a58d52044266f9fa20d81ae74b"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c17ec76fa103f80e80ed20ee425dbc357fb1356f"],"cb767289784b682dea51f9e6d7222add811edb77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"]},"commit2Childs":{"a260e1fefced66a58d52044266f9fa20d81ae74b":["c17ec76fa103f80e80ed20ee425dbc357fb1356f"],"b064dbb1533155122c805e1d26c3fc1df1a599e0":["a260e1fefced66a58d52044266f9fa20d81ae74b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb767289784b682dea51f9e6d7222add811edb77"],"c17ec76fa103f80e80ed20ee425dbc357fb1356f":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"cb767289784b682dea51f9e6d7222add811edb77":["b064dbb1533155122c805e1d26c3fc1df1a599e0"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}