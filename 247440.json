{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimTwoValues().mjava","commits":[{"id":"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","date":1468339076,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimTwoValues().mjava","pathOld":"/dev/null","sourceNew":"  // this should trigger run-length compression with lengths that are greater than 255\n  public void testOneDimTwoValues() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    int numDocs = atLeast(1000);\n    int theDim = random().nextInt(numDims);\n    byte[] value1 = new byte[numBytesPerDim];\n    random().nextBytes(value1);\n    byte[] value2 = new byte[numBytesPerDim];\n    random().nextBytes(value2);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        if (dim == theDim) {\n          values[dim] = random().nextBoolean() ? value1 : value2;\n        } else {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimTwoValues().mjava","pathOld":"/dev/null","sourceNew":"  // this should trigger run-length compression with lengths that are greater than 255\n  public void testOneDimTwoValues() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    int numDocs = atLeast(1000);\n    int theDim = random().nextInt(numDims);\n    byte[] value1 = new byte[numBytesPerDim];\n    random().nextBytes(value1);\n    byte[] value2 = new byte[numBytesPerDim];\n    random().nextBytes(value2);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        if (dim == theDim) {\n          values[dim] = random().nextBoolean() ? value1 : value2;\n        } else {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimTwoValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimTwoValues().mjava","sourceNew":"  // this should trigger run-length compression with lengths that are greater than 255\n  public void testOneDimTwoValues() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 1, 5);\n    int numIndexDims = TestUtil.nextInt(random(), 1, numDataDims);\n\n    int numDocs = atLeast(1000);\n    int theDim = random().nextInt(numDataDims);\n    byte[] value1 = new byte[numBytesPerDim];\n    random().nextBytes(value1);\n    byte[] value2 = new byte[numBytesPerDim];\n    random().nextBytes(value2);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        if (dim == theDim) {\n          values[dim] = random().nextBoolean() ? value1 : value2;\n        } else {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim);\n  }\n\n","sourceOld":"  // this should trigger run-length compression with lengths that are greater than 255\n  public void testOneDimTwoValues() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    int numDocs = atLeast(1000);\n    int theDim = random().nextInt(numDims);\n    byte[] value1 = new byte[numBytesPerDim];\n    random().nextBytes(value1);\n    byte[] value2 = new byte[numBytesPerDim];\n    random().nextBytes(value2);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        if (dim == theDim) {\n          values[dim] = random().nextBoolean() ? value1 : value2;\n        } else {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimTwoValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testOneDimTwoValues().mjava","sourceNew":"  // this should trigger run-length compression with lengths that are greater than 255\n  public void testOneDimTwoValues() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n    int numIndexDims = Math.min(TestUtil.nextInt(random(), 1, numDataDims), PointValues.MAX_INDEX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    int theDim = random().nextInt(numDataDims);\n    byte[] value1 = new byte[numBytesPerDim];\n    random().nextBytes(value1);\n    byte[] value2 = new byte[numBytesPerDim];\n    random().nextBytes(value2);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        if (dim == theDim) {\n          values[dim] = random().nextBoolean() ? value1 : value2;\n        } else {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim);\n  }\n\n","sourceOld":"  // this should trigger run-length compression with lengths that are greater than 255\n  public void testOneDimTwoValues() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 1, 5);\n    int numIndexDims = TestUtil.nextInt(random(), 1, numDataDims);\n\n    int numDocs = atLeast(1000);\n    int theDim = random().nextInt(numDataDims);\n    byte[] value1 = new byte[numBytesPerDim];\n    random().nextBytes(value1);\n    byte[] value2 = new byte[numBytesPerDim];\n    random().nextBytes(value2);\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        if (dim == theDim) {\n          values[dim] = random().nextBoolean() ? value1 : value2;\n        } else {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDataDims, numIndexDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["f6652c943595e92c187ee904c382863013eae28f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}