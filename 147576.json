{"path":"solr/core/src/test/org/apache/hadoop/fs/RawLocalFileSystem#getNativeFileLinkStatus(Path,boolean).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/RawLocalFileSystem#getNativeFileLinkStatus(Path,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calls out to platform's native stat(1) implementation to get file metadata\n   * (permissions, user, group, atime, mtime, etc). This works around the lack\n   * of lstat(2) in Java 6.\n   *\n   *  Currently, the {@link Stat} class used to do this only supports Linux\n   *  and FreeBSD, so the old {@link #deprecatedGetFileLinkStatusInternal(Path)}\n   *  implementation (deprecated) remains further OS support is added.\n   *\n   * @param f File to stat\n   * @param dereference whether to dereference symlinks\n   * @return FileStatus of f\n   * @throws IOException Exception on getNativeFileLinkStatus\n   */\n  private FileStatus getNativeFileLinkStatus(final Path f,\n                                             boolean dereference) throws IOException {\n    checkPath(f);\n    Stat stat = new Stat(f, getDefaultBlockSize(f), dereference, this);\n    return stat.getFileStatus();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/RawLocalFileSystem#getNativeFileLinkStatus(Path,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calls out to platform's native stat(1) implementation to get file metadata\n   * (permissions, user, group, atime, mtime, etc). This works around the lack\n   * of lstat(2) in Java 6.\n   *\n   *  Currently, the {@link Stat} class used to do this only supports Linux\n   *  and FreeBSD, so the old {@link #deprecatedGetFileLinkStatusInternal(Path)}\n   *  implementation (deprecated) remains further OS support is added.\n   *\n   * @param f File to stat\n   * @param dereference whether to dereference symlinks\n   * @return FileStatus of f\n   * @throws IOException Exception on getNativeFileLinkStatus\n   */\n  private FileStatus getNativeFileLinkStatus(final Path f,\n                                             boolean dereference) throws IOException {\n    checkPath(f);\n    Stat stat = new Stat(f, getDefaultBlockSize(f), dereference, this);\n    return stat.getFileStatus();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}