{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#[T-extends-ClusteringEngine]_setupDefaultEngine(String,LinkedHashMap[String,T]).mjava","commits":[{"id":"788184b02a01588fb0bca602e39018a580397a99","date":1378925127,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#[T-extends-ClusteringEngine]_setupDefaultEngine(String,LinkedHashMap[String,T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Setup the default clustering engine.\n   * @see \"https://issues.apache.org/jira/browse/SOLR-5219\"\n   */\n  private static <T extends ClusteringEngine> void setupDefaultEngine(String type, LinkedHashMap<String,T> map) {\n    // If there's already a default algorithm, leave it as is.\n    if (map.containsKey(ClusteringEngine.DEFAULT_ENGINE_NAME)) {\n      return;\n    }\n  \n    // If there's no default algorithm, and there are any algorithms available, \n    // the first definition becomes the default algorithm.\n    if (!map.isEmpty()) {\n      Entry<String,T> first = map.entrySet().iterator().next();\n      map.put(ClusteringEngine.DEFAULT_ENGINE_NAME, first.getValue());\n      log.info(\"Default engine for \" + type + \": \" + first.getKey());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5","date":1440505299,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#[T-extends-ClusteringEngine]_setupDefaultEngine(String,LinkedHashMap[String,T]).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#[T-extends-ClusteringEngine]_setupDefaultEngine(String,LinkedHashMap[String,T]).mjava","sourceNew":"  /**\n   * Setup the default clustering engine.\n   * @see \"https://issues.apache.org/jira/browse/SOLR-5219\"\n   */\n  private static <T extends ClusteringEngine> void setupDefaultEngine(String type, LinkedHashMap<String,T> map) {\n    // If there's already a default algorithm, leave it as is.\n    String engineName = ClusteringEngine.DEFAULT_ENGINE_NAME;\n    T defaultEngine = map.get(engineName);\n\n    if (defaultEngine == null ||\n        !defaultEngine.isAvailable()) {\n      // If there's no default algorithm, and there are any algorithms available, \n      // the first definition becomes the default algorithm.\n      for (Map.Entry<String, T> e : map.entrySet()) {\n        if (e.getValue().isAvailable()) {\n          engineName = e.getKey();\n          defaultEngine = e.getValue();\n          map.put(ClusteringEngine.DEFAULT_ENGINE_NAME, defaultEngine);\n          break;\n        }\n      }\n    }\n\n    if (defaultEngine != null) {\n      log.info(\"Default engine for \" + type + \": \" + engineName + \" [\" + defaultEngine.getClass().getSimpleName() + \"]\");\n    } else {\n      log.warn(\"No default engine for \" + type + \".\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Setup the default clustering engine.\n   * @see \"https://issues.apache.org/jira/browse/SOLR-5219\"\n   */\n  private static <T extends ClusteringEngine> void setupDefaultEngine(String type, LinkedHashMap<String,T> map) {\n    // If there's already a default algorithm, leave it as is.\n    if (map.containsKey(ClusteringEngine.DEFAULT_ENGINE_NAME)) {\n      return;\n    }\n  \n    // If there's no default algorithm, and there are any algorithms available, \n    // the first definition becomes the default algorithm.\n    if (!map.isEmpty()) {\n      Entry<String,T> first = map.entrySet().iterator().next();\n      map.put(ClusteringEngine.DEFAULT_ENGINE_NAME, first.getValue());\n      log.info(\"Default engine for \" + type + \": \" + first.getKey());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#[T-extends-ClusteringEngine]_setupDefaultEngine(String,LinkedHashMap[String,T]).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#[T-extends-ClusteringEngine]_setupDefaultEngine(String,LinkedHashMap[String,T]).mjava","sourceNew":"  /**\n   * Setup the default clustering engine.\n   * @see \"https://issues.apache.org/jira/browse/SOLR-5219\"\n   */\n  private static <T extends ClusteringEngine> void setupDefaultEngine(String type, LinkedHashMap<String,T> map) {\n    // If there's already a default algorithm, leave it as is.\n    String engineName = ClusteringEngine.DEFAULT_ENGINE_NAME;\n    T defaultEngine = map.get(engineName);\n\n    if (defaultEngine == null ||\n        !defaultEngine.isAvailable()) {\n      // If there's no default algorithm, and there are any algorithms available, \n      // the first definition becomes the default algorithm.\n      for (Map.Entry<String, T> e : map.entrySet()) {\n        if (e.getValue().isAvailable()) {\n          engineName = e.getKey();\n          defaultEngine = e.getValue();\n          map.put(ClusteringEngine.DEFAULT_ENGINE_NAME, defaultEngine);\n          break;\n        }\n      }\n    }\n\n    if (defaultEngine != null) {\n      if (log.isInfoEnabled()) {\n        log.info(\"Default engine for {}: {} [{}]\", type, engineName, defaultEngine.getClass().getSimpleName());\n      }\n    } else {\n      log.warn(\"No default engine for {}.\", type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Setup the default clustering engine.\n   * @see \"https://issues.apache.org/jira/browse/SOLR-5219\"\n   */\n  private static <T extends ClusteringEngine> void setupDefaultEngine(String type, LinkedHashMap<String,T> map) {\n    // If there's already a default algorithm, leave it as is.\n    String engineName = ClusteringEngine.DEFAULT_ENGINE_NAME;\n    T defaultEngine = map.get(engineName);\n\n    if (defaultEngine == null ||\n        !defaultEngine.isAvailable()) {\n      // If there's no default algorithm, and there are any algorithms available, \n      // the first definition becomes the default algorithm.\n      for (Map.Entry<String, T> e : map.entrySet()) {\n        if (e.getValue().isAvailable()) {\n          engineName = e.getKey();\n          defaultEngine = e.getValue();\n          map.put(ClusteringEngine.DEFAULT_ENGINE_NAME, defaultEngine);\n          break;\n        }\n      }\n    }\n\n    if (defaultEngine != null) {\n      log.info(\"Default engine for \" + type + \": \" + engineName + \" [\" + defaultEngine.getClass().getSimpleName() + \"]\");\n    } else {\n      log.warn(\"No default engine for \" + type + \".\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"788184b02a01588fb0bca602e39018a580397a99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5":["788184b02a01588fb0bca602e39018a580397a99"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["788184b02a01588fb0bca602e39018a580397a99"],"788184b02a01588fb0bca602e39018a580397a99":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5"],"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}