{"path":"src/test/org/apache/lucene/index/TestPayloads#assertByteArrayEquals(byte[],byte[]).mjava","commits":[{"id":"8522ae207a56c6db28ca06fe6cc33e70911c3600","date":1173935743,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#assertByteArrayEquals(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"    void assertByteArrayEquals(byte[] b1, byte[] b2) {\r\n        if (b1.length != b2.length) {\r\n          fail(\"Byte arrays have different lengths: \" + b1.length + \", \" + b2.length);\r\n        }\r\n        \r\n        for (int i = 0; i < b1.length; i++) {\r\n          if (b1[i] != b2[i]) {\r\n            fail(\"Byte arrays different at index \" + i + \": \" + b1[i] + \", \" + b2[i]);\r\n          }\r\n        }\r\n      }    \r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#assertByteArrayEquals(byte[],byte[]).mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#assertByteArrayEquals(byte[],byte[]).mjava","sourceNew":"    void assertByteArrayEquals(byte[] b1, byte[] b2) {\n        if (b1.length != b2.length) {\n          fail(\"Byte arrays have different lengths: \" + b1.length + \", \" + b2.length);\n        }\n        \n        for (int i = 0; i < b1.length; i++) {\n          if (b1[i] != b2[i]) {\n            fail(\"Byte arrays different at index \" + i + \": \" + b1[i] + \", \" + b2[i]);\n          }\n        }\n      }    \n\n","sourceOld":"    void assertByteArrayEquals(byte[] b1, byte[] b2) {\r\n        if (b1.length != b2.length) {\r\n          fail(\"Byte arrays have different lengths: \" + b1.length + \", \" + b2.length);\r\n        }\r\n        \r\n        for (int i = 0; i < b1.length; i++) {\r\n          if (b1[i] != b2[i]) {\r\n            fail(\"Byte arrays different at index \" + i + \": \" + b1[i] + \", \" + b2[i]);\r\n          }\r\n        }\r\n      }    \r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#assertByteArrayEquals(byte[],byte[]).mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#assertByteArrayEquals(byte[],byte[]).mjava","sourceNew":"    void assertByteArrayEquals(byte[] b1, byte[] b2) {\n        if (b1.length != b2.length) {\n          fail(\"Byte arrays have different lengths: \" + b1.length + \", \" + b2.length);\n        }\n        \n        for (int i = 0; i < b1.length; i++) {\n          if (b1[i] != b2[i]) {\n            fail(\"Byte arrays different at index \" + i + \": \" + b1[i] + \", \" + b2[i]);\n          }\n        }\n      }    \n\n","sourceOld":"    void assertByteArrayEquals(byte[] b1, byte[] b2) {\n        if (b1.length != b2.length) {\n          fail(\"Byte arrays have different lengths: \" + b1.length + \", \" + b2.length);\n        }\n        \n        for (int i = 0; i < b1.length; i++) {\n          if (b1[i] != b2[i]) {\n            fail(\"Byte arrays different at index \" + i + \": \" + b1[i] + \", \" + b2[i]);\n          }\n        }\n      }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8522ae207a56c6db28ca06fe6cc33e70911c3600":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2123bddbd65dea198cac380540636ce43a880403"]},"commit2Childs":{"8522ae207a56c6db28ca06fe6cc33e70911c3600":["2123bddbd65dea198cac380540636ce43a880403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"2123bddbd65dea198cac380540636ce43a880403":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}