{"path":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() {\n    //Check to see the files were created properly in setup\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, IndexFileNames.VECTORS_DOCUMENTS_EXTENSION)));\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, IndexFileNames.VECTORS_INDEX_EXTENSION)));\n  }\n\n","sourceOld":"  public void test() {\n    //Check to see the files were created properly in setup\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, IndexFileNames.VECTORS_DOCUMENTS_EXTENSION)));\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, IndexFileNames.VECTORS_INDEX_EXTENSION)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() {\n    //Check to see the files were created properly in setup\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION)));\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)));\n  }\n\n","sourceOld":"  public void test() {\n    //Check to see the files were created properly in setup\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, IndexFileNames.VECTORS_DOCUMENTS_EXTENSION)));\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, IndexFileNames.VECTORS_INDEX_EXTENSION)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION)));\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)));\n  }\n\n","sourceOld":"  public void test() {\n    //Check to see the files were created properly in setup\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION)));\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION)));\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)));\n  }\n\n","sourceOld":"  public void test() {\n    //Check to see the files were created properly in setup\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION)));\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    IndexReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(dir, s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION)));\n    assertTrue(dir.fileExists(IndexFileNames.segmentFileName(seg, \"\", IndexFileNames.VECTORS_INDEX_EXTENSION)));\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78977ccc47b451a8e645b77504e2ef0a05e4b1a3","date":1327846052,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    IndexReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    IndexReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(dir, s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7691ea136150eacefce3ffb555d3a61caf9dff5","date":1327858534,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(dir, s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    IndexReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(dir, s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"296df632fd63421ea20756fa11ad36fbc6f4c8a9","date":1327957998,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    IndexReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    IndexReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(dir, s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(dir, s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    IndexReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Check to see the files were created properly in setup\n    DirectoryReader reader = IndexReader.open(dir);\n    for (IndexReader r : reader.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertTrue(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertFalse(files.isEmpty());\n      for (String file : files) {\n        assertTrue(dir.fileExists(file));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"410e066f093e407222d9681429d209084e783149":["d7691ea136150eacefce3ffb555d3a61caf9dff5","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3cc749c053615f5871f3b95715fe292f34e70a53":["a05409176bd65129d67a785ee70e881e238a9aef"],"78977ccc47b451a8e645b77504e2ef0a05e4b1a3":["3cc749c053615f5871f3b95715fe292f34e70a53"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","a05409176bd65129d67a785ee70e881e238a9aef"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["3cc749c053615f5871f3b95715fe292f34e70a53","78977ccc47b451a8e645b77504e2ef0a05e4b1a3"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["296df632fd63421ea20756fa11ad36fbc6f4c8a9","410e066f093e407222d9681429d209084e783149"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d7691ea136150eacefce3ffb555d3a61caf9dff5":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"410e066f093e407222d9681429d209084e783149":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cc749c053615f5871f3b95715fe292f34e70a53":["78977ccc47b451a8e645b77504e2ef0a05e4b1a3","296df632fd63421ea20756fa11ad36fbc6f4c8a9","d7691ea136150eacefce3ffb555d3a61caf9dff5"],"78977ccc47b451a8e645b77504e2ef0a05e4b1a3":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["410e066f093e407222d9681429d209084e783149","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d7691ea136150eacefce3ffb555d3a61caf9dff5":["410e066f093e407222d9681429d209084e783149"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["3cc749c053615f5871f3b95715fe292f34e70a53","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}