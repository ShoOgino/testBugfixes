{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DDocValuesField#newOutsideBoxSort(String,double,double,double,double).mjava","commits":[{"id":"92055e521d116ed29034d95584c3269d4528afa9","date":1463576632,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DDocValuesField#newOutsideBoxSort(String,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a SortField for sorting by outside distance from a box.\n   * <p>\n   * This sort orders documents by ascending outside distance from the box.  Points within the box have distance 0.0.\n   * The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the box is used.\n   * \n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or box has invalid coordinates.\n   */\n  public static SortField newOutsideBoxSort(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    final GeoOutsideDistance shape = Geo3DUtil.fromBox(minLatitude, maxLatitude, minLongitude, maxLongitude);\n    return new Geo3DPointOutsideSortField(field, shape);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DDocValuesField#newOutsideBoxSort(String,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a SortField for sorting by outside distance from a box.\n   * <p>\n   * This sort orders documents by ascending outside distance from the box.  Points within the box have distance 0.0.\n   * The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the box is used.\n   * \n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or box has invalid coordinates.\n   */\n  public static SortField newOutsideBoxSort(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    final GeoOutsideDistance shape = Geo3DUtil.fromBox(minLatitude, maxLatitude, minLongitude, maxLongitude);\n    return new Geo3DPointOutsideSortField(field, shape);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DDocValuesField#newOutsideBoxSort(String,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a SortField for sorting by outside distance from a box.\n   * <p>\n   * This sort orders documents by ascending outside distance from the box.  Points within the box have distance 0.0.\n   * The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the box is used.\n   * \n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or box has invalid coordinates.\n   */\n  public static SortField newOutsideBoxSort(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    final GeoOutsideDistance shape = Geo3DUtil.fromBox(minLatitude, maxLatitude, minLongitude, maxLongitude);\n    return new Geo3DPointOutsideSortField(field, shape);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DDocValuesField#newOutsideBoxSort(String,double,double,double,double,PlanetModel).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DDocValuesField#newOutsideBoxSort(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Creates a SortField for sorting by outside distance from a box.\n   * <p>\n   * This sort orders documents by ascending outside distance from the box.  Points within the box have distance 0.0.\n   * The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the box is used.\n   * \n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or box has invalid coordinates.\n   */\n  public static SortField newOutsideBoxSort(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude, final PlanetModel planetModel) {\n    final GeoOutsideDistance shape = Geo3DUtil.fromBox(planetModel, minLatitude, maxLatitude, minLongitude, maxLongitude);\n    return new Geo3DPointOutsideSortField(field, planetModel, shape);\n  }\n\n","sourceOld":"  /**\n   * Creates a SortField for sorting by outside distance from a box.\n   * <p>\n   * This sort orders documents by ascending outside distance from the box.  Points within the box have distance 0.0.\n   * The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the box is used.\n   * \n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or box has invalid coordinates.\n   */\n  public static SortField newOutsideBoxSort(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    final GeoOutsideDistance shape = Geo3DUtil.fromBox(minLatitude, maxLatitude, minLongitude, maxLongitude);\n    return new Geo3DPointOutsideSortField(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92055e521d116ed29034d95584c3269d4528afa9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92055e521d116ed29034d95584c3269d4528afa9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92055e521d116ed29034d95584c3269d4528afa9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"92055e521d116ed29034d95584c3269d4528afa9":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}