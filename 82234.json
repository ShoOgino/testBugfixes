{"path":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        Scorer subScorer = w.scorer(context, ScorerContext.def());\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}