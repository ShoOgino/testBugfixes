{"path":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","commits":[{"id":"8a5cfde941b2f8208d739344fef3821381885618","date":1168979092,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,String,int).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n      SegmentReader reader = SegmentReader.get(si);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n      directory.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, String segment, int docCount)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n      SegmentReader reader =\n        SegmentReader.get(new SegmentInfo(segment, docCount, directory));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n      directory.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(si);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      Directory directory = FSDirectory.getDirectory(indexDir, false);\n      SegmentReader reader = SegmentReader.get(si);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n      directory.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(si);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a5cfde941b2f8208d739344fef3821381885618":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["8a5cfde941b2f8208d739344fef3821381885618"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"]},"commit2Childs":{"8a5cfde941b2f8208d739344fef3821381885618":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a5cfde941b2f8208d739344fef3821381885618"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}