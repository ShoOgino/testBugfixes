{"path":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71f7220f5dc230b647fdb53a465d5abf894c4d1e","date":1463146747,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1\")\n        .process(cluster.getSolrClient());\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    Notifications.notifyCommitTransaction(morphline);\n    new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION);\n    \n    QueryResponse rsp = cluster.getSolrClient()\n        .query(COLLECTION, new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1,collection2\")\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1\")\n        .process(cluster.getSolrClient());\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    Notifications.notifyCommitTransaction(morphline);\n    new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION);\n    \n    QueryResponse rsp = cluster.getSolrClient()\n        .query(COLLECTION, new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1,collection2\")\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1\")\n        .process(cluster.getSolrClient());\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    Notifications.notifyCommitTransaction(morphline);\n    new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION);\n    \n    QueryResponse rsp = cluster.getSolrClient()\n        .query(COLLECTION, new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1,collection2\")\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1\")\n        .process(cluster.getSolrClient());\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    Notifications.notifyCommitTransaction(morphline);\n    new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION);\n    \n    QueryResponse rsp = cluster.getSolrClient()\n        .query(COLLECTION, new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1,collection2\")\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af87133b5bdb246b06c4321f36cd76d947357ab6","date":1482195253,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1\")\n        .process(cluster.getSolrClient());\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    Notifications.notifyCommitTransaction(morphline);\n    new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION);\n    \n    QueryResponse rsp = cluster.getSolrClient()\n        .query(COLLECTION, new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1\")\n        .process(cluster.getSolrClient());\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    Notifications.notifyCommitTransaction(morphline);\n    new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION);\n    \n    QueryResponse rsp = cluster.getSolrClient()\n        .query(COLLECTION, new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1,collection2\")\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1\")\n        .process(cluster.getSolrClient());\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    Notifications.notifyCommitTransaction(morphline);\n    new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION);\n    \n    QueryResponse rsp = cluster.getSolrClient()\n        .query(COLLECTION, new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1\")\n        .process(cluster.getSolrClient());\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    Notifications.notifyCommitTransaction(morphline);\n    new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION);\n    \n    QueryResponse rsp = cluster.getSolrClient()\n        .query(COLLECTION, new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1,collection2\")\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1\")\n        .process(cluster.getSolrClient());\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    Notifications.notifyCommitTransaction(morphline);\n    new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION);\n    \n    QueryResponse rsp = cluster.getSolrClient()\n        .query(COLLECTION, new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createAlias(\"aliascollection\", \"collection1\")\n        .process(cluster.getSolrClient());\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    Notifications.notifyCommitTransaction(morphline);\n    new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION);\n    \n    QueryResponse rsp = cluster.getSolrClient()\n        .query(COLLECTION, new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12109b652e9210b8d58fca47f6c4a725d058a58e":["af87133b5bdb246b06c4321f36cd76d947357ab6"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","af87133b5bdb246b06c4321f36cd76d947357ab6"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71f7220f5dc230b647fdb53a465d5abf894c4d1e":["abb23fcc2461782ab204e61213240feb77d355aa"],"0ad30c6a479e764150a3316e57263319775f1df2":["abb23fcc2461782ab204e61213240feb77d355aa","71f7220f5dc230b647fdb53a465d5abf894c4d1e"],"af87133b5bdb246b06c4321f36cd76d947357ab6":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["af87133b5bdb246b06c4321f36cd76d947357ab6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["abb23fcc2461782ab204e61213240feb77d355aa","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["abb23fcc2461782ab204e61213240feb77d355aa","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"abb23fcc2461782ab204e61213240feb77d355aa":["71f7220f5dc230b647fdb53a465d5abf894c4d1e","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"71f7220f5dc230b647fdb53a465d5abf894c4d1e":["0ad30c6a479e764150a3316e57263319775f1df2"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"af87133b5bdb246b06c4321f36cd76d947357ab6":["12109b652e9210b8d58fca47f6c4a725d058a58e","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","fe1c4aa9af769a38e878f608070f672efbeac27f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["af87133b5bdb246b06c4321f36cd76d947357ab6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}