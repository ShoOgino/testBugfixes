{"path":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testUnbalancedClasses().mjava","commits":[{"id":"d9dcf48d9030d73fb294fb586dc4c0bb879b80c8","date":1438605505,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testUnbalancedClasses().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This test is for the scenario where in the first topK results from the MLT query, we have less results\n   * for the expected class than the results for the bad class.\n   * But the results for the expected class have a better score in comparison with the results of the second class.\n   * So we would expect a greater score for the best ranked class.\n   *\n   * @throws Exception if any error happens\n   */\n  @Test\n  public void testUnbalancedClasses() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      Analyzer analyzer = new EnglishAnalyzer();\n      leafReader = populateSampleIndex(analyzer);\n      KNearestNeighborClassifier knnClassifier = new KNearestNeighborClassifier(leafReader, analyzer, null, 3, 1, 1, categoryFieldName, textFieldName);\n      List<ClassificationResult<BytesRef>> classes = knnClassifier.getClasses(SUPER_STRONG_TECHNOLOGY_INPUT);\n      assertTrue(classes.get(0).getScore() > classes.get(1).getScore());\n      checkCorrectClassification(knnClassifier, SUPER_STRONG_TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7161a776f504e35697e4bcb672862f679a4c2a9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7161a776f504e35697e4bcb672862f679a4c2a9d","date":1439207410,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testUnbalancedClasses().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testUnbalancedClasses().mjava","sourceNew":"  /**\n   * This test is for the scenario where in the first topK results from the MLT query, we have less results\n   * for the expected class than the results for the bad class.\n   * But the results for the expected class have a better score in comparison with the results of the second class.\n   * So we would expect a greater score for the best ranked class.\n   *\n   * @throws Exception if any error happens\n   */\n  @Test\n  public void testUnbalancedClasses() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      Analyzer analyzer = new EnglishAnalyzer();\n      leafReader = populateSampleIndex(analyzer);\n      KNearestNeighborClassifier knnClassifier = new KNearestNeighborClassifier(leafReader, null,analyzer, null, 3, 1, 1, categoryFieldName, textFieldName);\n      List<ClassificationResult<BytesRef>> classes = knnClassifier.getClasses(SUPER_STRONG_TECHNOLOGY_INPUT);\n      assertTrue(classes.get(0).getScore() > classes.get(1).getScore());\n      checkCorrectClassification(knnClassifier, SUPER_STRONG_TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This test is for the scenario where in the first topK results from the MLT query, we have less results\n   * for the expected class than the results for the bad class.\n   * But the results for the expected class have a better score in comparison with the results of the second class.\n   * So we would expect a greater score for the best ranked class.\n   *\n   * @throws Exception if any error happens\n   */\n  @Test\n  public void testUnbalancedClasses() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      Analyzer analyzer = new EnglishAnalyzer();\n      leafReader = populateSampleIndex(analyzer);\n      KNearestNeighborClassifier knnClassifier = new KNearestNeighborClassifier(leafReader, analyzer, null, 3, 1, 1, categoryFieldName, textFieldName);\n      List<ClassificationResult<BytesRef>> classes = knnClassifier.getClasses(SUPER_STRONG_TECHNOLOGY_INPUT);\n      assertTrue(classes.get(0).getScore() > classes.get(1).getScore());\n      checkCorrectClassification(knnClassifier, SUPER_STRONG_TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":["d9dcf48d9030d73fb294fb586dc4c0bb879b80c8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testUnbalancedClasses().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testUnbalancedClasses().mjava","sourceNew":"  /**\n   * This test is for the scenario where in the first topK results from the MLT query, we have less results\n   * for the expected class than the results for the bad class.\n   * But the results for the expected class have a better score in comparison with the results of the second class.\n   * So we would expect a greater score for the best ranked class.\n   *\n   * @throws Exception if any error happens\n   */\n  @Test\n  public void testUnbalancedClasses() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      Analyzer analyzer = new EnglishAnalyzer();\n      leafReader = getSampleIndex(analyzer);\n      KNearestNeighborClassifier knnClassifier = new KNearestNeighborClassifier(leafReader, null,analyzer, null, 3, 1, 1, categoryFieldName, textFieldName);\n      List<ClassificationResult<BytesRef>> classes = knnClassifier.getClasses(SUPER_STRONG_TECHNOLOGY_INPUT);\n      assertTrue(classes.get(0).getScore() > classes.get(1).getScore());\n      checkCorrectClassification(knnClassifier, SUPER_STRONG_TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This test is for the scenario where in the first topK results from the MLT query, we have less results\n   * for the expected class than the results for the bad class.\n   * But the results for the expected class have a better score in comparison with the results of the second class.\n   * So we would expect a greater score for the best ranked class.\n   *\n   * @throws Exception if any error happens\n   */\n  @Test\n  public void testUnbalancedClasses() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      Analyzer analyzer = new EnglishAnalyzer();\n      leafReader = populateSampleIndex(analyzer);\n      KNearestNeighborClassifier knnClassifier = new KNearestNeighborClassifier(leafReader, null,analyzer, null, 3, 1, 1, categoryFieldName, textFieldName);\n      List<ClassificationResult<BytesRef>> classes = knnClassifier.getClasses(SUPER_STRONG_TECHNOLOGY_INPUT);\n      assertTrue(classes.get(0).getScore() > classes.get(1).getScore());\n      checkCorrectClassification(knnClassifier, SUPER_STRONG_TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["7161a776f504e35697e4bcb672862f679a4c2a9d"],"d9dcf48d9030d73fb294fb586dc4c0bb879b80c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7161a776f504e35697e4bcb672862f679a4c2a9d":["d9dcf48d9030d73fb294fb586dc4c0bb879b80c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"]},"commit2Childs":{"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9dcf48d9030d73fb294fb586dc4c0bb879b80c8":["7161a776f504e35697e4bcb672862f679a4c2a9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9dcf48d9030d73fb294fb586dc4c0bb879b80c8"],"7161a776f504e35697e4bcb672862f679a4c2a9d":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}