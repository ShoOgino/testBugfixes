{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","commits":[{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","pathOld":"/dev/null","sourceNew":"  public void testFreediskPercentage(){\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 230,\" +\n        \"      'totaldisk': 800,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","sourceNew":null,"sourceOld":"  public void testFreediskPercentage(){\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 230,\" +\n        \"      'totaldisk': 800,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","pathOld":"/dev/null","sourceNew":"  public void testFreediskPercentage(){\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 230,\" +\n        \"      'totaldisk': 800,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd9806d2cef5f74400b2c18d3e38b8af25e8485","date":1531806022,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","sourceNew":"  public void testFreediskPercentage(){\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 230,\" +\n        \"      'totaldisk': 800,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n    autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica':'#ALL' ,  freedisk : '>30%'}\" +\n        \"  ]\" +\n        \"}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","sourceOld":"  public void testFreediskPercentage(){\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 230,\" +\n        \"      'totaldisk': 800,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","pathOld":"/dev/null","sourceNew":"  public void testFreediskPercentage(){\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 230,\" +\n        \"      'totaldisk': 800,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n    autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica':'#ALL' ,  freedisk : '>30%'}\" +\n        \"  ]\" +\n        \"}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","sourceNew":"  public void testFreediskPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 230,\" +\n        \"      'totaldisk': 800,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n    autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica':'#ALL' ,  freedisk : '>30%'}\" +\n        \"  ]\" +\n        \"}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","sourceOld":"  public void testFreediskPercentage(){\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 230,\" +\n        \"      'totaldisk': 800,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n    autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica':'#ALL' ,  freedisk : '>30%'}\" +\n        \"  ]\" +\n        \"}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","sourceNew":"  public void testFreediskPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 230,\" +\n        \"      'totaldisk': 800,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n    autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica':'#ALL' ,  freedisk : '>30%'}\" +\n        \"  ]\" +\n        \"}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4d, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","sourceOld":"  public void testFreediskPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 230,\" +\n        \"      'totaldisk': 800,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n    autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica':'#ALL' ,  freedisk : '>30%'}\" +\n        \"  ]\" +\n        \"}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","sourceNew":"  public void testFreediskPercentage() {\n\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreediskPercentage.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n    autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica':'#ALL' ,  freedisk : '>30%'}\" +\n        \"  ]\" +\n        \"}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreediskPercentage.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4d, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","sourceOld":"  public void testFreediskPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 230,\" +\n        \"      'totaldisk': 800,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n    autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica':'#ALL' ,  freedisk : '>30%'}\" +\n        \"  ]\" +\n        \"}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4d, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testFreediskPercentage() {\n\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreediskPercentage.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n    autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica':'#ALL' ,  freedisk : '>30%'}\" +\n        \"  ]\" +\n        \"}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreediskPercentage.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4d, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","sourceOld":"  public void testFreediskPercentage() {\n\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreediskPercentage.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n    autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica':'#ALL' ,  freedisk : '>30%'}\" +\n        \"  ]\" +\n        \"}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreediskPercentage.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4d, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreediskPercentage().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public void testFreediskPercentage() {\n\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0,  freedisk : '<30%'}\" +\n        \"  ]\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreediskPercentage.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n    autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica':'#ALL' ,  freedisk : '>30%'}\" +\n        \"  ]\" +\n        \"}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreediskPercentage.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4d, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(10.0d, r.delta.doubleValue(), 0.1);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["f5a27e78e3d29dee02bab19ded25336471e96882"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7cd9806d2cef5f74400b2c18d3e38b8af25e8485"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["7cd9806d2cef5f74400b2c18d3e38b8af25e8485"],"78231225260fb5b3bf9920f203d71477d5501c65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5a27e78e3d29dee02bab19ded25336471e96882":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7cd9806d2cef5f74400b2c18d3e38b8af25e8485":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","78231225260fb5b3bf9920f203d71477d5501c65"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["f5a27e78e3d29dee02bab19ded25336471e96882"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"f5a27e78e3d29dee02bab19ded25336471e96882":["9ba1b632c041956c93c41aa1143d16a567014891"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["7cd9806d2cef5f74400b2c18d3e38b8af25e8485"],"7cd9806d2cef5f74400b2c18d3e38b8af25e8485":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}