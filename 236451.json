{"path":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#patchException(IntBuffer,int[],int,int,int).mjava","commits":[{"id":"824ab25acd22f2eca198755bafab3cb8b7878493","date":1341276186,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#patchException(IntBuffer,int[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: since numInts===128, we don't need to rewind intBuffer.\n  // however, tail of normal area may share a same int with head of exception area\n  // which means patchException may lose heading exceptions.\n  public static void patchException(IntBuffer intBuffer, int[] data, int excNum, int excFirstPos, int excBytes) {\n    if (excFirstPos == -1) {\n      return;\n    }\n    int curPos=excFirstPos;\n    int i,j;\n\n    if (excBytes == 1) {\n      for (i=0; i+3<excNum; i+=4) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 8)  & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 16) & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 24) & MASK[8]);\n      }\n      if (i<excNum) { \n        final int curInt = intBuffer.get();\n        for (j=0; j<32 && i<excNum; j+=8,i++) {\n          curPos = patch(data, curPos, (curInt >>> j) & MASK[8]);\n        }\n      }\n    } else if (excBytes == 2) {\n      for (i=0; i+1<excNum; i+=2) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[16]);\n        curPos = patch(data, curPos, (curInt >>> 16) & MASK[16]);\n      }\n      if (i<excNum) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[16]);\n      }\n    } else if (excBytes == 4) {\n      for (i=0; i<excNum; i++) {\n        curPos = patch(data, curPos, intBuffer.get());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5373bc7574123da55ae25e216b6d768ccb1dcd91","date":1342013351,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#patchException(IntBuffer,int[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#patchException(IntBuffer,int[],int,int,int).mjava","sourceNew":"  /**\n   * Decode exception values base on the exception pointers in normal area,\n   * and values in exception area.\n   * As for current implementation, numInts is hardwired as 128, so the\n   * tail of normal area is naturally aligned to 32 bits, and we don't need to\n   * rewind intBuffer here.\n   * However, the normal area may share a same int with exception area, \n   * when numFrameBits * numInts % 32 != 0,\n   * In this case we should preprocess patch several heading exceptions, \n   * before calling this method.\n   *\n   * TODO: blockSize is hardewired to size==128 only\n   */\n  public static void patchException(IntBuffer intBuffer, int[] data, int excNum, int excFirstPos, int excBytes) {\n    if (excFirstPos == -1) {\n      return;\n    }\n    int curPos=excFirstPos;\n    int i,j;\n\n    if (excBytes == 1) { // each exception consumes 1 byte\n      for (i=0; i+3<excNum; i+=4) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 8)  & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 16) & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 24) & MASK[8]);\n      }\n      if (i<excNum) {\n        final int curInt = intBuffer.get();\n        for (j=0; j<32 && i<excNum; j+=8,i++) {\n          curPos = patch(data, curPos, (curInt >>> j) & MASK[8]);\n        }\n      }\n    } else if (excBytes == 2) { // each exception consumes 2 bytes\n      for (i=0; i+1<excNum; i+=2) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[16]);\n        curPos = patch(data, curPos, (curInt >>> 16) & MASK[16]);\n      }\n      if (i<excNum) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[16]);\n      }\n    } else if (excBytes == 4) { // each exception consumes 4 bytes\n      for (i=0; i<excNum; i++) {\n        curPos = patch(data, curPos, intBuffer.get());\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: since numInts===128, we don't need to rewind intBuffer.\n  // however, tail of normal area may share a same int with head of exception area\n  // which means patchException may lose heading exceptions.\n  public static void patchException(IntBuffer intBuffer, int[] data, int excNum, int excFirstPos, int excBytes) {\n    if (excFirstPos == -1) {\n      return;\n    }\n    int curPos=excFirstPos;\n    int i,j;\n\n    if (excBytes == 1) {\n      for (i=0; i+3<excNum; i+=4) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 8)  & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 16) & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 24) & MASK[8]);\n      }\n      if (i<excNum) { \n        final int curInt = intBuffer.get();\n        for (j=0; j<32 && i<excNum; j+=8,i++) {\n          curPos = patch(data, curPos, (curInt >>> j) & MASK[8]);\n        }\n      }\n    } else if (excBytes == 2) {\n      for (i=0; i+1<excNum; i+=2) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[16]);\n        curPos = patch(data, curPos, (curInt >>> 16) & MASK[16]);\n      }\n      if (i<excNum) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[16]);\n      }\n    } else if (excBytes == 4) {\n      for (i=0; i<excNum; i++) {\n        curPos = patch(data, curPos, intBuffer.get());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5","date":1342443326,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#patchException(IntBuffer,int[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#patchException(IntBuffer,int[],int,int,int).mjava","sourceNew":"  /**\n   * Decode exception values base on the exception pointers in normal area,\n   * and values in exception area.\n   * As for current implementation, numInts is hardwired as 128, so the\n   * tail of normal area is naturally aligned to 32 bits, and we don't need to\n   * rewind intBuffer here.\n   * However, the normal area may share a same int with exception area, \n   * when numFrameBits * numInts % 32 != 0,\n   * In this case we should preprocess patch several heading exceptions, \n   * before calling this method.\n   *\n   */\n  public static void patchException(IntBuffer intBuffer, int[] data, int excNum, int excFirstPos, int excBytes) {\n    if (excFirstPos == -1) {\n      return;\n    }\n    int curPos=excFirstPos;\n    int i,j;\n\n    if (excBytes == 1) { // each exception consumes 1 byte\n      for (i=0; i+3<excNum; i+=4) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 8)  & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 16) & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 24) & MASK[8]);\n      }\n      if (i<excNum) {\n        final int curInt = intBuffer.get();\n        for (j=0; j<32 && i<excNum; j+=8,i++) {\n          curPos = patch(data, curPos, (curInt >>> j) & MASK[8]);\n        }\n      }\n    } else if (excBytes == 2) { // each exception consumes 2 bytes\n      for (i=0; i+1<excNum; i+=2) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[16]);\n        curPos = patch(data, curPos, (curInt >>> 16) & MASK[16]);\n      }\n      if (i<excNum) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[16]);\n      }\n    } else if (excBytes == 4) { // each exception consumes 4 bytes\n      for (i=0; i<excNum; i++) {\n        curPos = patch(data, curPos, intBuffer.get());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Decode exception values base on the exception pointers in normal area,\n   * and values in exception area.\n   * As for current implementation, numInts is hardwired as 128, so the\n   * tail of normal area is naturally aligned to 32 bits, and we don't need to\n   * rewind intBuffer here.\n   * However, the normal area may share a same int with exception area, \n   * when numFrameBits * numInts % 32 != 0,\n   * In this case we should preprocess patch several heading exceptions, \n   * before calling this method.\n   *\n   * TODO: blockSize is hardewired to size==128 only\n   */\n  public static void patchException(IntBuffer intBuffer, int[] data, int excNum, int excFirstPos, int excBytes) {\n    if (excFirstPos == -1) {\n      return;\n    }\n    int curPos=excFirstPos;\n    int i,j;\n\n    if (excBytes == 1) { // each exception consumes 1 byte\n      for (i=0; i+3<excNum; i+=4) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 8)  & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 16) & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 24) & MASK[8]);\n      }\n      if (i<excNum) {\n        final int curInt = intBuffer.get();\n        for (j=0; j<32 && i<excNum; j+=8,i++) {\n          curPos = patch(data, curPos, (curInt >>> j) & MASK[8]);\n        }\n      }\n    } else if (excBytes == 2) { // each exception consumes 2 bytes\n      for (i=0; i+1<excNum; i+=2) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[16]);\n        curPos = patch(data, curPos, (curInt >>> 16) & MASK[16]);\n      }\n      if (i<excNum) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[16]);\n      }\n    } else if (excBytes == 4) { // each exception consumes 4 bytes\n      for (i=0; i<excNum; i++) {\n        curPos = patch(data, curPos, intBuffer.get());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PForUtil#patchException(IntBuffer,int[],int,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Decode exception values base on the exception pointers in normal area,\n   * and values in exception area.\n   * As for current implementation, numInts is hardwired as 128, so the\n   * tail of normal area is naturally aligned to 32 bits, and we don't need to\n   * rewind intBuffer here.\n   * However, the normal area may share a same int with exception area, \n   * when numFrameBits * numInts % 32 != 0,\n   * In this case we should preprocess patch several heading exceptions, \n   * before calling this method.\n   *\n   */\n  public static void patchException(IntBuffer intBuffer, int[] data, int excNum, int excFirstPos, int excBytes) {\n    if (excFirstPos == -1) {\n      return;\n    }\n    int curPos=excFirstPos;\n    int i,j;\n\n    if (excBytes == 1) { // each exception consumes 1 byte\n      for (i=0; i+3<excNum; i+=4) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 8)  & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 16) & MASK[8]);\n        curPos = patch(data, curPos, (curInt >>> 24) & MASK[8]);\n      }\n      if (i<excNum) {\n        final int curInt = intBuffer.get();\n        for (j=0; j<32 && i<excNum; j+=8,i++) {\n          curPos = patch(data, curPos, (curInt >>> j) & MASK[8]);\n        }\n      }\n    } else if (excBytes == 2) { // each exception consumes 2 bytes\n      for (i=0; i+1<excNum; i+=2) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[16]);\n        curPos = patch(data, curPos, (curInt >>> 16) & MASK[16]);\n      }\n      if (i<excNum) {\n        final int curInt = intBuffer.get();\n        curPos = patch(data, curPos, (curInt) & MASK[16]);\n      }\n    } else if (excBytes == 4) { // each exception consumes 4 bytes\n      for (i=0; i<excNum; i++) {\n        curPos = patch(data, curPos, intBuffer.get());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"824ab25acd22f2eca198755bafab3cb8b7878493":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["824ab25acd22f2eca198755bafab3cb8b7878493"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"824ab25acd22f2eca198755bafab3cb8b7878493":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":[],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["824ab25acd22f2eca198755bafab3cb8b7878493","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}