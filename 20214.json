{"path":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n    // get latest cloud state\n    zkStateReader.updateCloudState(true);\n    \n    Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n        .get(slice);\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      Collection<CloudJettyRunner> leaders = shardToLeaderJetty.values();\n      List<CloudJettyRunner> leadersList = new ArrayList<CloudJettyRunner>(leaders.size());\n     \n      leadersList.addAll(leaders);\n\n      int index = random.nextInt(leadersList.size());\n      jetty = leadersList.get(index).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","a6378064655e76cd7b908b1cab4ce425b384b508","a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n    // get latest cloud state\n    zkStateReader.updateCloudState(true);\n    \n    Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n        .get(slice);\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      Collection<CloudJettyRunner> leaders = shardToLeaderJetty.values();\n      List<CloudJettyRunner> leadersList = new ArrayList<CloudJettyRunner>(leaders.size());\n     \n      leadersList.addAll(leaders);\n\n      int index = random.nextInt(leadersList.size());\n      jetty = leadersList.get(index).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n    // get latest cloud state\n    zkStateReader.updateCloudState(true);\n    \n    Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n        .get(slice);\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      Collection<CloudJettyRunner> leaders = shardToLeaderJetty.values();\n      List<CloudJettyRunner> leadersList = new ArrayList<CloudJettyRunner>(leaders.size());\n     \n      leadersList.addAll(leaders);\n\n      int index = random.nextInt(leadersList.size());\n      jetty = leadersList.get(index).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d06637e04cf11cbeb5f18eba9a2e6d40b33412a9","date":1327549311,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      Collection<CloudJettyRunner> leaders = shardToLeaderJetty.values();\n      List<CloudJettyRunner> leadersList = new ArrayList<CloudJettyRunner>(leaders.size());\n     \n      leadersList.addAll(leaders);\n\n      int index = random.nextInt(leadersList.size());\n      jetty = leadersList.get(index).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n    // get latest cloud state\n    zkStateReader.updateCloudState(true);\n    \n    Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n        .get(slice);\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      Collection<CloudJettyRunner> leaders = shardToLeaderJetty.values();\n      List<CloudJettyRunner> leadersList = new ArrayList<CloudJettyRunner>(leaders.size());\n     \n      leadersList.addAll(leaders);\n\n      int index = random.nextInt(leadersList.size());\n      jetty = leadersList.get(index).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      Collection<CloudJettyRunner> leaders = shardToLeaderJetty.values();\n      List<CloudJettyRunner> leadersList = new ArrayList<CloudJettyRunner>(leaders.size());\n     \n      leadersList.addAll(leaders);\n\n      int index = random.nextInt(leadersList.size());\n      jetty = leadersList.get(index).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n    // get latest cloud state\n    zkStateReader.updateCloudState(true);\n    \n    Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n        .get(slice);\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      Collection<CloudJettyRunner> leaders = shardToLeaderJetty.values();\n      List<CloudJettyRunner> leadersList = new ArrayList<CloudJettyRunner>(leaders.size());\n     \n      leadersList.addAll(leaders);\n\n      int index = random.nextInt(leadersList.size());\n      jetty = leadersList.get(index).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      Collection<CloudJettyRunner> leaders = shardToLeaderJetty.values();\n      List<CloudJettyRunner> leadersList = new ArrayList<CloudJettyRunner>(leaders.size());\n     \n      leadersList.addAll(leaders);\n\n      int index = random.nextInt(leadersList.size());\n      jetty = leadersList.get(index).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n    // get latest cloud state\n    zkStateReader.updateCloudState(true);\n    \n    Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n        .get(slice);\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      Collection<CloudJettyRunner> leaders = shardToLeaderJetty.values();\n      List<CloudJettyRunner> leadersList = new ArrayList<CloudJettyRunner>(leaders.size());\n     \n      leadersList.addAll(leaders);\n\n      int index = random.nextInt(leadersList.size());\n      jetty = leadersList.get(index).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b78ac6f18de03b6cb8ceecb2fc0203fbd8b19884","date":1327884099,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      Collection<CloudJettyRunner> leaders = shardToLeaderJetty.values();\n      List<CloudJettyRunner> leadersList = new ArrayList<CloudJettyRunner>(leaders.size());\n     \n      leadersList.addAll(leaders);\n\n      int index = random.nextInt(leadersList.size());\n      jetty = leadersList.get(index).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ee93262320c801eafdbc0a54fc8c8d392b7f009","date":1327886547,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      Collection<CloudJettyRunner> leaders = shardToLeaderJetty.values();\n      List<CloudJettyRunner> leadersList = new ArrayList<CloudJettyRunner>(leaders.size());\n     \n      leadersList.addAll(leaders);\n\n      int index = random.nextInt(leadersList.size());\n      jetty = leadersList.get(index).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      Collection<CloudJettyRunner> leaders = shardToLeaderJetty.values();\n      List<CloudJettyRunner> leadersList = new ArrayList<CloudJettyRunner>(leaders.size());\n     \n      leadersList.addAll(leaders);\n\n      int index = random.nextInt(leadersList.size());\n      jetty = leadersList.get(index).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0c46c486d300cbb600e170f5b68cd8e42e94ea0","date":1342363102,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","date":1342989037,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + jetty.getLocalPort());\n    return jetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + jetty.getLocalPort());\n    return jetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ef6348b84bf0f8a649826b69a70ac815ff560e2","date":1343106054,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public CloudJettyRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    CloudJettyRunner cjetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      cjetty = shardToLeaderJetty.get(slice);\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      cjetty = jetties.get(index);\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (cjetty.jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + cjetty.jetty.getLocalPort());\n  \n    return cjetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + jetty.getLocalPort());\n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","date":1343203827,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public CloudJettyRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    CloudJettyRunner cjetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      cjetty = shardToLeaderJetty.get(slice);\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      cjetty = jetties.get(index);\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (cjetty.jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + cjetty.jetty.getLocalPort());\n  \n    return cjetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + jetty.getLocalPort());\n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public CloudJettyRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    CloudJettyRunner cjetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      cjetty = shardToLeaderJetty.get(slice);\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      cjetty = jetties.get(index);\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (cjetty.jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + cjetty.jetty.getLocalPort());\n  \n    return cjetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      return null;\n    }\n    \n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    \n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public CloudJettyRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    CloudJettyRunner cjetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      cjetty = shardToLeaderJetty.get(slice);\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      cjetty = jetties.get(index);\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (cjetty.jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + cjetty.jetty.getLocalPort());\n  \n    return cjetty;\n  }\n\n","sourceOld":"  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    JettySolrRunner jetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      jetty = shardToLeaderJetty.get(slice).jetty;\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      jetty = jetties.get(index).jetty;\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + jetty.getLocalPort());\n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public CloudJettyRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateClusterState(true);\n      \n      Slice theShards = zkStateReader.getClusterState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    CloudJettyRunner cjetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      cjetty = shardToLeaderJetty.get(slice);\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      cjetty = jetties.get(index);\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (cjetty.jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + cjetty.jetty.getLocalPort());\n  \n    return cjetty;\n  }\n\n","sourceOld":"  public CloudJettyRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    CloudJettyRunner cjetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      cjetty = shardToLeaderJetty.get(slice);\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      cjetty = jetties.get(index);\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (cjetty.jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + cjetty.jetty.getLocalPort());\n  \n    return cjetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public CloudJettyRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateClusterState(true);\n      \n      Slice theShards = zkStateReader.getClusterState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    CloudJettyRunner cjetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      cjetty = shardToLeaderJetty.get(slice);\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      cjetty = jetties.get(index);\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (cjetty.jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + cjetty.jetty.getLocalPort());\n  \n    return cjetty;\n  }\n\n","sourceOld":"  public CloudJettyRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    CloudJettyRunner cjetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      cjetty = shardToLeaderJetty.get(slice);\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      cjetty = jetties.get(index);\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (cjetty.jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + cjetty.jetty.getLocalPort());\n  \n    return cjetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public CloudJettyRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateClusterState(true);\n      \n      Slice theShards = zkStateReader.getClusterState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    CloudJettyRunner cjetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      cjetty = shardToLeaderJetty.get(slice);\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      cjetty = jetties.get(index);\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (cjetty.jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + cjetty.jetty.getLocalPort());\n  \n    return cjetty;\n  }\n\n","sourceOld":"  public CloudJettyRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateClusterState(true);\n      \n      Slice theShards = zkStateReader.getClusterState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    CloudJettyRunner cjetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      cjetty = shardToLeaderJetty.get(slice);\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      cjetty = jetties.get(index);\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (cjetty.jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + cjetty.jetty.getLocalPort());\n  \n    return cjetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":null,"sourceOld":"  public CloudJettyRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateCloudState(true);\n      \n      Slice theShards = zkStateReader.getCloudState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    CloudJettyRunner cjetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      cjetty = shardToLeaderJetty.get(slice);\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      cjetty = jetties.get(index);\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (cjetty.jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + cjetty.jetty.getLocalPort());\n  \n    return cjetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomJetty(String,boolean).mjava","sourceNew":"  public CloudJettyRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateClusterState(true);\n      \n      Slice theShards = zkStateReader.getClusterState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    CloudJettyRunner cjetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      cjetty = shardToLeaderJetty.get(slice);\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      cjetty = jetties.get(index);\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (cjetty.jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + cjetty.jetty.getLocalPort());\n  \n    return cjetty;\n  }\n\n","sourceOld":"  public CloudJettyRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {\n    \n\n    int numRunning = 0;\n    int numRecovering = 0;\n    int numActive = 0;\n    \n    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {\n      boolean running = true;\n      \n      // get latest cloud state\n      zkStateReader.updateClusterState(true);\n      \n      Slice theShards = zkStateReader.getClusterState().getSlices(collection)\n          .get(slice);\n      \n      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + theShards.getShards().keySet());\n      }\n      \n      String state = props.get(ZkStateReader.STATE_PROP);\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      \n      \n      if (!cloudJetty.jetty.isRunning()\n          || !state.equals(ZkStateReader.ACTIVE)\n          || !zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        running = false;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.RECOVERING)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numRecovering++;\n      }\n      \n      if (cloudJetty.jetty.isRunning()\n          && state.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numActive++;\n      }\n      \n      if (running) {\n        numRunning++;\n      }\n    }\n    \n    if (numActive < 2) {\n      // we cannot kill anyone\n      monkeyLog(\"only one active node in shard - monkey cannot kill :(\");\n      return null;\n    }\n    Random random = LuceneTestCase.random();\n    int chance = random.nextInt(10);\n    CloudJettyRunner cjetty;\n    if (chance <= 5 && aggressivelyKillLeaders) {\n      // if killLeader, really aggressively go after leaders\n      cjetty = shardToLeaderJetty.get(slice);\n    } else {\n      // get random shard\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice);\n      int index = random.nextInt(jetties.size());\n      cjetty = jetties.get(index);\n      \n      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);\n      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);\n      if (!aggressivelyKillLeaders && isLeader) {\n        // we don't kill leaders...\n        monkeyLog(\"abort! I don't kill leaders\");\n        return null;\n      } \n    }\n\n    if (cjetty.jetty.getLocalPort() == -1) {\n      // we can't kill the dead\n      monkeyLog(\"abort! This guy is already dead\");\n      return null;\n    }\n    \n    //System.out.println(\"num active:\" + numActive + \" for \" + slice + \" sac:\" + jetty.getLocalPort());\n    monkeyLog(\"chose a victim! \" + cjetty.jetty.getLocalPort());\n  \n    return cjetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d06637e04cf11cbeb5f18eba9a2e6d40b33412a9"],"5ee93262320c801eafdbc0a54fc8c8d392b7f009":["fd92b8bcc88e969302510acf77bd6970da3994c4","b78ac6f18de03b6cb8ceecb2fc0203fbd8b19884"],"c0c46c486d300cbb600e170f5b68cd8e42e94ea0":["b78ac6f18de03b6cb8ceecb2fc0203fbd8b19884"],"b78ac6f18de03b6cb8ceecb2fc0203fbd8b19884":["d06637e04cf11cbeb5f18eba9a2e6d40b33412a9"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","6ef6348b84bf0f8a649826b69a70ac815ff560e2"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d06637e04cf11cbeb5f18eba9a2e6d40b33412a9"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"6ef6348b84bf0f8a649826b69a70ac815ff560e2":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["6ef6348b84bf0f8a649826b69a70ac815ff560e2"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["c0c46c486d300cbb600e170f5b68cd8e42e94ea0"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b78ac6f18de03b6cb8ceecb2fc0203fbd8b19884","6ef6348b84bf0f8a649826b69a70ac815ff560e2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b78ac6f18de03b6cb8ceecb2fc0203fbd8b19884","c0c46c486d300cbb600e170f5b68cd8e42e94ea0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","6ef6348b84bf0f8a649826b69a70ac815ff560e2"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["78a55f24d9b493c2a1cecf79f1d78279062b545b","b78ac6f18de03b6cb8ceecb2fc0203fbd8b19884"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"d06637e04cf11cbeb5f18eba9a2e6d40b33412a9":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["5b6fdfce35d0adb18836cf8711abe487a934df33"],"5ee93262320c801eafdbc0a54fc8c8d392b7f009":[],"c0c46c486d300cbb600e170f5b68cd8e42e94ea0":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b78ac6f18de03b6cb8ceecb2fc0203fbd8b19884":["5ee93262320c801eafdbc0a54fc8c8d392b7f009","c0c46c486d300cbb600e170f5b68cd8e42e94ea0","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","5b6fdfce35d0adb18836cf8711abe487a934df33"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["5ee93262320c801eafdbc0a54fc8c8d392b7f009"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"6ef6348b84bf0f8a649826b69a70ac815ff560e2":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","3f767f8c99eaedb984df754fe61f21c5de260f94","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","6ef6348b84bf0f8a649826b69a70ac815ff560e2","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","d06637e04cf11cbeb5f18eba9a2e6d40b33412a9"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"d06637e04cf11cbeb5f18eba9a2e6d40b33412a9":["78a55f24d9b493c2a1cecf79f1d78279062b545b","b78ac6f18de03b6cb8ceecb2fc0203fbd8b19884","fd92b8bcc88e969302510acf77bd6970da3994c4"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5ee93262320c801eafdbc0a54fc8c8d392b7f009","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}