{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    void addMatch(int startOffset, int endOffset, BytesRef term) {\n        assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n        if (numMatches == matchStarts.length) {\n            int newLength = ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            int newMatchStarts[] = new int[newLength];\n            int newMatchEnds[] = new int[newLength];\n            BytesRef newMatchTerms[] = new BytesRef[newLength];\n            System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n            System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n            System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n            matchStarts = newMatchStarts;\n            matchEnds = newMatchEnds;\n            matchTerms = newMatchTerms;\n        }\n        assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n        matchStarts[numMatches] = startOffset;\n        matchEnds[numMatches] = endOffset;\n        matchTerms[numMatches] = term;\n        numMatches++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    void addMatch(int startOffset, int endOffset, BytesRef term) {\n        assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n        if (numMatches == matchStarts.length) {\n            int newLength = ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            int newMatchStarts[] = new int[newLength];\n            int newMatchEnds[] = new int[newLength];\n            BytesRef newMatchTerms[] = new BytesRef[newLength];\n            System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n            System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n            System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n            matchStarts = newMatchStarts;\n            matchEnds = newMatchEnds;\n            matchTerms = newMatchTerms;\n        }\n        assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n        matchStarts[numMatches] = startOffset;\n        matchEnds[numMatches] = endOffset;\n        matchTerms[numMatches] = term;\n        numMatches++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2e9861e4a2b724d9fc51b618714c579491b78d7","date":1479244606,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","sourceNew":"    public void addMatch(int startOffset, int endOffset, BytesRef term) {\n        assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n        if (numMatches == matchStarts.length) {\n            int newLength = ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            int newMatchStarts[] = new int[newLength];\n            int newMatchEnds[] = new int[newLength];\n            BytesRef newMatchTerms[] = new BytesRef[newLength];\n            System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n            System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n            System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n            matchStarts = newMatchStarts;\n            matchEnds = newMatchEnds;\n            matchTerms = newMatchTerms;\n        }\n        assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n        matchStarts[numMatches] = startOffset;\n        matchEnds[numMatches] = endOffset;\n        matchTerms[numMatches] = term;\n        numMatches++;\n    }\n\n","sourceOld":"    void addMatch(int startOffset, int endOffset, BytesRef term) {\n        assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n        if (numMatches == matchStarts.length) {\n            int newLength = ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            int newMatchStarts[] = new int[newLength];\n            int newMatchEnds[] = new int[newLength];\n            BytesRef newMatchTerms[] = new BytesRef[newLength];\n            System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n            System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n            System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n            matchStarts = newMatchStarts;\n            matchEnds = newMatchEnds;\n            matchTerms = newMatchTerms;\n        }\n        assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n        matchStarts[numMatches] = startOffset;\n        matchEnds[numMatches] = endOffset;\n        matchTerms[numMatches] = term;\n        numMatches++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","sourceNew":"    public void addMatch(int startOffset, int endOffset, BytesRef term) {\n        assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n        if (numMatches == matchStarts.length) {\n            int newLength = ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            int newMatchStarts[] = new int[newLength];\n            int newMatchEnds[] = new int[newLength];\n            BytesRef newMatchTerms[] = new BytesRef[newLength];\n            System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n            System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n            System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n            matchStarts = newMatchStarts;\n            matchEnds = newMatchEnds;\n            matchTerms = newMatchTerms;\n        }\n        assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n        matchStarts[numMatches] = startOffset;\n        matchEnds[numMatches] = endOffset;\n        matchTerms[numMatches] = term;\n        numMatches++;\n    }\n\n","sourceOld":"    void addMatch(int startOffset, int endOffset, BytesRef term) {\n        assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n        if (numMatches == matchStarts.length) {\n            int newLength = ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            int newMatchStarts[] = new int[newLength];\n            int newMatchEnds[] = new int[newLength];\n            BytesRef newMatchTerms[] = new BytesRef[newLength];\n            System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n            System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n            System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n            matchStarts = newMatchStarts;\n            matchEnds = newMatchEnds;\n            matchTerms = newMatchTerms;\n        }\n        assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n        matchStarts[numMatches] = startOffset;\n        matchEnds[numMatches] = endOffset;\n        matchTerms[numMatches] = term;\n        numMatches++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f714d649962c934166dedd1e83173e36356b328","date":1479399594,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","sourceNew":"    /** @lucene.internal */\n    public void addMatch(int startOffset, int endOffset, BytesRef term) {\n        assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n        if (numMatches == matchStarts.length) {\n            int newLength = ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            int newMatchStarts[] = new int[newLength];\n            int newMatchEnds[] = new int[newLength];\n            BytesRef newMatchTerms[] = new BytesRef[newLength];\n            System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n            System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n            System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n            matchStarts = newMatchStarts;\n            matchEnds = newMatchEnds;\n            matchTerms = newMatchTerms;\n        }\n        assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n        matchStarts[numMatches] = startOffset;\n        matchEnds[numMatches] = endOffset;\n        matchTerms[numMatches] = term;\n        numMatches++;\n    }\n\n","sourceOld":"    public void addMatch(int startOffset, int endOffset, BytesRef term) {\n        assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n        if (numMatches == matchStarts.length) {\n            int newLength = ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            int newMatchStarts[] = new int[newLength];\n            int newMatchEnds[] = new int[newLength];\n            BytesRef newMatchTerms[] = new BytesRef[newLength];\n            System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n            System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n            System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n            matchStarts = newMatchStarts;\n            matchEnds = newMatchEnds;\n            matchTerms = newMatchTerms;\n        }\n        assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n        matchStarts[numMatches] = startOffset;\n        matchEnds[numMatches] = endOffset;\n        matchTerms[numMatches] = term;\n        numMatches++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8","date":1479399820,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","sourceNew":"  /** @lucene.internal */\n  public void addMatch(int startOffset, int endOffset, BytesRef term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      int newLength = ArrayUtil.oversize(numMatches + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      int newMatchStarts[] = new int[newLength];\n      int newMatchEnds[] = new int[newLength];\n      BytesRef newMatchTerms[] = new BytesRef[newLength];\n      System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n      System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchStarts = newMatchStarts;\n      matchEnds = newMatchEnds;\n      matchTerms = newMatchTerms;\n    }\n    assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","sourceOld":"    /** @lucene.internal */\n    public void addMatch(int startOffset, int endOffset, BytesRef term) {\n        assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n        if (numMatches == matchStarts.length) {\n            int newLength = ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            int newMatchStarts[] = new int[newLength];\n            int newMatchEnds[] = new int[newLength];\n            BytesRef newMatchTerms[] = new BytesRef[newLength];\n            System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n            System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n            System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n            matchStarts = newMatchStarts;\n            matchEnds = newMatchEnds;\n            matchTerms = newMatchTerms;\n        }\n        assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n        matchStarts[numMatches] = startOffset;\n        matchEnds[numMatches] = endOffset;\n        matchTerms[numMatches] = term;\n        numMatches++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e859e664a65796dadf8aaf65db6f66f3a885368","date":1479487334,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","sourceNew":"  /** @lucene.internal */\n  public void addMatch(int startOffset, int endOffset, BytesRef term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      int newLength = ArrayUtil.oversize(numMatches + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      int newMatchStarts[] = new int[newLength];\n      int newMatchEnds[] = new int[newLength];\n      BytesRef newMatchTerms[] = new BytesRef[newLength];\n      System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n      System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchStarts = newMatchStarts;\n      matchEnds = newMatchEnds;\n      matchTerms = newMatchTerms;\n    }\n    assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","sourceOld":"    public void addMatch(int startOffset, int endOffset, BytesRef term) {\n        assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n        if (numMatches == matchStarts.length) {\n            int newLength = ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            int newMatchStarts[] = new int[newLength];\n            int newMatchEnds[] = new int[newLength];\n            BytesRef newMatchTerms[] = new BytesRef[newLength];\n            System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n            System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n            System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n            matchStarts = newMatchStarts;\n            matchEnds = newMatchEnds;\n            matchTerms = newMatchTerms;\n        }\n        assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n        matchStarts[numMatches] = startOffset;\n        matchEnds[numMatches] = endOffset;\n        matchTerms[numMatches] = term;\n        numMatches++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8764ca7bb74ee716c839b9545a93ec4a578c2005","date":1517564468,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#addMatch(int,int,BytesRef).mjava","sourceNew":"  /** @lucene.internal */\n  public void addMatch(int startOffset, int endOffset, BytesRef term, int termFreqInDoc) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      int newLength = ArrayUtil.oversize(numMatches + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      int newMatchStarts[] = new int[newLength];\n      int newMatchEnds[] = new int[newLength];\n      int newMatchTermFreqInDoc[] = new int[newLength];\n      BytesRef newMatchTerms[] = new BytesRef[newLength];\n      System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n      System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      System.arraycopy(matchTermFreqInDoc, 0, newMatchTermFreqInDoc, 0, numMatches);\n      matchStarts = newMatchStarts;\n      matchEnds = newMatchEnds;\n      matchTerms = newMatchTerms;\n      matchTermFreqInDoc = newMatchTermFreqInDoc;\n    }\n    assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    matchTermFreqInDoc[numMatches] = termFreqInDoc;\n    numMatches++;\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public void addMatch(int startOffset, int endOffset, BytesRef term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      int newLength = ArrayUtil.oversize(numMatches + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      int newMatchStarts[] = new int[newLength];\n      int newMatchEnds[] = new int[newLength];\n      BytesRef newMatchTerms[] = new BytesRef[newLength];\n      System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n      System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchStarts = newMatchStarts;\n      matchEnds = newMatchEnds;\n      matchTerms = newMatchTerms;\n    }\n    assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2e9861e4a2b724d9fc51b618714c579491b78d7":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"8764ca7bb74ee716c839b9545a93ec4a578c2005":["2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f2e9861e4a2b724d9fc51b618714c579491b78d7"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f714d649962c934166dedd1e83173e36356b328":["f2e9861e4a2b724d9fc51b618714c579491b78d7"],"2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8":["1f714d649962c934166dedd1e83173e36356b328"],"2e859e664a65796dadf8aaf65db6f66f3a885368":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8764ca7bb74ee716c839b9545a93ec4a578c2005"]},"commit2Childs":{"f2e9861e4a2b724d9fc51b618714c579491b78d7":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","1f714d649962c934166dedd1e83173e36356b328"],"8764ca7bb74ee716c839b9545a93ec4a578c2005":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["2e859e664a65796dadf8aaf65db6f66f3a885368"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["f2e9861e4a2b724d9fc51b618714c579491b78d7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f714d649962c934166dedd1e83173e36356b328":["2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8"],"2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8":["8764ca7bb74ee716c839b9545a93ec4a578c2005","2e859e664a65796dadf8aaf65db6f66f3a885368"],"2e859e664a65796dadf8aaf65db6f66f3a885368":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}