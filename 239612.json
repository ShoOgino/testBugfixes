{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","commits":[{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps).mjava","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          log.info(\"I am Active and live, it's okay to be the leader.\");\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    if (!foundSomeoneElseActive) {\n      log.info(\"I am not Active but no one else is either, it's okay to be the leader\");\n      try {\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      } catch (KeeperException e) {\n        throw new RuntimeException(e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      }\n    } else {\n      log.info(\"I am not Active and someone else appears to be a better leader candidate.\");\n    }\n    return !foundSomeoneElseActive;\n  }\n\n","sourceOld":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    \n    return !foundSomeoneElseActive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          log.info(\"I am Active and live, it's okay to be the leader.\");\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    if (!foundSomeoneElseActive) {\n      log.info(\"I am not Active but no one else is either, it's okay to be the leader\");\n      try {\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      } catch (KeeperException e) {\n        throw new RuntimeException(e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      }\n    } else {\n      log.info(\"I am not Active and someone else appears to be a better leader candidate.\");\n    }\n    return !foundSomeoneElseActive;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","date":1346692465,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    \n    if (isClosed) {\n      log.info(\"Bailing on leader process because we have been closed\");\n      return false;\n    }\n    \n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          log.info(\"I am Active and live, it's okay to be the leader.\");\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    if (!foundSomeoneElseActive) {\n      log.info(\"I am not Active but no one else is either, it's okay to be the leader\");\n      try {\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      } catch (KeeperException e) {\n        throw new RuntimeException(e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      }\n    } else {\n      log.info(\"I am not Active and someone else appears to be a better leader candidate.\");\n    }\n    return !foundSomeoneElseActive;\n  }\n\n","sourceOld":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          log.info(\"I am Active and live, it's okay to be the leader.\");\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    if (!foundSomeoneElseActive) {\n      log.info(\"I am not Active but no one else is either, it's okay to be the leader\");\n      try {\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      } catch (KeeperException e) {\n        throw new RuntimeException(e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      }\n    } else {\n      log.info(\"I am not Active and someone else appears to be a better leader candidate.\");\n    }\n    return !foundSomeoneElseActive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    \n    if (isClosed) {\n      log.info(\"Bailing on leader process because we have been closed\");\n      return false;\n    }\n    \n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> shards = slice.getReplicasMap();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n            ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          log.info(\"I am Active and live, it's okay to be the leader.\");\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n          ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    if (!foundSomeoneElseActive) {\n      log.info(\"I am not Active but no one else is either, it's okay to be the leader\");\n      try {\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      } catch (KeeperException e) {\n        throw new RuntimeException(e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      }\n    } else {\n      log.info(\"I am not Active and someone else appears to be a better leader candidate.\");\n    }\n    return !foundSomeoneElseActive;\n  }\n\n","sourceOld":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    \n    if (isClosed) {\n      log.info(\"Bailing on leader process because we have been closed\");\n      return false;\n    }\n    \n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          log.info(\"I am Active and live, it's okay to be the leader.\");\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    if (!foundSomeoneElseActive) {\n      log.info(\"I am not Active but no one else is either, it's okay to be the leader\");\n      try {\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      } catch (KeeperException e) {\n        throw new RuntimeException(e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      }\n    } else {\n      log.info(\"I am not Active and someone else appears to be a better leader candidate.\");\n    }\n    return !foundSomeoneElseActive;\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    \n    if (isClosed) {\n      log.info(\"Bailing on leader process because we have been closed\");\n      return false;\n    }\n    \n    if (core.getCoreDescriptor().getCloudDescriptor().getLastPublished().equals(ZkStateReader.ACTIVE)) {\n      log.info(\"My last published State was Active, it's okay to be the leader.\");\n      return true;\n    }\n    \n//    TODO: and if no is a good candidate?\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    \n    if (isClosed) {\n      log.info(\"Bailing on leader process because we have been closed\");\n      return false;\n    }\n    \n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> shards = slice.getReplicasMap();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n            ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          log.info(\"I am Active and live, it's okay to be the leader.\");\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n          ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    if (!foundSomeoneElseActive) {\n      log.info(\"I am not Active but no one else is either, it's okay to be the leader\");\n      try {\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      } catch (KeeperException e) {\n        throw new RuntimeException(e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      }\n    } else {\n      log.info(\"I am not Active and someone else appears to be a better leader candidate.\");\n    }\n    return !foundSomeoneElseActive;\n  }\n\n","bugFix":["3f767f8c99eaedb984df754fe61f21c5de260f94","2c007e7c4cf8c55bc2a5884e315123afaaeec87f","fa64435b5902ce266c23755a4a00691a3285dab8","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    \n    if (isClosed) {\n      log.info(\"Bailing on leader process because we have been closed\");\n      return false;\n    }\n    \n    if (core.getCoreDescriptor().getCloudDescriptor().getLastPublished()\n        .equals(ZkStateReader.ACTIVE)) {\n      log.info(\"My last published State was Active, it's okay to be the leader.\");\n      return true;\n    }\n    log.info(\"My last published State was \"\n        + core.getCoreDescriptor().getCloudDescriptor().getLastPublished()\n        + \", I won't be the leader.\");\n    // TODO: and if no one is a good candidate?\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    \n    if (isClosed) {\n      log.info(\"Bailing on leader process because we have been closed\");\n      return false;\n    }\n    \n    if (core.getCoreDescriptor().getCloudDescriptor().getLastPublished().equals(ZkStateReader.ACTIVE)) {\n      log.info(\"My last published State was Active, it's okay to be the leader.\");\n      return true;\n    }\n    \n//    TODO: and if no is a good candidate?\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    \n    if (isClosed) {\n      log.info(\"Bailing on leader process because we have been closed\");\n      return false;\n    }\n    \n    if (core.getCoreDescriptor().getCloudDescriptor().getLastPublished()\n        .equals(ZkStateReader.ACTIVE)) {\n      log.info(\"My last published State was Active, it's okay to be the leader.\");\n      return true;\n    }\n    log.info(\"My last published State was \"\n        + core.getCoreDescriptor().getCloudDescriptor().getLastPublished()\n        + \", I won't be the leader.\");\n    // TODO: and if no one is a good candidate?\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    \n    if (isClosed) {\n      log.info(\"Bailing on leader process because we have been closed\");\n      return false;\n    }\n    \n    if (core.getCoreDescriptor().getCloudDescriptor().getLastPublished().equals(ZkStateReader.ACTIVE)) {\n      log.info(\"My last published State was Active, it's okay to be the leader.\");\n      return true;\n    }\n    \n//    TODO: and if no is a good candidate?\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"448aa18a7a928a0f11c904582b22b9cd5ec63846","date":1355012177,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core, boolean weAreReplacement) {\n    log.info(\"Checking if I should try and be the leader.\");\n    \n    if (isClosed) {\n      log.info(\"Bailing on leader process because we have been closed\");\n      return false;\n    }\n    \n    if (!weAreReplacement) {\n      // we are the first node starting in the shard - there is a configurable wait\n      // to make sure others participate in sync and leader election, we can be leader\n      return true;\n    }\n    \n    if (core.getCoreDescriptor().getCloudDescriptor().getLastPublished()\n        .equals(ZkStateReader.ACTIVE)) {\n      log.info(\"My last published State was Active, it's okay to be the leader.\");\n      return true;\n    }\n    log.info(\"My last published State was \"\n        + core.getCoreDescriptor().getCloudDescriptor().getLastPublished()\n        + \", I won't be the leader.\");\n    // TODO: and if no one is a good candidate?\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    \n    if (isClosed) {\n      log.info(\"Bailing on leader process because we have been closed\");\n      return false;\n    }\n    \n    if (core.getCoreDescriptor().getCloudDescriptor().getLastPublished()\n        .equals(ZkStateReader.ACTIVE)) {\n      log.info(\"My last published State was Active, it's okay to be the leader.\");\n      return true;\n    }\n    log.info(\"My last published State was \"\n        + core.getCoreDescriptor().getCloudDescriptor().getLastPublished()\n        + \", I won't be the leader.\");\n    // TODO: and if no one is a good candidate?\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","sourceNew":null,"sourceOld":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    \n    if (isClosed) {\n      log.info(\"Bailing on leader process because we have been closed\");\n      return false;\n    }\n    \n    if (core.getCoreDescriptor().getCloudDescriptor().getLastPublished()\n        .equals(ZkStateReader.ACTIVE)) {\n      log.info(\"My last published State was Active, it's okay to be the leader.\");\n      return true;\n    }\n    log.info(\"My last published State was \"\n        + core.getCoreDescriptor().getCloudDescriptor().getLastPublished()\n        + \", I won't be the leader.\");\n    // TODO: and if no one is a good candidate?\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6378064655e76cd7b908b1cab4ce425b384b508":["fa64435b5902ce266c23755a4a00691a3285dab8"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"fa64435b5902ce266c23755a4a00691a3285dab8":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","448aa18a7a928a0f11c904582b22b9cd5ec63846"],"448aa18a7a928a0f11c904582b22b9cd5ec63846":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["a6378064655e76cd7b908b1cab4ce425b384b508"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a6378064655e76cd7b908b1cab4ce425b384b508","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["448aa18a7a928a0f11c904582b22b9cd5ec63846"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a6378064655e76cd7b908b1cab4ce425b384b508":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["fa64435b5902ce266c23755a4a00691a3285dab8"],"fa64435b5902ce266c23755a4a00691a3285dab8":["a6378064655e76cd7b908b1cab4ce425b384b508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05a14b2611ead08655a2b2bdc61632eb31316e57","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"448aa18a7a928a0f11c904582b22b9cd5ec63846":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["407687e67faf6e1f02a211ca078d8e3eed631027","448aa18a7a928a0f11c904582b22b9cd5ec63846","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","05a14b2611ead08655a2b2bdc61632eb31316e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","f2126b84bd093fa3d921582a109a0ee578c28126","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}