{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getNodeValues(String,Collection[String]).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getNodeValues(String,Collection[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getNodeValues(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    log.trace(\"-- requested values for \" + node + \": \" + tags);\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    if (tags.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Object> result = new HashMap<>();\n    Map<String, Object> metrics = getReplicaMetricsValues(node, tags.stream().filter(s -> s.startsWith(\"metrics:solr.core.\")).collect(Collectors.toList()));\n    result.putAll(metrics);\n    Map<String, Object> values = nodeValues.get(node);\n    if (values == null) {\n      return result;\n    }\n    result.putAll(values.entrySet().stream().filter(e -> tags.contains(e.getKey())).collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())));\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    log.trace(\"-- requested values for \" + node + \": \" + tags);\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    if (tags.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Object> result = new HashMap<>();\n    Map<String, Object> metrics = getReplicaMetricsValues(node, tags.stream().filter(s -> s.startsWith(\"metrics:solr.core.\")).collect(Collectors.toList()));\n    result.putAll(metrics);\n    Map<String, Object> values = nodeValues.get(node);\n    if (values == null) {\n      return result;\n    }\n    result.putAll(values.entrySet().stream().filter(e -> tags.contains(e.getKey())).collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())));\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getNodeValues(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getNodeValues(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    log.trace(\"-- requested values for \" + node + \": \" + tags);\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    if (tags.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Object> metrics = getReplicaMetricsValues(node, tags.stream().filter(s -> s.startsWith(\"metrics:solr.core.\")).collect(Collectors.toList()));\n    Map<String, Object> result = new HashMap<>(metrics);\n    Map<String, Object> values = nodeValues.get(node);\n    if (values == null) {\n      return result;\n    }\n    result.putAll(values.entrySet().stream().filter(e -> tags.contains(e.getKey())).collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())));\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    log.trace(\"-- requested values for \" + node + \": \" + tags);\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    if (tags.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Object> result = new HashMap<>();\n    Map<String, Object> metrics = getReplicaMetricsValues(node, tags.stream().filter(s -> s.startsWith(\"metrics:solr.core.\")).collect(Collectors.toList()));\n    result.putAll(metrics);\n    Map<String, Object> values = nodeValues.get(node);\n    if (values == null) {\n      return result;\n    }\n    result.putAll(values.entrySet().stream().filter(e -> tags.contains(e.getKey())).collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())));\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getNodeValues(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getNodeValues(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    log.trace(\"-- requested values for \" + node + \": \" + tags);\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    if (tags.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Object> metrics = getReplicaMetricsValues(node, tags.stream().filter(s -> s.startsWith(\"metrics:solr.core.\")).collect(Collectors.toList()));\n    Map<String, Object> result = new HashMap<>(metrics);\n    Map<String, Object> values = nodeValues.get(node);\n    if (values == null) {\n      return result;\n    }\n    result.putAll(values.entrySet().stream().filter(e -> tags.contains(e.getKey())).collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())));\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    log.trace(\"-- requested values for \" + node + \": \" + tags);\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    if (tags.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Object> result = new HashMap<>();\n    Map<String, Object> metrics = getReplicaMetricsValues(node, tags.stream().filter(s -> s.startsWith(\"metrics:solr.core.\")).collect(Collectors.toList()));\n    result.putAll(metrics);\n    Map<String, Object> values = nodeValues.get(node);\n    if (values == null) {\n      return result;\n    }\n    result.putAll(values.entrySet().stream().filter(e -> tags.contains(e.getKey())).collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())));\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"067ba8c807b0f23eae8bf41bc27046a87b548134","date":1587570399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getNodeValues(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getNodeValues(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    log.trace(\"-- requested values for \" + node + \": \" + tags);\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    if (tags.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Object> metrics = getReplicaMetricsValues(node, tags.stream().filter(s -> s.startsWith(\"metrics:solr.core.\")).collect(Collectors.toList()));\n    Map<String, Object> result = new HashMap<>(metrics);\n    Map<String, Object> values = nodeValues.get(node);\n    if (values == null) {\n      return result;\n    }\n    result.putAll(values.entrySet().stream()\n        .filter(e -> tags.contains(e.getKey()))\n        .filter(e -> e.getValue() != null)\n        .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())));\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    log.trace(\"-- requested values for \" + node + \": \" + tags);\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    if (tags.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Object> metrics = getReplicaMetricsValues(node, tags.stream().filter(s -> s.startsWith(\"metrics:solr.core.\")).collect(Collectors.toList()));\n    Map<String, Object> result = new HashMap<>(metrics);\n    Map<String, Object> values = nodeValues.get(node);\n    if (values == null) {\n      return result;\n    }\n    result.putAll(values.entrySet().stream().filter(e -> tags.contains(e.getKey())).collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())));\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getNodeValues(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getNodeValues(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    log.trace(\"-- requested values for {}: {}\", node, tags);\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    if (tags.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Object> metrics = getReplicaMetricsValues(node, tags.stream().filter(s -> s.startsWith(\"metrics:solr.core.\")).collect(Collectors.toList()));\n    Map<String, Object> result = new HashMap<>(metrics);\n    Map<String, Object> values = nodeValues.get(node);\n    if (values == null) {\n      return result;\n    }\n    result.putAll(values.entrySet().stream()\n        .filter(e -> tags.contains(e.getKey()))\n        .filter(e -> e.getValue() != null)\n        .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())));\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    log.trace(\"-- requested values for \" + node + \": \" + tags);\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    if (tags.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Object> metrics = getReplicaMetricsValues(node, tags.stream().filter(s -> s.startsWith(\"metrics:solr.core.\")).collect(Collectors.toList()));\n    Map<String, Object> result = new HashMap<>(metrics);\n    Map<String, Object> values = nodeValues.get(node);\n    if (values == null) {\n      return result;\n    }\n    result.putAll(values.entrySet().stream()\n        .filter(e -> tags.contains(e.getKey()))\n        .filter(e -> e.getValue() != null)\n        .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())));\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getNodeValues(String,Collection[String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n    log.trace(\"-- requested values for {}: {}\", node, tags);\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    if (tags.isEmpty()) {\n      return new HashMap<>();\n    }\n    Map<String, Object> metrics = getReplicaMetricsValues(node, tags.stream().filter(s -> s.startsWith(\"metrics:solr.core.\")).collect(Collectors.toList()));\n    Map<String, Object> result = new HashMap<>(metrics);\n    Map<String, Object> values = nodeValues.get(node);\n    if (values == null) {\n      return result;\n    }\n    result.putAll(values.entrySet().stream()\n        .filter(e -> tags.contains(e.getKey()))\n        .filter(e -> e.getValue() != null)\n        .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())));\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"067ba8c807b0f23eae8bf41bc27046a87b548134":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"e35f2dde06b35aa9904949a3a93fabd090371077":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"b0b597c65628ca9e73913a07e81691f8229bae35":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["067ba8c807b0f23eae8bf41bc27046a87b548134","b0b597c65628ca9e73913a07e81691f8229bae35"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"067ba8c807b0f23eae8bf41bc27046a87b548134":["e35f2dde06b35aa9904949a3a93fabd090371077"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","b0b597c65628ca9e73913a07e81691f8229bae35"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}