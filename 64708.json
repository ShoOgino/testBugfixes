{"path":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testRemovalsAndInsertions().mjava","commits":[{"id":"45ccb604e99f21f1c05722c0e28bcfa64b94a861","date":1423735816,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testRemovalsAndInsertions().mjava","pathOld":"/dev/null","sourceNew":"  public void testRemovalsAndInsertions() {\n    Random random = random();\n    int numDocsInPQ = TestUtil.nextInt(random, 1, 100);\n    IntegerQueue pq = new IntegerQueue(numDocsInPQ);\n    Integer lastLeast = null;\n\n    // Basic insertion of new content\n    ArrayList<Integer> sds = new ArrayList<Integer>(numDocsInPQ);\n    for (int i = 0; i < numDocsInPQ * 10; i++) {\n      Integer newEntry = new Integer(Math.abs(random.nextInt()));\n      sds.add(newEntry);\n      Integer evicted = pq.insertWithOverflow(newEntry);\n      pq.checkValidity();\n      if (evicted != null) {\n        assertTrue(sds.remove(evicted));\n        if (evicted != newEntry) {\n          assertTrue(evicted == lastLeast);\n        }\n      }\n      Integer newLeast = pq.top();\n      if ((lastLeast != null) && (newLeast != newEntry)\n          && (newLeast != lastLeast)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition we expect the scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n\n    }\n\n    // Try many random additions to existing entries - we should always see\n    // increasing scores in the lowest entry in the PQ\n    for (int p = 0; p < 500000; p++) {\n      int element = (int) (random.nextFloat() * (sds.size() - 1));\n      Integer objectToRemove = sds.get(element);\n      assertTrue(sds.remove(element) == objectToRemove);\n      assertTrue(pq.remove(objectToRemove));\n      pq.checkValidity();\n      Integer newEntry = new Integer(Math.abs(random.nextInt()));\n      sds.add(newEntry);\n      assertNull(pq.insertWithOverflow(newEntry));\n      pq.checkValidity();\n      Integer newLeast = pq.top();\n      if ((objectToRemove != lastLeast) && (lastLeast != null)\n          && (newLeast != newEntry)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition or the loss of our randomly removed entry we expect the\n        // scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testRemovalsAndInsertions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testRemovalsAndInsertions().mjava","sourceNew":"  public void testRemovalsAndInsertions() {\n    Random random = random();\n    int numDocsInPQ = TestUtil.nextInt(random, 1, 100);\n    IntegerQueue pq = new IntegerQueue(numDocsInPQ);\n    Integer lastLeast = null;\n\n    // Basic insertion of new content\n    ArrayList<Integer> sds = new ArrayList<Integer>(numDocsInPQ);\n    for (int i = 0; i < numDocsInPQ * 10; i++) {\n      Integer newEntry = Math.abs(random.nextInt());\n      sds.add(newEntry);\n      Integer evicted = pq.insertWithOverflow(newEntry);\n      pq.checkValidity();\n      if (evicted != null) {\n        assertTrue(sds.remove(evicted));\n        if (evicted != newEntry) {\n          assertTrue(evicted == lastLeast);\n        }\n      }\n      Integer newLeast = pq.top();\n      if ((lastLeast != null) && (newLeast != newEntry)\n          && (newLeast != lastLeast)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition we expect the scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n\n    }\n\n    // Try many random additions to existing entries - we should always see\n    // increasing scores in the lowest entry in the PQ\n    for (int p = 0; p < 500000; p++) {\n      int element = (int) (random.nextFloat() * (sds.size() - 1));\n      Integer objectToRemove = sds.get(element);\n      assertTrue(sds.remove(element) == objectToRemove);\n      assertTrue(pq.remove(objectToRemove));\n      pq.checkValidity();\n      Integer newEntry = Math.abs(random.nextInt());\n      sds.add(newEntry);\n      assertNull(pq.insertWithOverflow(newEntry));\n      pq.checkValidity();\n      Integer newLeast = pq.top();\n      if ((objectToRemove != lastLeast) && (lastLeast != null)\n          && (newLeast != newEntry)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition or the loss of our randomly removed entry we expect the\n        // scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n    }\n  }\n\n","sourceOld":"  public void testRemovalsAndInsertions() {\n    Random random = random();\n    int numDocsInPQ = TestUtil.nextInt(random, 1, 100);\n    IntegerQueue pq = new IntegerQueue(numDocsInPQ);\n    Integer lastLeast = null;\n\n    // Basic insertion of new content\n    ArrayList<Integer> sds = new ArrayList<Integer>(numDocsInPQ);\n    for (int i = 0; i < numDocsInPQ * 10; i++) {\n      Integer newEntry = new Integer(Math.abs(random.nextInt()));\n      sds.add(newEntry);\n      Integer evicted = pq.insertWithOverflow(newEntry);\n      pq.checkValidity();\n      if (evicted != null) {\n        assertTrue(sds.remove(evicted));\n        if (evicted != newEntry) {\n          assertTrue(evicted == lastLeast);\n        }\n      }\n      Integer newLeast = pq.top();\n      if ((lastLeast != null) && (newLeast != newEntry)\n          && (newLeast != lastLeast)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition we expect the scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n\n    }\n\n    // Try many random additions to existing entries - we should always see\n    // increasing scores in the lowest entry in the PQ\n    for (int p = 0; p < 500000; p++) {\n      int element = (int) (random.nextFloat() * (sds.size() - 1));\n      Integer objectToRemove = sds.get(element);\n      assertTrue(sds.remove(element) == objectToRemove);\n      assertTrue(pq.remove(objectToRemove));\n      pq.checkValidity();\n      Integer newEntry = new Integer(Math.abs(random.nextInt()));\n      sds.add(newEntry);\n      assertNull(pq.insertWithOverflow(newEntry));\n      pq.checkValidity();\n      Integer newLeast = pq.top();\n      if ((objectToRemove != lastLeast) && (lastLeast != null)\n          && (newLeast != newEntry)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition or the loss of our randomly removed entry we expect the\n        // scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testRemovalsAndInsertions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testRemovalsAndInsertions().mjava","sourceNew":"  public void testRemovalsAndInsertions() {\n    Random random = random();\n    int numDocsInPQ = TestUtil.nextInt(random, 1, 100);\n    IntegerQueue pq = new IntegerQueue(numDocsInPQ);\n    Integer lastLeast = null;\n\n    // Basic insertion of new content\n    ArrayList<Integer> sds = new ArrayList<Integer>(numDocsInPQ);\n    for (int i = 0; i < numDocsInPQ * 10; i++) {\n      Integer newEntry = Math.abs(random.nextInt());\n      sds.add(newEntry);\n      Integer evicted = pq.insertWithOverflow(newEntry);\n      pq.checkValidity();\n      if (evicted != null) {\n        assertTrue(sds.remove(evicted));\n        if (evicted != newEntry) {\n          assertTrue(evicted == lastLeast);\n        }\n      }\n      Integer newLeast = pq.top();\n      if ((lastLeast != null) && (newLeast != newEntry)\n          && (newLeast != lastLeast)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition we expect the scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n\n    }\n\n    // Try many random additions to existing entries - we should always see\n    // increasing scores in the lowest entry in the PQ\n    for (int p = 0; p < 500000; p++) {\n      int element = (int) (random.nextFloat() * (sds.size() - 1));\n      Integer objectToRemove = sds.get(element);\n      assertTrue(sds.remove(element) == objectToRemove);\n      assertTrue(pq.remove(objectToRemove));\n      pq.checkValidity();\n      Integer newEntry = Math.abs(random.nextInt());\n      sds.add(newEntry);\n      assertNull(pq.insertWithOverflow(newEntry));\n      pq.checkValidity();\n      Integer newLeast = pq.top();\n      if ((objectToRemove != lastLeast) && (lastLeast != null)\n          && (newLeast != newEntry)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition or the loss of our randomly removed entry we expect the\n        // scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n    }\n  }\n\n","sourceOld":"  public void testRemovalsAndInsertions() {\n    Random random = random();\n    int numDocsInPQ = TestUtil.nextInt(random, 1, 100);\n    IntegerQueue pq = new IntegerQueue(numDocsInPQ);\n    Integer lastLeast = null;\n\n    // Basic insertion of new content\n    ArrayList<Integer> sds = new ArrayList<Integer>(numDocsInPQ);\n    for (int i = 0; i < numDocsInPQ * 10; i++) {\n      Integer newEntry = new Integer(Math.abs(random.nextInt()));\n      sds.add(newEntry);\n      Integer evicted = pq.insertWithOverflow(newEntry);\n      pq.checkValidity();\n      if (evicted != null) {\n        assertTrue(sds.remove(evicted));\n        if (evicted != newEntry) {\n          assertTrue(evicted == lastLeast);\n        }\n      }\n      Integer newLeast = pq.top();\n      if ((lastLeast != null) && (newLeast != newEntry)\n          && (newLeast != lastLeast)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition we expect the scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n\n    }\n\n    // Try many random additions to existing entries - we should always see\n    // increasing scores in the lowest entry in the PQ\n    for (int p = 0; p < 500000; p++) {\n      int element = (int) (random.nextFloat() * (sds.size() - 1));\n      Integer objectToRemove = sds.get(element);\n      assertTrue(sds.remove(element) == objectToRemove);\n      assertTrue(pq.remove(objectToRemove));\n      pq.checkValidity();\n      Integer newEntry = new Integer(Math.abs(random.nextInt()));\n      sds.add(newEntry);\n      assertNull(pq.insertWithOverflow(newEntry));\n      pq.checkValidity();\n      Integer newLeast = pq.top();\n      if ((objectToRemove != lastLeast) && (lastLeast != null)\n          && (newLeast != newEntry)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition or the loss of our randomly removed entry we expect the\n        // scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testRemovalsAndInsertions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testRemovalsAndInsertions().mjava","sourceNew":"  public void testRemovalsAndInsertions() {\n    Random random = random();\n    int numDocsInPQ = TestUtil.nextInt(random, 1, 100);\n    IntegerQueue pq = new IntegerQueue(numDocsInPQ);\n    Integer lastLeast = null;\n\n    // Basic insertion of new content\n    ArrayList<Integer> sds = new ArrayList<Integer>(numDocsInPQ);\n    for (int i = 0; i < numDocsInPQ * 10; i++) {\n      Integer newEntry = Math.abs(random.nextInt());\n      sds.add(newEntry);\n      Integer evicted = pq.insertWithOverflow(newEntry);\n      pq.checkValidity();\n      if (evicted != null) {\n        assertTrue(sds.remove(evicted));\n        if (evicted != newEntry) {\n          assertTrue(evicted == lastLeast);\n        }\n      }\n      Integer newLeast = pq.top();\n      if ((lastLeast != null) && (newLeast != newEntry)\n          && (newLeast != lastLeast)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition we expect the scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n\n    }\n\n    // Try many random additions to existing entries - we should always see\n    // increasing scores in the lowest entry in the PQ\n    for (int p = 0; p < 500000; p++) {\n      int element = (int) (random.nextFloat() * (sds.size() - 1));\n      Integer objectToRemove = sds.get(element);\n      assertTrue(sds.remove(element) == objectToRemove);\n      assertTrue(pq.remove(objectToRemove));\n      pq.checkValidity();\n      Integer newEntry = Math.abs(random.nextInt());\n      sds.add(newEntry);\n      assertNull(pq.insertWithOverflow(newEntry));\n      pq.checkValidity();\n      Integer newLeast = pq.top();\n      if ((objectToRemove != lastLeast) && (lastLeast != null)\n          && (newLeast != newEntry)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition or the loss of our randomly removed entry we expect the\n        // scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n    }\n  }\n\n","sourceOld":"  public void testRemovalsAndInsertions() {\n    Random random = random();\n    int numDocsInPQ = TestUtil.nextInt(random, 1, 100);\n    IntegerQueue pq = new IntegerQueue(numDocsInPQ);\n    Integer lastLeast = null;\n\n    // Basic insertion of new content\n    ArrayList<Integer> sds = new ArrayList<Integer>(numDocsInPQ);\n    for (int i = 0; i < numDocsInPQ * 10; i++) {\n      Integer newEntry = new Integer(Math.abs(random.nextInt()));\n      sds.add(newEntry);\n      Integer evicted = pq.insertWithOverflow(newEntry);\n      pq.checkValidity();\n      if (evicted != null) {\n        assertTrue(sds.remove(evicted));\n        if (evicted != newEntry) {\n          assertTrue(evicted == lastLeast);\n        }\n      }\n      Integer newLeast = pq.top();\n      if ((lastLeast != null) && (newLeast != newEntry)\n          && (newLeast != lastLeast)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition we expect the scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n\n    }\n\n    // Try many random additions to existing entries - we should always see\n    // increasing scores in the lowest entry in the PQ\n    for (int p = 0; p < 500000; p++) {\n      int element = (int) (random.nextFloat() * (sds.size() - 1));\n      Integer objectToRemove = sds.get(element);\n      assertTrue(sds.remove(element) == objectToRemove);\n      assertTrue(pq.remove(objectToRemove));\n      pq.checkValidity();\n      Integer newEntry = new Integer(Math.abs(random.nextInt()));\n      sds.add(newEntry);\n      assertNull(pq.insertWithOverflow(newEntry));\n      pq.checkValidity();\n      Integer newLeast = pq.top();\n      if ((objectToRemove != lastLeast) && (lastLeast != null)\n          && (newLeast != newEntry)) {\n        // If there has been a change of least entry and it wasn't our new\n        // addition or the loss of our randomly removed entry we expect the\n        // scores to increase\n        assertTrue(newLeast <= newEntry);\n        assertTrue(newLeast >= lastLeast);\n      }\n      lastLeast = newLeast;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["45ccb604e99f21f1c05722c0e28bcfa64b94a861","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["45ccb604e99f21f1c05722c0e28bcfa64b94a861","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}