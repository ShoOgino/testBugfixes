{"path":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testRangeWithInterval().mjava","commits":[{"id":"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","date":1569046571,"type":0,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testRangeWithInterval().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeWithInterval() throws Exception {\n    for (boolean doSubFacet : Arrays.asList(false, true)) {\n      final Integer subFacetLimit = pickSubFacetLimit(doSubFacet);\n      final CharSequence subFacet = makeSubFacet(subFacetLimit);\n      for (boolean incUpper : Arrays.asList(false, true)) {\n        String incUpperStr = \",inclusive_to:\"+incUpper;\n        final SolrQuery solrQuery = new SolrQuery\n            (\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ foo:{ type:range, field:\" + INT_FIELD + \" ranges:[{from:1, to:2\"+ incUpperStr+ \"},\" +\n                    \"{from:2, to:3\"+ incUpperStr +\"},{from:3, to:4\"+ incUpperStr +\"},{from:4, to:5\"+ incUpperStr+\"}]\"\n                    + subFacet + \" } }\");\n\n        final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>) rsp.getResponse().get(\"facets\")).get(\"foo\");\n          final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n\n          assertEquals(\"num buckets\", 4, buckets.size());\n          for (int i = 0; i < 4; i++) {\n            String expectedVal = \"[\" + (i + 1) + \",\" + (i + 2) + (incUpper? \"]\": \")\");\n            ModelRange modelVals = incUpper? modelVals(i+1, i+2) : modelVals(i+1);\n            assertBucket(\"bucket#\" + i, expectedVal, modelVals, subFacetLimit, buckets.get(i));\n          }\n        } catch (AssertionError | RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testRangeWithInterval().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testRangeWithInterval().mjava","sourceNew":"  public void testRangeWithInterval() throws Exception {\n    for (boolean doSubFacet : Arrays.asList(false, true)) {\n      final Integer subFacetLimit = pickSubFacetLimit(doSubFacet);\n      final CharSequence subFacet = makeSubFacet(subFacetLimit);\n      for (boolean incUpper : Arrays.asList(false, true)) {\n        String incUpperStr = \",inclusive_to:\"+incUpper;\n        final SolrQuery solrQuery = new SolrQuery\n            (\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ foo:{ type:range, field:\" + INT_FIELD + \" ranges:[{from:1, to:2\"+ incUpperStr+ \"},\" +\n                    \"{from:2, to:3\"+ incUpperStr +\"},{from:3, to:4\"+ incUpperStr +\"},{from:4, to:5\"+ incUpperStr+\"}]\"\n                    + subFacet + \" } }\");\n\n        final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          @SuppressWarnings({\"unchecked\"})\n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>) rsp.getResponse().get(\"facets\")).get(\"foo\");\n          @SuppressWarnings({\"unchecked\"})\n          final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n\n          assertEquals(\"num buckets\", 4, buckets.size());\n          for (int i = 0; i < 4; i++) {\n            String expectedVal = \"[\" + (i + 1) + \",\" + (i + 2) + (incUpper? \"]\": \")\");\n            ModelRange modelVals = incUpper? modelVals(i+1, i+2) : modelVals(i+1);\n            assertBucket(\"bucket#\" + i, expectedVal, modelVals, subFacetLimit, buckets.get(i));\n          }\n        } catch (AssertionError | RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRangeWithInterval() throws Exception {\n    for (boolean doSubFacet : Arrays.asList(false, true)) {\n      final Integer subFacetLimit = pickSubFacetLimit(doSubFacet);\n      final CharSequence subFacet = makeSubFacet(subFacetLimit);\n      for (boolean incUpper : Arrays.asList(false, true)) {\n        String incUpperStr = \",inclusive_to:\"+incUpper;\n        final SolrQuery solrQuery = new SolrQuery\n            (\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ foo:{ type:range, field:\" + INT_FIELD + \" ranges:[{from:1, to:2\"+ incUpperStr+ \"},\" +\n                    \"{from:2, to:3\"+ incUpperStr +\"},{from:3, to:4\"+ incUpperStr +\"},{from:4, to:5\"+ incUpperStr+\"}]\"\n                    + subFacet + \" } }\");\n\n        final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n        try {\n          final NamedList<Object> foo = ((NamedList<NamedList<Object>>) rsp.getResponse().get(\"facets\")).get(\"foo\");\n          final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n\n          assertEquals(\"num buckets\", 4, buckets.size());\n          for (int i = 0; i < 4; i++) {\n            String expectedVal = \"[\" + (i + 1) + \",\" + (i + 2) + (incUpper? \"]\": \")\");\n            ModelRange modelVals = incUpper? modelVals(i+1, i+2) : modelVals(i+1);\n            assertBucket(\"bucket#\" + i, expectedVal, modelVals, subFacetLimit, buckets.get(i));\n          }\n        } catch (AssertionError | RuntimeException ae) {\n          throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}