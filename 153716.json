{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#incrementToken().mjava","commits":[{"id":"1d6179f9c4237a7e5d423f4e4b439a94e967efc9","date":1304382587,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c17d12803da6cadc96b3cdf15b0b940eddb28de","date":1323710889,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    int end = -1;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      final int charCount = Character.charCount(c);\n      bufferIndex += charCount;\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - charCount;\n          end = start;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        end += charCount;\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(end));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":["966b079690131e434b39530d82cc413f5aff4cd5","ea9d1f915bc156f5ebbc6a9cdcf631c173a69a91","74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    int end = -1;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      final int charCount = Character.charCount(c);\n      bufferIndex += charCount;\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - charCount;\n          end = start;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        end += charCount;\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(end));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      bufferIndex += Character.charCount(c);\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - 1;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(start+length));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    int end = -1;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      final int charCount = Character.charCount(c);\n      bufferIndex += charCount;\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - charCount;\n          end = start;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        end += charCount;\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(end));\n    return true;\n    \n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = -1; // this variable is always initialized\n    int end = -1;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        if(!charUtils.fill(ioBuffer, input)) { // read supplementary char aware with CharacterUtils\n          dataLen = 0; // so next offset += dataLen won't decrement offset\n          if (length > 0) {\n            break;\n          } else {\n            finalOffset = correctOffset(offset);\n            return false;\n          }\n        }\n        dataLen = ioBuffer.getLength();\n        bufferIndex = 0;\n      }\n      // use CharacterUtils here to support < 3.1 UTF-16 code unit behavior if the char based methods are gone\n      final int c = charUtils.codePointAt(ioBuffer.getBuffer(), bufferIndex);\n      final int charCount = Character.charCount(c);\n      bufferIndex += charCount;\n\n      if (isTokenChar(c)) {               // if it's a token char\n        if (length == 0) {                // start of token\n          assert start == -1;\n          start = offset + bufferIndex - charCount;\n          end = start;\n        } else if (length >= buffer.length-1) { // check if a supplementary could run out of bounds\n          buffer = termAtt.resizeBuffer(2+length); // make sure a supplementary fits in the buffer\n        }\n        end += charCount;\n        length += Character.toChars(normalize(c), buffer, length); // buffer it, normalized\n        if (length >= MAX_WORD_LEN) // buffer overflow! make sure to check for >= surrogate pair could break == test\n          break;\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setLength(length);\n    assert start != -1;\n    offsetAtt.setOffset(correctOffset(start), finalOffset = correctOffset(end));\n    return true;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9","0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"0c17d12803da6cadc96b3cdf15b0b940eddb28de":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["4ceb6a6c707ada1df8bde804e25c98668e699a18","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"0c17d12803da6cadc96b3cdf15b0b940eddb28de":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4ceb6a6c707ada1df8bde804e25c98668e699a18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}