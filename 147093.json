{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#setupTest().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#setupTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["9c6c0dad4932399aec99b4818086cb1772773916"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"9c6c0dad4932399aec99b4818086cb1772773916":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9c6c0dad4932399aec99b4818086cb1772773916":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9c6c0dad4932399aec99b4818086cb1772773916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}