{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}