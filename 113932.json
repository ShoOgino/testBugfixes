{"path":"lucene/sandbox/src/java/org/apache/lucene/document/DimensionalLatLonField#DimensionalLatLonField(String,double,double).mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/DimensionalLatLonField#DimensionalLatLonField(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointField#BKDPointField(String,double,double).mjava","sourceNew":"  /** \n   * Creates a new DimensionalLatLonField with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public DimensionalLatLonField(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (GeoUtils.isValidLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (GeoUtils.isValidLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    byte[] bytes = new byte[8];\n    BKDUtil.intToBytes(encodeLat(lat), bytes, 0);\n    BKDUtil.intToBytes(encodeLon(lon), bytes, 1);\n    fieldsData = new BytesRef(bytes);\n  }\n\n","sourceOld":"  /** \n   * Creates a new BKDPointField field with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public BKDPointField(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (BKDTreeWriter.validLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (BKDTreeWriter.validLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    fieldsData = Long.valueOf(((long) BKDTreeWriter.encodeLat(lat) << 32) | (BKDTreeWriter.encodeLon(lon) & 0xffffffffL));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/DimensionalLatLonField#DimensionalLatLonField(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/DimensionalLatLonField#DimensionalLatLonField(String,double,double).mjava","sourceNew":"  /** \n   * Creates a new DimensionalLatLonField with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public DimensionalLatLonField(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (GeoUtils.isValidLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (GeoUtils.isValidLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    byte[] bytes = new byte[8];\n    NumericUtils.intToBytes(encodeLat(lat), bytes, 0);\n    NumericUtils.intToBytes(encodeLon(lon), bytes, 1);\n    fieldsData = new BytesRef(bytes);\n  }\n\n","sourceOld":"  /** \n   * Creates a new DimensionalLatLonField with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public DimensionalLatLonField(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (GeoUtils.isValidLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (GeoUtils.isValidLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    byte[] bytes = new byte[8];\n    BKDUtil.intToBytes(encodeLat(lat), bytes, 0);\n    BKDUtil.intToBytes(encodeLon(lon), bytes, 1);\n    fieldsData = new BytesRef(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#LatLonPoint(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/DimensionalLatLonField#DimensionalLatLonField(String,double,double).mjava","sourceNew":"  /** \n   * Creates a new LatLonPoint with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public LatLonPoint(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (GeoUtils.isValidLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (GeoUtils.isValidLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    byte[] bytes = new byte[8];\n    NumericUtils.intToBytes(encodeLat(lat), bytes, 0);\n    NumericUtils.intToBytes(encodeLon(lon), bytes, 1);\n    fieldsData = new BytesRef(bytes);\n  }\n\n","sourceOld":"  /** \n   * Creates a new DimensionalLatLonField with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public DimensionalLatLonField(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (GeoUtils.isValidLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (GeoUtils.isValidLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    byte[] bytes = new byte[8];\n    NumericUtils.intToBytes(encodeLat(lat), bytes, 0);\n    NumericUtils.intToBytes(encodeLon(lon), bytes, 1);\n    fieldsData = new BytesRef(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}