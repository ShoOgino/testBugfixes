{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970","date":1349914134,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        int offsetLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            int deltaCode = posIn.readVInt();\n            if ((deltaCode & 1) != 0) {\n              offsetLength = posIn.readVInt();\n            }\n            offsetStartDeltaBuffer[i] = deltaCode >>> 1;\n            offsetLengthBuffer[i] = offsetLength;\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        int offsetLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            int deltaCode = posIn.readVInt();\n            if ((deltaCode & 1) != 0) {\n              offsetLength = posIn.readVInt();\n            }\n            offsetStartDeltaBuffer[i] = deltaCode >>> 1;\n            offsetLengthBuffer[i] = offsetLength;\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        int offsetLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            int deltaCode = posIn.readVInt();\n            if ((deltaCode & 1) != 0) {\n              offsetLength = posIn.readVInt();\n            }\n            offsetStartDeltaBuffer[i] = deltaCode >>> 1;\n            offsetLengthBuffer[i] = offsetLength;\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        int offsetLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            int deltaCode = posIn.readVInt();\n            if ((deltaCode & 1) != 0) {\n              offsetLength = posIn.readVInt();\n            }\n            offsetStartDeltaBuffer[i] = deltaCode >>> 1;\n            offsetLengthBuffer[i] = offsetLength;\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        int offsetLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            int deltaCode = posIn.readVInt();\n            if ((deltaCode & 1) != 0) {\n              offsetLength = posIn.readVInt();\n            }\n            offsetStartDeltaBuffer[i] = deltaCode >>> 1;\n            offsetLengthBuffer[i] = offsetLength;\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        int offsetLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            int deltaCode = posIn.readVInt();\n            if ((deltaCode & 1) != 0) {\n              offsetLength = posIn.readVInt();\n            }\n            offsetStartDeltaBuffer[i] = deltaCode >>> 1;\n            offsetLengthBuffer[i] = offsetLength;\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        int offsetLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            int deltaCode = posIn.readVInt();\n            if ((deltaCode & 1) != 0) {\n              offsetLength = posIn.readVInt();\n            }\n            offsetStartDeltaBuffer[i] = deltaCode >>> 1;\n            offsetLengthBuffer[i] = offsetLength;\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}