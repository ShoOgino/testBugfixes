{"path":"lucene/core/src/java/org/apache/lucene/document/FeatureField#computePivotFeatureValue(IndexSearcher,String,String).mjava","commits":[{"id":"966dd6f2a1942842f7efe2bdcc7537ea6597a290","date":1521543449,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FeatureField#computePivotFeatureValue(IndexSearcher,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute a feature value that may be used as the {@code pivot} parameter of\n   * the {@link #newSaturationQuery(String, String, float, float)} and\n   * {@link #newSigmoidQuery(String, String, float, float, float)} factory\n   * methods. The implementation takes the average of the int bits of the float\n   * representation in practice before converting it back to a float. Given that\n   * floats store the exponent in the higher bits, it means that the result will\n   * be an approximation of the geometric mean of all feature values.\n   * @param searcher     the {@link IndexSearcher} to search against\n   * @param featureField the field that stores features\n   * @param featureName  the name of the feature\n   */\n  public static float computePivotFeatureValue(IndexSearcher searcher, String featureField, String featureName) throws IOException {\n    Term term = new Term(featureField, featureName);\n    TermStates states = TermStates.build(searcher.getIndexReader().getContext(), term, true);\n    float avgFreq = (float) ((double) states.totalTermFreq() / states.docFreq());\n    return decodeFeatureValue(avgFreq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FeatureField#computePivotFeatureValue(IndexSearcher,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute a feature value that may be used as the {@code pivot} parameter of\n   * the {@link #newSaturationQuery(String, String, float, float)} and\n   * {@link #newSigmoidQuery(String, String, float, float, float)} factory\n   * methods. The implementation takes the average of the int bits of the float\n   * representation in practice before converting it back to a float. Given that\n   * floats store the exponent in the higher bits, it means that the result will\n   * be an approximation of the geometric mean of all feature values.\n   * @param searcher     the {@link IndexSearcher} to search against\n   * @param featureField the field that stores features\n   * @param featureName  the name of the feature\n   */\n  public static float computePivotFeatureValue(IndexSearcher searcher, String featureField, String featureName) throws IOException {\n    Term term = new Term(featureField, featureName);\n    TermStates states = TermStates.build(searcher.getIndexReader().getContext(), term, true);\n    float avgFreq = (float) ((double) states.totalTermFreq() / states.docFreq());\n    return decodeFeatureValue(avgFreq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302","date":1526484586,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FeatureField#computePivotFeatureValue(IndexReader,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FeatureField#computePivotFeatureValue(IndexSearcher,String,String).mjava","sourceNew":"  /**\n   * Compute a feature value that may be used as the {@code pivot} parameter of\n   * the {@link #newSaturationQuery(String, String, float, float)} and\n   * {@link #newSigmoidQuery(String, String, float, float, float)} factory\n   * methods. The implementation takes the average of the int bits of the float\n   * representation in practice before converting it back to a float. Given that\n   * floats store the exponent in the higher bits, it means that the result will\n   * be an approximation of the geometric mean of all feature values.\n   * @param reader       the {@link IndexReader} to search against\n   * @param featureField the field that stores features\n   * @param featureName  the name of the feature\n   */\n  static float computePivotFeatureValue(IndexReader reader, String featureField, String featureName) throws IOException {\n    Term term = new Term(featureField, featureName);\n    TermStates states = TermStates.build(reader.getContext(), term, true);\n    if (states.docFreq() == 0) {\n      // avoid division by 0\n      // The return value doesn't matter much here, the term doesn't exist,\n      // it will never be used for scoring. Just Make sure to return a legal\n      // value.\n      return 1;\n    }\n    float avgFreq = (float) ((double) states.totalTermFreq() / states.docFreq());\n    return decodeFeatureValue(avgFreq);\n  }\n\n","sourceOld":"  /**\n   * Compute a feature value that may be used as the {@code pivot} parameter of\n   * the {@link #newSaturationQuery(String, String, float, float)} and\n   * {@link #newSigmoidQuery(String, String, float, float, float)} factory\n   * methods. The implementation takes the average of the int bits of the float\n   * representation in practice before converting it back to a float. Given that\n   * floats store the exponent in the higher bits, it means that the result will\n   * be an approximation of the geometric mean of all feature values.\n   * @param searcher     the {@link IndexSearcher} to search against\n   * @param featureField the field that stores features\n   * @param featureName  the name of the feature\n   */\n  public static float computePivotFeatureValue(IndexSearcher searcher, String featureField, String featureName) throws IOException {\n    Term term = new Term(featureField, featureName);\n    TermStates states = TermStates.build(searcher.getIndexReader().getContext(), term, true);\n    float avgFreq = (float) ((double) states.totalTermFreq() / states.docFreq());\n    return decodeFeatureValue(avgFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","966dd6f2a1942842f7efe2bdcc7537ea6597a290"],"966dd6f2a1942842f7efe2bdcc7537ea6597a290":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["808f86d4b1e5fa52de29b80a5e44b1dcc79ea302"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["808f86d4b1e5fa52de29b80a5e44b1dcc79ea302"],"966dd6f2a1942842f7efe2bdcc7537ea6597a290":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","966dd6f2a1942842f7efe2bdcc7537ea6597a290"],"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}