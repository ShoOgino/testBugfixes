{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getHttpSolrCall(HttpServletRequest,HttpServletResponse,boolean).mjava","commits":[{"id":"6bd1c8ca465374d5739ca9d218fc502055a0af97","date":1433205401,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getHttpSolrCall(HttpServletRequest,HttpServletResponse,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Allow a subclass to modify the HttpSolrCall.  In particular, subclasses may\n   * want to add attributes to the request and send errors differently\n   */\n  protected HttpSolrCall getHttpSolrCall(HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    return new HttpSolrCall(this, cores, request, response, retry);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getHttpSolrCall(HttpServletRequest,HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getHttpSolrCall(HttpServletRequest,HttpServletResponse,boolean).mjava","sourceNew":"  /**\n   * Allow a subclass to modify the HttpSolrCall.  In particular, subclasses may\n   * want to add attributes to the request and send errors differently\n   */\n  protected HttpSolrCall getHttpSolrCall(HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    String path = request.getServletPath();\n    if (request.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += request.getPathInfo();\n    }\n\n    if (isV2Enabled && (path.startsWith(\"/v2/\") || path.equals(\"/v2\"))) {\n      return new V2HttpCall(this, cores, request, response, false);\n    } else {\n      return new HttpSolrCall(this, cores, request, response, retry);\n    }\n  }\n\n","sourceOld":"  /**\n   * Allow a subclass to modify the HttpSolrCall.  In particular, subclasses may\n   * want to add attributes to the request and send errors differently\n   */\n  protected HttpSolrCall getHttpSolrCall(HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    return new HttpSolrCall(this, cores, request, response, retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getHttpSolrCall(HttpServletRequest,HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getHttpSolrCall(HttpServletRequest,HttpServletResponse,boolean).mjava","sourceNew":"  /**\n   * Allow a subclass to modify the HttpSolrCall.  In particular, subclasses may\n   * want to add attributes to the request and send errors differently\n   */\n  protected HttpSolrCall getHttpSolrCall(HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    String path = request.getServletPath();\n    if (request.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += request.getPathInfo();\n    }\n\n    if (isV2Enabled && (path.startsWith(\"/v2/\") || path.equals(\"/v2\"))) {\n      return new V2HttpCall(this, cores, request, response, false);\n    } else {\n      return new HttpSolrCall(this, cores, request, response, retry);\n    }\n  }\n\n","sourceOld":"  /**\n   * Allow a subclass to modify the HttpSolrCall.  In particular, subclasses may\n   * want to add attributes to the request and send errors differently\n   */\n  protected HttpSolrCall getHttpSolrCall(HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    return new HttpSolrCall(this, cores, request, response, retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","date":1489203052,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getHttpSolrCall(HttpServletRequest,HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getHttpSolrCall(HttpServletRequest,HttpServletResponse,boolean).mjava","sourceNew":"  /**\n   * Allow a subclass to modify the HttpSolrCall.  In particular, subclasses may\n   * want to add attributes to the request and send errors differently\n   */\n  protected HttpSolrCall getHttpSolrCall(HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    String path = request.getServletPath();\n    if (request.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += request.getPathInfo();\n    }\n\n    if (isV2Enabled && (path.startsWith(\"/____v2/\") || path.equals(\"/____v2\"))) {\n      return new V2HttpCall(this, cores, request, response, false);\n    } else {\n      return new HttpSolrCall(this, cores, request, response, retry);\n    }\n  }\n\n","sourceOld":"  /**\n   * Allow a subclass to modify the HttpSolrCall.  In particular, subclasses may\n   * want to add attributes to the request and send errors differently\n   */\n  protected HttpSolrCall getHttpSolrCall(HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    String path = request.getServletPath();\n    if (request.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += request.getPathInfo();\n    }\n\n    if (isV2Enabled && (path.startsWith(\"/v2/\") || path.equals(\"/v2\"))) {\n      return new V2HttpCall(this, cores, request, response, false);\n    } else {\n      return new HttpSolrCall(this, cores, request, response, retry);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de1f4f89cef95d8efa9877bdd893d1b542c9b140","date":1574241654,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getHttpSolrCall(HttpServletRequest,HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getHttpSolrCall(HttpServletRequest,HttpServletResponse,boolean).mjava","sourceNew":"  /**\n   * Allow a subclass to modify the HttpSolrCall.  In particular, subclasses may\n   * want to add attributes to the request and send errors differently\n   */\n  protected HttpSolrCall getHttpSolrCall(HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    String path = ServletUtils.getPathAfterContext(request);\n\n    if (isV2Enabled && (path.startsWith(\"/____v2/\") || path.equals(\"/____v2\"))) {\n      return new V2HttpCall(this, cores, request, response, false);\n    } else {\n      return new HttpSolrCall(this, cores, request, response, retry);\n    }\n  }\n\n","sourceOld":"  /**\n   * Allow a subclass to modify the HttpSolrCall.  In particular, subclasses may\n   * want to add attributes to the request and send errors differently\n   */\n  protected HttpSolrCall getHttpSolrCall(HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    String path = request.getServletPath();\n    if (request.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += request.getPathInfo();\n    }\n\n    if (isV2Enabled && (path.startsWith(\"/____v2/\") || path.equals(\"/____v2\"))) {\n      return new V2HttpCall(this, cores, request, response, false);\n    } else {\n      return new HttpSolrCall(this, cores, request, response, retry);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["6bd1c8ca465374d5739ca9d218fc502055a0af97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["6bd1c8ca465374d5739ca9d218fc502055a0af97","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"de1f4f89cef95d8efa9877bdd893d1b542c9b140":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b"],"6bd1c8ca465374d5739ca9d218fc502055a0af97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de1f4f89cef95d8efa9877bdd893d1b542c9b140"]},"commit2Childs":{"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["de1f4f89cef95d8efa9877bdd893d1b542c9b140"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bd1c8ca465374d5739ca9d218fc502055a0af97"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"de1f4f89cef95d8efa9877bdd893d1b542c9b140":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6bd1c8ca465374d5739ca9d218fc502055a0af97":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}