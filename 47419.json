{"path":"src/test/org/apache/solr/schema/UUIDFieldTest#testToInternal().mjava","commits":[{"id":"ba8cc958bf3f205a3c17a0077196036e9f5a7498","date":1187940516,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/UUIDFieldTest#testToInternal().mjava","pathOld":"/dev/null","sourceNew":"  public void testToInternal() {\n    boolean ok = false;\n    UUIDField uuidfield = new UUIDField();\n\n    try {\n      uuidfield.toInternal((String) null);\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from null failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from empty string failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"NEW\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from 'NEW' failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"d574fb6a-5f79-4974-b01a-fcd598a19ef5\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from UUID failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"This is a test\");\n      ok = false;\n    } catch (SolrException se) {\n      ok = true;\n    }\n    assertTrue(\"Bad UUID check failed\", ok);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/UUIDFieldTest#testToInternal().mjava","pathOld":"src/test/org/apache/solr/schema/UUIDFieldTest#testToInternal().mjava","sourceNew":"  public void testToInternal() {\n    boolean ok = false;\n    UUIDField uuidfield = new UUIDField();\n\n    try {\n      uuidfield.toInternal((String) null);\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from null failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from empty string failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"NEW\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from 'NEW' failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"d574fb6a-5f79-4974-b01a-fcd598a19ef5\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from UUID failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"This is a test\");\n      ok = false;\n    } catch (SolrException se) {\n      ok = true;\n    }\n    assertTrue(\"Bad UUID check failed\", ok);\n  }\n\n","sourceOld":"  public void testToInternal() {\n    boolean ok = false;\n    UUIDField uuidfield = new UUIDField();\n\n    try {\n      uuidfield.toInternal((String) null);\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from null failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from empty string failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"NEW\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from 'NEW' failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"d574fb6a-5f79-4974-b01a-fcd598a19ef5\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from UUID failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"This is a test\");\n      ok = false;\n    } catch (SolrException se) {\n      ok = true;\n    }\n    assertTrue(\"Bad UUID check failed\", ok);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ba8cc958bf3f205a3c17a0077196036e9f5a7498"],"ba8cc958bf3f205a3c17a0077196036e9f5a7498":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ba8cc958bf3f205a3c17a0077196036e9f5a7498"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"ba8cc958bf3f205a3c17a0077196036e9f5a7498":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}