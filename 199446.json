{"path":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,IndexReader).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarity();\n    // todo: we need docFreq that takes a BytesRef\n    String strVal = ByteUtils.UTF8toUTF16(indexedBytes);\n    int docfreq = searcher.docFreq(new Term(indexedField, strVal));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarity();\n    // todo: we need docFreq that takes a BytesRef\n    String strVal = ByteUtils.UTF8toUTF16(indexedBytes);\n    int docfreq = searcher.docFreq(new Term(indexedField, strVal));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarity();\n    // todo: we need docFreq that takes a BytesRef\n    String strVal = ByteUtils.UTF8toUTF16(indexedBytes);\n    int docfreq = searcher.docFreq(new Term(indexedField, strVal));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    String strVal = ByteUtils.UTF8toUTF16(indexedBytes);\n    int docfreq = searcher.docFreq(new Term(indexedField, strVal));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarity();\n    // todo: we need docFreq that takes a BytesRef\n    String strVal = ByteUtils.UTF8toUTF16(indexedBytes);\n    int docfreq = searcher.docFreq(new Term(indexedField, strVal));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    String strVal = ByteUtils.UTF8toUTF16(indexedBytes);\n    int docfreq = searcher.docFreq(new Term(indexedField, strVal));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarity();\n    // todo: we need docFreq that takes a BytesRef\n    String strVal = ByteUtils.UTF8toUTF16(indexedBytes);\n    int docfreq = searcher.docFreq(new Term(indexedField, strVal));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    String strVal = ByteUtils.UTF8toUTF16(indexedBytes);\n    int docfreq = searcher.docFreq(new Term(indexedField, strVal));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes.utf8ToString()));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    String strVal = ByteUtils.UTF8toUTF16(indexedBytes);\n    int docfreq = searcher.docFreq(new Term(indexedField, strVal));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes.utf8ToString()));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    String strVal = ByteUtils.UTF8toUTF16(indexedBytes);\n    int docfreq = searcher.docFreq(new Term(indexedField, strVal));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes.utf8ToString()));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    String strVal = ByteUtils.UTF8toUTF16(indexedBytes);\n    int docfreq = searcher.docFreq(new Term(indexedField, strVal));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51cb88215648c6da23e00f2ffb57a5e3e1ef14be","date":1309303947,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes.utf8ToString()));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes.utf8ToString()));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes.utf8ToString()));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes.utf8ToString()));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/IDFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes.utf8ToString()));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    Similarity sim = searcher.getSimilarityProvider().get(field);\n    // todo: we need docFreq that takes a BytesRef\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes.utf8ToString()));\n    float idf = sim.idf(docfreq, searcher.maxDoc());\n    return new ConstDoubleDocValues(idf, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["c220849f876de24a79f756f65b3eb045db59f63f"],"c220849f876de24a79f756f65b3eb045db59f63f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["29ef99d61cda9641b6250bf9567329a6e65f901d","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"c220849f876de24a79f756f65b3eb045db59f63f":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","868da859b43505d9d2a023bfeae6dd0c795f5295"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["d083e83f225b11e5fdd900e83d26ddb385b6955c","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","51cb88215648c6da23e00f2ffb57a5e3e1ef14be","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","bb9b72f7c3d7827c64dd4ec580ded81778da361d","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}