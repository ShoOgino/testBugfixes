{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","commits":[{"id":"0ac446a120a3c5f1ac22f9a866256ad428c1821b","date":1447203034,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testStatsStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n\n","sourceOld":"  private void testStatsStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n\n","sourceOld":"  private void testStatsStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n\n","sourceOld":"  private void testStatsStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n\n","sourceOld":"  private void testStatsStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n\n","sourceOld":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n\n","sourceOld":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816189b2f867eab5e0795237a1d8e1bc03b19550","date":1493771668,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      streamContext.setSolrClientCache(cache);\n      String expr = \"stats(\" + COLLECTIONORALIAS + \", q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      expr = \"stats(myCollection, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      stream = factory.constructStream(expr);\n      stream.setStreamContext(context);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", expr);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 1);\n\n      tuple =tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", expr);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Collection not found: myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      streamContext.setSolrClientCache(cache);\n      String expr = \"stats(\" + COLLECTIONORALIAS + \", q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      expr = \"stats(myCollection, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      stream = factory.constructStream(expr);\n      stream.setStreamContext(context);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", expr);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 1);\n\n      tuple =tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", expr);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Collection not found: myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n  \n    expression = StreamExpressionParser.parse(\"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\");\n    stream = factory.constructStream(expression);\n\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0370d6fb5289875090a50a9d0887ee584fed440","date":1552401990,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      streamContext.setSolrClientCache(cache);\n      String expr = \"stats(\" + COLLECTIONORALIAS + \", q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      expr = \"stats(myCollection, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      stream = factory.constructStream(expr);\n      stream.setStreamContext(context);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", expr);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 1);\n\n      tuple =tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", expr);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Collection not found: myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);     \n  \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      streamContext.setSolrClientCache(cache);\n      String expr = \"stats(\" + COLLECTIONORALIAS + \", q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      expr = \"stats(myCollection, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      stream = factory.constructStream(expr);\n      stream.setStreamContext(context);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", expr);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 1);\n\n      tuple =tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", expr);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Collection not found: myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":["0ac446a120a3c5f1ac22f9a866256ad428c1821b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","date":1575925443,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      streamContext.setSolrClientCache(cache);\n      String expr = \"stats(\" + COLLECTIONORALIAS + \", q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Test without query\n\n      expr = \"stats(\" + COLLECTIONORALIAS + \", sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      expr = \"stats(myCollection, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      stream = factory.constructStream(expr);\n      stream.setStreamContext(context);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", expr);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 1);\n\n      tuple =tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", expr);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Collection not found: myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      streamContext.setSolrClientCache(cache);\n      String expr = \"stats(\" + COLLECTIONORALIAS + \", q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      expr = \"stats(myCollection, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      stream = factory.constructStream(expr);\n      stream.setStreamContext(context);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", expr);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 1);\n\n      tuple =tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", expr);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Collection not found: myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7107555998ea86d6f61e2ad770687d674fa8e012","date":1575927428,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      streamContext.setSolrClientCache(cache);\n      String expr = \"stats(\" + COLLECTIONORALIAS + \", q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Test without query\n\n      expr = \"stats(\" + COLLECTIONORALIAS + \", sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      expr = \"stats(myCollection, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      stream = factory.constructStream(expr);\n      stream.setStreamContext(context);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", expr);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 1);\n\n      tuple =tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", expr);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Collection not found: myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      streamContext.setSolrClientCache(cache);\n      String expr = \"stats(\" + COLLECTIONORALIAS + \", q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      expr = \"stats(myCollection, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      stream = factory.constructStream(expr);\n      stream.setStreamContext(context);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", expr);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 1);\n\n      tuple =tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", expr);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Collection not found: myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"570664407cd3123a8039f1b4f2f6c6693bdaee31","date":1589893823,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class)\n    .withFunctionName(\"std\", StdMetric.class)\n    .withFunctionName(\"per\", PercentileMetric.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      streamContext.setSolrClientCache(cache);\n      String expr = \"stats(\" + COLLECTIONORALIAS + \", q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), std(a_i), std(a_f), per(a_i, 50), per(a_f, 50), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double stdi = tuple.getDouble(\"std(a_i)\");\n      Double stdf = tuple.getDouble(\"std(a_f)\");\n      Double peri = tuple.getDouble(\"per(a_i,50)\");\n      Double perf = tuple.getDouble(\"per(a_f,50)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(stdi.doubleValue() == 5.477225575051661D);\n      assertTrue(stdf.doubleValue() == 3.0276503540974917D);\n      assertTrue(peri.doubleValue() == 7.0D);\n      assertTrue(perf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n\n      //Test without query\n\n      expr = \"stats(\" + COLLECTIONORALIAS + \", sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), std(a_i), std(a_f), per(a_i, 50), per(a_f, 50), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      stdi = tuple.getDouble(\"std(a_i)\");\n      stdf = tuple.getDouble(\"std(a_f)\");\n      peri = tuple.getDouble(\"per(a_i,50)\");\n      perf = tuple.getDouble(\"per(a_f,50)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(stdi.doubleValue() == 5.477225575051661D);\n      assertTrue(stdf.doubleValue() == 3.0276503540974917D);\n      assertTrue(peri.doubleValue() == 7.0D);\n      assertTrue(perf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      expr = \"stats(myCollection, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), std(a_i), std(a_f), per(a_i, 50), per(a_f, 50), count(*))\";\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      stream = factory.constructStream(expr);\n      stream.setStreamContext(context);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      stdi = tuple.getDouble(\"std(a_i)\");\n      stdf = tuple.getDouble(\"std(a_f)\");\n      peri = tuple.getDouble(\"per(a_i,50)\");\n      perf = tuple.getDouble(\"per(a_f,50)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(stdi.doubleValue() == 5.477225575051661D);\n      assertTrue(stdf.doubleValue() == 3.0276503540974917D);\n      assertTrue(peri.doubleValue() == 7.0D);\n      assertTrue(perf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", expr);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 1);\n\n      tuple =tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", expr);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Collection not found: myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      streamContext.setSolrClientCache(cache);\n      String expr = \"stats(\" + COLLECTIONORALIAS + \", q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Test without query\n\n      expr = \"stats(\" + COLLECTIONORALIAS + \", sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      expr = \"stats(myCollection, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      stream = factory.constructStream(expr);\n      stream.setStreamContext(context);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", expr);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 1);\n\n      tuple =tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", expr);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Collection not found: myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class)\n    .withFunctionName(\"std\", StdMetric.class)\n    .withFunctionName(\"per\", PercentileMetric.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      streamContext.setSolrClientCache(cache);\n      String expr = \"stats(\" + COLLECTIONORALIAS + \", q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), std(a_i), std(a_f), per(a_i, 50), per(a_f, 50), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double stdi = tuple.getDouble(\"std(a_i)\");\n      Double stdf = tuple.getDouble(\"std(a_f)\");\n      Double peri = tuple.getDouble(\"per(a_i,50)\");\n      Double perf = tuple.getDouble(\"per(a_f,50)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(stdi.doubleValue() == 5.477225575051661D);\n      assertTrue(stdf.doubleValue() == 3.0276503540974917D);\n      assertTrue(peri.doubleValue() == 7.0D);\n      assertTrue(perf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n\n      //Test without query\n\n      expr = \"stats(\" + COLLECTIONORALIAS + \", sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), std(a_i), std(a_f), per(a_i, 50), per(a_f, 50), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      stdi = tuple.getDouble(\"std(a_i)\");\n      stdf = tuple.getDouble(\"std(a_f)\");\n      peri = tuple.getDouble(\"per(a_i,50)\");\n      perf = tuple.getDouble(\"per(a_f,50)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(stdi.doubleValue() == 5.477225575051661D);\n      assertTrue(stdf.doubleValue() == 3.0276503540974917D);\n      assertTrue(peri.doubleValue() == 7.0D);\n      assertTrue(perf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      expr = \"stats(myCollection, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), std(a_i), std(a_f), per(a_i, 50), per(a_f, 50), count(*))\";\n      Map<String, List<String>> shardsMap = new HashMap<>();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      stream = factory.constructStream(expr);\n      stream.setStreamContext(context);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      stdi = tuple.getDouble(\"std(a_i)\");\n      stdf = tuple.getDouble(\"std(a_f)\");\n      peri = tuple.getDouble(\"per(a_i,50)\");\n      perf = tuple.getDouble(\"per(a_f,50)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(stdi.doubleValue() == 5.477225575051661D);\n      assertTrue(stdf.doubleValue() == 3.0276503540974917D);\n      assertTrue(peri.doubleValue() == 7.0D);\n      assertTrue(perf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", expr);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 1);\n\n      tuple =tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", expr);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Collection not found: myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n    .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n    .withFunctionName(\"stats\", StatsStream.class)\n    .withFunctionName(\"sum\", SumMetric.class)\n    .withFunctionName(\"min\", MinMetric.class)\n    .withFunctionName(\"max\", MaxMetric.class)\n    .withFunctionName(\"avg\", MeanMetric.class)\n    .withFunctionName(\"count\", CountMetric.class)\n    .withFunctionName(\"std\", StdMetric.class)\n    .withFunctionName(\"per\", PercentileMetric.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    try {\n      streamContext.setSolrClientCache(cache);\n      String expr = \"stats(\" + COLLECTIONORALIAS + \", q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), std(a_i), std(a_f), per(a_i, 50), per(a_f, 50), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double stdi = tuple.getDouble(\"std(a_i)\");\n      Double stdf = tuple.getDouble(\"std(a_f)\");\n      Double peri = tuple.getDouble(\"per(a_i,50)\");\n      Double perf = tuple.getDouble(\"per(a_f,50)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(stdi.doubleValue() == 5.477225575051661D);\n      assertTrue(stdf.doubleValue() == 3.0276503540974917D);\n      assertTrue(peri.doubleValue() == 7.0D);\n      assertTrue(perf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n\n      //Test without query\n\n      expr = \"stats(\" + COLLECTIONORALIAS + \", sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), std(a_i), std(a_f), per(a_i, 50), per(a_f, 50), count(*))\";\n      expression = StreamExpressionParser.parse(expr);\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      stdi = tuple.getDouble(\"std(a_i)\");\n      stdf = tuple.getDouble(\"std(a_f)\");\n      peri = tuple.getDouble(\"per(a_i,50)\");\n      perf = tuple.getDouble(\"per(a_f,50)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(stdi.doubleValue() == 5.477225575051661D);\n      assertTrue(stdf.doubleValue() == 3.0276503540974917D);\n      assertTrue(peri.doubleValue() == 7.0D);\n      assertTrue(perf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      expr = \"stats(myCollection, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), std(a_i), std(a_f), per(a_i, 50), per(a_f, 50), count(*))\";\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      stream = factory.constructStream(expr);\n      stream.setStreamContext(context);\n\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      //Test Long and Double Sums\n\n      tuple = tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      stdi = tuple.getDouble(\"std(a_i)\");\n      stdf = tuple.getDouble(\"std(a_f)\");\n      peri = tuple.getDouble(\"per(a_i,50)\");\n      perf = tuple.getDouble(\"per(a_f,50)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(stdi.doubleValue() == 5.477225575051661D);\n      assertTrue(stdf.doubleValue() == 3.0276503540974917D);\n      assertTrue(peri.doubleValue() == 7.0D);\n      assertTrue(perf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", expr);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 1);\n\n      tuple =tuples.get(0);\n\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(sumi.longValue() == 70);\n      assertTrue(sumf.doubleValue() == 55.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 7.0D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 10);\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", expr);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Collection not found: myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["a0370d6fb5289875090a50a9d0887ee584fed440"],"0ac446a120a3c5f1ac22f9a866256ad428c1821b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73450c0955930295d34703e7ddbfc6973b7a121a":["0ac446a120a3c5f1ac22f9a866256ad428c1821b","b940572a59da1b42b6c20ab5278155b12816807a"],"b940572a59da1b42b6c20ab5278155b12816807a":["0ac446a120a3c5f1ac22f9a866256ad428c1821b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8c969f15cd04d31e520319c619a445ae21f02d72","816189b2f867eab5e0795237a1d8e1bc03b19550"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["0ac446a120a3c5f1ac22f9a866256ad428c1821b","b940572a59da1b42b6c20ab5278155b12816807a"],"a0370d6fb5289875090a50a9d0887ee584fed440":["816189b2f867eab5e0795237a1d8e1bc03b19550"],"7107555998ea86d6f61e2ad770687d674fa8e012":["a0370d6fb5289875090a50a9d0887ee584fed440","76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["0ac446a120a3c5f1ac22f9a866256ad428c1821b","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","8c969f15cd04d31e520319c619a445ae21f02d72"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"],"8c969f15cd04d31e520319c619a445ae21f02d72":["73450c0955930295d34703e7ddbfc6973b7a121a"],"816189b2f867eab5e0795237a1d8e1bc03b19550":["8c969f15cd04d31e520319c619a445ae21f02d72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["7107555998ea86d6f61e2ad770687d674fa8e012","570664407cd3123a8039f1b4f2f6c6693bdaee31"],"0ac446a120a3c5f1ac22f9a866256ad428c1821b":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a0370d6fb5289875090a50a9d0887ee584fed440":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","7107555998ea86d6f61e2ad770687d674fa8e012"],"7107555998ea86d6f61e2ad770687d674fa8e012":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ac446a120a3c5f1ac22f9a866256ad428c1821b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["9ba1b632c041956c93c41aa1143d16a567014891"],"8c969f15cd04d31e520319c619a445ae21f02d72":["e9017cf144952056066919f1ebc7897ff9bd71b1","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","816189b2f867eab5e0795237a1d8e1bc03b19550"],"816189b2f867eab5e0795237a1d8e1bc03b19550":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0370d6fb5289875090a50a9d0887ee584fed440"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","7107555998ea86d6f61e2ad770687d674fa8e012","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}