{"path":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","sourceNew":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n  }\n\n","sourceOld":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","sourceNew":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    IndexReader r0 = IndexReader.open(directory);\n    SegmentReader r = (SegmentReader) r0.getSequentialSubReaders()[0];\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","sourceOld":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n  }\n\n","bugFix":null,"bugIntro":["b6ef1ac57615594df99b4d227449fa09de6c255f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"64d12ff8f1998324df34446e9530414ad6e7e9c9","date":1327848598,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","sourceNew":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    DirectoryReader r0 = IndexReader.open(directory);\n    SegmentReader r = LuceneTestCase.getOnlySegmentReader(r0);\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","sourceOld":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    IndexReader r0 = IndexReader.open(directory);\n    SegmentReader r = (SegmentReader) r0.getSequentialSubReaders()[0];\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","sourceNew":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    DirectoryReader r0 = IndexReader.open(directory);\n    SegmentReader r = LuceneTestCase.getOnlySegmentReader(r0);\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","sourceOld":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    IndexReader r0 = IndexReader.open(directory);\n    SegmentReader r = (SegmentReader) r0.getSequentialSubReaders()[0];\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","sourceNew":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    DirectoryReader r0 = IndexReader.open(directory);\n    SegmentReader r = LuceneTestCase.getOnlySegmentReader(r0);\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","sourceOld":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    DirectoryReader r0 = IndexReader.open(directory);\n    SegmentReader r = LuceneTestCase.getOnlySegmentReader(r0);\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"64d12ff8f1998324df34446e9530414ad6e7e9c9":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8be580b58bcc650d428f3f22de81cadcf51d650a":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8be580b58bcc650d428f3f22de81cadcf51d650a","64d12ff8f1998324df34446e9530414ad6e7e9c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"64d12ff8f1998324df34446e9530414ad6e7e9c9":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["64d12ff8f1998324df34446e9530414ad6e7e9c9","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}