{"path":"solr/core/src/java/org/apache/solr/handler/ClassifyStream#ClassifyStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"b5fa1c8367f821057f943ece929329485ec708ba","date":1475186606,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ClassifyStream#ClassifyStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ClassifyStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    if (streamExpressions.size() != 2) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting two stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    modelStream = factory.constructStream(streamExpressions.get(0));\n    docStream = factory.constructStream(streamExpressions.get(1));\n\n    StreamExpressionNamedParameter fieldParameter = factory.getNamedOperand(expression, \"field\");\n    if (fieldParameter == null) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - field parameter must be specified\",expression, streamExpressions.size()));\n    }\n    analyzerField = field = fieldParameter.getParameter().toString();\n\n    StreamExpressionNamedParameter analyzerFieldParameter = factory.getNamedOperand(expression, \"analyzerField\");\n    if (analyzerFieldParameter != null) {\n      analyzerField = analyzerFieldParameter.getParameter().toString();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ClassifyStream#ClassifyStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ClassifyStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    if (streamExpressions.size() != 2) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting two stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    modelStream = factory.constructStream(streamExpressions.get(0));\n    docStream = factory.constructStream(streamExpressions.get(1));\n\n    StreamExpressionNamedParameter fieldParameter = factory.getNamedOperand(expression, \"field\");\n    if (fieldParameter == null) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - field parameter must be specified\",expression, streamExpressions.size()));\n    }\n    analyzerField = field = fieldParameter.getParameter().toString();\n\n    StreamExpressionNamedParameter analyzerFieldParameter = factory.getNamedOperand(expression, \"analyzerField\");\n    if (analyzerFieldParameter != null) {\n      analyzerField = analyzerFieldParameter.getParameter().toString();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ClassifyStream#ClassifyStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ClassifyStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    if (streamExpressions.size() != 2) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting two stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    modelStream = factory.constructStream(streamExpressions.get(0));\n    docStream = factory.constructStream(streamExpressions.get(1));\n\n    StreamExpressionNamedParameter fieldParameter = factory.getNamedOperand(expression, \"field\");\n    if (fieldParameter == null) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - field parameter must be specified\",expression, streamExpressions.size()));\n    }\n    analyzerField = field = fieldParameter.getParameter().toString();\n\n    StreamExpressionNamedParameter analyzerFieldParameter = factory.getNamedOperand(expression, \"analyzerField\");\n    if (analyzerFieldParameter != null) {\n      analyzerField = analyzerFieldParameter.getParameter().toString();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5fa1c8367f821057f943ece929329485ec708ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5fa1c8367f821057f943ece929329485ec708ba"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"b5fa1c8367f821057f943ece929329485ec708ba":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5fa1c8367f821057f943ece929329485ec708ba","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}