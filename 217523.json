{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestBatchAddsWithDelete().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestBatchAddsWithDelete().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check that batch updates with deletes\n   */\n  public void doTestBatchAddsWithDelete() throws Exception {\n    this.clearSourceCollection();\n    this.clearTargetCollection();\n\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertEquals(59, getNumDocs(SOURCE_COLLECTION));\n    assertEquals(59, getNumDocs(TARGET_COLLECTION));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dcd1fe49b76116e7d358993339fe8adbb030638","date":1437151093,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestBatchAddsWithDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestBatchAddsWithDelete().mjava","sourceNew":"  /**\n   * Check that batch updates with deletes\n   */\n  public void doTestBatchAddsWithDelete() throws Exception {\n    this.clearSourceCollection();\n    this.clearTargetCollection();\n\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertEquals(59, getNumDocs(SOURCE_COLLECTION));\n    assertEquals(59, getNumDocs(TARGET_COLLECTION));\n  }\n\n","sourceOld":"  /**\n   * Check that batch updates with deletes\n   */\n  public void doTestBatchAddsWithDelete() throws Exception {\n    this.clearSourceCollection();\n    this.clearTargetCollection();\n\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertEquals(59, getNumDocs(SOURCE_COLLECTION));\n    assertEquals(59, getNumDocs(TARGET_COLLECTION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestBatchAddsWithDelete().mjava","sourceNew":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that batch updates with deletes\n   */\n  public void doTestBatchAddsWithDelete() throws Exception {\n    this.clearSourceCollection();\n    this.clearTargetCollection();\n\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertEquals(59, getNumDocs(SOURCE_COLLECTION));\n    assertEquals(59, getNumDocs(TARGET_COLLECTION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["4dcd1fe49b76116e7d358993339fe8adbb030638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4dcd1fe49b76116e7d358993339fe8adbb030638":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["4dcd1fe49b76116e7d358993339fe8adbb030638"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"4dcd1fe49b76116e7d358993339fe8adbb030638":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}