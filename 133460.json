{"path":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,boolean,MergeScheduler).mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,boolean,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, boolean autoCommit, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, autoCommit, ANALYZER, true);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n      \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[2] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    modifier.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, ANALYZER, true);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier);\n    indexerThread.start();\n      \n    IndexerThread indexerThread2 = new IndexerThread(modifier);\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory);\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory);\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    modifier.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,boolean,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,boolean,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, boolean autoCommit, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, autoCommit, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n      \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[2] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    modifier.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, boolean autoCommit, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, autoCommit, ANALYZER, true);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n      \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[2] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    modifier.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,boolean,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,boolean,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, boolean autoCommit, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, autoCommit, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!((TimedThread) threads[i]).failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, boolean autoCommit, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, autoCommit, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n      \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[2] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    modifier.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,boolean,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,boolean,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, boolean autoCommit, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, autoCommit, ANALYZER, true);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!((TimedThread) threads[i]).failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, boolean autoCommit, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, autoCommit, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!((TimedThread) threads[i]).failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,boolean,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!((TimedThread) threads[i]).failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, boolean autoCommit, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, autoCommit, ANALYZER, true);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(!((TimedThread) threads[i]).failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["e82780afe6097066eb5befb86e9432f077667e3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"87c966e9308847938a7c905c2e46a56d8df788b8":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87c966e9308847938a7c905c2e46a56d8df788b8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"e82780afe6097066eb5befb86e9432f077667e3d":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["e82780afe6097066eb5befb86e9432f077667e3d"],"87c966e9308847938a7c905c2e46a56d8df788b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}