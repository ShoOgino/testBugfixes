{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#Lucene41DocValuesProducer(SegmentReadState,String,String,String,String).mjava","commits":[{"id":"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","date":1358522034,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#Lucene41DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#Lucene41SimpleDocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene41DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                Lucene41DocValuesConsumer.VERSION_START,\n                                Lucene41DocValuesConsumer.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                Lucene41DocValuesConsumer.VERSION_START,\n                                Lucene41DocValuesConsumer.VERSION_START);\n  }\n\n","sourceOld":"  Lucene41SimpleDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                Lucene41SimpleDocValuesConsumer.VERSION_START,\n                                Lucene41SimpleDocValuesConsumer.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                Lucene41SimpleDocValuesConsumer.VERSION_START,\n                                Lucene41SimpleDocValuesConsumer.VERSION_START);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#Lucene42DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#Lucene41DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene42DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                Lucene42DocValuesConsumer.VERSION_START,\n                                Lucene42DocValuesConsumer.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                Lucene42DocValuesConsumer.VERSION_START,\n                                Lucene42DocValuesConsumer.VERSION_START);\n  }\n\n","sourceOld":"  Lucene41DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, metaCodec, \n                                Lucene41DocValuesConsumer.VERSION_START,\n                                Lucene41DocValuesConsumer.VERSION_START);\n      numerics = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      fsts = new HashMap<Integer,FSTEntry>();\n      readFields(in, state.fieldInfos);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n    \n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    data = state.directory.openInput(dataName, state.context);\n    CodecUtil.checkHeader(data, dataCodec, \n                                Lucene41DocValuesConsumer.VERSION_START,\n                                Lucene41DocValuesConsumer.VERSION_START);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f"],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":[],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}