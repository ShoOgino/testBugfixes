{"path":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(FieldData[],int,int).mjava","commits":[{"id":"2684bcb2a921b6b5b76f64ba986564ab1ef0649d","date":1202988124,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(FieldData[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    void quickSort(FieldData[] array, int lo, int hi) {\n      if (lo >= hi)\n        return;\n\n      int mid = (lo + hi) >>> 1;\n\n      if (array[lo].compareTo(array[mid]) > 0) {\n        FieldData tmp = array[lo];\n        array[lo] = array[mid];\n        array[mid] = tmp;\n      }\n\n      if (array[mid].compareTo(array[hi]) > 0) {\n        FieldData tmp = array[mid];\n        array[mid] = array[hi];\n        array[hi] = tmp;\n\n        if (array[lo].compareTo(array[mid]) > 0) {\n          FieldData tmp2 = array[lo];\n          array[lo] = array[mid];\n          array[mid] = tmp2;\n        }\n      }\n\n      int left = lo + 1;\n      int right = hi - 1;\n\n      if (left >= right)\n        return;\n\n      FieldData partition = array[mid];\n\n      for (; ;) {\n        while (array[right].compareTo(partition) > 0)\n          --right;\n\n        while (left < right && array[left].compareTo(partition) <= 0)\n          ++left;\n\n        if (left < right) {\n          FieldData tmp = array[left];\n          array[left] = array[right];\n          array[right] = tmp;\n          --right;\n        } else {\n          break;\n        }\n      }\n\n      quickSort(array, lo, left);\n      quickSort(array, left + 1, hi);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ed8f980e6e2c95cbe9ce98790c259707ea5475","date":1205051176,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(FieldData[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(FieldData[],int,int).mjava","sourceNew":"    void quickSort(FieldData[] array, int lo, int hi) {\n      if (lo >= hi)\n        return;\n      else if (hi == 1+lo) {\n        if (array[lo].compareTo(array[hi]) > 0) {\n          final FieldData tmp = array[lo];\n          array[lo] = array[hi];\n          array[hi] = tmp;\n        }\n        return;\n      }\n\n      int mid = (lo + hi) >>> 1;\n\n      if (array[lo].compareTo(array[mid]) > 0) {\n        FieldData tmp = array[lo];\n        array[lo] = array[mid];\n        array[mid] = tmp;\n      }\n\n      if (array[mid].compareTo(array[hi]) > 0) {\n        FieldData tmp = array[mid];\n        array[mid] = array[hi];\n        array[hi] = tmp;\n\n        if (array[lo].compareTo(array[mid]) > 0) {\n          FieldData tmp2 = array[lo];\n          array[lo] = array[mid];\n          array[mid] = tmp2;\n        }\n      }\n\n      int left = lo + 1;\n      int right = hi - 1;\n\n      if (left >= right)\n        return;\n\n      FieldData partition = array[mid];\n\n      for (; ;) {\n        while (array[right].compareTo(partition) > 0)\n          --right;\n\n        while (left < right && array[left].compareTo(partition) <= 0)\n          ++left;\n\n        if (left < right) {\n          FieldData tmp = array[left];\n          array[left] = array[right];\n          array[right] = tmp;\n          --right;\n        } else {\n          break;\n        }\n      }\n\n      quickSort(array, lo, left);\n      quickSort(array, left + 1, hi);\n    }\n\n","sourceOld":"    void quickSort(FieldData[] array, int lo, int hi) {\n      if (lo >= hi)\n        return;\n\n      int mid = (lo + hi) >>> 1;\n\n      if (array[lo].compareTo(array[mid]) > 0) {\n        FieldData tmp = array[lo];\n        array[lo] = array[mid];\n        array[mid] = tmp;\n      }\n\n      if (array[mid].compareTo(array[hi]) > 0) {\n        FieldData tmp = array[mid];\n        array[mid] = array[hi];\n        array[hi] = tmp;\n\n        if (array[lo].compareTo(array[mid]) > 0) {\n          FieldData tmp2 = array[lo];\n          array[lo] = array[mid];\n          array[mid] = tmp2;\n        }\n      }\n\n      int left = lo + 1;\n      int right = hi - 1;\n\n      if (left >= right)\n        return;\n\n      FieldData partition = array[mid];\n\n      for (; ;) {\n        while (array[right].compareTo(partition) > 0)\n          --right;\n\n        while (left < right && array[left].compareTo(partition) <= 0)\n          ++left;\n\n        if (left < right) {\n          FieldData tmp = array[left];\n          array[left] = array[right];\n          array[right] = tmp;\n          --right;\n        } else {\n          break;\n        }\n      }\n\n      quickSort(array, lo, left);\n      quickSort(array, left + 1, hi);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a0af3a442be522899177e5e11384a45a6784a3f","date":1205348952,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(FieldData[],int,int).mjava","sourceNew":null,"sourceOld":"    void quickSort(FieldData[] array, int lo, int hi) {\n      if (lo >= hi)\n        return;\n      else if (hi == 1+lo) {\n        if (array[lo].compareTo(array[hi]) > 0) {\n          final FieldData tmp = array[lo];\n          array[lo] = array[hi];\n          array[hi] = tmp;\n        }\n        return;\n      }\n\n      int mid = (lo + hi) >>> 1;\n\n      if (array[lo].compareTo(array[mid]) > 0) {\n        FieldData tmp = array[lo];\n        array[lo] = array[mid];\n        array[mid] = tmp;\n      }\n\n      if (array[mid].compareTo(array[hi]) > 0) {\n        FieldData tmp = array[mid];\n        array[mid] = array[hi];\n        array[hi] = tmp;\n\n        if (array[lo].compareTo(array[mid]) > 0) {\n          FieldData tmp2 = array[lo];\n          array[lo] = array[mid];\n          array[mid] = tmp2;\n        }\n      }\n\n      int left = lo + 1;\n      int right = hi - 1;\n\n      if (left >= right)\n        return;\n\n      FieldData partition = array[mid];\n\n      for (; ;) {\n        while (array[right].compareTo(partition) > 0)\n          --right;\n\n        while (left < right && array[left].compareTo(partition) <= 0)\n          ++left;\n\n        if (left < right) {\n          FieldData tmp = array[left];\n          array[left] = array[right];\n          array[right] = tmp;\n          --right;\n        } else {\n          break;\n        }\n      }\n\n      quickSort(array, lo, left);\n      quickSort(array, left + 1, hi);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2684bcb2a921b6b5b76f64ba986564ab1ef0649d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a0af3a442be522899177e5e11384a45a6784a3f":["11ed8f980e6e2c95cbe9ce98790c259707ea5475"],"11ed8f980e6e2c95cbe9ce98790c259707ea5475":["2684bcb2a921b6b5b76f64ba986564ab1ef0649d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a0af3a442be522899177e5e11384a45a6784a3f"]},"commit2Childs":{"2684bcb2a921b6b5b76f64ba986564ab1ef0649d":["11ed8f980e6e2c95cbe9ce98790c259707ea5475"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2684bcb2a921b6b5b76f64ba986564ab1ef0649d"],"5a0af3a442be522899177e5e11384a45a6784a3f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11ed8f980e6e2c95cbe9ce98790c259707ea5475":["5a0af3a442be522899177e5e11384a45a6784a3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}