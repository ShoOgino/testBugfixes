{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","sourceNew":"  @Test\n  public void testSpanFirst() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanFirstQuery query = new SpanFirstQuery(term1, 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSpanFirst() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanFirstQuery query = new SpanFirstQuery(term1, 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","sourceNew":"  public void testSpanFirst() throws Exception {\n    SpanQuery query = spanFirstQuery(spanTermQuery(\"field\", \"five\"), 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSpanFirst() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanFirstQuery query = new SpanFirstQuery(term1, 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","sourceNew":"  public void testSpanFirst() throws Exception {\n    SpanQuery query = spanFirstQuery(spanTermQuery(\"field\", \"five\"), 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue().doubleValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue().doubleValue() > 0.0f);\n\n  }\n\n","sourceOld":"  public void testSpanFirst() throws Exception {\n    SpanQuery query = spanFirstQuery(spanTermQuery(\"field\", \"five\"), 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"]},"commit2Childs":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}