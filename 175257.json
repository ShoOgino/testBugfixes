{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer#check(String,String).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer#check(String,String).mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer#check(String,String).mjava","sourceNew":"  private void check(final String input, final String expected) throws IOException {\n    Analyzer analyzer = new BrazilianAnalyzer(); \n    TokenStream stream = analyzer.tokenStream(\"dummy\", new StringReader(input));\n    final Token reusableToken = new Token();\n    Token nextToken = stream.next(reusableToken);\n    if (nextToken == null)\n      fail();\n    assertEquals(expected, nextToken.term());\n    assertTrue(stream.next(nextToken) == null);\n    stream.close();\n  }\n\n","sourceOld":"  private void check(final String input, final String expected) throws IOException {\n    Analyzer analyzer = new BrazilianAnalyzer(); \n    TokenStream stream = analyzer.tokenStream(\"dummy\", new StringReader(input));\n    final Token reusableToken = new Token();\n    Token nextToken = stream.next(reusableToken);\n    if (nextToken == null)\n      fail();\n    assertEquals(expected, nextToken.term());\n    assertTrue(stream.next(nextToken) == null);\n    stream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer#check(String,String).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer#check(String,String).mjava","sourceNew":"  private void check(final String input, final String expected) throws IOException {\n    Analyzer analyzer = new BrazilianAnalyzer(); \n    TokenStream stream = analyzer.tokenStream(\"dummy\", new StringReader(input));\n    TermAttribute text = (TermAttribute) stream.getAttribute(TermAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, text.term());\n    assertFalse(stream.incrementToken());\n    stream.close();\n  }\n\n","sourceOld":"  private void check(final String input, final String expected) throws IOException {\n    Analyzer analyzer = new BrazilianAnalyzer(); \n    TokenStream stream = analyzer.tokenStream(\"dummy\", new StringReader(input));\n    final Token reusableToken = new Token();\n    Token nextToken = stream.next(reusableToken);\n    if (nextToken == null)\n      fail();\n    assertEquals(expected, nextToken.term());\n    assertTrue(stream.next(nextToken) == null);\n    stream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer#check(String,String).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer#check(String,String).mjava","sourceNew":"  private void check(final String input, final String expected) throws Exception {\n    checkOneTerm(new BrazilianAnalyzer(), input, expected);\n  }\n\n","sourceOld":"  private void check(final String input, final String expected) throws IOException {\n    Analyzer analyzer = new BrazilianAnalyzer(); \n    TokenStream stream = analyzer.tokenStream(\"dummy\", new StringReader(input));\n    TermAttribute text = (TermAttribute) stream.getAttribute(TermAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, text.term());\n    assertFalse(stream.incrementToken());\n    stream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer#check(String,String).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer#check(String,String).mjava","sourceNew":"  private void check(final String input, final String expected) throws Exception {\n    checkOneTerm(new BrazilianAnalyzer(Version.LUCENE_CURRENT), input, expected);\n  }\n\n","sourceOld":"  private void check(final String input, final String expected) throws Exception {\n    checkOneTerm(new BrazilianAnalyzer(), input, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer#check(String,String).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer#check(String,String).mjava","sourceNew":"  private void check(final String input, final String expected) throws Exception {\n    checkOneTerm(new BrazilianAnalyzer(TEST_VERSION_CURRENT), input, expected);\n  }\n\n","sourceOld":"  private void check(final String input, final String expected) throws Exception {\n    checkOneTerm(new BrazilianAnalyzer(Version.LUCENE_CURRENT), input, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer#check(String,String).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer#check(String,String).mjava","sourceNew":"  private void check(final String input, final String expected) throws Exception {\n    checkOneTerm(new BrazilianAnalyzer(TEST_VERSION_CURRENT), input, expected);\n  }\n\n","sourceOld":"  private void check(final String input, final String expected) throws Exception {\n    checkOneTerm(new BrazilianAnalyzer(TEST_VERSION_CURRENT), input, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["ba1116b3450a9c1642c89445d131b37344055245"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"ba1116b3450a9c1642c89445d131b37344055245":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}