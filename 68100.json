{"path":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#readLink(File).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#readLink(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the target of the given symlink. Returns the empty string if\n   * the given path does not refer to a symlink or there is an error\n   * accessing the symlink.\n   * @param f File representing the symbolic link.\n   * @return The target of the symbolic link, empty string on error or if not\n   *         a symlink.\n   */\n  public static String readLink(File f) {\n    /* NB: Use readSymbolicLink in java.nio.file.Path once available. Could\n     * use getCanonicalPath in File to get the target of the symlink but that\n     * does not indicate if the given path refers to a symlink.\n     */\n\n    if (f == null) {\n      LOG.warn(\"Can not read a null symLink\");\n      return \"\";\n    }\n\n    try {\n      return Shell.execCommand(\n          Shell.getReadlinkCommand(f.toString())).trim();\n    } catch (IOException x) {\n      return \"\";\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#readLink(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the target of the given symlink. Returns the empty string if\n   * the given path does not refer to a symlink or there is an error\n   * accessing the symlink.\n   * @param f File representing the symbolic link.\n   * @return The target of the symbolic link, empty string on error or if not\n   *         a symlink.\n   */\n  public static String readLink(File f) {\n    /* NB: Use readSymbolicLink in java.nio.file.Path once available. Could\n     * use getCanonicalPath in File to get the target of the symlink but that\n     * does not indicate if the given path refers to a symlink.\n     */\n\n    if (f == null) {\n      LOG.warn(\"Can not read a null symLink\");\n      return \"\";\n    }\n\n    try {\n      return Shell.execCommand(\n          Shell.getReadlinkCommand(f.toString())).trim();\n    } catch (IOException x) {\n      return \"\";\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}