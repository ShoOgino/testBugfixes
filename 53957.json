{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalRandom().mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testMakeBinaryIntervalRandom() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      BytesRef minTerm = TestUtil.randomBinaryTerm(random());\n      boolean minInclusive = random().nextBoolean();\n      BytesRef maxTerm = TestUtil.randomBinaryTerm(random());\n      boolean maxInclusive = random().nextBoolean();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" minTerm=\" + minTerm + \" minInclusive=\" + minInclusive + \" maxTerm=\" + maxTerm + \" maxInclusive=\" + maxInclusive);\n      }\n\n      Automaton a = Automata.makeBinaryInterval(minTerm, minInclusive, maxTerm, maxInclusive);\n\n      Automaton minA = MinimizationOperations.minimize(a, Integer.MAX_VALUE);\n      if (minA.getNumStates() != a.getNumStates()) {\n        assertTrue(minA.getNumStates() < a.getNumStates());\n        System.out.println(\"Original was not minimal:\");\n        System.out.println(\"Original:\\n\" + a.toDot());\n        System.out.println(\"Minimized:\\n\" + minA.toDot());\n        fail(\"auotmaton was not minimal\");\n      }\n\n      if (VERBOSE) {\n        System.out.println(a.toDot());\n      }\n\n      for(int iter2=0;iter2<500;iter2++) {\n        BytesRef term = TestUtil.randomBinaryTerm(random());\n        int minCmp = minTerm.compareTo(term);\n        int maxCmp = maxTerm.compareTo(term);\n\n        boolean expected;\n        if (minCmp > 0 || maxCmp < 0) {\n          expected = false;\n        } else if (minCmp == 0 && maxCmp == 0) {\n          expected = minInclusive && maxInclusive;\n        } else if (minCmp == 0) {\n          expected = minInclusive;\n        } else if (maxCmp == 0) {\n          expected = maxInclusive;\n        } else {\n          expected = true;\n        }\n\n        if (VERBOSE) {\n          System.out.println(\"  check term=\" + term + \" expected=\" + expected);\n        }\n        IntsRefBuilder intsBuilder = new IntsRefBuilder();\n        Util.toIntsRef(term, intsBuilder);\n        assertEquals(expected, Operations.run(a, intsBuilder.toIntsRef()));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testMakeBinaryIntervalRandom() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      BytesRef minTerm = TestUtil.randomBinaryTerm(random());\n      boolean minInclusive = random().nextBoolean();\n      BytesRef maxTerm = TestUtil.randomBinaryTerm(random());\n      boolean maxInclusive = random().nextBoolean();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" minTerm=\" + minTerm + \" minInclusive=\" + minInclusive + \" maxTerm=\" + maxTerm + \" maxInclusive=\" + maxInclusive);\n      }\n\n      Automaton a = Automata.makeBinaryInterval(minTerm, minInclusive, maxTerm, maxInclusive);\n\n      Automaton minA = MinimizationOperations.minimize(a, Integer.MAX_VALUE);\n      if (minA.getNumStates() != a.getNumStates()) {\n        assertTrue(minA.getNumStates() < a.getNumStates());\n        System.out.println(\"Original was not minimal:\");\n        System.out.println(\"Original:\\n\" + a.toDot());\n        System.out.println(\"Minimized:\\n\" + minA.toDot());\n        fail(\"auotmaton was not minimal\");\n      }\n\n      if (VERBOSE) {\n        System.out.println(a.toDot());\n      }\n\n      for(int iter2=0;iter2<500;iter2++) {\n        BytesRef term = TestUtil.randomBinaryTerm(random());\n        int minCmp = minTerm.compareTo(term);\n        int maxCmp = maxTerm.compareTo(term);\n\n        boolean expected;\n        if (minCmp > 0 || maxCmp < 0) {\n          expected = false;\n        } else if (minCmp == 0 && maxCmp == 0) {\n          expected = minInclusive && maxInclusive;\n        } else if (minCmp == 0) {\n          expected = minInclusive;\n        } else if (maxCmp == 0) {\n          expected = maxInclusive;\n        } else {\n          expected = true;\n        }\n\n        if (VERBOSE) {\n          System.out.println(\"  check term=\" + term + \" expected=\" + expected);\n        }\n        IntsRefBuilder intsBuilder = new IntsRefBuilder();\n        Util.toIntsRef(term, intsBuilder);\n        assertEquals(expected, Operations.run(a, intsBuilder.toIntsRef()));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b84dfbbd8247c0cc3aaaa5a56dbdf7ea3bfe2624","date":1428311015,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalRandom().mjava","sourceNew":"  public void testMakeBinaryIntervalRandom() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      BytesRef minTerm = TestUtil.randomBinaryTerm(random());\n      boolean minInclusive = random().nextBoolean();\n      BytesRef maxTerm = TestUtil.randomBinaryTerm(random());\n      boolean maxInclusive = random().nextBoolean();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" minTerm=\" + minTerm + \" minInclusive=\" + minInclusive + \" maxTerm=\" + maxTerm + \" maxInclusive=\" + maxInclusive);\n      }\n\n      Automaton a = Automata.makeBinaryInterval(minTerm, minInclusive, maxTerm, maxInclusive);\n\n      Automaton minA = MinimizationOperations.minimize(a, Integer.MAX_VALUE);\n      if (minA.getNumStates() != a.getNumStates()) {\n        assertTrue(minA.getNumStates() < a.getNumStates());\n        System.out.println(\"Original was not minimal:\");\n        System.out.println(\"Original:\\n\" + a.toDot());\n        System.out.println(\"Minimized:\\n\" + minA.toDot());\n        System.out.println(\"minTerm=\" + minTerm + \" minInclusive=\" + minInclusive);\n        System.out.println(\"maxTerm=\" + maxTerm + \" maxInclusive=\" + maxInclusive);\n        fail(\"auotmaton was not minimal\");\n      }\n\n      if (VERBOSE) {\n        System.out.println(a.toDot());\n      }\n\n      for(int iter2=0;iter2<500;iter2++) {\n        BytesRef term = TestUtil.randomBinaryTerm(random());\n        int minCmp = minTerm.compareTo(term);\n        int maxCmp = maxTerm.compareTo(term);\n\n        boolean expected;\n        if (minCmp > 0 || maxCmp < 0) {\n          expected = false;\n        } else if (minCmp == 0 && maxCmp == 0) {\n          expected = minInclusive && maxInclusive;\n        } else if (minCmp == 0) {\n          expected = minInclusive;\n        } else if (maxCmp == 0) {\n          expected = maxInclusive;\n        } else {\n          expected = true;\n        }\n\n        if (VERBOSE) {\n          System.out.println(\"  check term=\" + term + \" expected=\" + expected);\n        }\n        IntsRefBuilder intsBuilder = new IntsRefBuilder();\n        Util.toIntsRef(term, intsBuilder);\n        assertEquals(expected, Operations.run(a, intsBuilder.toIntsRef()));\n      }\n    }\n  }\n\n","sourceOld":"  public void testMakeBinaryIntervalRandom() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      BytesRef minTerm = TestUtil.randomBinaryTerm(random());\n      boolean minInclusive = random().nextBoolean();\n      BytesRef maxTerm = TestUtil.randomBinaryTerm(random());\n      boolean maxInclusive = random().nextBoolean();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" minTerm=\" + minTerm + \" minInclusive=\" + minInclusive + \" maxTerm=\" + maxTerm + \" maxInclusive=\" + maxInclusive);\n      }\n\n      Automaton a = Automata.makeBinaryInterval(minTerm, minInclusive, maxTerm, maxInclusive);\n\n      Automaton minA = MinimizationOperations.minimize(a, Integer.MAX_VALUE);\n      if (minA.getNumStates() != a.getNumStates()) {\n        assertTrue(minA.getNumStates() < a.getNumStates());\n        System.out.println(\"Original was not minimal:\");\n        System.out.println(\"Original:\\n\" + a.toDot());\n        System.out.println(\"Minimized:\\n\" + minA.toDot());\n        fail(\"auotmaton was not minimal\");\n      }\n\n      if (VERBOSE) {\n        System.out.println(a.toDot());\n      }\n\n      for(int iter2=0;iter2<500;iter2++) {\n        BytesRef term = TestUtil.randomBinaryTerm(random());\n        int minCmp = minTerm.compareTo(term);\n        int maxCmp = maxTerm.compareTo(term);\n\n        boolean expected;\n        if (minCmp > 0 || maxCmp < 0) {\n          expected = false;\n        } else if (minCmp == 0 && maxCmp == 0) {\n          expected = minInclusive && maxInclusive;\n        } else if (minCmp == 0) {\n          expected = minInclusive;\n        } else if (maxCmp == 0) {\n          expected = maxInclusive;\n        } else {\n          expected = true;\n        }\n\n        if (VERBOSE) {\n          System.out.println(\"  check term=\" + term + \" expected=\" + expected);\n        }\n        IntsRefBuilder intsBuilder = new IntsRefBuilder();\n        Util.toIntsRef(term, intsBuilder);\n        assertEquals(expected, Operations.run(a, intsBuilder.toIntsRef()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f29e599388a71a6e72ae2b7156b50e7570a9ac8a","date":1428569163,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalRandom().mjava","sourceNew":"  public void testMakeBinaryIntervalRandom() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      BytesRef minTerm = TestUtil.randomBinaryTerm(random());\n      boolean minInclusive = random().nextBoolean();\n      BytesRef maxTerm = TestUtil.randomBinaryTerm(random());\n      boolean maxInclusive = random().nextBoolean();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" minTerm=\" + minTerm + \" minInclusive=\" + minInclusive + \" maxTerm=\" + maxTerm + \" maxInclusive=\" + maxInclusive);\n      }\n\n      Automaton a = Automata.makeBinaryInterval(minTerm, minInclusive, maxTerm, maxInclusive);\n\n      Automaton minA = MinimizationOperations.minimize(a, Integer.MAX_VALUE);\n      if (minA.getNumStates() != a.getNumStates()) {\n        assertTrue(minA.getNumStates() < a.getNumStates());\n        System.out.println(\"Original was not minimal:\");\n        System.out.println(\"Original:\\n\" + a.toDot());\n        System.out.println(\"Minimized:\\n\" + minA.toDot());\n        System.out.println(\"minTerm=\" + minTerm + \" minInclusive=\" + minInclusive);\n        System.out.println(\"maxTerm=\" + maxTerm + \" maxInclusive=\" + maxInclusive);\n        fail(\"automaton was not minimal\");\n      }\n\n      if (VERBOSE) {\n        System.out.println(a.toDot());\n      }\n\n      for(int iter2=0;iter2<500;iter2++) {\n        BytesRef term = TestUtil.randomBinaryTerm(random());\n        int minCmp = minTerm.compareTo(term);\n        int maxCmp = maxTerm.compareTo(term);\n\n        boolean expected;\n        if (minCmp > 0 || maxCmp < 0) {\n          expected = false;\n        } else if (minCmp == 0 && maxCmp == 0) {\n          expected = minInclusive && maxInclusive;\n        } else if (minCmp == 0) {\n          expected = minInclusive;\n        } else if (maxCmp == 0) {\n          expected = maxInclusive;\n        } else {\n          expected = true;\n        }\n\n        if (VERBOSE) {\n          System.out.println(\"  check term=\" + term + \" expected=\" + expected);\n        }\n        IntsRefBuilder intsBuilder = new IntsRefBuilder();\n        Util.toIntsRef(term, intsBuilder);\n        assertEquals(expected, Operations.run(a, intsBuilder.toIntsRef()));\n      }\n    }\n  }\n\n","sourceOld":"  public void testMakeBinaryIntervalRandom() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      BytesRef minTerm = TestUtil.randomBinaryTerm(random());\n      boolean minInclusive = random().nextBoolean();\n      BytesRef maxTerm = TestUtil.randomBinaryTerm(random());\n      boolean maxInclusive = random().nextBoolean();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" minTerm=\" + minTerm + \" minInclusive=\" + minInclusive + \" maxTerm=\" + maxTerm + \" maxInclusive=\" + maxInclusive);\n      }\n\n      Automaton a = Automata.makeBinaryInterval(minTerm, minInclusive, maxTerm, maxInclusive);\n\n      Automaton minA = MinimizationOperations.minimize(a, Integer.MAX_VALUE);\n      if (minA.getNumStates() != a.getNumStates()) {\n        assertTrue(minA.getNumStates() < a.getNumStates());\n        System.out.println(\"Original was not minimal:\");\n        System.out.println(\"Original:\\n\" + a.toDot());\n        System.out.println(\"Minimized:\\n\" + minA.toDot());\n        System.out.println(\"minTerm=\" + minTerm + \" minInclusive=\" + minInclusive);\n        System.out.println(\"maxTerm=\" + maxTerm + \" maxInclusive=\" + maxInclusive);\n        fail(\"auotmaton was not minimal\");\n      }\n\n      if (VERBOSE) {\n        System.out.println(a.toDot());\n      }\n\n      for(int iter2=0;iter2<500;iter2++) {\n        BytesRef term = TestUtil.randomBinaryTerm(random());\n        int minCmp = minTerm.compareTo(term);\n        int maxCmp = maxTerm.compareTo(term);\n\n        boolean expected;\n        if (minCmp > 0 || maxCmp < 0) {\n          expected = false;\n        } else if (minCmp == 0 && maxCmp == 0) {\n          expected = minInclusive && maxInclusive;\n        } else if (minCmp == 0) {\n          expected = minInclusive;\n        } else if (maxCmp == 0) {\n          expected = maxInclusive;\n        } else {\n          expected = true;\n        }\n\n        if (VERBOSE) {\n          System.out.println(\"  check term=\" + term + \" expected=\" + expected);\n        }\n        IntsRefBuilder intsBuilder = new IntsRefBuilder();\n        Util.toIntsRef(term, intsBuilder);\n        assertEquals(expected, Operations.run(a, intsBuilder.toIntsRef()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652cc2bf75afdcb0c22e7b20d7708f365d20416","date":1428845341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testMakeBinaryIntervalRandom().mjava","sourceNew":"  public void testMakeBinaryIntervalRandom() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      BytesRef minTerm = TestUtil.randomBinaryTerm(random());\n      boolean minInclusive = random().nextBoolean();\n      BytesRef maxTerm = TestUtil.randomBinaryTerm(random());\n      boolean maxInclusive = random().nextBoolean();\n\n      Automaton a = makeBinaryInterval(minTerm, minInclusive, maxTerm, maxInclusive);\n\n      for(int iter2=0;iter2<500;iter2++) {\n        BytesRef term = TestUtil.randomBinaryTerm(random());\n        int minCmp = minTerm.compareTo(term);\n        int maxCmp = maxTerm.compareTo(term);\n\n        boolean expected;\n        if (minCmp > 0 || maxCmp < 0) {\n          expected = false;\n        } else if (minCmp == 0 && maxCmp == 0) {\n          expected = minInclusive && maxInclusive;\n        } else if (minCmp == 0) {\n          expected = minInclusive;\n        } else if (maxCmp == 0) {\n          expected = maxInclusive;\n        } else {\n          expected = true;\n        }\n\n        if (VERBOSE) {\n          System.out.println(\"  check term=\" + term + \" expected=\" + expected);\n        }\n        IntsRefBuilder intsBuilder = new IntsRefBuilder();\n        Util.toIntsRef(term, intsBuilder);\n        assertEquals(expected, Operations.run(a, intsBuilder.toIntsRef()));\n      }\n    }\n  }\n\n","sourceOld":"  public void testMakeBinaryIntervalRandom() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      BytesRef minTerm = TestUtil.randomBinaryTerm(random());\n      boolean minInclusive = random().nextBoolean();\n      BytesRef maxTerm = TestUtil.randomBinaryTerm(random());\n      boolean maxInclusive = random().nextBoolean();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" minTerm=\" + minTerm + \" minInclusive=\" + minInclusive + \" maxTerm=\" + maxTerm + \" maxInclusive=\" + maxInclusive);\n      }\n\n      Automaton a = Automata.makeBinaryInterval(minTerm, minInclusive, maxTerm, maxInclusive);\n\n      Automaton minA = MinimizationOperations.minimize(a, Integer.MAX_VALUE);\n      if (minA.getNumStates() != a.getNumStates()) {\n        assertTrue(minA.getNumStates() < a.getNumStates());\n        System.out.println(\"Original was not minimal:\");\n        System.out.println(\"Original:\\n\" + a.toDot());\n        System.out.println(\"Minimized:\\n\" + minA.toDot());\n        System.out.println(\"minTerm=\" + minTerm + \" minInclusive=\" + minInclusive);\n        System.out.println(\"maxTerm=\" + maxTerm + \" maxInclusive=\" + maxInclusive);\n        fail(\"automaton was not minimal\");\n      }\n\n      if (VERBOSE) {\n        System.out.println(a.toDot());\n      }\n\n      for(int iter2=0;iter2<500;iter2++) {\n        BytesRef term = TestUtil.randomBinaryTerm(random());\n        int minCmp = minTerm.compareTo(term);\n        int maxCmp = maxTerm.compareTo(term);\n\n        boolean expected;\n        if (minCmp > 0 || maxCmp < 0) {\n          expected = false;\n        } else if (minCmp == 0 && maxCmp == 0) {\n          expected = minInclusive && maxInclusive;\n        } else if (minCmp == 0) {\n          expected = minInclusive;\n        } else if (maxCmp == 0) {\n          expected = maxInclusive;\n        } else {\n          expected = true;\n        }\n\n        if (VERBOSE) {\n          System.out.println(\"  check term=\" + term + \" expected=\" + expected);\n        }\n        IntsRefBuilder intsBuilder = new IntsRefBuilder();\n        Util.toIntsRef(term, intsBuilder);\n        assertEquals(expected, Operations.run(a, intsBuilder.toIntsRef()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"6652cc2bf75afdcb0c22e7b20d7708f365d20416":["f29e599388a71a6e72ae2b7156b50e7570a9ac8a"],"f29e599388a71a6e72ae2b7156b50e7570a9ac8a":["b84dfbbd8247c0cc3aaaa5a56dbdf7ea3bfe2624"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6652cc2bf75afdcb0c22e7b20d7708f365d20416"],"b84dfbbd8247c0cc3aaaa5a56dbdf7ea3bfe2624":["3e8715d826e588419327562287d5d6a8040d63d6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"6652cc2bf75afdcb0c22e7b20d7708f365d20416":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f29e599388a71a6e72ae2b7156b50e7570a9ac8a":["6652cc2bf75afdcb0c22e7b20d7708f365d20416"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","b84dfbbd8247c0cc3aaaa5a56dbdf7ea3bfe2624"],"b84dfbbd8247c0cc3aaaa5a56dbdf7ea3bfe2624":["f29e599388a71a6e72ae2b7156b50e7570a9ac8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}