{"path":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","date":1383680488,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab8657e27d6bdd6107b9d64da71c635e1f47b59e","date":1390524786,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","date":1434467834,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87bed47fd547f864e7fe055b2a3df19fa4b151dc","date":1478615788,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"226b3bf77af5749a90c81edd3d4168fd6e276a24","date":1490013063,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7b5b9bd55a953275a0efc3c5272ed76129541fb","date":1546921668,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof SolrInputField) {\n      return writeKnownType(((SolrInputField) val).getValue());\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":["f47793eb80fc739be7036084303ca062ad7aa87d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f47793eb80fc739be7036084303ca062ad7aa87d","date":1550661558,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof SolrInputField) {\n      return writeKnownType(((SolrInputField) val).getRawValue());\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof SolrInputField) {\n      return writeKnownType(((SolrInputField) val).getValue());\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":["b7b5b9bd55a953275a0efc3c5272ed76129541fb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3665b66adafb1514bba04cd1d5c477fcaa93d592","date":1576153597,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof SolrInputField) {\n      return writeKnownType(((SolrInputField) val).getValue());\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof SolrInputField) {\n      return writeKnownType(((SolrInputField) val).getRawValue());\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof SolrInputField) {\n      return writeKnownType(((SolrInputField) val).getValue());\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof SolrInputField) {\n      return writeKnownType(((SolrInputField) val).getRawValue());\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof SolrInputField) {\n      return writeKnownType(((SolrInputField) val).getValue());\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof SolrInputField) {\n      return writeKnownType(((SolrInputField) val).getValue());\n    }\n    if (val instanceof IteratorWriter) {\n      writeIterator((IteratorWriter) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      writeSolrDocument((SolrDocument) val);\n      return true;\n    }\n    if (val instanceof SolrInputDocument) {\n      writeSolrInputDocument((SolrInputDocument)val);\n      return true;\n    }\n    if (val instanceof MapWriter) {\n      writeMap((MapWriter) val);\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Path) {\n      writeStr(((Path) val).toAbsolutePath().toString());\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    if (val instanceof EnumFieldValue) {\n      writeEnumFieldValue((EnumFieldValue) val);\n      return true;\n    }\n    if (val instanceof Map.Entry) {\n      writeMapEntry((Map.Entry)val);\n      return true;\n    }\n    if (val instanceof MapSerializable) {\n      //todo find a better way to reuse the map more efficiently\n      writeMap(((MapSerializable) val).toMap(new NamedList().asShallowMap()));\n      return true;\n    }\n    if (val instanceof AtomicInteger) {\n      writeInt(((AtomicInteger) val).get());\n      return true;\n    }\n    if (val instanceof AtomicLong) {\n      writeLong(((AtomicLong) val).get());\n      return true;\n    }\n    if (val instanceof AtomicBoolean) {\n      writeBoolean(((AtomicBoolean) val).get());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"df724d84dab24a0cc54bec95a8680867adc7f171":["f47793eb80fc739be7036084303ca062ad7aa87d","3665b66adafb1514bba04cd1d5c477fcaa93d592"],"226b3bf77af5749a90c81edd3d4168fd6e276a24":["87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"ab8657e27d6bdd6107b9d64da71c635e1f47b59e":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["87bed47fd547f864e7fe055b2a3df19fa4b151dc","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a626ec4d1c92e59fe390724d6220081047b03ce7","1f1f31880696765d6aec499d3b01fa501129af45"],"f47793eb80fc739be7036084303ca062ad7aa87d":["b7b5b9bd55a953275a0efc3c5272ed76129541fb"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e"],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["3665b66adafb1514bba04cd1d5c477fcaa93d592"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["bd0ef6574805f3cb9880e0983b7548a6aa933508","19275ba31e621f6da1b83bf13af75233876fd3d4"],"3665b66adafb1514bba04cd1d5c477fcaa93d592":["f47793eb80fc739be7036084303ca062ad7aa87d"],"1f1f31880696765d6aec499d3b01fa501129af45":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"87bed47fd547f864e7fe055b2a3df19fa4b151dc":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"28288370235ed02234a64753cdbf0c6ec096304a":["87bed47fd547f864e7fe055b2a3df19fa4b151dc","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a626ec4d1c92e59fe390724d6220081047b03ce7","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b7b5b9bd55a953275a0efc3c5272ed76129541fb":["28288370235ed02234a64753cdbf0c6ec096304a"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"226b3bf77af5749a90c81edd3d4168fd6e276a24":[],"a626ec4d1c92e59fe390724d6220081047b03ce7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","1f1f31880696765d6aec499d3b01fa501129af45","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ab8657e27d6bdd6107b9d64da71c635e1f47b59e":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["87bed47fd547f864e7fe055b2a3df19fa4b151dc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f47793eb80fc739be7036084303ca062ad7aa87d":["df724d84dab24a0cc54bec95a8680867adc7f171","3665b66adafb1514bba04cd1d5c477fcaa93d592"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"3665b66adafb1514bba04cd1d5c477fcaa93d592":["df724d84dab24a0cc54bec95a8680867adc7f171","8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"1f1f31880696765d6aec499d3b01fa501129af45":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"87bed47fd547f864e7fe055b2a3df19fa4b151dc":["199dfa410f1fdbfd3294106b04096cce5ed34b21","226b3bf77af5749a90c81edd3d4168fd6e276a24","74aea047dff7f7c38a2d766827bd20d356f98c6a","28288370235ed02234a64753cdbf0c6ec096304a","a513b6a92751e54c76fb5447948c9e7d437163a7"],"28288370235ed02234a64753cdbf0c6ec096304a":["b7b5b9bd55a953275a0efc3c5272ed76129541fb"],"b7b5b9bd55a953275a0efc3c5272ed76129541fb":["f47793eb80fc739be7036084303ca062ad7aa87d"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["19275ba31e621f6da1b83bf13af75233876fd3d4","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","df724d84dab24a0cc54bec95a8680867adc7f171","226b3bf77af5749a90c81edd3d4168fd6e276a24","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}