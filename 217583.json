{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/InjectionDefense#safeExpression().mjava","commits":[{"id":"a0370d6fb5289875090a50a9d0887ee584fed440","date":1552401990,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/InjectionDefense#safeExpression().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Provides an expression that is guaranteed to have the expected number of sub-expressions\n   *\n   * @return An expression object that should be safe from injection of additional expressions\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  public StreamExpression safeExpression() {\n    String exprStr = buildExpression();\n    System.out.println(exprStr);\n    StreamExpression parsed = StreamExpressionParser.parse(exprStr);\n    int actual = countExpressions(parsed);\n    if (actual != expressionCount) {\n      throw new InjectedExpressionException(\"Expected Expression count (\"+expressionCount+\") does not match actual final \" +\n          \"expression count (\"+actual+\")! (possible injection attack?)\");\n    } else {\n      return parsed;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f41653666ea4bdc7e2f3278b61437c6337c410f","date":1552421344,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/InjectionDefense#safeExpression().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/InjectionDefense#safeExpression().mjava","sourceNew":"  /**\n   * Provides an expression that is guaranteed to have the expected number of sub-expressions\n   *\n   * @return An expression object that should be safe from injection of additional expressions\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  public StreamExpression safeExpression() {\n    String exprStr = buildExpression();\n    StreamExpression parsed = StreamExpressionParser.parse(exprStr);\n    int actual = countExpressions(parsed);\n    if (actual != expressionCount) {\n      throw new InjectedExpressionException(\"Expected Expression count (\"+expressionCount+\") does not match actual final \" +\n          \"expression count (\"+actual+\")! (possible injection attack?)\");\n    } else {\n      return parsed;\n    }\n  }\n\n","sourceOld":"  /**\n   * Provides an expression that is guaranteed to have the expected number of sub-expressions\n   *\n   * @return An expression object that should be safe from injection of additional expressions\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  public StreamExpression safeExpression() {\n    String exprStr = buildExpression();\n    System.out.println(exprStr);\n    StreamExpression parsed = StreamExpressionParser.parse(exprStr);\n    int actual = countExpressions(parsed);\n    if (actual != expressionCount) {\n      throw new InjectedExpressionException(\"Expected Expression count (\"+expressionCount+\") does not match actual final \" +\n          \"expression count (\"+actual+\")! (possible injection attack?)\");\n    } else {\n      return parsed;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f41653666ea4bdc7e2f3278b61437c6337c410f":["a0370d6fb5289875090a50a9d0887ee584fed440"],"a0370d6fb5289875090a50a9d0887ee584fed440":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8f41653666ea4bdc7e2f3278b61437c6337c410f"]},"commit2Childs":{"8f41653666ea4bdc7e2f3278b61437c6337c410f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0370d6fb5289875090a50a9d0887ee584fed440":["8f41653666ea4bdc7e2f3278b61437c6337c410f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0370d6fb5289875090a50a9d0887ee584fed440"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}