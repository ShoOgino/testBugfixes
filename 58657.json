{"path":"solr/core/src/test/org/apache/solr/cloud/LegacyCloudClusterPropTest#createAndTest(String,boolean).mjava","commits":[{"id":"b775be0d772d22dbbfd73b9989b5f0b4e7ef5506","date":1509763417,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LegacyCloudClusterPropTest#createAndTest(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void createAndTest(final String coll, final boolean legacy) throws Exception {\n\n    // First, just insure that core.properties file gets created with coreNodeName and all other mandatory parameters.\n    final String legacyString = Boolean.toString(legacy);\n    final String legacyAnti = Boolean.toString(!legacy);\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, legacyString).process(cluster.getSolrClient());\n    ClusterProperties props = new ClusterProperties(zkClient());\n\n    assertEquals(\"Value of legacyCloud cluster prop unexpected\", legacyString,\n        props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, legacyAnti));\n\n    CollectionAdminRequest.createCollection(coll, \"conf\", 1, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    assertTrue(ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 120000));\n    \n    // Insure all mandatory properties are there.\n    checkMandatoryProps(coll);\n\n    checkCollectionActive(coll);\n    // The fixes for SOLR-11503 insure that creating a collection has coreNodeName whether legacyCloud is true or false,\n    // we still need to test repairing a properties file that does _not_ have coreNodeName set, the second part of\n    // the fix.\n\n    // First, remove the coreNodeName from cluster.properties and write it out it.\n    removePropertyFromAllReplicas(coll, \"coreNodeName\");\n\n    // Now restart Solr, this should repair the removal on core load no matter the value of legacyCloud\n    JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n    jetty.stop();\n    jetty.start();\n    checkMandatoryProps(coll);\n    checkCollectionActive(coll);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LegacyCloudClusterPropTest#createAndTest(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void createAndTest(final String coll, final boolean legacy) throws Exception {\n\n    // First, just insure that core.properties file gets created with coreNodeName and all other mandatory parameters.\n    final String legacyString = Boolean.toString(legacy);\n    final String legacyAnti = Boolean.toString(!legacy);\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, legacyString).process(cluster.getSolrClient());\n    ClusterProperties props = new ClusterProperties(zkClient());\n\n    assertEquals(\"Value of legacyCloud cluster prop unexpected\", legacyString,\n        props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, legacyAnti));\n\n    CollectionAdminRequest.createCollection(coll, \"conf\", 1, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    assertTrue(ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 120000));\n    \n    // Insure all mandatory properties are there.\n    checkMandatoryProps(coll);\n\n    checkCollectionActive(coll);\n    // The fixes for SOLR-11503 insure that creating a collection has coreNodeName whether legacyCloud is true or false,\n    // we still need to test repairing a properties file that does _not_ have coreNodeName set, the second part of\n    // the fix.\n\n    // First, remove the coreNodeName from cluster.properties and write it out it.\n    removePropertyFromAllReplicas(coll, \"coreNodeName\");\n\n    // Now restart Solr, this should repair the removal on core load no matter the value of legacyCloud\n    JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n    jetty.stop();\n    jetty.start();\n    checkMandatoryProps(coll);\n    checkCollectionActive(coll);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LegacyCloudClusterPropTest#createAndTest(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LegacyCloudClusterPropTest#createAndTest(String,boolean).mjava","sourceNew":"  private void createAndTest(final String coll, final boolean legacy) throws Exception {\n\n    // First, just insure that core.properties file gets created with coreNodeName and all other mandatory parameters.\n    final String legacyString = Boolean.toString(legacy);\n    final String legacyAnti = Boolean.toString(!legacy);\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, legacyString).process(cluster.getSolrClient());\n    ClusterProperties props = new ClusterProperties(zkClient());\n\n    assertEquals(\"Value of legacyCloud cluster prop unexpected\", legacyString,\n        props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, legacyAnti));\n\n    CollectionAdminRequest.createCollection(coll, \"conf\", 1, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(coll, 1, 1);\n    \n    assertTrue(ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 120000));\n    \n    // Insure all mandatory properties are there.\n    checkMandatoryProps(coll);\n\n    checkCollectionActive(coll);\n    // The fixes for SOLR-11503 insure that creating a collection has coreNodeName whether legacyCloud is true or false,\n    // we still need to test repairing a properties file that does _not_ have coreNodeName set, the second part of\n    // the fix.\n\n    // First, remove the coreNodeName from cluster.properties and write it out it.\n    removePropertyFromAllReplicas(coll, \"coreNodeName\");\n\n    // Now restart Solr, this should repair the removal on core load no matter the value of legacyCloud\n    JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n    jetty.stop();\n    \n    cluster.waitForJettyToStop(jetty);\n    \n    jetty.start();\n    \n    cluster.waitForAllNodes(30);\n    \n    checkMandatoryProps(coll);\n    checkCollectionActive(coll);\n  }\n\n","sourceOld":"  private void createAndTest(final String coll, final boolean legacy) throws Exception {\n\n    // First, just insure that core.properties file gets created with coreNodeName and all other mandatory parameters.\n    final String legacyString = Boolean.toString(legacy);\n    final String legacyAnti = Boolean.toString(!legacy);\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, legacyString).process(cluster.getSolrClient());\n    ClusterProperties props = new ClusterProperties(zkClient());\n\n    assertEquals(\"Value of legacyCloud cluster prop unexpected\", legacyString,\n        props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, legacyAnti));\n\n    CollectionAdminRequest.createCollection(coll, \"conf\", 1, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    assertTrue(ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 120000));\n    \n    // Insure all mandatory properties are there.\n    checkMandatoryProps(coll);\n\n    checkCollectionActive(coll);\n    // The fixes for SOLR-11503 insure that creating a collection has coreNodeName whether legacyCloud is true or false,\n    // we still need to test repairing a properties file that does _not_ have coreNodeName set, the second part of\n    // the fix.\n\n    // First, remove the coreNodeName from cluster.properties and write it out it.\n    removePropertyFromAllReplicas(coll, \"coreNodeName\");\n\n    // Now restart Solr, this should repair the removal on core load no matter the value of legacyCloud\n    JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n    jetty.stop();\n    jetty.start();\n    checkMandatoryProps(coll);\n    checkCollectionActive(coll);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":4,"author":"murblanc","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/LegacyCloudClusterPropTest#createAndTest(String,boolean).mjava","sourceNew":null,"sourceOld":"  private void createAndTest(final String coll, final boolean legacy) throws Exception {\n\n    // First, just insure that core.properties file gets created with coreNodeName and all other mandatory parameters.\n    final String legacyString = Boolean.toString(legacy);\n    final String legacyAnti = Boolean.toString(!legacy);\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, legacyString).process(cluster.getSolrClient());\n    ClusterProperties props = new ClusterProperties(zkClient());\n\n    assertEquals(\"Value of legacyCloud cluster prop unexpected\", legacyString,\n        props.getClusterProperty(ZkStateReader.LEGACY_CLOUD, legacyAnti));\n\n    CollectionAdminRequest.createCollection(coll, \"conf\", 1, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(coll, 1, 1);\n    \n    assertTrue(ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 120000));\n    \n    // Insure all mandatory properties are there.\n    checkMandatoryProps(coll);\n\n    checkCollectionActive(coll);\n    // The fixes for SOLR-11503 insure that creating a collection has coreNodeName whether legacyCloud is true or false,\n    // we still need to test repairing a properties file that does _not_ have coreNodeName set, the second part of\n    // the fix.\n\n    // First, remove the coreNodeName from cluster.properties and write it out it.\n    removePropertyFromAllReplicas(coll, \"coreNodeName\");\n\n    // Now restart Solr, this should repair the removal on core load no matter the value of legacyCloud\n    JettySolrRunner jetty = cluster.getJettySolrRunner(0);\n    jetty.stop();\n    \n    cluster.waitForJettyToStop(jetty);\n    \n    jetty.start();\n    \n    cluster.waitForAllNodes(30);\n    \n    checkMandatoryProps(coll);\n    checkCollectionActive(coll);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b775be0d772d22dbbfd73b9989b5f0b4e7ef5506"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b775be0d772d22dbbfd73b9989b5f0b4e7ef5506":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","b775be0d772d22dbbfd73b9989b5f0b4e7ef5506"],"b775be0d772d22dbbfd73b9989b5f0b4e7ef5506":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}