{"path":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#docSpansOrdered(Spans,Spans).mjava","commits":[{"id":"77301f098b899884dd472e6b27fb5f8136189fe3","date":1415988476,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#docSpansOrdered(Spans,Spans).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#docSpansOrdered(Spans,Spans).mjava","sourceNew":"  /** Check whether two Spans in the same document are ordered with possible overlap.\n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean docSpansOrdered(Spans spans1, Spans spans2) {\n    assert spans1.doc() == spans2.doc() : \"doc1 \" + spans1.doc() + \" != doc2 \" + spans2.doc();\n    int start1 = spans1.start();\n    int start2 = spans2.start();\n    return (start1 == start2) ? (spans1.end() < spans2.end()) : (start1 < start2);\n  }\n\n","sourceOld":"  /** Check whether two Spans in the same document are ordered.\n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean docSpansOrdered(Spans spans1, Spans spans2) {\n    assert spans1.doc() == spans2.doc() : \"doc1 \" + spans1.doc() + \" != doc2 \" + spans2.doc();\n    int start1 = spans1.start();\n    int start2 = spans2.start();\n    /* Do not call docSpansOrdered(int,int,int,int) to avoid invoking .end() : */\n    return (start1 == start2) ? (spans1.end() < spans2.end()) : (start1 < start2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#positionsOrdered(Spans,Spans).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#docSpansOrdered(Spans,Spans).mjava","sourceNew":"  /** Check whether two Spans in the same document are ordered with possible overlap.\n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean positionsOrdered(Spans spans1, Spans spans2) {\n    assert spans1.docID() == spans2.docID() : \"doc1 \" + spans1.docID() + \" != doc2 \" + spans2.docID();\n    int start1 = spans1.startPosition();\n    int start2 = spans2.startPosition();\n    return (start1 == start2) ? (spans1.endPosition() < spans2.endPosition()) : (start1 < start2);\n  }\n\n","sourceOld":"  /** Check whether two Spans in the same document are ordered with possible overlap.\n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean docSpansOrdered(Spans spans1, Spans spans2) {\n    assert spans1.doc() == spans2.doc() : \"doc1 \" + spans1.doc() + \" != doc2 \" + spans2.doc();\n    int start1 = spans1.start();\n    int start2 = spans2.start();\n    return (start1 == start2) ? (spans1.end() < spans2.end()) : (start1 < start2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#positionsOrdered(Spans,Spans).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#docSpansOrdered(Spans,Spans).mjava","sourceNew":"  /** Check whether two Spans in the same document are ordered with possible overlap.\n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean positionsOrdered(Spans spans1, Spans spans2) {\n    assert spans1.docID() == spans2.docID() : \"doc1 \" + spans1.docID() + \" != doc2 \" + spans2.docID();\n    int start1 = spans1.startPosition();\n    int start2 = spans2.startPosition();\n    return (start1 == start2) ? (spans1.endPosition() < spans2.endPosition()) : (start1 < start2);\n  }\n\n","sourceOld":"  /** Check whether two Spans in the same document are ordered with possible overlap.\n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean docSpansOrdered(Spans spans1, Spans spans2) {\n    assert spans1.doc() == spans2.doc() : \"doc1 \" + spans1.doc() + \" != doc2 \" + spans2.doc();\n    int start1 = spans1.start();\n    int start2 = spans2.start();\n    return (start1 == start2) ? (spans1.end() < spans2.end()) : (start1 < start2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"77301f098b899884dd472e6b27fb5f8136189fe3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["77301f098b899884dd472e6b27fb5f8136189fe3"],"fab172655716b96f7e42376116235017a922de3a":["77301f098b899884dd472e6b27fb5f8136189fe3","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"]},"commit2Childs":{"77301f098b899884dd472e6b27fb5f8136189fe3":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77301f098b899884dd472e6b27fb5f8136189fe3"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}