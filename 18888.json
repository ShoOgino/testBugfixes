{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","commits":[{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","sourceNew":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage boundaries.\n   * @param scorer used for ranking passages.\n   * @param formatter used for formatting passages into highlighted snippets.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    if (breakIterator == null || scorer == null || formatter == null) {\n      throw new NullPointerException();\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n  }\n\n","sourceOld":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage boundaries.\n   * @param scorer used for ranking passages.\n   * @param formatter used for formatting passages into highlighted snippets.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    if (breakIterator == null || scorer == null || formatter == null) {\n      throw new NullPointerException();\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage boundaries.\n   * @param scorer used for ranking passages.\n   * @param formatter used for formatting passages into highlighted snippets.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    if (breakIterator == null || scorer == null || formatter == null) {\n      throw new NullPointerException();\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"972114e06584faaa995de366083936dc77203773","date":1363205254,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","sourceNew":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage\n   *        boundaries; pass null to highlight the entire\n   *        content as a single Passage.\n   * @param scorer used for ranking passages.\n   * @param formatter used for formatting passages into highlighted snippets.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    if (breakIterator == null) {\n      breakIterator = new WholeBreakIterator();\n    }\n    if (scorer == null || formatter == null) {\n      throw new NullPointerException();\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n  }\n\n","sourceOld":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage boundaries.\n   * @param scorer used for ranking passages.\n   * @param formatter used for formatting passages into highlighted snippets.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    if (breakIterator == null || scorer == null || formatter == null) {\n      throw new NullPointerException();\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n  }\n\n","bugFix":["8bb94551de83b33535d086e8d4222fa6d0c4cfc0","2b4e7fee75084ba5e75244a313c9fe12bd23fdc9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4831dd345148fcd7c33877b449ade21fc45459d8","date":1363963811,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","sourceNew":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage\n   *        boundaries; pass null to highlight the entire\n   *        content as a single Passage.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    if (breakIterator == null) {\n      breakIterator = new WholeBreakIterator();\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n  }\n\n","sourceOld":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage\n   *        boundaries; pass null to highlight the entire\n   *        content as a single Passage.\n   * @param scorer used for ranking passages.\n   * @param formatter used for formatting passages into highlighted snippets.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    if (breakIterator == null) {\n      breakIterator = new WholeBreakIterator();\n    }\n    if (scorer == null || formatter == null) {\n      throw new NullPointerException();\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"972114e06584faaa995de366083936dc77203773":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"4831dd345148fcd7c33877b449ade21fc45459d8":["972114e06584faaa995de366083936dc77203773"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4831dd345148fcd7c33877b449ade21fc45459d8"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","972114e06584faaa995de366083936dc77203773"],"972114e06584faaa995de366083936dc77203773":["4831dd345148fcd7c33877b449ade21fc45459d8"],"4831dd345148fcd7c33877b449ade21fc45459d8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}