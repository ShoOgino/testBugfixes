{"path":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testRead2waySynonymRules().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testRead2waySynonymRules().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testRead2waySynonymRules().mjava","sourceNew":"  public void testRead2waySynonymRules() throws Exception {\n    SynonymMap synMap;\n\n    // (a)->[a][b]\n    // (b)->[a][b]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"a,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n\n    // (a)->[a][b][c]\n    // (b)->[a][b][c]\n    // (c)->[a][b][c]\n    rules.clear();\n    rules.add( \"a,b,c\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 3, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"a\", \"c\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"c\" );\n    assertTokIncludes( synMap, \"c\", \"a\" );\n    assertTokIncludes( synMap, \"c\", \"b\" );\n    assertTokIncludes( synMap, \"c\", \"c\" );\n\n    // (a)->[a]\n    //      [b1][b2]\n    // (b1)->(b2)->[a]\n    //             [b1][b2]\n    rules.clear();\n    rules.add( \"a,b1 b2\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b1\" );\n    assertTokIncludes( synMap, \"a\", \"b2\" );\n    assertEquals( 1, getSubSynonymMap( synMap, \"b1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"a\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b2\" );\n\n    // (a1)->(a2)->[a1][a2]\n    //             [b]\n    // (b)->[a1][a2]\n    //      [b]\n    rules.clear();\n    rules.add( \"a1 a2,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"a1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a2\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a1\" );\n    assertTokIncludes( synMap, \"b\", \"a2\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":"  public void testRead2waySynonymRules() throws Exception {\n    SynonymMap synMap;\n\n    // (a)->[a][b]\n    // (b)->[a][b]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"a,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n\n    // (a)->[a][b][c]\n    // (b)->[a][b][c]\n    // (c)->[a][b][c]\n    rules.clear();\n    rules.add( \"a,b,c\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 3, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"a\", \"c\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"c\" );\n    assertTokIncludes( synMap, \"c\", \"a\" );\n    assertTokIncludes( synMap, \"c\", \"b\" );\n    assertTokIncludes( synMap, \"c\", \"c\" );\n\n    // (a)->[a]\n    //      [b1][b2]\n    // (b1)->(b2)->[a]\n    //             [b1][b2]\n    rules.clear();\n    rules.add( \"a,b1 b2\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b1\" );\n    assertTokIncludes( synMap, \"a\", \"b2\" );\n    assertEquals( 1, getSubSynonymMap( synMap, \"b1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"a\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b2\" );\n\n    // (a1)->(a2)->[a1][a2]\n    //             [b]\n    // (b)->[a1][a2]\n    //      [b]\n    rules.clear();\n    rules.add( \"a1 a2,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"a1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a2\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a1\" );\n    assertTokIncludes( synMap, \"b\", \"a2\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testRead2waySynonymRules().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testRead2waySynonymRules().mjava","sourceNew":"  public void testRead2waySynonymRules() throws Exception {\n    SynonymMap synMap;\n\n    // (a)->[a][b]\n    // (b)->[a][b]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"a,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n\n    // (a)->[a][b][c]\n    // (b)->[a][b][c]\n    // (c)->[a][b][c]\n    rules.clear();\n    rules.add( \"a,b,c\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 3, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"a\", \"c\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"c\" );\n    assertTokIncludes( synMap, \"c\", \"a\" );\n    assertTokIncludes( synMap, \"c\", \"b\" );\n    assertTokIncludes( synMap, \"c\", \"c\" );\n\n    // (a)->[a]\n    //      [b1][b2]\n    // (b1)->(b2)->[a]\n    //             [b1][b2]\n    rules.clear();\n    rules.add( \"a,b1 b2\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b1\" );\n    assertTokIncludes( synMap, \"a\", \"b2\" );\n    assertEquals( 1, getSubSynonymMap( synMap, \"b1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"a\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b2\" );\n\n    // (a1)->(a2)->[a1][a2]\n    //             [b]\n    // (b)->[a1][a2]\n    //      [b]\n    rules.clear();\n    rules.add( \"a1 a2,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"a1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a2\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a1\" );\n    assertTokIncludes( synMap, \"b\", \"a2\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":"  public void testRead2waySynonymRules() throws Exception {\n    SynonymMap synMap;\n\n    // (a)->[a][b]\n    // (b)->[a][b]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"a,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n\n    // (a)->[a][b][c]\n    // (b)->[a][b][c]\n    // (c)->[a][b][c]\n    rules.clear();\n    rules.add( \"a,b,c\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 3, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"a\", \"c\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"c\" );\n    assertTokIncludes( synMap, \"c\", \"a\" );\n    assertTokIncludes( synMap, \"c\", \"b\" );\n    assertTokIncludes( synMap, \"c\", \"c\" );\n\n    // (a)->[a]\n    //      [b1][b2]\n    // (b1)->(b2)->[a]\n    //             [b1][b2]\n    rules.clear();\n    rules.add( \"a,b1 b2\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b1\" );\n    assertTokIncludes( synMap, \"a\", \"b2\" );\n    assertEquals( 1, getSubSynonymMap( synMap, \"b1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"a\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b2\" );\n\n    // (a1)->(a2)->[a1][a2]\n    //             [b]\n    // (b)->[a1][a2]\n    //      [b]\n    rules.clear();\n    rules.add( \"a1 a2,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"a1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a2\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a1\" );\n    assertTokIncludes( synMap, \"b\", \"a2\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testRead2waySynonymRules().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testRead2waySynonymRules().mjava","sourceNew":"  public void testRead2waySynonymRules() throws Exception {\n    SynonymMap synMap;\n\n    // (a)->[a][b]\n    // (b)->[a][b]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"a,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n\n    // (a)->[a][b][c]\n    // (b)->[a][b][c]\n    // (c)->[a][b][c]\n    rules.clear();\n    rules.add( \"a,b,c\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 3, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"a\", \"c\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"c\" );\n    assertTokIncludes( synMap, \"c\", \"a\" );\n    assertTokIncludes( synMap, \"c\", \"b\" );\n    assertTokIncludes( synMap, \"c\", \"c\" );\n\n    // (a)->[a]\n    //      [b1][b2]\n    // (b1)->(b2)->[a]\n    //             [b1][b2]\n    rules.clear();\n    rules.add( \"a,b1 b2\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b1\" );\n    assertTokIncludes( synMap, \"a\", \"b2\" );\n    assertEquals( 1, getSubSynonymMap( synMap, \"b1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"a\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b2\" );\n\n    // (a1)->(a2)->[a1][a2]\n    //             [b]\n    // (b)->[a1][a2]\n    //      [b]\n    rules.clear();\n    rules.add( \"a1 a2,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"a1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a2\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a1\" );\n    assertTokIncludes( synMap, \"b\", \"a2\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":"  public void testRead2waySynonymRules() throws Exception {\n    SynonymMap synMap;\n\n    // (a)->[a][b]\n    // (b)->[a][b]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"a,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n\n    // (a)->[a][b][c]\n    // (b)->[a][b][c]\n    // (c)->[a][b][c]\n    rules.clear();\n    rules.add( \"a,b,c\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 3, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"a\", \"c\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"c\" );\n    assertTokIncludes( synMap, \"c\", \"a\" );\n    assertTokIncludes( synMap, \"c\", \"b\" );\n    assertTokIncludes( synMap, \"c\", \"c\" );\n\n    // (a)->[a]\n    //      [b1][b2]\n    // (b1)->(b2)->[a]\n    //             [b1][b2]\n    rules.clear();\n    rules.add( \"a,b1 b2\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b1\" );\n    assertTokIncludes( synMap, \"a\", \"b2\" );\n    assertEquals( 1, getSubSynonymMap( synMap, \"b1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"a\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b2\" );\n\n    // (a1)->(a2)->[a1][a2]\n    //             [b]\n    // (b)->[a1][a2]\n    //      [b]\n    rules.clear();\n    rules.add( \"a1 a2,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"a1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a2\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a1\" );\n    assertTokIncludes( synMap, \"b\", \"a2\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testRead2waySynonymRules().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testRead2waySynonymRules().mjava","sourceNew":"  public void testRead2waySynonymRules() throws Exception {\n    SlowSynonymMap synMap;\n\n    // (a)->[a][b]\n    // (b)->[a][b]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"a,b\" );\n    synMap = new SlowSynonymMap( true );\n    SlowSynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n\n    // (a)->[a][b][c]\n    // (b)->[a][b][c]\n    // (c)->[a][b][c]\n    rules.clear();\n    rules.add( \"a,b,c\" );\n    synMap = new SlowSynonymMap( true );\n    SlowSynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 3, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"a\", \"c\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"c\" );\n    assertTokIncludes( synMap, \"c\", \"a\" );\n    assertTokIncludes( synMap, \"c\", \"b\" );\n    assertTokIncludes( synMap, \"c\", \"c\" );\n\n    // (a)->[a]\n    //      [b1][b2]\n    // (b1)->(b2)->[a]\n    //             [b1][b2]\n    rules.clear();\n    rules.add( \"a,b1 b2\" );\n    synMap = new SlowSynonymMap( true );\n    SlowSynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b1\" );\n    assertTokIncludes( synMap, \"a\", \"b2\" );\n    assertEquals( 1, getSubSynonymMap( synMap, \"b1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"a\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b2\" );\n\n    // (a1)->(a2)->[a1][a2]\n    //             [b]\n    // (b)->[a1][a2]\n    //      [b]\n    rules.clear();\n    rules.add( \"a1 a2,b\" );\n    synMap = new SlowSynonymMap( true );\n    SlowSynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"a1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a2\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a1\" );\n    assertTokIncludes( synMap, \"b\", \"a2\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":"  public void testRead2waySynonymRules() throws Exception {\n    SynonymMap synMap;\n\n    // (a)->[a][b]\n    // (b)->[a][b]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"a,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n\n    // (a)->[a][b][c]\n    // (b)->[a][b][c]\n    // (c)->[a][b][c]\n    rules.clear();\n    rules.add( \"a,b,c\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 3, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"a\", \"c\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"c\" );\n    assertTokIncludes( synMap, \"c\", \"a\" );\n    assertTokIncludes( synMap, \"c\", \"b\" );\n    assertTokIncludes( synMap, \"c\", \"c\" );\n\n    // (a)->[a]\n    //      [b1][b2]\n    // (b1)->(b2)->[a]\n    //             [b1][b2]\n    rules.clear();\n    rules.add( \"a,b1 b2\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b1\" );\n    assertTokIncludes( synMap, \"a\", \"b2\" );\n    assertEquals( 1, getSubSynonymMap( synMap, \"b1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"a\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b2\" );\n\n    // (a1)->(a2)->[a1][a2]\n    //             [b]\n    // (b)->[a1][a2]\n    //      [b]\n    rules.clear();\n    rules.add( \"a1 a2,b\" );\n    synMap = new SynonymMap( true );\n    SynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"a1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a2\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a1\" );\n    assertTokIncludes( synMap, \"b\", \"a2\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testRead2waySynonymRules().mjava","sourceNew":null,"sourceOld":"  public void testRead2waySynonymRules() throws Exception {\n    SlowSynonymMap synMap;\n\n    // (a)->[a][b]\n    // (b)->[a][b]\n    List<String> rules = new ArrayList<String>();\n    rules.add( \"a,b\" );\n    synMap = new SlowSynonymMap( true );\n    SlowSynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n\n    // (a)->[a][b][c]\n    // (b)->[a][b][c]\n    // (c)->[a][b][c]\n    rules.clear();\n    rules.add( \"a,b,c\" );\n    synMap = new SlowSynonymMap( true );\n    SlowSynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 3, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"a\", \"c\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"c\" );\n    assertTokIncludes( synMap, \"c\", \"a\" );\n    assertTokIncludes( synMap, \"c\", \"b\" );\n    assertTokIncludes( synMap, \"c\", \"c\" );\n\n    // (a)->[a]\n    //      [b1][b2]\n    // (b1)->(b2)->[a]\n    //             [b1][b2]\n    rules.clear();\n    rules.add( \"a,b1 b2\" );\n    synMap = new SlowSynonymMap( true );\n    SlowSynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b1\" );\n    assertTokIncludes( synMap, \"a\", \"b2\" );\n    assertEquals( 1, getSubSynonymMap( synMap, \"b1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"a\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"b1\" ), \"b2\", \"b2\" );\n\n    // (a1)->(a2)->[a1][a2]\n    //             [b]\n    // (b)->[a1][a2]\n    //      [b]\n    rules.clear();\n    rules.add( \"a1 a2,b\" );\n    synMap = new SlowSynonymMap( true );\n    SlowSynonymFilterFactory.parseRules( rules, synMap, \"=>\", \",\", true, null);\n    assertEquals( 2, synMap.submap.size() );\n    assertEquals( 1, getSubSynonymMap( synMap, \"a1\" ).submap.size() );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a1\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"a2\" );\n    assertTokIncludes( getSubSynonymMap( synMap, \"a1\" ), \"a2\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a1\" );\n    assertTokIncludes( synMap, \"b\", \"a2\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}