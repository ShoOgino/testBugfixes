{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","commits":[{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n      TermsEnum termsEnum = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        assert terms != null;\n\n        termsEnum = terms.iterator(termsEnum);\n        BytesRef lastTerm = null;\n        DocsEnum docsEnum = null;\n        DocsAndPositionsEnum posEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = BytesRef.deepCopyOf(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          if (hasPositions == false) {\n            int flags = 0;\n            if (hasFreqs) {\n              flags = flags | DocsEnum.FLAG_FREQS;\n            }\n            docsEnum = termsEnum.docs(null, docsEnum, flags);\n          } else {\n            int flags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n            if (hasOffsets) {\n              flags = flags | DocsAndPositionsEnum.FLAG_OFFSETS;\n            }\n            posEnum = termsEnum.docsAndPositions(null, posEnum, flags);\n            docsEnum = posEnum;\n          }\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = docsEnum.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = docsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = posEnum.nextPosition();\n                  assert pos > lastPos;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = posEnum.startOffset();\n                    int endOffset = posEnum.endOffset();\n                    assert endOffset > startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n      TermsEnum termsEnum = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        termsEnum = terms.iterator(termsEnum);\n        BytesRef lastTerm = null;\n        DocsEnum docsEnum = null;\n        DocsAndPositionsEnum posEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = BytesRef.deepCopyOf(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | DocsEnum.FLAG_FREQS;\n            }\n            docsEnum = termsEnum.docs(null, docsEnum, flags);\n          } else {\n            if (hasPayloads) {\n              flags |= DocsAndPositionsEnum.FLAG_PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | DocsAndPositionsEnum.FLAG_OFFSETS;\n            }\n            posEnum = termsEnum.docsAndPositions(null, posEnum, flags);\n            docsEnum = posEnum;\n          }\n\n          assert docsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = docsEnum.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = docsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = posEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = posEnum.startOffset();\n                    int endOffset = posEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n      TermsEnum termsEnum = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        assert terms != null;\n\n        termsEnum = terms.iterator(termsEnum);\n        BytesRef lastTerm = null;\n        DocsEnum docsEnum = null;\n        DocsAndPositionsEnum posEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = BytesRef.deepCopyOf(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          if (hasPositions == false) {\n            int flags = 0;\n            if (hasFreqs) {\n              flags = flags | DocsEnum.FLAG_FREQS;\n            }\n            docsEnum = termsEnum.docs(null, docsEnum, flags);\n          } else {\n            int flags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n            if (hasOffsets) {\n              flags = flags | DocsAndPositionsEnum.FLAG_OFFSETS;\n            }\n            posEnum = termsEnum.docsAndPositions(null, posEnum, flags);\n            docsEnum = posEnum;\n          }\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = docsEnum.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = docsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = posEnum.nextPosition();\n                  assert pos > lastPos;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = posEnum.startOffset();\n                    int endOffset = posEnum.endOffset();\n                    assert endOffset > startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n      TermsEnum termsEnum = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        termsEnum = terms.iterator(termsEnum);\n        BytesRefBuilder lastTerm = null;\n        DocsEnum docsEnum = null;\n        DocsAndPositionsEnum posEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | DocsEnum.FLAG_FREQS;\n            }\n            docsEnum = termsEnum.docs(null, docsEnum, flags);\n          } else {\n            if (hasPayloads) {\n              flags |= DocsAndPositionsEnum.FLAG_PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | DocsAndPositionsEnum.FLAG_OFFSETS;\n            }\n            posEnum = termsEnum.docsAndPositions(null, posEnum, flags);\n            docsEnum = posEnum;\n          }\n\n          assert docsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = docsEnum.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = docsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = posEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = posEnum.startOffset();\n                    int endOffset = posEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n      TermsEnum termsEnum = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        termsEnum = terms.iterator(termsEnum);\n        BytesRef lastTerm = null;\n        DocsEnum docsEnum = null;\n        DocsAndPositionsEnum posEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = BytesRef.deepCopyOf(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | DocsEnum.FLAG_FREQS;\n            }\n            docsEnum = termsEnum.docs(null, docsEnum, flags);\n          } else {\n            if (hasPayloads) {\n              flags |= DocsAndPositionsEnum.FLAG_PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | DocsAndPositionsEnum.FLAG_OFFSETS;\n            }\n            posEnum = termsEnum.docsAndPositions(null, posEnum, flags);\n            docsEnum = posEnum;\n          }\n\n          assert docsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = docsEnum.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = docsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = posEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = posEnum.startOffset();\n                    int endOffset = posEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n      TermsEnum termsEnum = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        termsEnum = terms.iterator(termsEnum);\n        BytesRefBuilder lastTerm = null;\n        DocsEnum docsEnum = null;\n        DocsAndPositionsEnum posEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | DocsEnum.FLAG_FREQS;\n            }\n            docsEnum = termsEnum.docs(null, docsEnum, flags);\n          } else {\n            if (hasPayloads) {\n              flags |= DocsAndPositionsEnum.FLAG_PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | DocsAndPositionsEnum.FLAG_OFFSETS;\n            }\n            posEnum = termsEnum.docsAndPositions(null, posEnum, flags);\n            docsEnum = posEnum;\n          }\n\n          assert docsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = docsEnum.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = docsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = posEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = posEnum.startOffset();\n                    int endOffset = posEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n      TermsEnum termsEnum = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        termsEnum = terms.iterator(termsEnum);\n        BytesRefBuilder lastTerm = null;\n        DocsEnum docsEnum = null;\n        DocsAndPositionsEnum posEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | DocsEnum.FLAG_FREQS;\n            }\n            docsEnum = termsEnum.docs(null, docsEnum, flags);\n          } else {\n            if (hasPayloads) {\n              flags |= DocsAndPositionsEnum.FLAG_PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | DocsAndPositionsEnum.FLAG_OFFSETS;\n            }\n            posEnum = termsEnum.docsAndPositions(null, posEnum, flags);\n            docsEnum = posEnum;\n          }\n\n          assert docsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = docsEnum.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = docsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = posEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = posEnum.startOffset();\n                    int endOffset = posEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n      TermsEnum termsEnum = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        termsEnum = terms.iterator(termsEnum);\n        BytesRefBuilder lastTerm = null;\n        PostingsEnum postingsEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | PostingsEnum.FLAG_FREQS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          } else {\n            flags = PostingsEnum.FLAG_POSITIONS;\n            if (hasPayloads) {\n              flags |= PostingsEnum.FLAG_PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | PostingsEnum.FLAG_OFFSETS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          }\n\n          assert postingsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = postingsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = postingsEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = postingsEnum.startOffset();\n                    int endOffset = postingsEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n      TermsEnum termsEnum = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        termsEnum = terms.iterator(termsEnum);\n        BytesRefBuilder lastTerm = null;\n        DocsEnum docsEnum = null;\n        DocsAndPositionsEnum posEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | DocsEnum.FLAG_FREQS;\n            }\n            docsEnum = termsEnum.docs(null, docsEnum, flags);\n          } else {\n            if (hasPayloads) {\n              flags |= DocsAndPositionsEnum.FLAG_PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | DocsAndPositionsEnum.FLAG_OFFSETS;\n            }\n            posEnum = termsEnum.docsAndPositions(null, posEnum, flags);\n            docsEnum = posEnum;\n          }\n\n          assert docsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = docsEnum.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = docsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = posEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = posEnum.startOffset();\n                    int endOffset = posEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n      TermsEnum termsEnum = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        termsEnum = terms.iterator(termsEnum);\n        BytesRefBuilder lastTerm = null;\n        PostingsEnum postingsEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | PostingsEnum.FREQS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          } else {\n            flags = PostingsEnum.POSITIONS;\n            if (hasPayloads) {\n              flags |= PostingsEnum.PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | PostingsEnum.OFFSETS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          }\n\n          assert postingsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = postingsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = postingsEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = postingsEnum.startOffset();\n                    int endOffset = postingsEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n      TermsEnum termsEnum = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        termsEnum = terms.iterator(termsEnum);\n        BytesRefBuilder lastTerm = null;\n        PostingsEnum postingsEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | PostingsEnum.FLAG_FREQS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          } else {\n            flags = PostingsEnum.FLAG_POSITIONS;\n            if (hasPayloads) {\n              flags |= PostingsEnum.FLAG_PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | PostingsEnum.FLAG_OFFSETS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          }\n\n          assert postingsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = postingsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = postingsEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = postingsEnum.startOffset();\n                    int endOffset = postingsEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        TermsEnum termsEnum = terms.iterator();\n        BytesRefBuilder lastTerm = null;\n        PostingsEnum postingsEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | PostingsEnum.FREQS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          } else {\n            flags = PostingsEnum.POSITIONS;\n            if (hasPayloads) {\n              flags |= PostingsEnum.PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | PostingsEnum.OFFSETS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          }\n\n          assert postingsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = postingsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = postingsEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = postingsEnum.startOffset();\n                    int endOffset = postingsEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n      TermsEnum termsEnum = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        termsEnum = terms.iterator(termsEnum);\n        BytesRefBuilder lastTerm = null;\n        PostingsEnum postingsEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | PostingsEnum.FREQS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          } else {\n            flags = PostingsEnum.POSITIONS;\n            if (hasPayloads) {\n              flags |= PostingsEnum.PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | PostingsEnum.OFFSETS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          }\n\n          assert postingsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = postingsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = postingsEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = postingsEnum.startOffset();\n                    int endOffset = postingsEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35fb92999b9df7df2ce2b35b83a044cbede61f45","date":1429037650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        TermsEnum termsEnum = terms.iterator();\n        BytesRefBuilder lastTerm = null;\n        PostingsEnum postingsEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | PostingsEnum.FREQS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          } else {\n            flags = PostingsEnum.POSITIONS;\n            if (hasPayloads) {\n              flags |= PostingsEnum.PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | PostingsEnum.OFFSETS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          }\n\n          assert postingsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = postingsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = postingsEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  assert pos <= IndexWriter.MAX_POSITION: \"pos=\" + pos + \" is > IndexWriter.MAX_POSITION=\" + IndexWriter.MAX_POSITION;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = postingsEnum.startOffset();\n                    int endOffset = postingsEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        TermsEnum termsEnum = terms.iterator();\n        BytesRefBuilder lastTerm = null;\n        PostingsEnum postingsEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | PostingsEnum.FREQS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          } else {\n            flags = PostingsEnum.POSITIONS;\n            if (hasPayloads) {\n              flags |= PostingsEnum.PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | PostingsEnum.OFFSETS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          }\n\n          assert postingsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = postingsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = postingsEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = postingsEnum.startOffset();\n                    int endOffset = postingsEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        TermsEnum termsEnum = terms.iterator();\n        BytesRefBuilder lastTerm = null;\n        PostingsEnum postingsEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | PostingsEnum.FREQS;\n            }\n            postingsEnum = termsEnum.postings(postingsEnum, flags);\n          } else {\n            flags = PostingsEnum.POSITIONS;\n            if (hasPayloads) {\n              flags |= PostingsEnum.PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | PostingsEnum.OFFSETS;\n            }\n            postingsEnum = termsEnum.postings(postingsEnum, flags);\n          }\n\n          assert postingsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = postingsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = postingsEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  assert pos <= IndexWriter.MAX_POSITION: \"pos=\" + pos + \" is > IndexWriter.MAX_POSITION=\" + IndexWriter.MAX_POSITION;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = postingsEnum.startOffset();\n                    int endOffset = postingsEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        TermsEnum termsEnum = terms.iterator();\n        BytesRefBuilder lastTerm = null;\n        PostingsEnum postingsEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | PostingsEnum.FREQS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          } else {\n            flags = PostingsEnum.POSITIONS;\n            if (hasPayloads) {\n              flags |= PostingsEnum.PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | PostingsEnum.OFFSETS;\n            }\n            postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n          }\n\n          assert postingsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = postingsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = postingsEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  assert pos <= IndexWriter.MAX_POSITION: \"pos=\" + pos + \" is > IndexWriter.MAX_POSITION=\" + IndexWriter.MAX_POSITION;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = postingsEnum.startOffset();\n                    int endOffset = postingsEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields,NormsProducer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields, NormsProducer norms) throws IOException {\n      in.write(fields, norms);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        TermsEnum termsEnum = terms.iterator();\n        BytesRefBuilder lastTerm = null;\n        PostingsEnum postingsEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | PostingsEnum.FREQS;\n            }\n            postingsEnum = termsEnum.postings(postingsEnum, flags);\n          } else {\n            flags = PostingsEnum.POSITIONS;\n            if (hasPayloads) {\n              flags |= PostingsEnum.PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | PostingsEnum.OFFSETS;\n            }\n            postingsEnum = termsEnum.postings(postingsEnum, flags);\n          }\n\n          assert postingsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = postingsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = postingsEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  assert pos <= IndexWriter.MAX_POSITION: \"pos=\" + pos + \" is > IndexWriter.MAX_POSITION=\" + IndexWriter.MAX_POSITION;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = postingsEnum.startOffset();\n                    int endOffset = postingsEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      in.write(fields);\n\n      // TODO: more asserts?  can we somehow run a\n      // \"limited\" CheckIndex here???  Or ... can we improve\n      // AssertingFieldsProducer and us it also to wrap the\n      // incoming Fields here?\n \n      String lastField = null;\n\n      for(String field : fields) {\n\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null;\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        assert terms != null;\n\n        TermsEnum termsEnum = terms.iterator();\n        BytesRefBuilder lastTerm = null;\n        PostingsEnum postingsEnum = null;\n\n        boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean hasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean hasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        boolean hasPayloads = terms.hasPayloads();\n\n        assert hasPositions == terms.hasPositions();\n        assert hasOffsets == terms.hasOffsets();\n\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          assert lastTerm == null || lastTerm.get().compareTo(term) < 0;\n          if (lastTerm == null) {\n            lastTerm = new BytesRefBuilder();\n            lastTerm.append(term);\n          } else {\n            lastTerm.copyBytes(term);\n          }\n\n          int flags = 0;\n          if (hasPositions == false) {\n            if (hasFreqs) {\n              flags = flags | PostingsEnum.FREQS;\n            }\n            postingsEnum = termsEnum.postings(postingsEnum, flags);\n          } else {\n            flags = PostingsEnum.POSITIONS;\n            if (hasPayloads) {\n              flags |= PostingsEnum.PAYLOADS;\n            }\n            if (hasOffsets) {\n              flags = flags | PostingsEnum.OFFSETS;\n            }\n            postingsEnum = termsEnum.postings(postingsEnum, flags);\n          }\n\n          assert postingsEnum != null : \"termsEnum=\" + termsEnum + \" hasPositions=\" + hasPositions;\n\n          int lastDocID = -1;\n\n          while(true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            assert docID > lastDocID;\n            lastDocID = docID;\n            if (hasFreqs) {\n              int freq = postingsEnum.freq();\n              assert freq > 0;\n\n              if (hasPositions) {\n                int lastPos = -1;\n                int lastStartOffset = -1;\n                for(int i=0;i<freq;i++) {\n                  int pos = postingsEnum.nextPosition();\n                  assert pos >= lastPos: \"pos=\" + pos + \" vs lastPos=\" + lastPos + \" i=\" + i + \" freq=\" + freq;\n                  assert pos <= IndexWriter.MAX_POSITION: \"pos=\" + pos + \" is > IndexWriter.MAX_POSITION=\" + IndexWriter.MAX_POSITION;\n                  lastPos = pos;\n\n                  if (hasOffsets) {\n                    int startOffset = postingsEnum.startOffset();\n                    int endOffset = postingsEnum.endOffset();\n                    assert endOffset >= startOffset;\n                    assert startOffset >= lastStartOffset;\n                    lastStartOffset = startOffset;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["35fb92999b9df7df2ce2b35b83a044cbede61f45"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"35fb92999b9df7df2ce2b35b83a044cbede61f45":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"51f5280f31484820499077f41fcdfe92d527d9dc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["35fb92999b9df7df2ce2b35b83a044cbede61f45"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["622a708571e534680618b3c5e0c28ac539a47776"],"35fb92999b9df7df2ce2b35b83a044cbede61f45":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["51f5280f31484820499077f41fcdfe92d527d9dc"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}