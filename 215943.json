{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int).mjava","commits":[{"id":"5d14f4b04a5c752272b2f79fd6684fee8dff2808","date":1494821985,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,List[String],int).mjava","sourceNew":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              Map<String, String> optionalPolicyMapping,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicy(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicy(coll);\n        }\n      };\n\n    }\n\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        SolrRequest op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(policy));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add((String) op.getParams().get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","sourceOld":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n\n\n//    Map<String, Object> merged = Policy.mergePolicies(collName, policyJson, defaultPolicy);\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        Map op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(policy));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add((String) op.get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fca549db64ee4c87a83a94e7c224506fa20d396","date":1495433449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int).mjava","sourceNew":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              Map<String, String> optionalPolicyMapping,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          Map<String, Map<String, List<Policy.ReplicaInfo>>> replicaInfo = delegate.getReplicaInfo(node, keys);\n          for (String s : optionalPolicyMapping.keySet()) {\n            if (!replicaInfo.containsKey(s)) {\n              replicaInfo.put(s, new HashMap<>());\n            }\n          }\n          return replicaInfo;\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicy(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicy(coll);\n        }\n      };\n\n    }\n\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        SolrRequest op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add(op.getParams().get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","sourceOld":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              Map<String, String> optionalPolicyMapping,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicy(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicy(coll);\n        }\n      };\n\n    }\n\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        SolrRequest op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(policy));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add((String) op.getParams().get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2e1fb1b46fffdd00b6f31596d6eee00b71015fc","date":1495616754,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int).mjava","sourceNew":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              Map<String, String> optionalPolicyMapping,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicy(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicy(coll);\n        }\n      };\n\n    }\n\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        SolrRequest op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add(op.getParams().get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","sourceOld":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              Map<String, String> optionalPolicyMapping,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          Map<String, Map<String, List<Policy.ReplicaInfo>>> replicaInfo = delegate.getReplicaInfo(node, keys);\n          for (String s : optionalPolicyMapping.keySet()) {\n            if (!replicaInfo.containsKey(s)) {\n              replicaInfo.put(s, new HashMap<>());\n            }\n          }\n          return replicaInfo;\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicy(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicy(coll);\n        }\n      };\n\n    }\n\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        SolrRequest op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add(op.getParams().get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int).mjava","sourceNew":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              Map<String, String> optionalPolicyMapping,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    }\n\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        SolrRequest op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add(op.getParams().get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","sourceOld":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              Map<String, String> optionalPolicyMapping,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicy(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicy(coll);\n        }\n      };\n\n    }\n\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        SolrRequest op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add(op.getParams().get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              Map<String, String> optionalPolicyMapping,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    }\n\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        SolrRequest op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add(op.getParams().get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25e4a4cddd699db6cce60282e747c7705897e821","date":1496721158,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int).mjava","sourceNew":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              Map<String, String> optionalPolicyMapping,\n                                                              List<String> shardNames,\n                                                              int repFactor,\n                                                              List<String> nodesList) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    }\n\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        if (nodesList != null)  {\n          for (String nodeName : nodesList) {\n            suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n          }\n        }\n        SolrRequest op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add(op.getParams().get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","sourceOld":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              Map<String, String> optionalPolicyMapping,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    }\n\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        SolrRequest op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add(op.getParams().get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int).mjava","sourceNew":null,"sourceOld":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              Map<String, String> optionalPolicyMapping,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    }\n\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        SolrRequest op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add(op.getParams().get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["8aa61ea06d4d27acb465d77e15f20aae84531d73","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25e4a4cddd699db6cce60282e747c7705897e821":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["d2e1fb1b46fffdd00b6f31596d6eee00b71015fc"],"d2e1fb1b46fffdd00b6f31596d6eee00b71015fc":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"25e4a4cddd699db6cce60282e747c7705897e821":[],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","5d14f4b04a5c752272b2f79fd6684fee8dff2808","a513b6a92751e54c76fb5447948c9e7d437163a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["25e4a4cddd699db6cce60282e747c7705897e821"],"d2e1fb1b46fffdd00b6f31596d6eee00b71015fc":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["d2e1fb1b46fffdd00b6f31596d6eee00b71015fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","25e4a4cddd699db6cce60282e747c7705897e821","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}