{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", text);\n    TokenStream ts2 = a2.tokenStream(\"bogus\", text);\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", text);\n    TokenStream ts2 = a2.tokenStream(\"bogus\", text);\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", new StringReader(text));\n    TokenStream ts2 = a2.tokenStream(\"bogus\", new StringReader(text));\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", text);\n    TokenStream ts2 = a2.tokenStream(\"bogus\", text);\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", text);\n    TokenStream ts2 = a2.tokenStream(\"bogus\", text);\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", text);\n    TokenStream ts2 = a2.tokenStream(\"bogus\", text);\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", text);\n    TokenStream ts2 = a2.tokenStream(\"bogus\", text);\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804b857d1066ab5185b3b9101bde41b0b71426ec","date":1435846169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualCollation(Analyzer,Analyzer,String).mjava","sourceNew":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", text);\n    TokenStream ts2 = a2.tokenStream(\"bogus\", text);\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","sourceOld":"  private void assertEqualCollation(Analyzer a1, Analyzer a2, String text)\n      throws Exception {\n    TokenStream ts1 = a1.tokenStream(\"bogus\", text);\n    TokenStream ts2 = a2.tokenStream(\"bogus\", text);\n    ts1.reset();\n    ts2.reset();\n    TermToBytesRefAttribute termAtt1 = ts1.addAttribute(TermToBytesRefAttribute.class);\n    TermToBytesRefAttribute termAtt2 = ts2.addAttribute(TermToBytesRefAttribute.class);\n    assertTrue(ts1.incrementToken());\n    assertTrue(ts2.incrementToken());\n    BytesRef bytes1 = termAtt1.getBytesRef();\n    BytesRef bytes2 = termAtt2.getBytesRef();\n    termAtt1.fillBytesRef();\n    termAtt2.fillBytesRef();\n    assertEquals(bytes1, bytes2);\n    assertFalse(ts1.incrementToken());\n    assertFalse(ts2.incrementToken());\n    ts1.close();\n    ts2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804b857d1066ab5185b3b9101bde41b0b71426ec"]},"commit2Childs":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}