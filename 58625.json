{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#testVersionsAreReturned().mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#testVersionsAreReturned().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    // assert that \"adds\" are returned\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    // assert that \"deletes\" are returned\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#testVersionsAreReturned().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#testVersionsAreReturned().mjava","sourceNew":"  @Test\n  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    // assert that \"adds\" are returned\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    // assert that \"deletes\" are returned\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n\n","sourceOld":"  @Test\n  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    // assert that \"adds\" are returned\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    // assert that \"deletes\" are returned\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}