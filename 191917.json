{"path":"lucene/core/src/java/org/apache/lucene/index/FieldUpdatesBuffer.BufferedUpdateIterator#next().mjava","commits":[{"id":"28211671436f185419b3f7e53ccfc3911441ab65","date":1544026960,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldUpdatesBuffer.BufferedUpdateIterator#next().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Moves to the next BufferedUpdate or return null if all updates are consumed.\n     * The returned instance is a shared instance and must be fully consumed before the next call to this method.\n     */\n    BufferedUpdate next() throws IOException {\n      BytesRef next = termValuesIterator.next();\n      if (next != null) {\n        final int idx = index++;\n        bufferedUpdate.termValue = next;\n        bufferedUpdate.hasValue = updatesWithValue.get(idx);\n        bufferedUpdate.termField = fields[getArrayIndex(fields.length, idx)];\n        bufferedUpdate.docUpTo = docsUpTo[getArrayIndex(docsUpTo.length, idx)];\n        if (bufferedUpdate.hasValue) {\n          if (isNumeric) {\n            bufferedUpdate.numericValue = numericValues[getArrayIndex(numericValues.length, idx)];\n            bufferedUpdate.binaryValue = null;\n          } else {\n            bufferedUpdate.binaryValue = byteValuesIterator.next();\n          }\n        } else {\n          bufferedUpdate.binaryValue = null;\n          bufferedUpdate.numericValue = 0;\n        }\n        return bufferedUpdate;\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8","date":1582222690,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldUpdatesBuffer.BufferedUpdateIterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldUpdatesBuffer.BufferedUpdateIterator#next().mjava","sourceNew":"    /**\n     * Moves to the next BufferedUpdate or return null if all updates are consumed.\n     * The returned instance is a shared instance and must be fully consumed before the next call to this method.\n     */\n    BufferedUpdate next() throws IOException {\n      BytesRef next = nextTerm();\n      if (next != null) {\n        final int idx = termValuesIterator.ord();\n        bufferedUpdate.termValue = next;\n        bufferedUpdate.hasValue = updatesWithValue.get(idx);\n        bufferedUpdate.termField = fields[getArrayIndex(fields.length, idx)];\n        bufferedUpdate.docUpTo = docsUpTo[getArrayIndex(docsUpTo.length, idx)];\n        if (bufferedUpdate.hasValue) {\n          if (isNumeric) {\n            bufferedUpdate.numericValue = numericValues[getArrayIndex(numericValues.length, idx)];\n            bufferedUpdate.binaryValue = null;\n          } else {\n            bufferedUpdate.binaryValue = byteValuesIterator.next();\n          }\n        } else {\n          bufferedUpdate.binaryValue = null;\n          bufferedUpdate.numericValue = 0;\n        }\n        return bufferedUpdate;\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    /**\n     * Moves to the next BufferedUpdate or return null if all updates are consumed.\n     * The returned instance is a shared instance and must be fully consumed before the next call to this method.\n     */\n    BufferedUpdate next() throws IOException {\n      BytesRef next = termValuesIterator.next();\n      if (next != null) {\n        final int idx = index++;\n        bufferedUpdate.termValue = next;\n        bufferedUpdate.hasValue = updatesWithValue.get(idx);\n        bufferedUpdate.termField = fields[getArrayIndex(fields.length, idx)];\n        bufferedUpdate.docUpTo = docsUpTo[getArrayIndex(docsUpTo.length, idx)];\n        if (bufferedUpdate.hasValue) {\n          if (isNumeric) {\n            bufferedUpdate.numericValue = numericValues[getArrayIndex(numericValues.length, idx)];\n            bufferedUpdate.binaryValue = null;\n          } else {\n            bufferedUpdate.binaryValue = byteValuesIterator.next();\n          }\n        } else {\n          bufferedUpdate.binaryValue = null;\n          bufferedUpdate.numericValue = 0;\n        }\n        return bufferedUpdate;\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["28211671436f185419b3f7e53ccfc3911441ab65"],"28211671436f185419b3f7e53ccfc3911441ab65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"]},"commit2Childs":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28211671436f185419b3f7e53ccfc3911441ab65":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28211671436f185419b3f7e53ccfc3911441ab65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}