{"path":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","commits":[{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testChangeCodec() throws Exception {\r\n    Directory dir = newDirectory();\r\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\r\n    conf.setCodec(new Lucene45Codec() {\r\n      @Override\r\n      public DocValuesFormat getDocValuesFormatForField(String field) {\r\n        return new Lucene45DocValuesFormat();\r\n      }\r\n    });\r\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\r\n    Document doc = new Document();\r\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\r\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\r\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\r\n    writer.addDocument(doc);\r\n    writer.close();\r\n    \r\n    // change format\r\n    conf.setCodec(new Lucene45Codec() {\r\n      @Override\r\n      public DocValuesFormat getDocValuesFormatForField(String field) {\r\n        return new AssertingDocValuesFormat();\r\n      }\r\n    });\r\n    writer = new IndexWriter(dir, conf.clone());\r\n    doc = new Document();\r\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\r\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\r\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\r\n    writer.addDocument(doc);\r\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\r\n    writer.close();\r\n    \r\n    DirectoryReader reader = DirectoryReader.open(dir);\r\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\r\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\r\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\r\n    assertEquals(12L, f1.get(0));\r\n    assertEquals(13L, f2.get(0));\r\n    assertEquals(17L, f1.get(1));\r\n    assertEquals(2L, f2.get(1));\r\n    reader.close();\r\n    dir.close();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4962e8a1c440950d757f5e295b4f6106ba2ab420","date":1379271654,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene45Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf.setCodec(new Lucene45Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf.clone());\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\r\n  public void testChangeCodec() throws Exception {\r\n    Directory dir = newDirectory();\r\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\r\n    conf.setCodec(new Lucene45Codec() {\r\n      @Override\r\n      public DocValuesFormat getDocValuesFormatForField(String field) {\r\n        return new Lucene45DocValuesFormat();\r\n      }\r\n    });\r\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\r\n    Document doc = new Document();\r\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\r\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\r\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\r\n    writer.addDocument(doc);\r\n    writer.close();\r\n    \r\n    // change format\r\n    conf.setCodec(new Lucene45Codec() {\r\n      @Override\r\n      public DocValuesFormat getDocValuesFormatForField(String field) {\r\n        return new AssertingDocValuesFormat();\r\n      }\r\n    });\r\n    writer = new IndexWriter(dir, conf.clone());\r\n    doc = new Document();\r\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\r\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\r\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\r\n    writer.addDocument(doc);\r\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\r\n    writer.close();\r\n    \r\n    DirectoryReader reader = DirectoryReader.open(dir);\r\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\r\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\r\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\r\n    assertEquals(12L, f1.get(0));\r\n    assertEquals(13L, f2.get(0));\r\n    assertEquals(17L, f1.get(1));\r\n    assertEquals(2L, f2.get(1));\r\n    reader.close();\r\n    dir.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c8b90484b84a6a97ec056ed738f95bc72f8249cb","date":1380338015,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene45Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf.setCodec(new Lucene45Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf.clone());\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene45Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf.setCodec(new Lucene45Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf.clone());\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf.clone());\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene45Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf.setCodec(new Lucene45Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf.clone());\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    // change format\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf.clone());\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf.clone());\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    // change format\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf.clone());\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    // change format\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf.clone());\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cfc45818441587d8004ff1a119fb60ac9ecb9a14","date":1401437797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    // change format\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf.clone());\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    // change format\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf.clone());\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868bd094d931bf6a614e43a8e65d53b643e2e64c","date":1401446698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    // change format\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    // change format\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    // change format\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene45DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    // change format\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["8435160e9702b19398118ddf76b61c846612b6a4","4962e8a1c440950d757f5e295b4f6106ba2ab420"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    // change format\n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.shutdown();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene410Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene410DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene410Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene49DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e49088db00ea6cb232fbde9c8c646c721d4d049f","date":1411433559,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene410Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new Lucene410DocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new Lucene410Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues f1 = MultiDocValues.getNumericValues(reader, \"f1\");\n    NumericDocValues f2 = MultiDocValues.getNumericValues(reader, \"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = SlowCompositeReaderWrapper.wrap(reader);\n    NumericDocValues f1 = r.getNumericDocValues(\"f1\");\n    NumericDocValues f2 = r.getNumericDocValues(\"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","4962e8a1c440950d757f5e295b4f6106ba2ab420"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues f1 = MultiDocValues.getNumericValues(reader, \"f1\");\n    NumericDocValues f2 = MultiDocValues.getNumericValues(reader, \"f2\");\n    assertEquals(0, f1.nextDoc());\n    assertEquals(12L, f1.longValue());\n    assertEquals(0, f2.nextDoc());\n    assertEquals(13L, f2.longValue());\n    assertEquals(1, f1.nextDoc());\n    assertEquals(17L, f1.longValue());\n    assertEquals(1, f2.nextDoc());\n    assertEquals(2L, f2.longValue());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues f1 = MultiDocValues.getNumericValues(reader, \"f1\");\n    NumericDocValues f2 = MultiDocValues.getNumericValues(reader, \"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues f1 = MultiDocValues.getNumericValues(reader, \"f1\");\n    NumericDocValues f2 = MultiDocValues.getNumericValues(reader, \"f2\");\n    assertEquals(0, f1.nextDoc());\n    assertEquals(12L, f1.longValue());\n    assertEquals(0, f2.nextDoc());\n    assertEquals(13L, f2.longValue());\n    assertEquals(1, f1.nextDoc());\n    assertEquals(17L, f1.longValue());\n    assertEquals(1, f2.nextDoc());\n    assertEquals(2L, f2.longValue());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues f1 = MultiDocValues.getNumericValues(reader, \"f1\");\n    NumericDocValues f2 = MultiDocValues.getNumericValues(reader, \"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues f1 = MultiDocValues.getNumericValues(reader, \"f1\");\n    NumericDocValues f2 = MultiDocValues.getNumericValues(reader, \"f2\");\n    assertEquals(0, f1.nextDoc());\n    assertEquals(12L, f1.longValue());\n    assertEquals(0, f2.nextDoc());\n    assertEquals(13L, f2.longValue());\n    assertEquals(1, f1.nextDoc());\n    assertEquals(17L, f1.longValue());\n    assertEquals(1, f2.nextDoc());\n    assertEquals(2L, f2.longValue());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues f1 = MultiDocValues.getNumericValues(reader, \"f1\");\n    NumericDocValues f2 = MultiDocValues.getNumericValues(reader, \"f2\");\n    assertEquals(12L, f1.get(0));\n    assertEquals(13L, f2.get(0));\n    assertEquals(17L, f1.get(1));\n    assertEquals(2L, f2.get(1));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues f1 = MultiDocValues.getNumericValues(reader, \"f1\");\n    NumericDocValues f2 = MultiDocValues.getNumericValues(reader, \"f2\");\n    assertEquals(0, f1.nextDoc());\n    assertEquals(12L, f1.longValue());\n    assertEquals(0, f2.nextDoc());\n    assertEquals(13L, f2.longValue());\n    assertEquals(1, f1.nextDoc());\n    assertEquals(17L, f1.longValue());\n    assertEquals(1, f2.nextDoc());\n    assertEquals(2L, f2.longValue());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues f1 = MultiDocValues.getNumericValues(reader, \"f1\");\n    NumericDocValues f2 = MultiDocValues.getNumericValues(reader, \"f2\");\n    assertEquals(0, f1.nextDoc());\n    assertEquals(12L, f1.longValue());\n    assertEquals(0, f2.nextDoc());\n    assertEquals(13L, f2.longValue());\n    assertEquals(1, f1.nextDoc());\n    assertEquals(17L, f1.longValue());\n    assertEquals(1, f2.nextDoc());\n    assertEquals(2L, f2.longValue());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues f1 = MultiDocValues.getNumericValues(reader, \"f1\");\n    NumericDocValues f2 = MultiDocValues.getNumericValues(reader, \"f2\");\n    assertEquals(0, f1.nextDoc());\n    assertEquals(12L, f1.longValue());\n    assertEquals(0, f2.nextDoc());\n    assertEquals(13L, f2.longValue());\n    assertEquals(1, f1.nextDoc());\n    assertEquals(17L, f1.longValue());\n    assertEquals(1, f2.nextDoc());\n    assertEquals(2L, f2.longValue());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues f1 = MultiDocValues.getNumericValues(reader, \"f1\");\n    NumericDocValues f2 = MultiDocValues.getNumericValues(reader, \"f2\");\n    assertEquals(0, f1.nextDoc());\n    assertEquals(12L, f1.longValue());\n    assertEquals(0, f2.nextDoc());\n    assertEquals(13L, f2.longValue());\n    assertEquals(1, f1.nextDoc());\n    assertEquals(17L, f1.longValue());\n    assertEquals(1, f2.nextDoc());\n    assertEquals(2L, f2.longValue());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testChangeCodec().mjava","sourceNew":"  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues f1 = MultiDocValues.getNumericValues(reader, \"f1\");\n    NumericDocValues f2 = MultiDocValues.getNumericValues(reader, \"f2\");\n    assertEquals(0, f1.nextDoc());\n    assertEquals(12L, f1.longValue());\n    assertEquals(0, f2.nextDoc());\n    assertEquals(13L, f2.longValue());\n    assertEquals(1, f1.nextDoc());\n    assertEquals(17L, f1.longValue());\n    assertEquals(1, f2.nextDoc());\n    assertEquals(2L, f2.longValue());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testChangeCodec() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return TestUtil.getDefaultDocValuesFormat();\n      }\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 5L));\n    doc.add(new NumericDocValuesField(\"f2\", 13L));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // change format\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // disable merges to simplify test assertions.\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return new AssertingDocValuesFormat();\n      }\n    });\n    writer = new IndexWriter(dir, conf);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"d1\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 17L));\n    doc.add(new NumericDocValuesField(\"f2\", 2L));\n    writer.addDocument(doc);\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f1\", 12L);\n    writer.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    NumericDocValues f1 = MultiDocValues.getNumericValues(reader, \"f1\");\n    NumericDocValues f2 = MultiDocValues.getNumericValues(reader, \"f2\");\n    assertEquals(0, f1.nextDoc());\n    assertEquals(12L, f1.longValue());\n    assertEquals(0, f2.nextDoc());\n    assertEquals(13L, f2.longValue());\n    assertEquals(1, f1.nextDoc());\n    assertEquals(17L, f1.longValue());\n    assertEquals(1, f2.nextDoc());\n    assertEquals(2L, f2.longValue());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e49088db00ea6cb232fbde9c8c646c721d4d049f":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"cfc45818441587d8004ff1a119fb60ac9ecb9a14":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"8435160e9702b19398118ddf76b61c846612b6a4":["c8b90484b84a6a97ec056ed738f95bc72f8249cb"],"c8b90484b84a6a97ec056ed738f95bc72f8249cb":["4962e8a1c440950d757f5e295b4f6106ba2ab420"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["868bd094d931bf6a614e43a8e65d53b643e2e64c"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["8435160e9702b19398118ddf76b61c846612b6a4"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"868bd094d931bf6a614e43a8e65d53b643e2e64c":["cfc45818441587d8004ff1a119fb60ac9ecb9a14"],"4962e8a1c440950d757f5e295b4f6106ba2ab420":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["cfc45818441587d8004ff1a119fb60ac9ecb9a14"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["4962e8a1c440950d757f5e295b4f6106ba2ab420"],"e49088db00ea6cb232fbde9c8c646c721d4d049f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cfc45818441587d8004ff1a119fb60ac9ecb9a14":["868bd094d931bf6a614e43a8e65d53b643e2e64c"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"8435160e9702b19398118ddf76b61c846612b6a4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c8b90484b84a6a97ec056ed738f95bc72f8249cb":["8435160e9702b19398118ddf76b61c846612b6a4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"4962e8a1c440950d757f5e295b4f6106ba2ab420":["c8b90484b84a6a97ec056ed738f95bc72f8249cb"],"868bd094d931bf6a614e43a8e65d53b643e2e64c":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}