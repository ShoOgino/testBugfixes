{"path":"src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","commits":[{"id":"105155c00cbd8195407715ef8d1e5bc0189f04c0","date":1255035571,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    BooleanQuery expected = new BooleanQuery();\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2c1612e8e6b219c9fc5ba7f7cea075aa68f1bef3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c1612e8e6b219c9fc5ba7f7cea075aa68f1bef3","date":1259021060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    BooleanQuery expected = new BooleanQuery(true);\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    BooleanQuery expected = new BooleanQuery();\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n  }\n\n","bugFix":["105155c00cbd8195407715ef8d1e5bc0189f04c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4f427d8edde643497b73a09bd7ff67d44e60cf2","date":1259795228,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    BooleanQuery expected = new BooleanQuery(true);\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n  }\n\n","bugFix":null,"bugIntro":["d8b3f2faaf05547a6ed4e2769b664522af9514b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2c1612e8e6b219c9fc5ba7f7cea075aa68f1bef3":["105155c00cbd8195407715ef8d1e5bc0189f04c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4f427d8edde643497b73a09bd7ff67d44e60cf2":["2c1612e8e6b219c9fc5ba7f7cea075aa68f1bef3"],"105155c00cbd8195407715ef8d1e5bc0189f04c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d4f427d8edde643497b73a09bd7ff67d44e60cf2"]},"commit2Childs":{"2c1612e8e6b219c9fc5ba7f7cea075aa68f1bef3":["d4f427d8edde643497b73a09bd7ff67d44e60cf2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["105155c00cbd8195407715ef8d1e5bc0189f04c0"],"d4f427d8edde643497b73a09bd7ff67d44e60cf2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"105155c00cbd8195407715ef8d1e5bc0189f04c0":["2c1612e8e6b219c9fc5ba7f7cea075aa68f1bef3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}