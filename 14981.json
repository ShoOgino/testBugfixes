{"path":"lucene/src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfoAndOrd tiOrd = termsCache.get(term);\n    ThreadResources resources = getThreadResources();\n    \n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfoAndOrd tiOrd = termsCache.get(term);\n    ThreadResources resources = getThreadResources();\n    \n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermInfosReader#get(Term,boolean).mjava","sourceNew":null,"sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfoAndOrd tiOrd = termsCache.get(term);\n    ThreadResources resources = getThreadResources();\n    \n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n    \n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = resources.termEnum;\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}