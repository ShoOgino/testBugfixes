{"path":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderPooling(boolean).mjava","commits":[{"id":"fe8474c4e5a03f0ca187f99c062af83e092717f3","date":1269253267,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderPooling(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** By default, IndexWriter does not pool the\n   *  SegmentReaders it must open for deletions and\n   *  merging, unless a near-real-time reader has been\n   *  obtained by calling {@link IndexWriter#getReader}.\n   *  This method lets you enable pooling without getting a\n   *  near-real-time reader.  NOTE: if you set this to\n   *  false, IndexWriter will still pool readers once\n   *  {@link IndexWriter#getReader} is called. */\n  public IndexWriterConfig setReaderPooling(boolean readerPooling) {\n    this.readerPooling = readerPooling;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00b21520fafb9860ce0318d7be5ea84619c185ad","date":1300444600,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderPooling(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderPooling(boolean).mjava","sourceNew":"  /** By default, IndexWriter does not pool the\n   *  SegmentReaders it must open for deletions and\n   *  merging, unless a near-real-time reader has been\n   *  obtained by calling {@link IndexWriter#getReader}.\n   *  This method lets you enable pooling without getting a\n   *  near-real-time reader.  NOTE: if you set this to\n   *  false, IndexWriter will still pool readers once\n   *  {@link IndexWriter#getReader} is called.\n   *\n   * <p>Only takes effect when IndexWriter is first created. */\n  public IndexWriterConfig setReaderPooling(boolean readerPooling) {\n    this.readerPooling = readerPooling;\n    return this;\n  }\n\n","sourceOld":"  /** By default, IndexWriter does not pool the\n   *  SegmentReaders it must open for deletions and\n   *  merging, unless a near-real-time reader has been\n   *  obtained by calling {@link IndexWriter#getReader}.\n   *  This method lets you enable pooling without getting a\n   *  near-real-time reader.  NOTE: if you set this to\n   *  false, IndexWriter will still pool readers once\n   *  {@link IndexWriter#getReader} is called. */\n  public IndexWriterConfig setReaderPooling(boolean readerPooling) {\n    this.readerPooling = readerPooling;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderPooling(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderPooling(boolean).mjava","sourceNew":"  /** By default, IndexWriter does not pool the\n   *  SegmentReaders it must open for deletions and\n   *  merging, unless a near-real-time reader has been\n   *  obtained by calling {@link IndexWriter#getReader}.\n   *  This method lets you enable pooling without getting a\n   *  near-real-time reader.  NOTE: if you set this to\n   *  false, IndexWriter will still pool readers once\n   *  {@link IndexWriter#getReader} is called.\n   *\n   * <p>Only takes effect when IndexWriter is first created. */\n  public IndexWriterConfig setReaderPooling(boolean readerPooling) {\n    this.readerPooling = readerPooling;\n    return this;\n  }\n\n","sourceOld":"  /** By default, IndexWriter does not pool the\n   *  SegmentReaders it must open for deletions and\n   *  merging, unless a near-real-time reader has been\n   *  obtained by calling {@link IndexWriter#getReader}.\n   *  This method lets you enable pooling without getting a\n   *  near-real-time reader.  NOTE: if you set this to\n   *  false, IndexWriter will still pool readers once\n   *  {@link IndexWriter#getReader} is called. */\n  public IndexWriterConfig setReaderPooling(boolean readerPooling) {\n    this.readerPooling = readerPooling;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderPooling(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderPooling(boolean).mjava","sourceNew":"  /** By default, IndexWriter does not pool the\n   *  SegmentReaders it must open for deletions and\n   *  merging, unless a near-real-time reader has been\n   *  obtained by calling {@link IndexWriter#getReader}.\n   *  This method lets you enable pooling without getting a\n   *  near-real-time reader.  NOTE: if you set this to\n   *  false, IndexWriter will still pool readers once\n   *  {@link IndexWriter#getReader} is called.\n   *\n   * <p>Only takes effect when IndexWriter is first created. */\n  public IndexWriterConfig setReaderPooling(boolean readerPooling) {\n    this.readerPooling = readerPooling;\n    return this;\n  }\n\n","sourceOld":"  /** By default, IndexWriter does not pool the\n   *  SegmentReaders it must open for deletions and\n   *  merging, unless a near-real-time reader has been\n   *  obtained by calling {@link IndexWriter#getReader}.\n   *  This method lets you enable pooling without getting a\n   *  near-real-time reader.  NOTE: if you set this to\n   *  false, IndexWriter will still pool readers once\n   *  {@link IndexWriter#getReader} is called. */\n  public IndexWriterConfig setReaderPooling(boolean readerPooling) {\n    this.readerPooling = readerPooling;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderPooling(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderPooling(boolean).mjava","sourceNew":"  /** By default, IndexWriter does not pool the\n   *  SegmentReaders it must open for deletions and\n   *  merging, unless a near-real-time reader has been\n   *  obtained by calling {@link IndexWriter#getReader}.\n   *  This method lets you enable pooling without getting a\n   *  near-real-time reader.  NOTE: if you set this to\n   *  false, IndexWriter will still pool readers once\n   *  {@link IndexWriter#getReader} is called.\n   *\n   * <p>Only takes effect when IndexWriter is first created. */\n  public IndexWriterConfig setReaderPooling(boolean readerPooling) {\n    this.readerPooling = readerPooling;\n    return this;\n  }\n\n","sourceOld":"  /** By default, IndexWriter does not pool the\n   *  SegmentReaders it must open for deletions and\n   *  merging, unless a near-real-time reader has been\n   *  obtained by calling {@link IndexWriter#getReader}.\n   *  This method lets you enable pooling without getting a\n   *  near-real-time reader.  NOTE: if you set this to\n   *  false, IndexWriter will still pool readers once\n   *  {@link IndexWriter#getReader} is called.\n   *\n   * <p>Only takes effect when IndexWriter is first created. */\n  public IndexWriterConfig setReaderPooling(boolean readerPooling) {\n    this.readerPooling = readerPooling;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["fe8474c4e5a03f0ca187f99c062af83e092717f3","00b21520fafb9860ce0318d7be5ea84619c185ad"],"fe8474c4e5a03f0ca187f99c062af83e092717f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["fe8474c4e5a03f0ca187f99c062af83e092717f3","00b21520fafb9860ce0318d7be5ea84619c185ad"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["00b21520fafb9860ce0318d7be5ea84619c185ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00b21520fafb9860ce0318d7be5ea84619c185ad":["fe8474c4e5a03f0ca187f99c062af83e092717f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"fe8474c4e5a03f0ca187f99c062af83e092717f3":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","00b21520fafb9860ce0318d7be5ea84619c185ad"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe8474c4e5a03f0ca187f99c062af83e092717f3"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}