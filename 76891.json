{"path":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#asPngBytes(int,int,int[],ResponseBuilder).mjava","commits":[{"id":"59d82b0be40ecfcc2c94c776b324e0903a62b844","date":1423535462,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#asPngBytes(int,int,int[],ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  //package access for tests\n  static byte[] asPngBytes(final int columns, final int rows, final int[] counts, ResponseBuilder rb) {\n    long startTimeNano = System.nanoTime();\n      BufferedImage image = PngHelper.newImage(columns, rows);\n      for (int c = 0; c < columns; c++) {\n        for (int r = 0; r < rows; r++) {\n          PngHelper.writeCountAtColumnRow(image, rows, c, r, counts[c * rows + r]);\n        }\n      }\n      byte[] bytes = PngHelper.writeImage(image);\n      long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNano);\n      log.debug(\"heatmap nativeSize={} pngSize={} pngTime={}\", (counts.length * 4), bytes.length, durationMs);\n      if (rb != null && rb.isDebugTimings()) {\n        rb.addDebug(durationMs, \"timing\", \"heatmap png generation\");\n      }\n      return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ab027bdfe663227636ccbeda13ae82add302939","date":1529980633,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#asPngBytes(int,int,int[],ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  //package access for tests\n  static byte[] asPngBytes(final int columns, final int rows, final int[] counts, ResponseBuilder rb) {\n    long startTimeNano = System.nanoTime();\n      BufferedImage image = PngHelper.newImage(columns, rows);\n      for (int c = 0; c < columns; c++) {\n        for (int r = 0; r < rows; r++) {\n          PngHelper.writeCountAtColumnRow(image, rows, c, r, counts[c * rows + r]);\n        }\n      }\n      byte[] bytes = PngHelper.writeImage(image);\n      long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNano);\n      log.debug(\"heatmap nativeSize={} pngSize={} pngTime={}\", (counts.length * 4), bytes.length, durationMs);\n      if (rb != null && rb.isDebugTimings()) {\n        rb.addDebug(durationMs, \"timing\", \"heatmap png generation\");\n      }\n      return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#asPngBytes(int,int,int[],ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  //package access for tests\n  static byte[] asPngBytes(final int columns, final int rows, final int[] counts, ResponseBuilder rb) {\n    long startTimeNano = System.nanoTime();\n      BufferedImage image = PngHelper.newImage(columns, rows);\n      for (int c = 0; c < columns; c++) {\n        for (int r = 0; r < rows; r++) {\n          PngHelper.writeCountAtColumnRow(image, rows, c, r, counts[c * rows + r]);\n        }\n      }\n      byte[] bytes = PngHelper.writeImage(image);\n      long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNano);\n      log.debug(\"heatmap nativeSize={} pngSize={} pngTime={}\", (counts.length * 4), bytes.length, durationMs);\n      if (rb != null && rb.isDebugTimings()) {\n        rb.addDebug(durationMs, \"timing\", \"heatmap png generation\");\n      }\n      return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#asPngBytes(int,int,int[],ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  //package access for tests\n  static byte[] asPngBytes(final int columns, final int rows, final int[] counts, ResponseBuilder rb) {\n    long startTimeNano = System.nanoTime();\n      BufferedImage image = PngHelper.newImage(columns, rows);\n      for (int c = 0; c < columns; c++) {\n        for (int r = 0; r < rows; r++) {\n          PngHelper.writeCountAtColumnRow(image, rows, c, r, counts[c * rows + r]);\n        }\n      }\n      byte[] bytes = PngHelper.writeImage(image);\n      long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNano);\n      log.debug(\"heatmap nativeSize={} pngSize={} pngTime={}\", (counts.length * 4), bytes.length, durationMs);\n      if (rb != null && rb.isDebugTimings()) {\n        rb.addDebug(durationMs, \"timing\", \"heatmap png generation\");\n      }\n      return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ab027bdfe663227636ccbeda13ae82add302939":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"59d82b0be40ecfcc2c94c776b324e0903a62b844":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["59d82b0be40ecfcc2c94c776b324e0903a62b844","2ab027bdfe663227636ccbeda13ae82add302939"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ab027bdfe663227636ccbeda13ae82add302939"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["59d82b0be40ecfcc2c94c776b324e0903a62b844","2ab027bdfe663227636ccbeda13ae82add302939"]},"commit2Childs":{"2ab027bdfe663227636ccbeda13ae82add302939":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"59d82b0be40ecfcc2c94c776b324e0903a62b844":["2ab027bdfe663227636ccbeda13ae82add302939","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}