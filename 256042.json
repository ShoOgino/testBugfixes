{"path":"lucene/src/java/org/apache/lucene/index/TermsEnum#seek(BytesRef,TermState).mjava","commits":[{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsEnum#seek(BytesRef,TermState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enu the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}, otherwise a {@link #seek(BytesRef, TermState)} call can\n   * leave the enum in undefined state.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public SeekStatus seek(BytesRef term, TermState state) throws IOException {\n    return seek(term);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6a1a39b2854abb66cc1fe2e6bab94a18ada0108","a6a1a39b2854abb66cc1fe2e6bab94a18ada0108"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsEnum#seek(BytesRef,TermState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enu the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}, otherwise a {@link #seek(BytesRef, TermState)} call can\n   * leave the enum in undefined state.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public SeekStatus seek(BytesRef term, TermState state) throws IOException {\n    return seek(term);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsEnum#seek(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsEnum#seek(BytesRef,TermState).mjava","sourceNew":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}, otherwise a {@link #seek(BytesRef, TermState)} call can\n   * leave the enum in undefined state.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seek(BytesRef term, TermState state) throws IOException {\n    seek(term);\n  }\n\n","sourceOld":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enu the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}, otherwise a {@link #seek(BytesRef, TermState)} call can\n   * leave the enum in undefined state.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public SeekStatus seek(BytesRef term, TermState state) throws IOException {\n    return seek(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsEnum#seek(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsEnum#seek(BytesRef,TermState).mjava","sourceNew":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}, otherwise a {@link #seek(BytesRef, TermState)} call can\n   * leave the enum in undefined state.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seek(BytesRef term, TermState state) throws IOException {\n    seek(term);\n  }\n\n","sourceOld":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enu the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}, otherwise a {@link #seek(BytesRef, TermState)} call can\n   * leave the enum in undefined state.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public SeekStatus seek(BytesRef term, TermState state) throws IOException {\n    return seek(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsEnum#seek(BytesRef,TermState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}, otherwise a {@link #seek(BytesRef, TermState)} call can\n   * leave the enum in undefined state.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seek(BytesRef term, TermState state) throws IOException {\n    seek(term);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsEnum#seek(BytesRef,TermState).mjava","sourceNew":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seekExact(BytesRef term, TermState state) throws IOException {\n    if (!seekExact(term, true)) {\n      throw new IllegalArgumentException(\"term=\" + term + \" does not exist\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}, otherwise a {@link #seek(BytesRef, TermState)} call can\n   * leave the enum in undefined state.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seek(BytesRef term, TermState state) throws IOException {\n    seek(term);\n  }\n\n","bugFix":null,"bugIntro":["a6a1a39b2854abb66cc1fe2e6bab94a18ada0108","a6a1a39b2854abb66cc1fe2e6bab94a18ada0108"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsEnum#seek(BytesRef,TermState).mjava","sourceNew":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seekExact(BytesRef term, TermState state) throws IOException {\n    if (!seekExact(term, true)) {\n      throw new IllegalArgumentException(\"term=\" + term + \" does not exist\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}, otherwise a {@link #seek(BytesRef, TermState)} call can\n   * leave the enum in undefined state.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seek(BytesRef term, TermState state) throws IOException {\n    seek(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsEnum#seek(BytesRef,TermState).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}, otherwise a {@link #seek(BytesRef, TermState)} call can\n   * leave the enum in undefined state.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seek(BytesRef term, TermState state) throws IOException {\n    seek(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"2553b00f699380c64959ccb27991289aae87be2e":["b1add9ddc0005b07550d4350720aac22dc9886b3","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b1add9ddc0005b07550d4350720aac22dc9886b3","fd9cc9d77712aba3662f24632df7539ab75e3667"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd9cc9d77712aba3662f24632df7539ab75e3667"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","fa1a999d6674423e5c4ac858b410283f6fe03f20","868da859b43505d9d2a023bfeae6dd0c795f5295"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["29ef99d61cda9641b6250bf9567329a6e65f901d","2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"2553b00f699380c64959ccb27991289aae87be2e":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}