{"path":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSortableFloatNaN().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSortableFloatNaN().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSortableFloatNaN().mjava","sourceNew":"  public void testSortableFloatNaN() {\n    final int plusInf = NumericUtils.floatToSortableInt(Float.POSITIVE_INFINITY);\n    for (float nan : FLOAT_NANs) {\n      assertTrue(Float.isNaN(nan));\n      final int sortable = NumericUtils.floatToSortableInt(nan);\n      assertTrue(\"Float not sorted correctly: \" + nan + \", int repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","sourceOld":"  public void testSortableFloatNaN() {\n    final int plusInf = NumericUtils.floatToSortableInt(Float.POSITIVE_INFINITY);\n    for (float nan : FLOAT_NANs) {\n      assertTrue(Float.isNaN(nan));\n      final int sortable = NumericUtils.floatToSortableInt(nan);\n      assertTrue(\"Float not sorted correctly: \" + nan + \", int repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSortableFloatNaN().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSortableFloatNaN().mjava","sourceNew":"  public void testSortableFloatNaN() {\n    final int plusInf = LegacyNumericUtils.floatToSortableInt(Float.POSITIVE_INFINITY);\n    for (float nan : FLOAT_NANs) {\n      assertTrue(Float.isNaN(nan));\n      final int sortable = LegacyNumericUtils.floatToSortableInt(nan);\n      assertTrue(\"Float not sorted correctly: \" + nan + \", int repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","sourceOld":"  public void testSortableFloatNaN() {\n    final int plusInf = NumericUtils.floatToSortableInt(Float.POSITIVE_INFINITY);\n    for (float nan : FLOAT_NANs) {\n      assertTrue(Float.isNaN(nan));\n      final int sortable = NumericUtils.floatToSortableInt(nan);\n      assertTrue(\"Float not sorted correctly: \" + nan + \", int repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSortableFloatNaN().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortableFloatNaN() {\n    final int plusInf = NumericUtils.floatToSortableInt(Float.POSITIVE_INFINITY);\n    for (float nan : FLOAT_NANs) {\n      assertTrue(Float.isNaN(nan));\n      final int sortable = NumericUtils.floatToSortableInt(nan);\n      assertTrue(\"Float not sorted correctly: \" + nan + \", int repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSortableFloatNaN().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortableFloatNaN() {\n    final int plusInf = NumericUtils.floatToSortableInt(Float.POSITIVE_INFINITY);\n    for (float nan : FLOAT_NANs) {\n      assertTrue(Float.isNaN(nan));\n      final int sortable = NumericUtils.floatToSortableInt(nan);\n      assertTrue(\"Float not sorted correctly: \" + nan + \", int repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"770342641f7b505eaa8dccdc666158bff2419109":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"770342641f7b505eaa8dccdc666158bff2419109":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}