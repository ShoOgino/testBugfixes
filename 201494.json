{"path":"solr/core/src/test/org/apache/solr/schema/DocValuesMissingTest#testBoolSort().mjava","commits":[{"id":"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","date":1465691899,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMissingTest#testBoolSort().mjava","pathOld":"/dev/null","sourceNew":"  /** bool (and dynamic bool) with default lucene sort (treats as \"\") */\n  @Test\n  public void testBoolSort() throws Exception {\n    // note: cant use checkSortMissingDefault because \n    // nothing sorts lower then the default of \"\" and\n    // bool fields are, at root, string fields.\n    for (String field : new String[] {\"booldv\",\"dyn_booldv\"}) {\n      assertU(adoc(\"id\", \"0\")); // missing\n      assertU(adoc(\"id\", \"1\", field, \"false\"));\n      assertU(adoc(\"id\", \"2\", field, \"true\"));\n      assertU(commit());\n      assertQ(req(\"q\", \"*:*\", \"sort\", field+\" asc\"),\n          \"//result/doc[1]/str[@name='id'][.=0]\",\n          \"//result/doc[2]/str[@name='id'][.=1]\",\n          \"//result/doc[3]/str[@name='id'][.=2]\");\n      assertQ(req(\"q\", \"*:*\", \"sort\", field+\" desc\"),\n          \"//result/doc[1]/str[@name='id'][.=2]\",\n          \"//result/doc[2]/str[@name='id'][.=1]\",\n          \"//result/doc[3]/str[@name='id'][.=0]\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesMissingTest#testBoolSort().mjava","pathOld":"/dev/null","sourceNew":"  /** bool (and dynamic bool) with default lucene sort (treats as \"\") */\n  @Test\n  public void testBoolSort() throws Exception {\n    // note: cant use checkSortMissingDefault because \n    // nothing sorts lower then the default of \"\" and\n    // bool fields are, at root, string fields.\n    for (String field : new String[] {\"booldv\",\"dyn_booldv\"}) {\n      assertU(adoc(\"id\", \"0\")); // missing\n      assertU(adoc(\"id\", \"1\", field, \"false\"));\n      assertU(adoc(\"id\", \"2\", field, \"true\"));\n      assertU(commit());\n      assertQ(req(\"q\", \"*:*\", \"sort\", field+\" asc\"),\n          \"//result/doc[1]/str[@name='id'][.=0]\",\n          \"//result/doc[2]/str[@name='id'][.=1]\",\n          \"//result/doc[3]/str[@name='id'][.=2]\");\n      assertQ(req(\"q\", \"*:*\", \"sort\", field+\" desc\"),\n          \"//result/doc[1]/str[@name='id'][.=2]\",\n          \"//result/doc[2]/str[@name='id'][.=1]\",\n          \"//result/doc[3]/str[@name='id'][.=0]\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"]},"commit2Childs":{"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}