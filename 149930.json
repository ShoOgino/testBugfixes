{"path":"solr/core/src/test/org/apache/solr/search/TestFiltering#testLiveDocsSharing().mjava","commits":[{"id":"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3","date":1485881524,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testLiveDocsSharing().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLiveDocsSharing() throws Exception {\n    clearIndex();\n    for (int i=0; i<20; i++) {\n      for (int repeat=0; repeat < (i%5==0 ? 2 : 1); repeat++) {\n        assertU(adoc(\"id\", Integer.toString(i), \"foo_s\", \"foo\", \"val_i\", Integer.toString(i), \"val_s\", Character.toString((char)('A' + i))));\n      }\n    }\n    assertU(commit());\n\n    String[] queries = {\n        \"foo_s:foo\",\n        \"foo_s:f*\",\n        \"*:*\",\n        \"id:[* TO *]\",\n        \"id:[0 TO 99]\",\n        \"val_i:[0 TO 20]\",\n        \"val_s:[A TO z]\"\n    };\n\n    SolrQueryRequest req = req();\n    try {\n      SolrIndexSearcher searcher = req.getSearcher();\n\n      DocSet live = null;\n      for (String qstr :  queries) {\n        Query q = QParser.getParser(qstr, null, req).getQuery();\n        // System.out.println(\"getting set for \" + q);\n        DocSet set = searcher.getDocSet(q);\n        if (live == null) {\n          live = searcher.getLiveDocs();\n        }\n        assertTrue( set == live);\n\n        QueryCommand cmd = new QueryCommand();\n        cmd.setQuery( QParser.getParser(qstr, null, req).getQuery() );\n        cmd.setLen(random().nextInt(30));\n        cmd.setNeedDocSet(true);\n        QueryResult res = new QueryResult();\n        searcher.search(res, cmd);\n        set = res.getDocSet();\n        assertTrue( set == live );\n\n        cmd.setQuery( QParser.getParser(qstr + \" OR id:0\", null, req).getQuery() );\n        cmd.setFilterList( QParser.getParser(qstr + \" OR id:1\", null, req).getQuery() );\n        res = new QueryResult();\n        searcher.search(res, cmd);\n        set = res.getDocSet();\n        assertTrue( set == live );\n      }\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testLiveDocsSharing().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLiveDocsSharing() throws Exception {\n    clearIndex();\n    for (int i=0; i<20; i++) {\n      for (int repeat=0; repeat < (i%5==0 ? 2 : 1); repeat++) {\n        assertU(adoc(\"id\", Integer.toString(i), \"foo_s\", \"foo\", \"val_i\", Integer.toString(i), \"val_s\", Character.toString((char)('A' + i))));\n      }\n    }\n    assertU(commit());\n\n    String[] queries = {\n        \"foo_s:foo\",\n        \"foo_s:f*\",\n        \"*:*\",\n        \"id:[* TO *]\",\n        \"id:[0 TO 99]\",\n        \"val_i:[0 TO 20]\",\n        \"val_s:[A TO z]\"\n    };\n\n    SolrQueryRequest req = req();\n    try {\n      SolrIndexSearcher searcher = req.getSearcher();\n\n      DocSet live = null;\n      for (String qstr :  queries) {\n        Query q = QParser.getParser(qstr, null, req).getQuery();\n        // System.out.println(\"getting set for \" + q);\n        DocSet set = searcher.getDocSet(q);\n        if (live == null) {\n          live = searcher.getLiveDocs();\n        }\n        assertTrue( set == live);\n\n        QueryCommand cmd = new QueryCommand();\n        cmd.setQuery( QParser.getParser(qstr, null, req).getQuery() );\n        cmd.setLen(random().nextInt(30));\n        cmd.setNeedDocSet(true);\n        QueryResult res = new QueryResult();\n        searcher.search(res, cmd);\n        set = res.getDocSet();\n        assertTrue( set == live );\n\n        cmd.setQuery( QParser.getParser(qstr + \" OR id:0\", null, req).getQuery() );\n        cmd.setFilterList( QParser.getParser(qstr + \" OR id:1\", null, req).getQuery() );\n        res = new QueryResult();\n        searcher.search(res, cmd);\n        set = res.getDocSet();\n        assertTrue( set == live );\n      }\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf29cc8a76949bbcbc15b386a9e46a533f5b3332","date":1527778512,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testLiveDocsSharing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFiltering#testLiveDocsSharing().mjava","sourceNew":"  @Test\n  public void testLiveDocsSharing() throws Exception {\n    clearIndex();\n    for (int i=0; i<20; i++) {\n      for (int repeat=0; repeat < (i%5==0 ? 2 : 1); repeat++) {\n        assertU(adoc(\"id\", Integer.toString(i), \"foo_s\", \"foo\", \"val_i\", Integer.toString(i), \"val_s\", Character.toString((char)('A' + i))));\n      }\n    }\n    assertU(commit());\n\n    String[] queries = {\n        \"foo_s:foo\",\n        \"foo_s:f*\",\n        \"*:*\",\n        \"id:[* TO *]\",\n        \"id:[0 TO 99]\",\n        \"val_i:[0 TO 20]\",\n        \"val_s:[A TO z]\"\n    };\n\n    SolrQueryRequest req = req();\n    try {\n      SolrIndexSearcher searcher = req.getSearcher();\n\n      DocSet live = null;\n      for (String qstr :  queries) {\n        Query q = QParser.getParser(qstr, null, req).getQuery();\n        // System.out.println(\"getting set for \" + q);\n        DocSet set = searcher.getDocSet(q);\n        if (live == null) {\n          live = searcher.getLiveDocSet();\n        }\n        assertTrue( set == live);\n\n        QueryCommand cmd = new QueryCommand();\n        cmd.setQuery( QParser.getParser(qstr, null, req).getQuery() );\n        cmd.setLen(random().nextInt(30));\n        cmd.setNeedDocSet(true);\n        QueryResult res = new QueryResult();\n        searcher.search(res, cmd);\n        set = res.getDocSet();\n        assertTrue( set == live );\n\n        cmd.setQuery( QParser.getParser(qstr + \" OR id:0\", null, req).getQuery() );\n        cmd.setFilterList( QParser.getParser(qstr + \" OR id:1\", null, req).getQuery() );\n        res = new QueryResult();\n        searcher.search(res, cmd);\n        set = res.getDocSet();\n        assertTrue( set == live );\n      }\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLiveDocsSharing() throws Exception {\n    clearIndex();\n    for (int i=0; i<20; i++) {\n      for (int repeat=0; repeat < (i%5==0 ? 2 : 1); repeat++) {\n        assertU(adoc(\"id\", Integer.toString(i), \"foo_s\", \"foo\", \"val_i\", Integer.toString(i), \"val_s\", Character.toString((char)('A' + i))));\n      }\n    }\n    assertU(commit());\n\n    String[] queries = {\n        \"foo_s:foo\",\n        \"foo_s:f*\",\n        \"*:*\",\n        \"id:[* TO *]\",\n        \"id:[0 TO 99]\",\n        \"val_i:[0 TO 20]\",\n        \"val_s:[A TO z]\"\n    };\n\n    SolrQueryRequest req = req();\n    try {\n      SolrIndexSearcher searcher = req.getSearcher();\n\n      DocSet live = null;\n      for (String qstr :  queries) {\n        Query q = QParser.getParser(qstr, null, req).getQuery();\n        // System.out.println(\"getting set for \" + q);\n        DocSet set = searcher.getDocSet(q);\n        if (live == null) {\n          live = searcher.getLiveDocs();\n        }\n        assertTrue( set == live);\n\n        QueryCommand cmd = new QueryCommand();\n        cmd.setQuery( QParser.getParser(qstr, null, req).getQuery() );\n        cmd.setLen(random().nextInt(30));\n        cmd.setNeedDocSet(true);\n        QueryResult res = new QueryResult();\n        searcher.search(res, cmd);\n        set = res.getDocSet();\n        assertTrue( set == live );\n\n        cmd.setQuery( QParser.getParser(qstr + \" OR id:0\", null, req).getQuery() );\n        cmd.setFilterList( QParser.getParser(qstr + \" OR id:1\", null, req).getQuery() );\n        res = new QueryResult();\n        searcher.search(res, cmd);\n        set = res.getDocSet();\n        assertTrue( set == live );\n      }\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"]},"commit2Childs":{"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}