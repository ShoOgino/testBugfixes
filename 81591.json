{"path":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","pathOld":"modules/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","sourceNew":"  public void testNonConvertableStringsWithoutInject() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"12345 #$%@#^%&\"));\n    TokenStream filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\" });\n    \n    // should have something after the stream\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"12345 #$%@#^%& hello\"));\n    filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\", \"HL\" });\n  }\n\n","sourceOld":"  public void testNonConvertableStringsWithoutInject() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"12345 #$%@#^%&\"));\n    TokenStream filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\" });\n    \n    // should have something after the stream\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"12345 #$%@#^%& hello\"));\n    filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\", \"HL\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","sourceNew":"  public void testNonConvertableStringsWithoutInject() throws Exception {\n    TokenStream stream = whitespaceTokenizer(\"12345 #$%@#^%&\");\n    TokenStream filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\" });\n    \n    // should have something after the stream\n    stream = whitespaceTokenizer(\"12345 #$%@#^%& hello\");\n    filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\", \"HL\" });\n  }\n\n","sourceOld":"  public void testNonConvertableStringsWithoutInject() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"12345 #$%@#^%&\"));\n    TokenStream filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\" });\n    \n    // should have something after the stream\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\"12345 #$%@#^%& hello\"));\n    filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\", \"HL\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testNonConvertableStringsWithoutInject().mjava","sourceNew":"  public void testNonConvertableStringsWithoutInject() throws Exception {\n    TokenStream stream = whitespaceMockTokenizer(\"12345 #$%@#^%&\");\n    TokenStream filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\" });\n    \n    // should have something after the stream\n    stream = whitespaceMockTokenizer(\"12345 #$%@#^%& hello\");\n    filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\", \"HL\" });\n  }\n\n","sourceOld":"  public void testNonConvertableStringsWithoutInject() throws Exception {\n    TokenStream stream = whitespaceTokenizer(\"12345 #$%@#^%&\");\n    TokenStream filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\" });\n    \n    // should have something after the stream\n    stream = whitespaceTokenizer(\"12345 #$%@#^%& hello\");\n    filter = new DoubleMetaphoneFilter(stream, 8, false);\n    assertTokenStreamContents(filter, new String[] { \"12345\", \"#$%@#^%&\", \"HL\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}