{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendarLV(LevelledValue).mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendarLV(LevelledValue).mjava","pathOld":"/dev/null","sourceNew":"  private Calendar toCalendarLV(LevelledValue lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefixLV(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefixLV(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = yearLevel+1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb53c8e9da2afe33252ee698dda412264252cfa7","date":1418531581,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendar(UnitNRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toCalendarLV(LevelledValue).mjava","sourceNew":"  /** Converts the {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape} shape to a\n   * corresponding Calendar that is cleared below its level. */\n  public Calendar toCalendar(UnitNRShape lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefix(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefix(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = yearLevel+1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","sourceOld":"  private Calendar toCalendarLV(LevelledValue lv) {\n    if (lv.getLevel() == 0)\n      return newCal();\n    if (comparePrefixLV(lv, minLV) <= 0) {//shouldn't typically happen; sometimes in a debugger\n      return (Calendar) MINCAL.clone();//full precision; truncation would cause underflow\n    }\n    assert comparePrefixLV(lv, maxLV) <= 0;\n    Calendar cal = newCal();\n\n    int yearAdj = lv.getValAtLevel(1) * 1_000_000;\n    if (lv.getLevel() > 1) {\n      yearAdj += lv.getValAtLevel(2) * 1000;\n      if (lv.getLevel() > 2) {\n        yearAdj += lv.getValAtLevel(3);\n      }\n    }\n    if (yearAdj > AD_YEAR_BASE) {\n      cal.set(Calendar.ERA, 1);\n      cal.set(Calendar.YEAR, yearAdj - AD_YEAR_BASE);//setting the year resets the era\n    } else {\n      cal.set(Calendar.ERA, 0);//we assert this \"sticks\" at the end\n      cal.set(Calendar.YEAR, (AD_YEAR_BASE - yearAdj) + 1);\n    }\n    for (int level = yearLevel+1; level <= lv.getLevel(); level++) {\n      int field = FIELD_BY_LEVEL[level];\n      cal.set(field, lv.getValAtLevel(level) + cal.getActualMinimum(field));\n    }\n    assert yearAdj > AD_YEAR_BASE || ((Calendar)cal.clone()).get(Calendar.ERA) == 0 : \"ERA / YEAR underflow\";\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"cb53c8e9da2afe33252ee698dda412264252cfa7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}