{"path":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorable).mjava","commits":[{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","sourceNew":"    @Override\n    public void setScorer(Scorable scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      scorer = new FilterScorable(scorer) {\n        @Override\n        public void setMinCompetitiveScore(float minScore) {\n          // Ignore calls to setMinCompetitiveScore so that if we wrap two\n          // collectors and one of them wants to skip low-scoring hits, then\n          // the other collector still sees all hits. We could try to reconcile\n          // min scores and take the maximum min score across collectors, but\n          // this is very unlikely to be helpful in practice.\n        }\n\n      };\n      for (int i = 0; i < numCollectors; ++i) {\n        final LeafCollector c = collectors[i];\n        c.setScorer(scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      scorer = new FilterScorer(scorer) {\n        @Override\n        public void setMinCompetitiveScore(float minScore) {\n          // Ignore calls to setMinCompetitiveScore so that if we wrap two\n          // collectors and one of them wants to skip low-scoring hits, then\n          // the other collector still sees all hits. We could try to reconcile\n          // min scores and take the maximum min score across collectors, but\n          // this is very unlikely to be helpful in practice.\n        }\n        @Override\n        public float getMaxScore(int upTo) throws IOException {\n          return in.getMaxScore(upTo);\n        }\n      };\n      for (int i = 0; i < numCollectors; ++i) {\n        final LeafCollector c = collectors[i];\n        c.setScorer(scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"063dae9421f2da2fe272aee10b891f49d21538bd","date":1592500789,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorable).mjava","sourceNew":"    @Override\n    public void setScorer(Scorable scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      if (skipNonCompetitiveScores) {\n        for (int i = 0; i < collectors.length; ++i) {\n          final LeafCollector c = collectors[i];\n          if (c != null) {\n            c.setScorer(new MinCompetitiveScoreAwareScorable(scorer,  i,  minScores));\n          }\n        }\n      } else {\n        scorer = new FilterScorable(scorer) {\n          @Override\n          public void setMinCompetitiveScore(float minScore) throws IOException {\n            // Ignore calls to setMinCompetitiveScore so that if we wrap two\n            // collectors and one of them wants to skip low-scoring hits, then\n            // the other collector still sees all hits.\n          }\n\n        };\n        for (int i = 0; i < collectors.length; ++i) {\n          final LeafCollector c = collectors[i];\n          if (c != null) {\n            c.setScorer(scorer);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setScorer(Scorable scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      scorer = new FilterScorable(scorer) {\n        @Override\n        public void setMinCompetitiveScore(float minScore) {\n          // Ignore calls to setMinCompetitiveScore so that if we wrap two\n          // collectors and one of them wants to skip low-scoring hits, then\n          // the other collector still sees all hits. We could try to reconcile\n          // min scores and take the maximum min score across collectors, but\n          // this is very unlikely to be helpful in practice.\n        }\n\n      };\n      for (int i = 0; i < numCollectors; ++i) {\n        final LeafCollector c = collectors[i];\n        c.setScorer(scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"063dae9421f2da2fe272aee10b891f49d21538bd":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["063dae9421f2da2fe272aee10b891f49d21538bd"]},"commit2Childs":{"063dae9421f2da2fe272aee10b891f49d21538bd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["063dae9421f2da2fe272aee10b891f49d21538bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}