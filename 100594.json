{"path":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","commits":[{"id":"cf0b1b21012d341c80a1f3975cf88823f0fe95a9","date":1316016056,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","sourceNew":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<Object, CacheEntry<K,V>>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n  }\n\n","sourceOld":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<Object, CacheEntry<K,V>>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","sourceNew":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n  }\n\n","sourceOld":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<Object, CacheEntry<K,V>>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c5044c9bb1518e7a13c1c5385a21325ae343056","date":1479187798,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","sourceNew":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n    this.ramLowerWatermark = Long.MIN_VALUE;\n    this.ramUpperWatermark = Long.MAX_VALUE;\n  }\n\n","sourceOld":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21019aa828c8c9b0153877543a8b3f200bf2ca19","date":1479224450,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","sourceNew":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n    this.ramLowerWatermark = Long.MIN_VALUE;\n    this.ramUpperWatermark = Long.MAX_VALUE;\n  }\n\n","sourceOld":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce13e934d6cfdcc82d51e85de460cf9790e97566","date":1563877281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","sourceNew":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    setRunCleanupThread(runCleanupThread);\n    this.ramLowerWatermark = Long.MIN_VALUE;\n    this.ramUpperWatermark = Long.MAX_VALUE;\n  }\n\n","sourceOld":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    if (runCleanupThread) {\n      cleanupThread = new CleanupThread(this);\n      cleanupThread.start();\n    }\n    this.ramLowerWatermark = Long.MIN_VALUE;\n    this.ramUpperWatermark = Long.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","date":1568645407,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener[K,V]).mjava","sourceNew":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    this(upperWaterMark, lowerWaterMark, acceptableWatermark, initialSize, runCleanupThread,\n        runNewThreadForCleanup, evictionListener, -1);\n  }\n\n","sourceOld":"  public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,\n                            int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,\n                            EvictionListener<K,V> evictionListener) {\n    if (upperWaterMark < 1) throw new IllegalArgumentException(\"upperWaterMark must be > 0\");\n    if (lowerWaterMark >= upperWaterMark)\n      throw new IllegalArgumentException(\"lowerWaterMark must be  < upperWaterMark\");\n    map = new ConcurrentHashMap<>(initialSize);\n    newThreadForCleanup = runNewThreadForCleanup;\n    this.upperWaterMark = upperWaterMark;\n    this.lowerWaterMark = lowerWaterMark;\n    this.acceptableWaterMark = acceptableWatermark;\n    this.evictionListener = evictionListener;\n    setRunCleanupThread(runCleanupThread);\n    this.ramLowerWatermark = Long.MIN_VALUE;\n    this.ramUpperWatermark = Long.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf0b1b21012d341c80a1f3975cf88823f0fe95a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cf0b1b21012d341c80a1f3975cf88823f0fe95a9"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7c5044c9bb1518e7a13c1c5385a21325ae343056"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["7c5044c9bb1518e7a13c1c5385a21325ae343056"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"7c5044c9bb1518e7a13c1c5385a21325ae343056":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"cf0b1b21012d341c80a1f3975cf88823f0fe95a9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["21019aa828c8c9b0153877543a8b3f200bf2ca19","7c5044c9bb1518e7a13c1c5385a21325ae343056"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":[],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf0b1b21012d341c80a1f3975cf88823f0fe95a9"],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"7c5044c9bb1518e7a13c1c5385a21325ae343056":["21019aa828c8c9b0153877543a8b3f200bf2ca19","ce13e934d6cfdcc82d51e85de460cf9790e97566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21019aa828c8c9b0153877543a8b3f200bf2ca19","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}