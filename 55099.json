{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed)\n      throw new IOException(\"cannot sync after crash\");\n    unSyncedFiles.removeAll(names);\n    if (LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed)\n      throw new IOException(\"cannot sync after crash\");\n    unSyncedFiles.removeAll(names);\n    if (LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    unSyncedFiles.removeAll(names);\n    if (LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed)\n      throw new IOException(\"cannot sync after crash\");\n    unSyncedFiles.removeAll(names);\n    if (LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    unSyncedFiles.removeAll(names);\n    if (LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed)\n      throw new IOException(\"cannot sync after crash\");\n    unSyncedFiles.removeAll(names);\n    if (LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"662ed1f7bc3d1f0b500f162911867ec2145ab124","date":1352417699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    unSyncedFiles.removeAll(names);\n    // TODO: need to improve hack to be OK w/\n    // RateLimitingDirWrapper in between...\n    if (true || LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    unSyncedFiles.removeAll(names);\n    if (LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    unSyncedFiles.removeAll(names);\n    // TODO: need to improve hack to be OK w/\n    // RateLimitingDirWrapper in between...\n    if (true || LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    unSyncedFiles.removeAll(names);\n    if (LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bac2bd9d901ec1ee7111a77c8e616d745fb2a362","date":1368131212,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    // don't wear out our hardware so much in tests.\n    if (LuceneTestCase.rarely(randomState) || mustSync()) {\n      for (String name : names) {\n        // randomly fail with IOE on any file\n        maybeThrowIOException(name);\n        delegate.sync(Collections.singleton(name));\n        unSyncedFiles.remove(name);\n      }\n    } else {\n      unSyncedFiles.removeAll(names);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    unSyncedFiles.removeAll(names);\n    // TODO: need to improve hack to be OK w/\n    // RateLimitingDirWrapper in between...\n    if (true || LuceneTestCase.rarely(randomState) || delegate instanceof NRTCachingDirectory) {\n      // don't wear out our hardware so much in tests.\n      delegate.sync(names);\n    }\n  }\n\n","bugFix":null,"bugIntro":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"399ef3ff6c22f0627c82ac65f32726f3587a2aa1","date":1379005174,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    // don't wear out our hardware so much in tests.\n    if (LuceneTestCase.rarely(randomState) || mustSync()) {\n      for (String name : names) {\n        // randomly fail with IOE on any file\n        maybeThrowIOException(name);\n        in.sync(Collections.singleton(name));\n        unSyncedFiles.remove(name);\n      }\n    } else {\n      unSyncedFiles.removeAll(names);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    // don't wear out our hardware so much in tests.\n    if (LuceneTestCase.rarely(randomState) || mustSync()) {\n      for (String name : names) {\n        // randomly fail with IOE on any file\n        maybeThrowIOException(name);\n        delegate.sync(Collections.singleton(name));\n        unSyncedFiles.remove(name);\n      }\n    } else {\n      unSyncedFiles.removeAll(names);\n    }\n  }\n\n","bugFix":null,"bugIntro":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98b44240f64a2d6935543ff25faee750b29204eb","date":1424972040,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    // always pass thru fsync, directories rely on this.\n    // 90% of time, we use DisableFsyncFS which omits the real calls.\n    for (String name : names) {\n      // randomly fail with IOE on any file\n      maybeThrowIOException(name);\n      in.sync(Collections.singleton(name));\n      unSyncedFiles.remove(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    // don't wear out our hardware so much in tests.\n    if (LuceneTestCase.rarely(randomState) || mustSync()) {\n      for (String name : names) {\n        // randomly fail with IOE on any file\n        maybeThrowIOException(name);\n        in.sync(Collections.singleton(name));\n        unSyncedFiles.remove(name);\n      }\n    } else {\n      unSyncedFiles.removeAll(names);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98a04f56464afdffd4c430d6c47a0c868a38354e","date":1424985833,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    // always pass thru fsync, directories rely on this.\n    // 90% of time, we use DisableFsyncFS which omits the real calls.\n    for (String name : names) {\n      // randomly fail with IOE on any file\n      maybeThrowIOException(name);\n      in.sync(Collections.singleton(name));\n      unSyncedFiles.remove(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    // don't wear out our hardware so much in tests.\n    if (LuceneTestCase.rarely(randomState) || mustSync()) {\n      for (String name : names) {\n        // randomly fail with IOE on any file\n        maybeThrowIOException(name);\n        in.sync(Collections.singleton(name));\n        unSyncedFiles.remove(name);\n      }\n    } else {\n      unSyncedFiles.removeAll(names);\n    }\n  }\n\n","bugFix":["bac2bd9d901ec1ee7111a77c8e616d745fb2a362","399ef3ff6c22f0627c82ac65f32726f3587a2aa1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    // always pass thru fsync, directories rely on this.\n    // 90% of time, we use DisableFsyncFS which omits the real calls.\n    for (String name : names) {\n      // randomly fail with IOE on any file\n      maybeThrowIOException(name);\n      in.sync(Collections.singleton(name));\n      unSyncedFiles.remove(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void sync(Collection<String> names) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n    if (crashed) {\n      throw new IOException(\"cannot sync after crash\");\n    }\n    // don't wear out our hardware so much in tests.\n    if (LuceneTestCase.rarely(randomState) || mustSync()) {\n      for (String name : names) {\n        // randomly fail with IOE on any file\n        maybeThrowIOException(name);\n        in.sync(Collections.singleton(name));\n        unSyncedFiles.remove(name);\n      }\n    } else {\n      unSyncedFiles.removeAll(names);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["399ef3ff6c22f0627c82ac65f32726f3587a2aa1","98a04f56464afdffd4c430d6c47a0c868a38354e"],"98a04f56464afdffd4c430d6c47a0c868a38354e":["399ef3ff6c22f0627c82ac65f32726f3587a2aa1","98b44240f64a2d6935543ff25faee750b29204eb"],"662ed1f7bc3d1f0b500f162911867ec2145ab124":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4356000e349e38c9fb48034695b7c309abd54557"],"4356000e349e38c9fb48034695b7c309abd54557":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","662ed1f7bc3d1f0b500f162911867ec2145ab124"],"399ef3ff6c22f0627c82ac65f32726f3587a2aa1":["bac2bd9d901ec1ee7111a77c8e616d745fb2a362"],"bac2bd9d901ec1ee7111a77c8e616d745fb2a362":["662ed1f7bc3d1f0b500f162911867ec2145ab124"],"98b44240f64a2d6935543ff25faee750b29204eb":["399ef3ff6c22f0627c82ac65f32726f3587a2aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98a04f56464afdffd4c430d6c47a0c868a38354e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"98a04f56464afdffd4c430d6c47a0c868a38354e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"662ed1f7bc3d1f0b500f162911867ec2145ab124":["407687e67faf6e1f02a211ca078d8e3eed631027","bac2bd9d901ec1ee7111a77c8e616d745fb2a362"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["662ed1f7bc3d1f0b500f162911867ec2145ab124","407687e67faf6e1f02a211ca078d8e3eed631027"],"4356000e349e38c9fb48034695b7c309abd54557":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4356000e349e38c9fb48034695b7c309abd54557"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"399ef3ff6c22f0627c82ac65f32726f3587a2aa1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","98a04f56464afdffd4c430d6c47a0c868a38354e","98b44240f64a2d6935543ff25faee750b29204eb"],"bac2bd9d901ec1ee7111a77c8e616d745fb2a362":["399ef3ff6c22f0627c82ac65f32726f3587a2aa1"],"98b44240f64a2d6935543ff25faee750b29204eb":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}