{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","commits":[{"id":"1bf853f0385a540ee0fb220fd272f2c362432294","date":1311520789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testReplicateAfterStartup().mjava","sourceNew":"  private void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: the master only replicates after startup now!\n    // revert that change.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  @Test\n  public void testReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: the master only replicates after startup now!\n    // revert that change.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","sourceNew":"  private void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: the master only replicates after startup now!\n    // revert that change.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: the master only replicates after startup now!\n    // revert that change.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","sourceNew":"  private void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: the master only replicates after startup now!\n    // revert that change.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: the master only replicates after startup now!\n    // revert that change.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","sourceNew":"  private void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: the master only replicates after startup now!\n    // revert that change.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: the master only replicates after startup now!\n    // revert that change.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","sourceNew":"  private void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: the master only replicates after startup now!\n    // revert that change.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: the master only replicates after startup now!\n    // revert that change.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1432a0acddbd504d67af13ed2d8cf80e43abf049","date":1361579532,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: the master only replicates after startup now!\n    // revert that change.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: the master only replicates after startup now!\n    // revert that change.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":["1bf853f0385a540ee0fb220fd272f2c362432294"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0821fb2632567b97517fef4d350c09297f996615","date":1361720082,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // NOTE: the master only replicates after startup now!\n    // revert that change.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createAndStartJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","bugFix":["efab8c7286516f937e01cc69275841cfb09d90b9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createAndStartJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    @SuppressWarnings({\"rawtypes\"})\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createAndStartJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterStartup().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop follower\n    followerJetty.stop();\n\n    nDocs--;\n    leaderClient.deleteByQuery(\"*:*\");\n\n    leaderClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on leader\n    leader.copyConfigFile(CONF_DIR + \"solrconfig-leader2.xml\",\n                          \"solrconfig.xml\");\n\n    leaderJetty.stop();\n\n    leaderJetty = createAndStartJetty(leader);\n    leaderClient.close();\n    leaderClient = createNewSolrClient(leaderJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(leaderClient, \"id\", i, \"name\", \"name = \" + i);\n\n    leaderClient.commit();\n    \n    @SuppressWarnings({\"rawtypes\"})\n    NamedList leaderQueryRsp = rQuery(nDocs, \"*:*\", leaderClient);\n    SolrDocumentList leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get(\"response\");\n    assertEquals(nDocs, leaderQueryResult.getNumFound());\n    \n\n    follower.setTestPort(leaderJetty.getLocalPort());\n    follower.copyConfigFile(follower.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start follower\n    followerJetty = createAndStartJetty(follower);\n    followerClient.close();\n    followerClient = createNewSolrClient(followerJetty.getLocalPort());\n\n    //get docs from follower and check if number is equal to leader\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList followerQueryRsp = rQuery(nDocs, \"*:*\", followerClient);\n    SolrDocumentList followerQueryResult = (SolrDocumentList) followerQueryRsp.get(\"response\");\n    assertEquals(nDocs, followerQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterStartup() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n\n    masterClient.commit();\n\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master2.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createAndStartJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    \n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n    \n    @SuppressWarnings({\"rawtypes\"})\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n    \n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //get docs from slave and check if number is equal to master\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bf853f0385a540ee0fb220fd272f2c362432294":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["e98520789adb1d5ad05afb4956eca0944a929688"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["1bf853f0385a540ee0fb220fd272f2c362432294","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["1bf853f0385a540ee0fb220fd272f2c362432294"],"bafca15d8e408346a67f4282ad1143b88023893b":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"e98520789adb1d5ad05afb4956eca0944a929688":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["0821fb2632567b97517fef4d350c09297f996615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"f2126b84bd093fa3d921582a109a0ee578c28126":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"0821fb2632567b97517fef4d350c09297f996615":["1432a0acddbd504d67af13ed2d8cf80e43abf049"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"1432a0acddbd504d67af13ed2d8cf80e43abf049":["d9405f486872f1e416304dfe389741f4ee2f8a4d"]},"commit2Childs":{"1bf853f0385a540ee0fb220fd272f2c362432294":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e98520789adb1d5ad05afb4956eca0944a929688"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f2126b84bd093fa3d921582a109a0ee578c28126","1432a0acddbd504d67af13ed2d8cf80e43abf049"],"e98520789adb1d5ad05afb4956eca0944a929688":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bf853f0385a540ee0fb220fd272f2c362432294"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"0821fb2632567b97517fef4d350c09297f996615":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"1432a0acddbd504d67af13ed2d8cf80e43abf049":["0821fb2632567b97517fef4d350c09297f996615"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}