{"path":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","commits":[{"id":"4c623a7f72be34d6c45bee682028c50327d9e4b7","date":1467791293,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    String collectionName = \"backuprestore\";\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(collectionName, \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(collectionName);\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(collectionName);\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(collectionName) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(collectionName);\n    }\n\n    testBackupAndRestore(collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ad92550399520cc0148c3ee5ca087706f12da4","date":1478270512,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    int numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    int numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","bugFix":null,"bugIntro":["fe190f27cc4076d6681cb10c6a326503ad5a17e7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    int numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    int numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    \n    CollectionAdminRequest.Create create = isImplicit ?\n      // NOTE: use shard list with same # of shards as NUM_SHARDS; we assume this later\n      CollectionAdminRequest.createCollectionWithImplicitRouter(getCollectionName(), \"conf1\", \"shard1,shard2\", replFactor, numTlogReplicas, numPullReplicas) :\n      CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    \n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    int numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    int numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","bugFix":null,"bugIntro":["076d58da25128e8a4c511abf07c5d86c4ebddcbf","076d58da25128e8a4c511abf07c5d86c4ebddcbf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    int numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    int numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    \n    CollectionAdminRequest.Create create = isImplicit ?\n      // NOTE: use shard list with same # of shards as NUM_SHARDS; we assume this later\n      CollectionAdminRequest.createCollectionWithImplicitRouter(getCollectionName(), \"conf1\", \"shard1,shard2\", replFactor, numTlogReplicas, numPullReplicas) :\n      CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    \n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    int numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    int numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    int numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    int numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    \n    CollectionAdminRequest.Create create = isImplicit ?\n      // NOTE: use shard list with same # of shards as NUM_SHARDS; we assume this later\n      CollectionAdminRequest.createCollectionWithImplicitRouter(getCollectionName(), \"conf1\", \"shard1,shard2\", replFactor, numTlogReplicas, numPullReplicas) :\n      CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    \n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    int numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    int numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    int numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    int numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    \n    CollectionAdminRequest.Create create = isImplicit ?\n      // NOTE: use shard list with same # of shards as NUM_SHARDS; we assume this later\n      CollectionAdminRequest.createCollectionWithImplicitRouter(getCollectionName(), \"conf1\", \"shard1,shard2\", replFactor, numTlogReplicas, numPullReplicas) :\n      CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    \n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor);\n    if (NUM_SHARDS * replFactor > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode(NUM_SHARDS);//just to assert it survives the restoration\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setNumShards(null);//erase it. TODO suggest a new createCollectionWithImplicitRouter method\n      create.setShards(\"shard1,shard2\"); // however still same number as NUM_SHARDS; we assume this later\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (!isImplicit && random().nextBoolean()) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe190f27cc4076d6681cb10c6a326503ad5a17e7","date":1509475399,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    replFactor = TestUtil.nextInt(random(), 1, 2);\n    numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    \n    CollectionAdminRequest.Create create = isImplicit ?\n      // NOTE: use shard list with same # of shards as NUM_SHARDS; we assume this later\n      CollectionAdminRequest.createCollectionWithImplicitRouter(getCollectionName(), \"conf1\", \"shard1,shard2\", replFactor, numTlogReplicas, numPullReplicas) :\n      CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    \n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    int replFactor = TestUtil.nextInt(random(), 1, 2);\n    int numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    int numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    \n    CollectionAdminRequest.Create create = isImplicit ?\n      // NOTE: use shard list with same # of shards as NUM_SHARDS; we assume this later\n      CollectionAdminRequest.createCollectionWithImplicitRouter(getCollectionName(), \"conf1\", \"shard1,shard2\", replFactor, numTlogReplicas, numPullReplicas) :\n      CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    \n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","bugFix":["c5c99ad021f3da085fcb66220598a8f91dc5e453","61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    replFactor = TestUtil.nextInt(random(), 1, 2);\n    numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    \n    CollectionAdminRequest.Create create = isImplicit ?\n      // NOTE: use shard list with same # of shards as NUM_SHARDS; we assume this later\n      CollectionAdminRequest.createCollectionWithImplicitRouter(getCollectionName(), \"conf1\", \"shard1,shard2\", replFactor, numTlogReplicas, numPullReplicas) :\n      CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    \n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    replFactor = TestUtil.nextInt(random(), 1, 2);\n    numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    \n    CollectionAdminRequest.Create create = isImplicit ?\n      // NOTE: use shard list with same # of shards as NUM_SHARDS; we assume this later\n      CollectionAdminRequest.createCollectionWithImplicitRouter(getCollectionName(), \"conf1\", \"shard1,shard2\", replFactor, numTlogReplicas, numPullReplicas) :\n      CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    \n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    replFactor = TestUtil.nextInt(random(), 1, 2);\n    numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    \n    CollectionAdminRequest.Create create = isImplicit ?\n      // NOTE: use shard list with same # of shards as NUM_SHARDS; we assume this later\n      CollectionAdminRequest.createCollectionWithImplicitRouter(getCollectionName(), \"conf1\", \"shard1,shard2\", replFactor, numTlogReplicas, numPullReplicas) :\n      CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    \n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    boolean isImplicit = random().nextBoolean();\n    boolean doSplitShardOperation = !isImplicit && random().nextBoolean();\n    replFactor = TestUtil.nextInt(random(), 1, 2);\n    numTlogReplicas = TestUtil.nextInt(random(), 0, 1);\n    numPullReplicas = TestUtil.nextInt(random(), 0, 1);\n    \n    CollectionAdminRequest.Create create = isImplicit ?\n      // NOTE: use shard list with same # of shards as NUM_SHARDS; we assume this later\n      CollectionAdminRequest.createCollectionWithImplicitRouter(getCollectionName(), \"conf1\", \"shard1,shard2\", replFactor, numTlogReplicas, numPullReplicas) :\n      CollectionAdminRequest.createCollection(getCollectionName(), \"conf1\", NUM_SHARDS, replFactor, numTlogReplicas, numPullReplicas);\n    \n    if (NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) > cluster.getJettySolrRunners().size() || random().nextBoolean()) {\n      create.setMaxShardsPerNode((int)Math.ceil(NUM_SHARDS * (replFactor + numTlogReplicas + numPullReplicas) / cluster.getJettySolrRunners().size()));//just to assert it survives the restoration\n      if (doSplitShardOperation) {\n        create.setMaxShardsPerNode(create.getMaxShardsPerNode() * 2);\n      }\n    }\n    if (random().nextBoolean()) {\n      create.setAutoAddReplicas(true);//just to assert it survives the restoration\n    }\n    Properties coreProps = new Properties();\n    coreProps.put(\"customKey\", \"customValue\");//just to assert it survives the restoration\n    create.setProperties(coreProps);\n    if (isImplicit) { //implicit router\n      create.setRouterField(\"shard_s\");\n    } else {//composite id router\n      if (random().nextBoolean()) {\n        create.setRouterField(\"shard_s\");\n      }\n    }\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    create.process(solrClient);\n\n    indexDocs(getCollectionName());\n\n    if (doSplitShardOperation) {\n      // shard split the first shard\n      int prevActiveSliceCount = getActiveSliceCount(getCollectionName());\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(getCollectionName());\n      splitShard.setShardName(\"shard1\");\n      splitShard.process(solrClient);\n      // wait until we see one more active slice...\n      for (int i = 0; getActiveSliceCount(getCollectionName()) != prevActiveSliceCount + 1; i++) {\n        assertTrue(i < 30);\n        Thread.sleep(500);\n      }\n      // issue a hard commit.  Split shard does a soft commit which isn't good enough for the backup/snapshooter to see\n      solrClient.commit(getCollectionName());\n    }\n\n    testBackupAndRestore(getCollectionName());\n    testConfigBackupOnly(\"conf1\", getCollectionName());\n    testInvalidPath(getCollectionName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["fe190f27cc4076d6681cb10c6a326503ad5a17e7","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"61c45e99cf6676da48f19d7511c73712ad39402b":["b2ad92550399520cc0148c3ee5ca087706f12da4"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["61c45e99cf6676da48f19d7511c73712ad39402b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["fe190f27cc4076d6681cb10c6a326503ad5a17e7"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b2ad92550399520cc0148c3ee5ca087706f12da4"],"3217321f3e1d7922898c6c633d17acfa840d6875":["61c45e99cf6676da48f19d7511c73712ad39402b","ac97ea104d893f16aab430d9904473bc1f233f3c"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["61c45e99cf6676da48f19d7511c73712ad39402b","3217321f3e1d7922898c6c633d17acfa840d6875"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4c623a7f72be34d6c45bee682028c50327d9e4b7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b2ad92550399520cc0148c3ee5ca087706f12da4","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2ad92550399520cc0148c3ee5ca087706f12da4":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"fe190f27cc4076d6681cb10c6a326503ad5a17e7":["3217321f3e1d7922898c6c633d17acfa840d6875"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b2ad92550399520cc0148c3ee5ca087706f12da4"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61c45e99cf6676da48f19d7511c73712ad39402b":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"3217321f3e1d7922898c6c633d17acfa840d6875":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","fe190f27cc4076d6681cb10c6a326503ad5a17e7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c623a7f72be34d6c45bee682028c50327d9e4b7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b2ad92550399520cc0148c3ee5ca087706f12da4":["61c45e99cf6676da48f19d7511c73712ad39402b","199dfa410f1fdbfd3294106b04096cce5ed34b21","e9017cf144952056066919f1ebc7897ff9bd71b1"],"fe190f27cc4076d6681cb10c6a326503ad5a17e7":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}