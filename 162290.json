{"path":"solr/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#init(PluginInfo).mjava","commits":[{"id":"828f199c76d70a5ea0ddc4d9605063f1d323a28d","date":1308738340,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#init(PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  public void init(PluginInfo info) {\r\n\r\n    if (info.initArgs != null) {\r\n      Object so = info.initArgs.get(INIT_SO_TIMEOUT);\r\n      if (so != null) {\r\n        soTimeout = (Integer) so;\r\n        log.info(\"Setting socketTimeout to: \" + soTimeout);\r\n      }\r\n\r\n      Object urlScheme = info.initArgs.get(INIT_URL_SCHEME);\r\n      if (urlScheme != null) {\r\n        scheme = urlScheme + \"://\";\r\n        log.info(\"Setting urlScheme to: \" + urlScheme);\r\n      }\r\n      Object co = info.initArgs.get(INIT_CONNECTION_TIMEOUT);\r\n        if (co != null) {\r\n          connectionTimeout = (Integer) co;\r\n          log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\r\n        }\r\n    }\r\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\r\n    mgr.getParams().setDefaultMaxConnectionsPerHost(20);\r\n    mgr.getParams().setMaxTotalConnections(10000);\r\n    mgr.getParams().setConnectionTimeout(connectionTimeout);\r\n    mgr.getParams().setSoTimeout(soTimeout);\r\n    // mgr.getParams().setStaleCheckingEnabled(false);\r\n\r\n    client = new HttpClient(mgr);\r\n\r\n    // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\r\n    DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\r\n    client.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\r\n\r\n    try {\r\n      loadbalancer = new LBHttpSolrServer(client);\r\n    } catch (MalformedURLException e) {\r\n      // should be impossible since we're not passing any URLs here\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\r\n    }\r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#init(PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  public void init(PluginInfo info) {\r\n\r\n    if (info.initArgs != null) {\r\n      Object so = info.initArgs.get(INIT_SO_TIMEOUT);\r\n      if (so != null) {\r\n        soTimeout = (Integer) so;\r\n        log.info(\"Setting socketTimeout to: \" + soTimeout);\r\n      }\r\n\r\n      Object urlScheme = info.initArgs.get(INIT_URL_SCHEME);\r\n      if (urlScheme != null) {\r\n        scheme = urlScheme + \"://\";\r\n        log.info(\"Setting urlScheme to: \" + urlScheme);\r\n      }\r\n      Object co = info.initArgs.get(INIT_CONNECTION_TIMEOUT);\r\n        if (co != null) {\r\n          connectionTimeout = (Integer) co;\r\n          log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\r\n        }\r\n    }\r\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\r\n    mgr.getParams().setDefaultMaxConnectionsPerHost(20);\r\n    mgr.getParams().setMaxTotalConnections(10000);\r\n    mgr.getParams().setConnectionTimeout(connectionTimeout);\r\n    mgr.getParams().setSoTimeout(soTimeout);\r\n    // mgr.getParams().setStaleCheckingEnabled(false);\r\n\r\n    client = new HttpClient(mgr);\r\n\r\n    // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\r\n    DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\r\n    client.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\r\n\r\n    try {\r\n      loadbalancer = new LBHttpSolrServer(client);\r\n    } catch (MalformedURLException e) {\r\n      // should be impossible since we're not passing any URLs here\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\r\n    }\r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#init(PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  public void init(PluginInfo info) {\r\n\r\n    if (info.initArgs != null) {\r\n      Object so = info.initArgs.get(INIT_SO_TIMEOUT);\r\n      if (so != null) {\r\n        soTimeout = (Integer) so;\r\n        log.info(\"Setting socketTimeout to: \" + soTimeout);\r\n      }\r\n\r\n      Object urlScheme = info.initArgs.get(INIT_URL_SCHEME);\r\n      if (urlScheme != null) {\r\n        scheme = urlScheme + \"://\";\r\n        log.info(\"Setting urlScheme to: \" + urlScheme);\r\n      }\r\n      Object co = info.initArgs.get(INIT_CONNECTION_TIMEOUT);\r\n        if (co != null) {\r\n          connectionTimeout = (Integer) co;\r\n          log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\r\n        }\r\n    }\r\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\r\n    mgr.getParams().setDefaultMaxConnectionsPerHost(20);\r\n    mgr.getParams().setMaxTotalConnections(10000);\r\n    mgr.getParams().setConnectionTimeout(connectionTimeout);\r\n    mgr.getParams().setSoTimeout(soTimeout);\r\n    // mgr.getParams().setStaleCheckingEnabled(false);\r\n\r\n    client = new HttpClient(mgr);\r\n\r\n    // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\r\n    DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\r\n    client.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\r\n\r\n    try {\r\n      loadbalancer = new LBHttpSolrServer(client);\r\n    } catch (MalformedURLException e) {\r\n      // should be impossible since we're not passing any URLs here\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\r\n    }\r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#init(PluginInfo).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#init(PluginInfo).mjava","sourceNew":"  public void init(PluginInfo info) {\r\n\r\n    if (info.initArgs != null) {\r\n      Object so = info.initArgs.get(INIT_SO_TIMEOUT);\r\n      if (so != null) {\r\n        soTimeout = (Integer) so;\r\n        log.info(\"Setting socketTimeout to: \" + soTimeout);\r\n      }\r\n\r\n      Object urlScheme = info.initArgs.get(INIT_URL_SCHEME);\r\n      if (urlScheme != null) {\r\n        scheme = urlScheme + \"://\";\r\n        log.info(\"Setting urlScheme to: \" + urlScheme);\r\n      }\r\n      Object co = info.initArgs.get(INIT_CONNECTION_TIMEOUT);\r\n        if (co != null) {\r\n          connectionTimeout = (Integer) co;\r\n          log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\r\n        }\r\n    }\r\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\r\n    mgr.getParams().setDefaultMaxConnectionsPerHost(20);\r\n    mgr.getParams().setMaxTotalConnections(10000);\r\n    mgr.getParams().setConnectionTimeout(connectionTimeout);\r\n    mgr.getParams().setSoTimeout(soTimeout);\r\n    // mgr.getParams().setStaleCheckingEnabled(false);\r\n\r\n    client = new HttpClient(mgr);\r\n\r\n    // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\r\n    DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\r\n    client.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\r\n\r\n    try {\r\n      loadbalancer = new LBHttpSolrServer(client);\r\n    } catch (MalformedURLException e) {\r\n      // should be impossible since we're not passing any URLs here\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\r\n    }\r\n\r\n  }\r\n\n","sourceOld":"  public void init(PluginInfo info) {\r\n\r\n    if (info.initArgs != null) {\r\n      Object so = info.initArgs.get(INIT_SO_TIMEOUT);\r\n      if (so != null) {\r\n        soTimeout = (Integer) so;\r\n        log.info(\"Setting socketTimeout to: \" + soTimeout);\r\n      }\r\n\r\n      Object urlScheme = info.initArgs.get(INIT_URL_SCHEME);\r\n      if (urlScheme != null) {\r\n        scheme = urlScheme + \"://\";\r\n        log.info(\"Setting urlScheme to: \" + urlScheme);\r\n      }\r\n      Object co = info.initArgs.get(INIT_CONNECTION_TIMEOUT);\r\n        if (co != null) {\r\n          connectionTimeout = (Integer) co;\r\n          log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\r\n        }\r\n    }\r\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\r\n    mgr.getParams().setDefaultMaxConnectionsPerHost(20);\r\n    mgr.getParams().setMaxTotalConnections(10000);\r\n    mgr.getParams().setConnectionTimeout(connectionTimeout);\r\n    mgr.getParams().setSoTimeout(soTimeout);\r\n    // mgr.getParams().setStaleCheckingEnabled(false);\r\n\r\n    client = new HttpClient(mgr);\r\n\r\n    // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\r\n    DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\r\n    client.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\r\n\r\n    try {\r\n      loadbalancer = new LBHttpSolrServer(client);\r\n    } catch (MalformedURLException e) {\r\n      // should be impossible since we're not passing any URLs here\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\r\n    }\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#init(PluginInfo).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#init(PluginInfo).mjava","sourceNew":"  public void init(PluginInfo info) {\r\n\r\n    if (info.initArgs != null) {\r\n      Object so = info.initArgs.get(INIT_SO_TIMEOUT);\r\n      if (so != null) {\r\n        soTimeout = (Integer) so;\r\n        log.info(\"Setting socketTimeout to: \" + soTimeout);\r\n      }\r\n\r\n      Object urlScheme = info.initArgs.get(INIT_URL_SCHEME);\r\n      if (urlScheme != null) {\r\n        scheme = urlScheme + \"://\";\r\n        log.info(\"Setting urlScheme to: \" + urlScheme);\r\n      }\r\n      Object co = info.initArgs.get(INIT_CONNECTION_TIMEOUT);\r\n        if (co != null) {\r\n          connectionTimeout = (Integer) co;\r\n          log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\r\n        }\r\n    }\r\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\r\n    mgr.getParams().setDefaultMaxConnectionsPerHost(20);\r\n    mgr.getParams().setMaxTotalConnections(10000);\r\n    mgr.getParams().setConnectionTimeout(connectionTimeout);\r\n    mgr.getParams().setSoTimeout(soTimeout);\r\n    // mgr.getParams().setStaleCheckingEnabled(false);\r\n\r\n    client = new HttpClient(mgr);\r\n\r\n    // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\r\n    DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\r\n    client.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\r\n\r\n    try {\r\n      loadbalancer = new LBHttpSolrServer(client);\r\n    } catch (MalformedURLException e) {\r\n      // should be impossible since we're not passing any URLs here\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\r\n    }\r\n\r\n  }\r\n\n","sourceOld":"  public void init(PluginInfo info) {\r\n\r\n    if (info.initArgs != null) {\r\n      Object so = info.initArgs.get(INIT_SO_TIMEOUT);\r\n      if (so != null) {\r\n        soTimeout = (Integer) so;\r\n        log.info(\"Setting socketTimeout to: \" + soTimeout);\r\n      }\r\n\r\n      Object urlScheme = info.initArgs.get(INIT_URL_SCHEME);\r\n      if (urlScheme != null) {\r\n        scheme = urlScheme + \"://\";\r\n        log.info(\"Setting urlScheme to: \" + urlScheme);\r\n      }\r\n      Object co = info.initArgs.get(INIT_CONNECTION_TIMEOUT);\r\n        if (co != null) {\r\n          connectionTimeout = (Integer) co;\r\n          log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\r\n        }\r\n    }\r\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\r\n    mgr.getParams().setDefaultMaxConnectionsPerHost(20);\r\n    mgr.getParams().setMaxTotalConnections(10000);\r\n    mgr.getParams().setConnectionTimeout(connectionTimeout);\r\n    mgr.getParams().setSoTimeout(soTimeout);\r\n    // mgr.getParams().setStaleCheckingEnabled(false);\r\n\r\n    client = new HttpClient(mgr);\r\n\r\n    // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\r\n    DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\r\n    client.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\r\n\r\n    try {\r\n      loadbalancer = new LBHttpSolrServer(client);\r\n    } catch (MalformedURLException e) {\r\n      // should be impossible since we're not passing any URLs here\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\r\n    }\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#init(PluginInfo).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#init(PluginInfo).mjava","sourceNew":"  public void init(PluginInfo info) {\r\n\r\n    if (info.initArgs != null) {\r\n      Object so = info.initArgs.get(INIT_SO_TIMEOUT);\r\n      if (so != null) {\r\n        soTimeout = (Integer) so;\r\n        log.info(\"Setting socketTimeout to: \" + soTimeout);\r\n      }\r\n\r\n      Object urlScheme = info.initArgs.get(INIT_URL_SCHEME);\r\n      if (urlScheme != null) {\r\n        scheme = urlScheme + \"://\";\r\n        log.info(\"Setting urlScheme to: \" + urlScheme);\r\n      }\r\n      Object co = info.initArgs.get(INIT_CONNECTION_TIMEOUT);\r\n        if (co != null) {\r\n          connectionTimeout = (Integer) co;\r\n          log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\r\n        }\r\n    }\r\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\r\n    mgr.getParams().setDefaultMaxConnectionsPerHost(20);\r\n    mgr.getParams().setMaxTotalConnections(10000);\r\n    mgr.getParams().setConnectionTimeout(connectionTimeout);\r\n    mgr.getParams().setSoTimeout(soTimeout);\r\n    // mgr.getParams().setStaleCheckingEnabled(false);\r\n\r\n    client = new HttpClient(mgr);\r\n\r\n    // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\r\n    DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\r\n    client.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\r\n\r\n    try {\r\n      loadbalancer = new LBHttpSolrServer(client);\r\n    } catch (MalformedURLException e) {\r\n      // should be impossible since we're not passing any URLs here\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\r\n    }\r\n\r\n  }\r\n\n","sourceOld":"  public void init(PluginInfo info) {\r\n\r\n    if (info.initArgs != null) {\r\n      Object so = info.initArgs.get(INIT_SO_TIMEOUT);\r\n      if (so != null) {\r\n        soTimeout = (Integer) so;\r\n        log.info(\"Setting socketTimeout to: \" + soTimeout);\r\n      }\r\n\r\n      Object urlScheme = info.initArgs.get(INIT_URL_SCHEME);\r\n      if (urlScheme != null) {\r\n        scheme = urlScheme + \"://\";\r\n        log.info(\"Setting urlScheme to: \" + urlScheme);\r\n      }\r\n      Object co = info.initArgs.get(INIT_CONNECTION_TIMEOUT);\r\n        if (co != null) {\r\n          connectionTimeout = (Integer) co;\r\n          log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\r\n        }\r\n    }\r\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\r\n    mgr.getParams().setDefaultMaxConnectionsPerHost(20);\r\n    mgr.getParams().setMaxTotalConnections(10000);\r\n    mgr.getParams().setConnectionTimeout(connectionTimeout);\r\n    mgr.getParams().setSoTimeout(soTimeout);\r\n    // mgr.getParams().setStaleCheckingEnabled(false);\r\n\r\n    client = new HttpClient(mgr);\r\n\r\n    // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\r\n    DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\r\n    client.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\r\n\r\n    try {\r\n      loadbalancer = new LBHttpSolrServer(client);\r\n    } catch (MalformedURLException e) {\r\n      // should be impossible since we're not passing any URLs here\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\r\n    }\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"c26f00b574427b55127e869b935845554afde1fa":["828f199c76d70a5ea0ddc4d9605063f1d323a28d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","828f199c76d70a5ea0ddc4d9605063f1d323a28d","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}