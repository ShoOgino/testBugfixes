{"path":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#getMinLong(Terms).mjava","commits":[{"id":"0974f33be0e2189e71f36b67f1017f4072b1a126","date":1398347867,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#getMinLong(Terms).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the minimum long value indexed into this\n   *  numeric field. */\n  public static long getMinLong(Terms terms) throws IOException {\n    // All shift=0 terms are sorted first, so we don't need\n    // to filter the incoming terms; we can just get the\n    // min: \n    return NumericUtils.prefixCodedToLong(terms.getMin());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["57e8ca88d92facef1203d69527788ce36e164b7f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#getMinLong(Terms).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the minimum long value indexed into this\n   *  numeric field. */\n  public static long getMinLong(Terms terms) throws IOException {\n    // All shift=0 terms are sorted first, so we don't need\n    // to filter the incoming terms; we can just get the\n    // min: \n    return NumericUtils.prefixCodedToLong(terms.getMin());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57e8ca88d92facef1203d69527788ce36e164b7f","date":1438821974,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#getMinLong(Terms).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#getMinLong(Terms).mjava","sourceNew":"  /**\n   * Returns the minimum long value indexed into this\n   * numeric field or null if no terms exist.\n   */\n  public static Long getMinLong(Terms terms) throws IOException {\n    // All shift=0 terms are sorted first, so we don't need\n    // to filter the incoming terms; we can just get the\n    // min:\n    BytesRef min = terms.getMin();\n    return (min != null) ? NumericUtils.prefixCodedToLong(min) : null;\n  }\n\n","sourceOld":"  /** Returns the minimum long value indexed into this\n   *  numeric field. */\n  public static long getMinLong(Terms terms) throws IOException {\n    // All shift=0 terms are sorted first, so we don't need\n    // to filter the incoming terms; we can just get the\n    // min: \n    return NumericUtils.prefixCodedToLong(terms.getMin());\n  }\n\n","bugFix":["0974f33be0e2189e71f36b67f1017f4072b1a126"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#getMinLong(Terms).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#getMinLong(Terms).mjava","sourceNew":"  /**\n   * Returns the minimum long value indexed into this\n   * numeric field or null if no terms exist.\n   */\n  public static Long getMinLong(Terms terms) throws IOException {\n    // All shift=0 terms are sorted first, so we don't need\n    // to filter the incoming terms; we can just get the\n    // min:\n    BytesRef min = terms.getMin();\n    return (min != null) ? LegacyNumericUtils.prefixCodedToLong(min) : null;\n  }\n\n","sourceOld":"  /**\n   * Returns the minimum long value indexed into this\n   * numeric field or null if no terms exist.\n   */\n  public static Long getMinLong(Terms terms) throws IOException {\n    // All shift=0 terms are sorted first, so we don't need\n    // to filter the incoming terms; we can just get the\n    // min:\n    BytesRef min = terms.getMin();\n    return (min != null) ? NumericUtils.prefixCodedToLong(min) : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0974f33be0e2189e71f36b67f1017f4072b1a126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0974f33be0e2189e71f36b67f1017f4072b1a126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57e8ca88d92facef1203d69527788ce36e164b7f":["0974f33be0e2189e71f36b67f1017f4072b1a126"],"770342641f7b505eaa8dccdc666158bff2419109":["57e8ca88d92facef1203d69527788ce36e164b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"0974f33be0e2189e71f36b67f1017f4072b1a126":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","57e8ca88d92facef1203d69527788ce36e164b7f"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0974f33be0e2189e71f36b67f1017f4072b1a126","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"57e8ca88d92facef1203d69527788ce36e164b7f":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}