{"path":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","commits":[{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,boolean).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#docs(Bits,DocsEnum,int)}.*/\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docs(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null if the term does not\n   *  exist. */\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#docs(Bits,DocsEnum,int)}.*/\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docs(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#docs(Bits,DocsEnum,int)}.*/\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docs(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#docs(Bits,DocsEnum,int)}.*/\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.docs(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#docs(Bits,DocsEnum,int)}.*/\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docs(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#docs(Bits,DocsEnum,int)}.*/\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.docs(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#docs(Bits,DocsEnum,int)}.*/\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docs(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field and\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#docs(Bits,DocsEnum,int)}.*/\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.docs(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#docs(Bits,DocsEnum,int)}.*/\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.docs(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","sourceNew":"  /** Returns {@link PostingsEnum} for the specified field and\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#postings(Bits, PostingsEnum,int)}.*/\n  public static PostingsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.postings(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field and\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#docs(Bits,DocsEnum,int)}.*/\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.docs(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","sourceNew":"  /** Returns {@link PostingsEnum} for the specified field and\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#postings(Bits, PostingsEnum,int)}.*/\n  public static PostingsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.postings(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link PostingsEnum} for the specified field and\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#postings(Bits, PostingsEnum,int)}.*/\n  public static PostingsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.postings(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,String,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","sourceNew":"  /** Returns {@link PostingsEnum} for the specified field and\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#postings(PostingsEnum,int)}.*/\n  public static PostingsEnum getTermDocsEnum(IndexReader r, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.postings(null, flags);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link PostingsEnum} for the specified field and\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#postings(Bits, PostingsEnum,int)}.*/\n  public static PostingsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.postings(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["51f5280f31484820499077f41fcdfe92d527d9dc"],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02331260bb246364779cb6f04919ca47900d01bb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02331260bb246364779cb6f04919ca47900d01bb"],"51f5280f31484820499077f41fcdfe92d527d9dc":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["02331260bb246364779cb6f04919ca47900d01bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"02331260bb246364779cb6f04919ca47900d01bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["51f5280f31484820499077f41fcdfe92d527d9dc"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"02331260bb246364779cb6f04919ca47900d01bb":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}