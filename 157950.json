{"path":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","commits":[{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    // need a port to start the example server on\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n\n    String[] toolArgs = new String[] {\n        \"-e\", exampleName,\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n        \"-p\", String.valueOf(bindPort)\n    };\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      log.error(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n\n    File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n    assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n            exampleName + \" example failed; output: \" + toolOutput,\n        exampleSolrHomeDir.isDirectory());\n\n    if (\"techproducts\".equals(exampleName)) {\n      HttpSolrClient solrClient = new HttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n      SolrQuery query = new SolrQuery(\"*:*\");\n      QueryResponse qr = solrClient.query(query);\n      long numFound = qr.getResults().getNumFound();\n      assertTrue(\"expected 32 docs in the \"+exampleName+\" example but found \" + numFound + \", output: \" + toolOutput,\n          numFound == 32);\n    }\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fe0e7e6d7b6d2db364abe2c33fa48cccf804a90","date":1439492764,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","sourceNew":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    // need a port to start the example server on\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n\n    String[] toolArgs = new String[] {\n        \"-e\", exampleName,\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n        \"-p\", String.valueOf(bindPort)\n    };\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      log.error(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n\n    File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n    assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n            exampleName + \" example failed; output: \" + toolOutput,\n        exampleSolrHomeDir.isDirectory());\n\n    if (\"techproducts\".equals(exampleName)) {\n      HttpSolrClient solrClient = new HttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n      SolrQuery query = new SolrQuery(\"*:*\");\n      QueryResponse qr = solrClient.query(query);\n      long numFound = qr.getResults().getNumFound();\n      if (numFound == 0) {\n        // brief wait in case of timing issue in getting the new docs committed\n        log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException ignore) {\n          Thread.interrupted();\n        }\n        numFound = solrClient.query(query).getResults().getNumFound();\n      }\n      assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n          numFound == 32);\n    }\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n  }\n\n","sourceOld":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    // need a port to start the example server on\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n\n    String[] toolArgs = new String[] {\n        \"-e\", exampleName,\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n        \"-p\", String.valueOf(bindPort)\n    };\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      log.error(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n\n    File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n    assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n            exampleName + \" example failed; output: \" + toolOutput,\n        exampleSolrHomeDir.isDirectory());\n\n    if (\"techproducts\".equals(exampleName)) {\n      HttpSolrClient solrClient = new HttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n      SolrQuery query = new SolrQuery(\"*:*\");\n      QueryResponse qr = solrClient.query(query);\n      long numFound = qr.getResults().getNumFound();\n      assertTrue(\"expected 32 docs in the \"+exampleName+\" example but found \" + numFound + \", output: \" + toolOutput,\n          numFound == 32);\n    }\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","sourceNew":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    // need a port to start the example server on\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n\n    String[] toolArgs = new String[] {\n        \"-e\", exampleName,\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n        \"-p\", String.valueOf(bindPort)\n    };\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      log.error(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n\n    File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n    assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n            exampleName + \" example failed; output: \" + toolOutput,\n        exampleSolrHomeDir.isDirectory());\n\n    if (\"techproducts\".equals(exampleName)) {\n      HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n      SolrQuery query = new SolrQuery(\"*:*\");\n      QueryResponse qr = solrClient.query(query);\n      long numFound = qr.getResults().getNumFound();\n      if (numFound == 0) {\n        // brief wait in case of timing issue in getting the new docs committed\n        log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException ignore) {\n          Thread.interrupted();\n        }\n        numFound = solrClient.query(query).getResults().getNumFound();\n      }\n      assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n          numFound == 32);\n    }\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n  }\n\n","sourceOld":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    // need a port to start the example server on\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n\n    String[] toolArgs = new String[] {\n        \"-e\", exampleName,\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n        \"-p\", String.valueOf(bindPort)\n    };\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      log.error(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n\n    File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n    assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n            exampleName + \" example failed; output: \" + toolOutput,\n        exampleSolrHomeDir.isDirectory());\n\n    if (\"techproducts\".equals(exampleName)) {\n      HttpSolrClient solrClient = new HttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n      SolrQuery query = new SolrQuery(\"*:*\");\n      QueryResponse qr = solrClient.query(query);\n      long numFound = qr.getResults().getNumFound();\n      if (numFound == 0) {\n        // brief wait in case of timing issue in getting the new docs committed\n        log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException ignore) {\n          Thread.interrupted();\n        }\n        numFound = solrClient.query(query).getResults().getNumFound();\n      }\n      assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n          numFound == 32);\n    }\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","sourceNew":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    // need a port to start the example server on\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n\n    String[] toolArgs = new String[] {\n        \"-e\", exampleName,\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n        \"-p\", String.valueOf(bindPort)\n    };\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      log.error(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n\n    File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n    assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n            exampleName + \" example failed; output: \" + toolOutput,\n        exampleSolrHomeDir.isDirectory());\n\n    if (\"techproducts\".equals(exampleName)) {\n      HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n      SolrQuery query = new SolrQuery(\"*:*\");\n      QueryResponse qr = solrClient.query(query);\n      long numFound = qr.getResults().getNumFound();\n      if (numFound == 0) {\n        // brief wait in case of timing issue in getting the new docs committed\n        log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException ignore) {\n          Thread.interrupted();\n        }\n        numFound = solrClient.query(query).getResults().getNumFound();\n      }\n      assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n          numFound == 32);\n    }\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n  }\n\n","sourceOld":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    // need a port to start the example server on\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n\n    String[] toolArgs = new String[] {\n        \"-e\", exampleName,\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n        \"-p\", String.valueOf(bindPort)\n    };\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      log.error(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n\n    File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n    assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n            exampleName + \" example failed; output: \" + toolOutput,\n        exampleSolrHomeDir.isDirectory());\n\n    if (\"techproducts\".equals(exampleName)) {\n      HttpSolrClient solrClient = new HttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n      SolrQuery query = new SolrQuery(\"*:*\");\n      QueryResponse qr = solrClient.query(query);\n      long numFound = qr.getResults().getNumFound();\n      if (numFound == 0) {\n        // brief wait in case of timing issue in getting the new docs committed\n        log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException ignore) {\n          Thread.interrupted();\n        }\n        numFound = solrClient.query(query).getResults().getNumFound();\n      }\n      assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n          numFound == 32);\n    }\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6130fcaa36d42a71fc464c80399af8098c42de5a","date":1493878512,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","sourceNew":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    for (int i =0; i<2; i++){\n    // need a port to start the example server on\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n\n    String[] toolArgs = new String[] {\n        \"-e\", exampleName,\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n        \"-p\", String.valueOf(bindPort)\n    };\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n    try {\n      final int status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n      assertEquals(\"it should be ok \"+tool+\" \"+Arrays.toString(toolArgs),0, status);\n    } catch (Exception e) {\n      log.error(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n\n    File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n    assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n            exampleName + \" example failed; output: \" + toolOutput,\n        exampleSolrHomeDir.isDirectory());\n\n    if (\"techproducts\".equals(exampleName)) {\n      HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n      try{\n        SolrQuery query = new SolrQuery(\"*:*\");\n        QueryResponse qr = solrClient.query(query);\n        long numFound = qr.getResults().getNumFound();\n        if (numFound == 0) {\n          // brief wait in case of timing issue in getting the new docs committed\n          log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n          try {\n            Thread.sleep(1000);\n          } catch (InterruptedException ignore) {\n            Thread.interrupted();\n          }\n          numFound = solrClient.query(query).getResults().getNumFound();\n        }\n        assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n            numFound == 32);\n      }finally{\n        \n        solrClient.close();\n      }\n    }\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n    }\n  }\n\n","sourceOld":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    // need a port to start the example server on\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n\n    String[] toolArgs = new String[] {\n        \"-e\", exampleName,\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n        \"-p\", String.valueOf(bindPort)\n    };\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      log.error(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n\n    File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n    assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n            exampleName + \" example failed; output: \" + toolOutput,\n        exampleSolrHomeDir.isDirectory());\n\n    if (\"techproducts\".equals(exampleName)) {\n      HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n      SolrQuery query = new SolrQuery(\"*:*\");\n      QueryResponse qr = solrClient.query(query);\n      long numFound = qr.getResults().getNumFound();\n      if (numFound == 0) {\n        // brief wait in case of timing issue in getting the new docs committed\n        log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException ignore) {\n          Thread.interrupted();\n        }\n        numFound = solrClient.query(query).getResults().getNumFound();\n      }\n      assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n          numFound == 32);\n    }\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06c53fdb787c249799e6655451c48ef29c717557","date":1494098950,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","sourceNew":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    for (int pass = 0; pass<2; pass++){\n      // need a port to start the example server on\n      int bindPort = -1;\n      try (ServerSocket socket = new ServerSocket(0)) {\n        bindPort = socket.getLocalPort();\n      }\n  \n      log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n  \n      String[] toolArgs = new String[] {\n          \"-e\", exampleName,\n          \"-serverDir\", solrServerDir.getAbsolutePath(),\n          \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n          \"-p\", String.valueOf(bindPort)\n      };\n  \n      // capture tool output to stdout\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n  \n      RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n      closeables.add(executor);\n  \n      SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n      try {\n        final int status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        assertEquals(\"it should be ok \"+tool+\" \"+Arrays.toString(toolArgs),0, status);\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n        throw e;\n      }\n  \n      String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n  \n      // dump all the output written by the SolrCLI commands to stdout\n      //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n  \n      File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n      assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n              exampleName + \" example failed; output: \" + toolOutput,\n          exampleSolrHomeDir.isDirectory());\n  \n      if (\"techproducts\".equals(exampleName)) {\n        HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n        try{\n          SolrQuery query = new SolrQuery(\"*:*\");\n          QueryResponse qr = solrClient.query(query);\n          long numFound = qr.getResults().getNumFound();\n          if (numFound == 0) {\n            // brief wait in case of timing issue in getting the new docs committed\n            log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException ignore) {\n              Thread.interrupted();\n            }\n            numFound = solrClient.query(query).getResults().getNumFound();\n          }\n          assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n              numFound == 32);\n        }finally{\n          solrClient.close();\n        }\n      }\n  \n      // stop the test instance\n      executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n    }\n  }\n\n","sourceOld":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    for (int i =0; i<2; i++){\n    // need a port to start the example server on\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n\n    String[] toolArgs = new String[] {\n        \"-e\", exampleName,\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n        \"-p\", String.valueOf(bindPort)\n    };\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n    try {\n      final int status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n      assertEquals(\"it should be ok \"+tool+\" \"+Arrays.toString(toolArgs),0, status);\n    } catch (Exception e) {\n      log.error(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n\n    File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n    assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n            exampleName + \" example failed; output: \" + toolOutput,\n        exampleSolrHomeDir.isDirectory());\n\n    if (\"techproducts\".equals(exampleName)) {\n      HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n      try{\n        SolrQuery query = new SolrQuery(\"*:*\");\n        QueryResponse qr = solrClient.query(query);\n        long numFound = qr.getResults().getNumFound();\n        if (numFound == 0) {\n          // brief wait in case of timing issue in getting the new docs committed\n          log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n          try {\n            Thread.sleep(1000);\n          } catch (InterruptedException ignore) {\n            Thread.interrupted();\n          }\n          numFound = solrClient.query(query).getResults().getNumFound();\n        }\n        assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n            numFound == 32);\n      }finally{\n        \n        solrClient.close();\n      }\n    }\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","sourceNew":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    for (int pass = 0; pass<2; pass++){\n      // need a port to start the example server on\n      int bindPort = -1;\n      try (ServerSocket socket = new ServerSocket(0)) {\n        bindPort = socket.getLocalPort();\n      }\n  \n      log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n  \n      String[] toolArgs = new String[] {\n          \"-e\", exampleName,\n          \"-serverDir\", solrServerDir.getAbsolutePath(),\n          \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n          \"-p\", String.valueOf(bindPort)\n      };\n  \n      // capture tool output to stdout\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n  \n      RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n      closeables.add(executor);\n  \n      SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n      try {\n        final int status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        assertEquals(\"it should be ok \"+tool+\" \"+Arrays.toString(toolArgs),0, status);\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n        throw e;\n      }\n  \n      String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n  \n      // dump all the output written by the SolrCLI commands to stdout\n      //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n  \n      File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n      assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n              exampleName + \" example failed; output: \" + toolOutput,\n          exampleSolrHomeDir.isDirectory());\n  \n      if (\"techproducts\".equals(exampleName)) {\n        HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n        try{\n          SolrQuery query = new SolrQuery(\"*:*\");\n          QueryResponse qr = solrClient.query(query);\n          long numFound = qr.getResults().getNumFound();\n          if (numFound == 0) {\n            // brief wait in case of timing issue in getting the new docs committed\n            log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException ignore) {\n              Thread.interrupted();\n            }\n            numFound = solrClient.query(query).getResults().getNumFound();\n          }\n          assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n              numFound == 32);\n        }finally{\n          solrClient.close();\n        }\n      }\n  \n      // stop the test instance\n      executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n    }\n  }\n\n","sourceOld":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    // need a port to start the example server on\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n\n    String[] toolArgs = new String[] {\n        \"-e\", exampleName,\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n        \"-p\", String.valueOf(bindPort)\n    };\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      log.error(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n\n    File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n    assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n            exampleName + \" example failed; output: \" + toolOutput,\n        exampleSolrHomeDir.isDirectory());\n\n    if (\"techproducts\".equals(exampleName)) {\n      HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n      SolrQuery query = new SolrQuery(\"*:*\");\n      QueryResponse qr = solrClient.query(query);\n      long numFound = qr.getResults().getNumFound();\n      if (numFound == 0) {\n        // brief wait in case of timing issue in getting the new docs committed\n        log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException ignore) {\n          Thread.interrupted();\n        }\n        numFound = solrClient.query(query).getResults().getNumFound();\n      }\n      assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n          numFound == 32);\n    }\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","sourceNew":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    for (int pass = 0; pass<2; pass++){\n      // need a port to start the example server on\n      int bindPort = -1;\n      try (ServerSocket socket = new ServerSocket(0)) {\n        bindPort = socket.getLocalPort();\n      }\n  \n      log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n  \n      String[] toolArgs = new String[] {\n          \"-e\", exampleName,\n          \"-serverDir\", solrServerDir.getAbsolutePath(),\n          \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n          \"-p\", String.valueOf(bindPort)\n      };\n  \n      // capture tool output to stdout\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n  \n      RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n      closeables.add(executor);\n  \n      SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n      try {\n        int status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        \n        if (status == -1) {\n          // maybe it's the port, try again\n          try (ServerSocket socket = new ServerSocket(0)) {\n            bindPort = socket.getLocalPort();\n          }\n          Thread.sleep(100);\n          status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));  \n        }\n        \n        assertEquals(\"it should be ok \"+tool+\" \"+Arrays.toString(toolArgs),0, status);\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n        throw e;\n      }\n  \n      String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n  \n      // dump all the output written by the SolrCLI commands to stdout\n      //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n  \n      File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n      assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n              exampleName + \" example failed; output: \" + toolOutput,\n          exampleSolrHomeDir.isDirectory());\n  \n      if (\"techproducts\".equals(exampleName)) {\n        HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n        try{\n          SolrQuery query = new SolrQuery(\"*:*\");\n          QueryResponse qr = solrClient.query(query);\n          long numFound = qr.getResults().getNumFound();\n          if (numFound == 0) {\n            // brief wait in case of timing issue in getting the new docs committed\n            log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException ignore) {\n              Thread.interrupted();\n            }\n            numFound = solrClient.query(query).getResults().getNumFound();\n          }\n          assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n              numFound == 32);\n        }finally{\n          solrClient.close();\n        }\n      }\n  \n      // stop the test instance\n      executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n    }\n  }\n\n","sourceOld":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    for (int pass = 0; pass<2; pass++){\n      // need a port to start the example server on\n      int bindPort = -1;\n      try (ServerSocket socket = new ServerSocket(0)) {\n        bindPort = socket.getLocalPort();\n      }\n  \n      log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n  \n      String[] toolArgs = new String[] {\n          \"-e\", exampleName,\n          \"-serverDir\", solrServerDir.getAbsolutePath(),\n          \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n          \"-p\", String.valueOf(bindPort)\n      };\n  \n      // capture tool output to stdout\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n  \n      RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n      closeables.add(executor);\n  \n      SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n      try {\n        final int status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        assertEquals(\"it should be ok \"+tool+\" \"+Arrays.toString(toolArgs),0, status);\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n        throw e;\n      }\n  \n      String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n  \n      // dump all the output written by the SolrCLI commands to stdout\n      //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n  \n      File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n      assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n              exampleName + \" example failed; output: \" + toolOutput,\n          exampleSolrHomeDir.isDirectory());\n  \n      if (\"techproducts\".equals(exampleName)) {\n        HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n        try{\n          SolrQuery query = new SolrQuery(\"*:*\");\n          QueryResponse qr = solrClient.query(query);\n          long numFound = qr.getResults().getNumFound();\n          if (numFound == 0) {\n            // brief wait in case of timing issue in getting the new docs committed\n            log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException ignore) {\n              Thread.interrupted();\n            }\n            numFound = solrClient.query(query).getResults().getNumFound();\n          }\n          assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n              numFound == 32);\n        }finally{\n          solrClient.close();\n        }\n      }\n  \n      // stop the test instance\n      executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n    }\n  }\n\n","bugFix":["06c53fdb787c249799e6655451c48ef29c717557"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","sourceNew":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    for (int pass = 0; pass<2; pass++){\n      // need a port to start the example server on\n      int bindPort = -1;\n      try (ServerSocket socket = new ServerSocket(0)) {\n        bindPort = socket.getLocalPort();\n      }\n  \n      log.info(\"Selected port {} to start {} example Solr instance on ...\", bindPort, exampleName);\n  \n      String[] toolArgs = new String[] {\n          \"-e\", exampleName,\n          \"-serverDir\", solrServerDir.getAbsolutePath(),\n          \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n          \"-p\", String.valueOf(bindPort)\n      };\n  \n      // capture tool output to stdout\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n  \n      RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n      closeables.add(executor);\n  \n      SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n      try {\n        int status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        \n        if (status == -1) {\n          // maybe it's the port, try again\n          try (ServerSocket socket = new ServerSocket(0)) {\n            bindPort = socket.getLocalPort();\n          }\n          Thread.sleep(100);\n          status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));  \n        }\n        \n        assertEquals(\"it should be ok \"+tool+\" \"+Arrays.toString(toolArgs),0, status);\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: {}; stdout from tool prior to failure: {}\"\n            , e , baos.toString(StandardCharsets.UTF_8.name())); // logOk\n        throw e;\n      }\n  \n      String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n  \n      // dump all the output written by the SolrCLI commands to stdout\n      //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n  \n      File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n      assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n              exampleName + \" example failed; output: \" + toolOutput,\n          exampleSolrHomeDir.isDirectory());\n  \n      if (\"techproducts\".equals(exampleName)) {\n        HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n        try{\n          SolrQuery query = new SolrQuery(\"*:*\");\n          QueryResponse qr = solrClient.query(query);\n          long numFound = qr.getResults().getNumFound();\n          if (numFound == 0) {\n            // brief wait in case of timing issue in getting the new docs committed\n            log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException ignore) {\n              Thread.interrupted();\n            }\n            numFound = solrClient.query(query).getResults().getNumFound();\n          }\n          assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n              numFound == 32);\n        }finally{\n          solrClient.close();\n        }\n      }\n  \n      // stop the test instance\n      executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n    }\n  }\n\n","sourceOld":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    for (int pass = 0; pass<2; pass++){\n      // need a port to start the example server on\n      int bindPort = -1;\n      try (ServerSocket socket = new ServerSocket(0)) {\n        bindPort = socket.getLocalPort();\n      }\n  \n      log.info(\"Selected port \"+bindPort+\" to start \"+exampleName+\" example Solr instance on ...\");\n  \n      String[] toolArgs = new String[] {\n          \"-e\", exampleName,\n          \"-serverDir\", solrServerDir.getAbsolutePath(),\n          \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n          \"-p\", String.valueOf(bindPort)\n      };\n  \n      // capture tool output to stdout\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n  \n      RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n      closeables.add(executor);\n  \n      SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n      try {\n        int status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        \n        if (status == -1) {\n          // maybe it's the port, try again\n          try (ServerSocket socket = new ServerSocket(0)) {\n            bindPort = socket.getLocalPort();\n          }\n          Thread.sleep(100);\n          status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));  \n        }\n        \n        assertEquals(\"it should be ok \"+tool+\" \"+Arrays.toString(toolArgs),0, status);\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n        throw e;\n      }\n  \n      String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n  \n      // dump all the output written by the SolrCLI commands to stdout\n      //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n  \n      File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n      assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n              exampleName + \" example failed; output: \" + toolOutput,\n          exampleSolrHomeDir.isDirectory());\n  \n      if (\"techproducts\".equals(exampleName)) {\n        HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n        try{\n          SolrQuery query = new SolrQuery(\"*:*\");\n          QueryResponse qr = solrClient.query(query);\n          long numFound = qr.getResults().getNumFound();\n          if (numFound == 0) {\n            // brief wait in case of timing issue in getting the new docs committed\n            log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException ignore) {\n              Thread.interrupted();\n            }\n            numFound = solrClient.query(query).getResults().getNumFound();\n          }\n          assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n              numFound == 32);\n        }finally{\n          solrClient.close();\n        }\n      }\n  \n      // stop the test instance\n      executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d19164145b2a65acf62a657c75f4a249b649c0","date":1601732857,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testExample(String).mjava","sourceNew":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    for (int pass = 0; pass<2; pass++){\n      // need a port to start the example server on\n      int bindPort = -1;\n      try (ServerSocket socket = new ServerSocket(0)) {\n        bindPort = socket.getLocalPort();\n      }\n  \n      log.info(\"Selected port {} to start {} example Solr instance on ...\", bindPort, exampleName);\n  \n      String[] toolArgs = new String[] {\n          \"-e\", exampleName,\n          \"-serverDir\", solrServerDir.getAbsolutePath(),\n          \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n          \"-p\", String.valueOf(bindPort)\n      };\n  \n      // capture tool output to stdout\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n  \n      RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n      closeables.add(executor);\n  \n      SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n      try {\n        int status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        \n        if (status == -1) {\n          // maybe it's the port, try again\n          try (ServerSocket socket = new ServerSocket(0)) {\n            bindPort = socket.getLocalPort();\n          }\n          Thread.sleep(100);\n          status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));  \n        }\n        \n        assertEquals(\"it should be ok \"+tool+\" \"+Arrays.toString(toolArgs),0, status);\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: {}; stdout from tool prior to failure: {}\"\n            , e , baos.toString(StandardCharsets.UTF_8.name())); // nowarn\n        throw e;\n      }\n  \n      String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n  \n      // dump all the output written by the SolrCLI commands to stdout\n      //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n  \n      File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n      assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n              exampleName + \" example failed; output: \" + toolOutput,\n          exampleSolrHomeDir.isDirectory());\n  \n      if (\"techproducts\".equals(exampleName)) {\n        HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n        try{\n          SolrQuery query = new SolrQuery(\"*:*\");\n          QueryResponse qr = solrClient.query(query);\n          long numFound = qr.getResults().getNumFound();\n          if (numFound == 0) {\n            // brief wait in case of timing issue in getting the new docs committed\n            log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException ignore) {\n              Thread.interrupted();\n            }\n            numFound = solrClient.query(query).getResults().getNumFound();\n          }\n          assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n              numFound == 32);\n        }finally{\n          solrClient.close();\n        }\n      }\n  \n      // stop the test instance\n      executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n    }\n  }\n\n","sourceOld":"  protected void testExample(String exampleName) throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    for (int pass = 0; pass<2; pass++){\n      // need a port to start the example server on\n      int bindPort = -1;\n      try (ServerSocket socket = new ServerSocket(0)) {\n        bindPort = socket.getLocalPort();\n      }\n  \n      log.info(\"Selected port {} to start {} example Solr instance on ...\", bindPort, exampleName);\n  \n      String[] toolArgs = new String[] {\n          \"-e\", exampleName,\n          \"-serverDir\", solrServerDir.getAbsolutePath(),\n          \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n          \"-p\", String.valueOf(bindPort)\n      };\n  \n      // capture tool output to stdout\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n  \n      RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n      closeables.add(executor);\n  \n      SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n      try {\n        int status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        \n        if (status == -1) {\n          // maybe it's the port, try again\n          try (ServerSocket socket = new ServerSocket(0)) {\n            bindPort = socket.getLocalPort();\n          }\n          Thread.sleep(100);\n          status = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));  \n        }\n        \n        assertEquals(\"it should be ok \"+tool+\" \"+Arrays.toString(toolArgs),0, status);\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: {}; stdout from tool prior to failure: {}\"\n            , e , baos.toString(StandardCharsets.UTF_8.name())); // logOk\n        throw e;\n      }\n  \n      String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n  \n      // dump all the output written by the SolrCLI commands to stdout\n      //System.out.println(\"\\n\\n\"+toolOutput+\"\\n\\n\");\n  \n      File exampleSolrHomeDir = new File(solrExampleDir, exampleName+\"/solr\");\n      assertTrue(exampleSolrHomeDir.getAbsolutePath() + \" not found! run \" +\n              exampleName + \" example failed; output: \" + toolOutput,\n          exampleSolrHomeDir.isDirectory());\n  \n      if (\"techproducts\".equals(exampleName)) {\n        HttpSolrClient solrClient = getHttpSolrClient(\"http://localhost:\" + bindPort + \"/solr/\" + exampleName);\n        try{\n          SolrQuery query = new SolrQuery(\"*:*\");\n          QueryResponse qr = solrClient.query(query);\n          long numFound = qr.getResults().getNumFound();\n          if (numFound == 0) {\n            // brief wait in case of timing issue in getting the new docs committed\n            log.warn(\"Going to wait for 1 second before re-trying query for techproduct example docs ...\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException ignore) {\n              Thread.interrupted();\n            }\n            numFound = solrClient.query(query).getResults().getNumFound();\n          }\n          assertTrue(\"expected 32 docs in the \" + exampleName + \" example but found \" + numFound + \", output: \" + toolOutput,\n              numFound == 32);\n        }finally{\n          solrClient.close();\n        }\n      }\n  \n      // stop the test instance\n      executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \" + bindPort));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","06c53fdb787c249799e6655451c48ef29c717557"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["06c53fdb787c249799e6655451c48ef29c717557"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["4fe0e7e6d7b6d2db364abe2c33fa48cccf804a90"],"4fe0e7e6d7b6d2db364abe2c33fa48cccf804a90":["4ca20be81c9284c840498143264e583ccbb8525a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2d19164145b2a65acf62a657c75f4a249b649c0":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"6130fcaa36d42a71fc464c80399af8098c42de5a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4fe0e7e6d7b6d2db364abe2c33fa48cccf804a90","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"06c53fdb787c249799e6655451c48ef29c717557":["6130fcaa36d42a71fc464c80399af8098c42de5a"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2d19164145b2a65acf62a657c75f4a249b649c0"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["4fe0e7e6d7b6d2db364abe2c33fa48cccf804a90"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca20be81c9284c840498143264e583ccbb8525a"],"4fe0e7e6d7b6d2db364abe2c33fa48cccf804a90":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["e9017cf144952056066919f1ebc7897ff9bd71b1","6130fcaa36d42a71fc464c80399af8098c42de5a"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6130fcaa36d42a71fc464c80399af8098c42de5a":["06c53fdb787c249799e6655451c48ef29c717557"],"06c53fdb787c249799e6655451c48ef29c717557":["e9017cf144952056066919f1ebc7897ff9bd71b1","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}