{"path":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorByte(IndexReader,String).mjava","commits":[{"id":"a20974f34ae56da194b058e7307c8c52b32444d8","date":1201921568,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorByte(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"   /**\n   * Returns a comparator for sorting hits according to a field containing bytes.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg integer values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorByte(final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    final byte[] fieldOrder = FieldCache.DEFAULT.getBytes(reader, field);\n    return new ScoreDocComparator() {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = fieldOrder[i.doc];\n        final int fj = fieldOrder[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Byte(fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.INT;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3766097c9c41a30d67e9b548c62d017abf8e07ac","date":1228770465,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorByte(IndexReader,String,FieldCache.ByteParser).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorByte(IndexReader,String).mjava","sourceNew":"   /**\n   * Returns a comparator for sorting hits according to a field containing bytes.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg integer values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorByte(final IndexReader reader, final String fieldname, final FieldCache.ByteParser parser)\n  throws IOException {\n    final String field = fieldname.intern();\n    final byte[] fieldOrder = (parser==null)\n\t  ? FieldCache.DEFAULT.getBytes(reader, field)\n\t  : FieldCache.DEFAULT.getBytes(reader, field, parser);\n    return new ScoreDocComparator() {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = fieldOrder[i.doc];\n        final int fj = fieldOrder[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Byte(fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.BYTE;\n      }\n    };\n  }\n\n","sourceOld":"   /**\n   * Returns a comparator for sorting hits according to a field containing bytes.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg integer values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorByte(final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    final byte[] fieldOrder = FieldCache.DEFAULT.getBytes(reader, field);\n    return new ScoreDocComparator() {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = fieldOrder[i.doc];\n        final int fj = fieldOrder[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Byte(fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.INT;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3766097c9c41a30d67e9b548c62d017abf8e07ac":["a20974f34ae56da194b058e7307c8c52b32444d8"],"a20974f34ae56da194b058e7307c8c52b32444d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3766097c9c41a30d67e9b548c62d017abf8e07ac"]},"commit2Childs":{"3766097c9c41a30d67e9b548c62d017abf8e07ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a20974f34ae56da194b058e7307c8c52b32444d8":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a20974f34ae56da194b058e7307c8c52b32444d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}