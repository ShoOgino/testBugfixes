{"path":"solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase#getCommands(boolean).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase#getCommands(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = getContentStreams();\n      if (contentStreams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No content stream\");\n      for (ContentStream contentStream : contentStreams) {\n        parsedCommands = ApiBag.getCommandOperations(new InputStreamReader((InputStream) contentStream, UTF_8),\n            getValidators(), validateInput);\n      }\n\n    }\n    return CommandOperation.clone(parsedCommands);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase#getCommands(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = getContentStreams();\n      if (contentStreams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No content stream\");\n      for (ContentStream contentStream : contentStreams) {\n        parsedCommands = ApiBag.getCommandOperations(new InputStreamReader((InputStream) contentStream, UTF_8),\n            getValidators(), validateInput);\n      }\n\n    }\n    return CommandOperation.clone(parsedCommands);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbdd035c502312d32111b9642ba3dbd5c52ee64f","date":1488346355,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase#getCommands(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase#getCommands(boolean).mjava","sourceNew":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = getContentStreams();\n      if (contentStreams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No content stream\");\n      for (ContentStream contentStream : contentStreams) {\n        parsedCommands = ApiBag.getCommandOperations(getInputStream(contentStream),\n            getValidators(), validateInput);\n      }\n\n    }\n    return CommandOperation.clone(parsedCommands);\n\n  }\n\n","sourceOld":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = getContentStreams();\n      if (contentStreams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No content stream\");\n      for (ContentStream contentStream : contentStreams) {\n        parsedCommands = ApiBag.getCommandOperations(new InputStreamReader((InputStream) contentStream, UTF_8),\n            getValidators(), validateInput);\n      }\n\n    }\n    return CommandOperation.clone(parsedCommands);\n\n  }\n\n","bugFix":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3fc88a06a44fc3112186e9be4562b36713955d","date":1497587751,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase#getCommands(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase#getCommands(boolean).mjava","sourceNew":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = getContentStreams();\n      if (contentStreams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No content stream\");\n      for (ContentStream contentStream : contentStreams) {\n        parsedCommands = ApiBag.getCommandOperations(contentStream, getValidators(), validateInput);\n      }\n\n    }\n    return CommandOperation.clone(parsedCommands);\n\n  }\n\n","sourceOld":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = getContentStreams();\n      if (contentStreams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No content stream\");\n      for (ContentStream contentStream : contentStreams) {\n        parsedCommands = ApiBag.getCommandOperations(getInputStream(contentStream),\n            getValidators(), validateInput);\n      }\n\n    }\n    return CommandOperation.clone(parsedCommands);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase#getCommands(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase#getCommands(boolean).mjava","sourceNew":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = getContentStreams();\n      if (contentStreams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No content stream\");\n      for (ContentStream contentStream : contentStreams) {\n        parsedCommands = ApiBag.getCommandOperations(contentStream, getValidators(), validateInput);\n      }\n\n    }\n    return CommandOperation.clone(parsedCommands);\n\n  }\n\n","sourceOld":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = getContentStreams();\n      if (contentStreams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No content stream\");\n      for (ContentStream contentStream : contentStreams) {\n        parsedCommands = ApiBag.getCommandOperations(getInputStream(contentStream),\n            getValidators(), validateInput);\n      }\n\n    }\n    return CommandOperation.clone(parsedCommands);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase#getCommands(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SolrQueryRequestBase#getCommands(boolean).mjava","sourceNew":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = getContentStreams();\n      if (contentStreams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No content stream\");\n      for (ContentStream contentStream : contentStreams) {\n        parsedCommands = ApiBag.getCommandOperations(contentStream, getValidators(), validateInput);\n      }\n\n    }\n    return CommandOperation.clone(parsedCommands);\n\n  }\n\n","sourceOld":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = getContentStreams();\n      if (contentStreams == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No content stream\");\n      for (ContentStream contentStream : contentStreams) {\n        parsedCommands = ApiBag.getCommandOperations(getInputStream(contentStream),\n            getValidators(), validateInput);\n      }\n\n    }\n    return CommandOperation.clone(parsedCommands);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3fc88a06a44fc3112186e9be4562b36713955d":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"bbdd035c502312d32111b9642ba3dbd5c52ee64f":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"28288370235ed02234a64753cdbf0c6ec096304a":["bbdd035c502312d32111b9642ba3dbd5c52ee64f","4d3fc88a06a44fc3112186e9be4562b36713955d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["bbdd035c502312d32111b9642ba3dbd5c52ee64f","4d3fc88a06a44fc3112186e9be4562b36713955d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"4d3fc88a06a44fc3112186e9be4562b36713955d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"bbdd035c502312d32111b9642ba3dbd5c52ee64f":["4d3fc88a06a44fc3112186e9be4562b36713955d","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}