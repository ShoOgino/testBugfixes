{"path":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.NodeManagerWrapper#serviceStart().mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.NodeManagerWrapper#serviceStart().mjava","pathOld":"/dev/null","sourceNew":"    public synchronized void serviceStart() throws Exception {\n      try {\n        // create nm-local-dirs and configure them for the nodemanager\n        String localDirsString = prepareDirs(\"local\", numLocalDirs);\n        getConfig().set(YarnConfiguration.NM_LOCAL_DIRS, localDirsString);\n        // create nm-log-dirs and configure them for the nodemanager\n        String logDirsString = prepareDirs(\"log\", numLogDirs);\n        getConfig().set(YarnConfiguration.NM_LOG_DIRS, logDirsString);\n\n        File remoteLogDir =\n            new File(testWorkDir, MiniYARNCluster.this.getName()\n                + \"-remoteLogDir-nm-\" + index);\n        remoteLogDir.mkdir();\n        getConfig().set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n              remoteLogDir.getAbsolutePath());\n        // By default AM + 2 containers\n        getConfig().setInt(YarnConfiguration.NM_PMEM_MB, 4*1024);\n        getConfig().set(YarnConfiguration.NM_ADDRESS,\n                        MiniYARNCluster.getHostname() + \":0\");\n        getConfig().set(YarnConfiguration.NM_LOCALIZER_ADDRESS,\n                        MiniYARNCluster.getHostname() + \":0\");\n        getConfig().set(YarnConfiguration.NM_WEBAPP_ADDRESS,\n                        MiniYARNCluster.getHostname() + \":0\");\n\n        // Disable resource checks by default\n        if (!getConfig().getBoolean(\n            YarnConfiguration.YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING,\n            YarnConfiguration.\n                DEFAULT_YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING)) {\n          getConfig().setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\n          getConfig().setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\n        }\n\n        LOG.info(\"Starting NM: \" + index);\n        nodeManagers[index].init(getConfig());\n        new Thread() {\n          public void run() {\n            nodeManagers[index].start();\n          };\n        }.start();\n        int waitCount = 0;\n        while (nodeManagers[index].getServiceState() == STATE.INITED\n            && waitCount++ < 60) {\n          LOG.info(\"Waiting for NM \" + index + \" to start...\");\n          Thread.sleep(1000);\n        }\n        if (nodeManagers[index].getServiceState() != STATE.STARTED) {\n          // RM could have failed.\n          throw new IOException(\"NodeManager \" + index + \" failed to start\");\n        }\n        super.serviceStart();\n      } catch (Throwable t) {\n        throw new YarnRuntimeException(t);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.NodeManagerWrapper#serviceStart().mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.NodeManagerWrapper#serviceStart().mjava","sourceNew":"    public synchronized void serviceStart() throws Exception {\n      try {\n        // create nm-local-dirs and configure them for the nodemanager\n        String localDirsString = prepareDirs(\"local\", numLocalDirs);\n        getConfig().set(YarnConfiguration.NM_LOCAL_DIRS, localDirsString);\n        // create nm-log-dirs and configure them for the nodemanager\n        String logDirsString = prepareDirs(\"log\", numLogDirs);\n        getConfig().set(YarnConfiguration.NM_LOG_DIRS, logDirsString);\n\n        File remoteLogDir =\n            new File(testWorkDir, MiniYARNCluster.this.getName()\n                + \"-remoteLogDir-nm-\" + index);\n        remoteLogDir.mkdir();\n        getConfig().set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n              remoteLogDir.getAbsolutePath());\n        // By default AM + 2 containers\n        getConfig().setInt(YarnConfiguration.NM_PMEM_MB, 4*1024);\n        getConfig().set(YarnConfiguration.NM_ADDRESS,\n                        MiniYARNCluster.getHostname() + \":0\");\n        getConfig().set(YarnConfiguration.NM_LOCALIZER_ADDRESS,\n                        MiniYARNCluster.getHostname() + \":0\");\n        getConfig().set(YarnConfiguration.NM_WEBAPP_ADDRESS,\n                        MiniYARNCluster.getHostname() + \":0\");\n\n        // Disable resource checks by default\n        if (!getConfig().getBoolean(\n            YarnConfiguration.YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING,\n            YarnConfiguration.\n                DEFAULT_YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING)) {\n          getConfig().setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\n          getConfig().setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\n        }\n\n        LOG.info(\"Starting NM: \" + index);\n        nodeManagers[index].init(getConfig());\n        new Thread() {\n          public void run() {\n            nodeManagers[index].start();\n          };\n        }.start();\n        int waitCount = 0;\n        while (nodeManagers[index].getServiceState() == STATE.INITED\n            && waitCount++ < 60) {\n          LOG.info(\"Waiting for NM \" + index + \" to start...\");\n          Thread.sleep(1000);\n        }\n        if (nodeManagers[index].getServiceState() != STATE.STARTED) {\n          // RM could have failed.\n          throw new IOException(\"NodeManager \" + index + \" failed to start\");\n        }\n        super.serviceStart();\n      } catch (Throwable t) {\n        throw new YarnRuntimeException(t);\n      }\n    }\n\n","sourceOld":"    public synchronized void serviceStart() throws Exception {\n      try {\n        // create nm-local-dirs and configure them for the nodemanager\n        String localDirsString = prepareDirs(\"local\", numLocalDirs);\n        getConfig().set(YarnConfiguration.NM_LOCAL_DIRS, localDirsString);\n        // create nm-log-dirs and configure them for the nodemanager\n        String logDirsString = prepareDirs(\"log\", numLogDirs);\n        getConfig().set(YarnConfiguration.NM_LOG_DIRS, logDirsString);\n\n        File remoteLogDir =\n            new File(testWorkDir, MiniYARNCluster.this.getName()\n                + \"-remoteLogDir-nm-\" + index);\n        remoteLogDir.mkdir();\n        getConfig().set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n              remoteLogDir.getAbsolutePath());\n        // By default AM + 2 containers\n        getConfig().setInt(YarnConfiguration.NM_PMEM_MB, 4*1024);\n        getConfig().set(YarnConfiguration.NM_ADDRESS,\n                        MiniYARNCluster.getHostname() + \":0\");\n        getConfig().set(YarnConfiguration.NM_LOCALIZER_ADDRESS,\n                        MiniYARNCluster.getHostname() + \":0\");\n        getConfig().set(YarnConfiguration.NM_WEBAPP_ADDRESS,\n                        MiniYARNCluster.getHostname() + \":0\");\n\n        // Disable resource checks by default\n        if (!getConfig().getBoolean(\n            YarnConfiguration.YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING,\n            YarnConfiguration.\n                DEFAULT_YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING)) {\n          getConfig().setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\n          getConfig().setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\n        }\n\n        LOG.info(\"Starting NM: \" + index);\n        nodeManagers[index].init(getConfig());\n        new Thread() {\n          public void run() {\n            nodeManagers[index].start();\n          };\n        }.start();\n        int waitCount = 0;\n        while (nodeManagers[index].getServiceState() == STATE.INITED\n            && waitCount++ < 60) {\n          LOG.info(\"Waiting for NM \" + index + \" to start...\");\n          Thread.sleep(1000);\n        }\n        if (nodeManagers[index].getServiceState() != STATE.STARTED) {\n          // RM could have failed.\n          throw new IOException(\"NodeManager \" + index + \" failed to start\");\n        }\n        super.serviceStart();\n      } catch (Throwable t) {\n        throw new YarnRuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}