{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","commits":[{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finish(int docCount) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\",\n        segmentSuffix);\n    IndexOutput output = dir.createOutput(fileName, ctx);\n    boolean success = false;\n    BytesRef spare = new BytesRef();\n    try {\n      SimpleTextUtil.write(output, getHeader());\n      SimpleTextUtil.writeNewline(output);\n      SimpleTextUtil.write(output, VALUE_SIZE);\n      SimpleTextUtil.write(output, Integer.toString(this.fixedSize), scratch);\n      SimpleTextUtil.writeNewline(output);\n      prepareFlush(docCount);\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.write(output, DOC);\n        SimpleTextUtil.write(output, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(output);\n        SimpleTextUtil.write(output, VALUE);\n        writeDoc(output, i, spare);\n        SimpleTextUtil.writeNewline(output);\n      }\n      SimpleTextUtil.write(output, END);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      hash.close();\n      if (success) {\n        IOUtils.close(output);\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finish(int docCount) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\",\n        segmentSuffix);\n    IndexOutput output = dir.createOutput(fileName, ctx);\n    boolean success = false;\n    BytesRef spare = new BytesRef();\n    try {\n      SimpleTextUtil.write(output, getHeader());\n      SimpleTextUtil.writeNewline(output);\n      SimpleTextUtil.write(output, VALUE_SIZE);\n      SimpleTextUtil.write(output, Integer.toString(this.fixedSize), scratch);\n      SimpleTextUtil.writeNewline(output);\n      prepareFlush(docCount);\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.write(output, DOC);\n        SimpleTextUtil.write(output, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(output);\n        SimpleTextUtil.write(output, VALUE);\n        writeDoc(output, i, spare);\n        SimpleTextUtil.writeNewline(output);\n      }\n      SimpleTextUtil.write(output, END);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      hash.close();\n      if (success) {\n        IOUtils.close(output);\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","date":1339188570,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","sourceNew":"  @Override\n  public void finish(int docCount) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\",\n        segmentSuffix);\n    IndexOutput output = dir.createOutput(fileName, ctx);\n    boolean success = false;\n    BytesRef spare = new BytesRef();\n    try {\n      SimpleTextUtil.write(output, getHeader());\n      SimpleTextUtil.writeNewline(output);\n      SimpleTextUtil.write(output, VALUE_SIZE);\n      SimpleTextUtil.write(output, Integer.toString(this.valueSize), scratch);\n      SimpleTextUtil.writeNewline(output);\n      prepareFlush(docCount);\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.write(output, DOC);\n        SimpleTextUtil.write(output, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(output);\n        SimpleTextUtil.write(output, VALUE);\n        writeDoc(output, i, spare);\n        SimpleTextUtil.writeNewline(output);\n      }\n      SimpleTextUtil.write(output, END);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      hash.close();\n      if (success) {\n        IOUtils.close(output);\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finish(int docCount) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\",\n        segmentSuffix);\n    IndexOutput output = dir.createOutput(fileName, ctx);\n    boolean success = false;\n    BytesRef spare = new BytesRef();\n    try {\n      SimpleTextUtil.write(output, getHeader());\n      SimpleTextUtil.writeNewline(output);\n      SimpleTextUtil.write(output, VALUE_SIZE);\n      SimpleTextUtil.write(output, Integer.toString(this.fixedSize), scratch);\n      SimpleTextUtil.writeNewline(output);\n      prepareFlush(docCount);\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.write(output, DOC);\n        SimpleTextUtil.write(output, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(output);\n        SimpleTextUtil.write(output, VALUE);\n        writeDoc(output, i, spare);\n        SimpleTextUtil.writeNewline(output);\n      }\n      SimpleTextUtil.write(output, END);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      hash.close();\n      if (success) {\n        IOUtils.close(output);\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#finish(int).mjava","sourceNew":"  @Override\n  public void finish(int docCount) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\",\n        segmentSuffix);\n    IndexOutput output = dir.createOutput(fileName, ctx);\n    boolean success = false;\n    BytesRef spare = new BytesRef();\n    try {\n      SimpleTextUtil.write(output, getHeader());\n      SimpleTextUtil.writeNewline(output);\n      SimpleTextUtil.write(output, VALUE_SIZE);\n      SimpleTextUtil.write(output, Integer.toString(this.valueSize), scratch);\n      SimpleTextUtil.writeNewline(output);\n      prepareFlush(docCount);\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.write(output, DOC);\n        SimpleTextUtil.write(output, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(output);\n        SimpleTextUtil.write(output, VALUE);\n        writeDoc(output, i, spare);\n        SimpleTextUtil.writeNewline(output);\n      }\n      SimpleTextUtil.write(output, END);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      hash.close();\n      if (success) {\n        IOUtils.close(output);\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finish(int docCount) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\",\n        segmentSuffix);\n    IndexOutput output = dir.createOutput(fileName, ctx);\n    boolean success = false;\n    BytesRef spare = new BytesRef();\n    try {\n      SimpleTextUtil.write(output, getHeader());\n      SimpleTextUtil.writeNewline(output);\n      SimpleTextUtil.write(output, VALUE_SIZE);\n      SimpleTextUtil.write(output, Integer.toString(this.valueSize), scratch);\n      SimpleTextUtil.writeNewline(output);\n      prepareFlush(docCount);\n      for (int i = 0; i < docCount; i++) {\n        SimpleTextUtil.write(output, DOC);\n        SimpleTextUtil.write(output, Integer.toString(i), scratch);\n        SimpleTextUtil.writeNewline(output);\n        SimpleTextUtil.write(output, VALUE);\n        writeDoc(output, i, spare);\n        SimpleTextUtil.writeNewline(output);\n      }\n      SimpleTextUtil.write(output, END);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      hash.close();\n      if (success) {\n        IOUtils.close(output);\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["de5bbadeb3abac0f650298bff584bd4317bd75aa"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["38e3b736c7ca086d61b7dbb841c905ee115490da","cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}