{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues_resetIterator().mjava","commits":[{"id":"c05513b96726572e07f5b4955a89ca7ed5e3a862","date":1498741424,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues_resetIterator().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValues_resetIterator() throws Exception {\n    Document doc = new Document();\n\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"f\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"c\")));\n\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 33L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 31L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 30L));\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(3, sortedSetDocValues.getValueCount());\n    for (int times = 0; times < 3; times++) {\n      assertTrue(sortedSetDocValues.advanceExact(0));\n      assertEquals(0L, sortedSetDocValues.nextOrd());\n      assertEquals(1L, sortedSetDocValues.nextOrd());\n      assertEquals(2L, sortedSetDocValues.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n    }\n\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    for (int times = 0; times < 3; times++) {\n      assertTrue(sortedNumericDocValues.advanceExact(0));\n      assertEquals(5, sortedNumericDocValues.docValueCount());\n      assertEquals(30L, sortedNumericDocValues.nextValue());\n      assertEquals(31L, sortedNumericDocValues.nextValue());\n      assertEquals(32L, sortedNumericDocValues.nextValue());\n      assertEquals(32L, sortedNumericDocValues.nextValue());\n      assertEquals(33L, sortedNumericDocValues.nextValue());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues_resetIterator().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValues_resetIterator() throws Exception {\n    Document doc = new Document();\n\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"f\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"c\")));\n\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 33L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 31L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 30L));\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(3, sortedSetDocValues.getValueCount());\n    for (int times = 0; times < 3; times++) {\n      assertTrue(sortedSetDocValues.advanceExact(0));\n      assertEquals(0L, sortedSetDocValues.nextOrd());\n      assertEquals(1L, sortedSetDocValues.nextOrd());\n      assertEquals(2L, sortedSetDocValues.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n    }\n\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    for (int times = 0; times < 3; times++) {\n      assertTrue(sortedNumericDocValues.advanceExact(0));\n      assertEquals(5, sortedNumericDocValues.docValueCount());\n      assertEquals(30L, sortedNumericDocValues.nextValue());\n      assertEquals(31L, sortedNumericDocValues.nextValue());\n      assertEquals(32L, sortedNumericDocValues.nextValue());\n      assertEquals(32L, sortedNumericDocValues.nextValue());\n      assertEquals(33L, sortedNumericDocValues.nextValue());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05513b96726572e07f5b4955a89ca7ed5e3a862"],"c05513b96726572e07f5b4955a89ca7ed5e3a862":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c05513b96726572e07f5b4955a89ca7ed5e3a862"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c05513b96726572e07f5b4955a89ca7ed5e3a862"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c05513b96726572e07f5b4955a89ca7ed5e3a862":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}