{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#getOOM(Throwable,IndexWriter,PrintStream).mjava","commits":[{"id":"949847c0040cd70a68222d526cb0da7bf6cbb3c2","date":1410997182,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#getOOM(Throwable,IndexWriter,PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  private OutOfMemoryError getOOM(Throwable disaster, IndexWriter writer, PrintStream log) {\n    Throwable e = disaster;\n    if (e instanceof AlreadyClosedException) {\n      e = e.getCause();\n    }\n    \n    if (e instanceof OutOfMemoryError && e.getMessage() != null && e.getMessage().startsWith(\"Fake OutOfMemoryError\")) {\n      log.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n      e.printStackTrace(log);\n      // TODO: remove rollback here, and add this assert to ensure \"full OOM protection\" anywhere IW does writes\n      // assertTrue(\"hit OOM but writer is still open, WTF: \", writer.isClosed());\n      try {\n        writer.rollback();\n      } catch (Throwable t) {}\n      return (OutOfMemoryError) e;\n    } else {\n      Rethrow.rethrow(disaster);\n      return null; // dead\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d0c334a824d4ce7d739c100bf4ae56111a995e3a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c48871ed951104729f5e17a8ee1091b43fa18980","date":1446564542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#getTragedy(Throwable,IndexWriter,PrintStream).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#getOOM(Throwable,IndexWriter,PrintStream).mjava","sourceNew":"  private VirtualMachineError getTragedy(Throwable disaster, IndexWriter writer, PrintStream log) {\n    Throwable e = disaster;\n    if (e instanceof AlreadyClosedException) {\n      e = e.getCause();\n    }\n    \n    if (e instanceof VirtualMachineError && e.getMessage() != null && e.getMessage().startsWith(\"Fake\")) {\n      log.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n      e.printStackTrace(log);\n      // TODO: remove rollback here, and add this assert to ensure \"full OOM protection\" anywhere IW does writes\n      // assertTrue(\"hit OOM but writer is still open, WTF: \", writer.isClosed());\n      try {\n        writer.rollback();\n      } catch (Throwable t) {}\n      return (VirtualMachineError) e;\n    } else {\n      Rethrow.rethrow(disaster);\n      return null; // dead\n    }\n  }\n\n","sourceOld":"  private OutOfMemoryError getOOM(Throwable disaster, IndexWriter writer, PrintStream log) {\n    Throwable e = disaster;\n    if (e instanceof AlreadyClosedException) {\n      e = e.getCause();\n    }\n    \n    if (e instanceof OutOfMemoryError && e.getMessage() != null && e.getMessage().startsWith(\"Fake OutOfMemoryError\")) {\n      log.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n      e.printStackTrace(log);\n      // TODO: remove rollback here, and add this assert to ensure \"full OOM protection\" anywhere IW does writes\n      // assertTrue(\"hit OOM but writer is still open, WTF: \", writer.isClosed());\n      try {\n        writer.rollback();\n      } catch (Throwable t) {}\n      return (OutOfMemoryError) e;\n    } else {\n      Rethrow.rethrow(disaster);\n      return null; // dead\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c48871ed951104729f5e17a8ee1091b43fa18980"],"c48871ed951104729f5e17a8ee1091b43fa18980":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["c48871ed951104729f5e17a8ee1091b43fa18980"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c48871ed951104729f5e17a8ee1091b43fa18980":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}