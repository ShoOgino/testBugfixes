{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","commits":[{"id":"18359c8e12d55f66c27cfe7babe86283f06a6aa5","date":1250426225,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","pathOld":"/dev/null","sourceNew":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    return streams.shingle;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    return streams.shingle;\n  }\n\n","sourceOld":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    return streams.shingle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de8f86ed4fa7f4b6970b25037bcca3d2732236b9","date":1260365552,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    return streams.shingle;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    return streams.shingle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39","date":1264946641,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    return streams.shingle;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    return streams.shingle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    return streams.shingle;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    return streams.shingle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["de8f86ed4fa7f4b6970b25037bcca3d2732236b9"],"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"de8f86ed4fa7f4b6970b25037bcca3d2732236b9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"]},"commit2Childs":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["de8f86ed4fa7f4b6970b25037bcca3d2732236b9"],"de8f86ed4fa7f4b6970b25037bcca3d2732236b9":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}