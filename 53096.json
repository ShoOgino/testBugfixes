{"path":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","commits":[{"id":"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2","date":1443129829,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","pathOld":"/dev/null","sourceNew":"  public void testThreadSafety() throws Exception {\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 10)];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final int iters = atLeast(1000);\n    for(int i=0;i<threads.length;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int iter=0;iter<iters && failed.get() == false;iter++) {\n                checkSort(new OfflineSorter(), generateRandom(1024));\n              }\n            } catch (Throwable th) {\n              failed.set(true);\n              throw new RuntimeException(th);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    assertFalse(failed.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 10)];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final int iters = atLeast(1000);\n    try (Directory dir = newDirectoryNoVirusScanner()) {\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                for(int iter=0;iter<iters && failed.get() == false;iter++) {\n                  checkSort(dir, new OfflineSorter(dir, \"foo_\" + threadID + \"_\" + iter), generateRandom(1024));\n                }\n              } catch (Throwable th) {\n                failed.set(true);\n                throw new RuntimeException(th);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      for(Thread thread : threads) {\n        thread.join();\n      }\n    }\n\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 10)];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final int iters = atLeast(1000);\n    for(int i=0;i<threads.length;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int iter=0;iter<iters && failed.get() == false;iter++) {\n                checkSort(new OfflineSorter(), generateRandom(1024));\n              }\n            } catch (Throwable th) {\n              failed.set(true);\n              throw new RuntimeException(th);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 10)];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final int iters = atLeast(1000);\n    try (Directory dir = newDirectory()) {\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                for(int iter=0;iter<iters && failed.get() == false;iter++) {\n                  checkSort(dir, new OfflineSorter(dir, \"foo_\" + threadID + \"_\" + iter), generateRandom(1024));\n                }\n              } catch (Throwable th) {\n                failed.set(true);\n                throw new RuntimeException(th);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      for(Thread thread : threads) {\n        thread.join();\n      }\n    }\n\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 10)];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final int iters = atLeast(1000);\n    try (Directory dir = newDirectoryNoVirusScanner()) {\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                for(int iter=0;iter<iters && failed.get() == false;iter++) {\n                  checkSort(dir, new OfflineSorter(dir, \"foo_\" + threadID + \"_\" + iter), generateRandom(1024));\n                }\n              } catch (Throwable th) {\n                failed.set(true);\n                throw new RuntimeException(th);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      for(Thread thread : threads) {\n        thread.join();\n      }\n    }\n\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 10)];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final int iters = atLeast(1000);\n    try (Directory dir = newDirectory()) {\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                for(int iter=0;iter<iters && failed.get() == false;iter++) {\n                  checkSort(dir, new OfflineSorter(dir, \"foo_\" + threadID + \"_\" + iter), generateRandom(1024));\n                }\n              } catch (Throwable th) {\n                failed.set(true);\n                throw new RuntimeException(th);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      for(Thread thread : threads) {\n        thread.join();\n      }\n    }\n\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 10)];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final int iters = atLeast(1000);\n    try (Directory dir = newDirectoryNoVirusScanner()) {\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                for(int iter=0;iter<iters && failed.get() == false;iter++) {\n                  checkSort(dir, new OfflineSorter(dir, \"foo_\" + threadID + \"_\" + iter), generateRandom(1024));\n                }\n              } catch (Throwable th) {\n                failed.set(true);\n                throw new RuntimeException(th);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      for(Thread thread : threads) {\n        thread.join();\n      }\n    }\n\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 10)];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final int iters = atLeast(1000);\n    try (Directory dir = newDirectory()) {\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                for(int iter=0;iter<iters && failed.get() == false;iter++) {\n                  checkSort(dir, new OfflineSorter(dir, \"foo_\" + threadID + \"_\" + iter), generateRandom(1024));\n                }\n              } catch (Throwable th) {\n                failed.set(true);\n                throw new RuntimeException(th);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      for(Thread thread : threads) {\n        thread.join();\n      }\n    }\n\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 10)];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final int iters = atLeast(1000);\n    try (Directory dir = newDirectoryNoVirusScanner()) {\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                for(int iter=0;iter<iters && failed.get() == false;iter++) {\n                  checkSort(dir, new OfflineSorter(dir, \"foo_\" + threadID + \"_\" + iter), generateRandom(1024));\n                }\n              } catch (Throwable th) {\n                failed.set(true);\n                throw new RuntimeException(th);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      for(Thread thread : threads) {\n        thread.join();\n      }\n    }\n\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 10)];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final int iters = atLeast(1000);\n    try (Directory dir = newDirectory()) {\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                for(int iter=0;iter<iters && failed.get() == false;iter++) {\n                  checkSort(dir, new OfflineSorter(dir, \"foo_\" + threadID + \"_\" + iter), generateRandom(1024));\n                }\n              } catch (Throwable th) {\n                failed.set(true);\n                throw new RuntimeException(th);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      for(Thread thread : threads) {\n        thread.join();\n      }\n    }\n\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 10)];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final int iters = atLeast(1000);\n    try (Directory dir = newDirectoryNoVirusScanner()) {\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                for(int iter=0;iter<iters && failed.get() == false;iter++) {\n                  checkSort(dir, new OfflineSorter(dir, \"foo_\" + threadID + \"_\" + iter), generateRandom(1024));\n                }\n              } catch (Throwable th) {\n                failed.set(true);\n                throw new RuntimeException(th);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      for(Thread thread : threads) {\n        thread.join();\n      }\n    }\n\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 10)];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final int iters = atLeast(200);\n    try (Directory dir = newDirectory()) {\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                for(int iter=0;iter<iters && failed.get() == false;iter++) {\n                  checkSort(dir, new OfflineSorter(dir, \"foo_\" + threadID + \"_\" + iter), generateRandom(1024));\n                }\n              } catch (Throwable th) {\n                failed.set(true);\n                throw new RuntimeException(th);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      for(Thread thread : threads) {\n        thread.join();\n      }\n    }\n\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    Thread[] threads = new Thread[TestUtil.nextInt(random(), 4, 10)];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final int iters = atLeast(1000);\n    try (Directory dir = newDirectory()) {\n      for(int i=0;i<threads.length;i++) {\n        final int threadID = i;\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                for(int iter=0;iter<iters && failed.get() == false;iter++) {\n                  checkSort(dir, new OfflineSorter(dir, \"foo_\" + threadID + \"_\" + iter), generateRandom(1024));\n                }\n              } catch (Throwable th) {\n                failed.set(true);\n                throw new RuntimeException(th);\n              }\n            }\n          };\n        threads[i].start();\n      }\n      for(Thread thread : threads) {\n        thread.join();\n      }\n    }\n\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["5a207d19eac354d649c3f0e2cce070017c78125e"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["867e3d9153fb761456b54a9dcce566e1545c5ef6","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"5a207d19eac354d649c3f0e2cce070017c78125e":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}