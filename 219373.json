{"path":"src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","commits":[{"id":"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1","date":1263263734,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","sourceNew":"  public final void writeDocList(String name, final DocList ids, Set<String> fields) throws IOException \n  {\n    this.writeDocuments( name, new DocumentListInfo() \n    {  \n      public int getCount() {\n        return ids.size();\n      }\n      \n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = request.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","sourceOld":"  public final void writeDocList(String name, final DocList ids, Set<String> fields) throws IOException \n  {\n    this.writeDocuments( name, new DocumentListInfo() \n    {  \n      public int getCount() {\n        return ids.size();\n      }\n      \n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = request.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","pathOld":"src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","sourceNew":"  public final void writeDocList(String name, final DocList ids, Set<String> fields) throws IOException \n  {\n    this.writeDocuments( name, new DocumentListInfo() \n    {  \n      public int getCount() {\n        return ids.size();\n      }\n      \n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = request.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","sourceOld":"  public final void writeDocList(String name, final DocList ids, Set<String> fields) throws IOException \n  {\n    this.writeDocuments( name, new DocumentListInfo() \n    {  \n      public int getCount() {\n        return ids.size();\n      }\n      \n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = request.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}