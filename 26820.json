{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n    qp.setAllowLeadingWildcard(true);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null) {\n            line = line.trim();\n            if (line.length() != 0 && !line.startsWith(\"#\")) {\n              try {\n                qq.add(qp.parse(line));\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b89678825b68eccaf09e6ab71675fc0b0af1e099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}