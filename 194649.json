{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#test().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#test().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#test().mjava","sourceNew":"  public void test() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"foo\", 50),\n        new TermFreq(\"bar\", 10),\n        new TermFreq(\"barbar\", 12),\n        new TermFreq(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n    \n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"foo\", 50),\n        new TermFreq(\"bar\", 10),\n        new TermFreq(\"barbar\", 12),\n        new TermFreq(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n    \n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#test().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#test().mjava","sourceNew":"  public void test() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"foo\", 50),\n        new TermFreq(\"bar\", 10),\n        new TermFreq(\"barbar\", 12),\n        new TermFreq(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), true, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"foo\", 50),\n        new TermFreq(\"bar\", 10),\n        new TermFreq(\"barbar\", 12),\n        new TermFreq(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n    \n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e54fda1eb029b24dd806a3b668c0d78b1625fd9","date":1350933798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#test().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#test().mjava","sourceNew":"  public void test() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"foo\", 50),\n        new TermFreq(\"bar\", 10),\n        new TermFreq(\"barbar\", 12),\n        new TermFreq(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"foo\", 50),\n        new TermFreq(\"bar\", 10),\n        new TermFreq(\"barbar\", 12),\n        new TermFreq(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), true, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#test().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#test().mjava","sourceNew":"  public void test() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"foo\", 50),\n        new TermFreq(\"bar\", 10),\n        new TermFreq(\"barbar\", 12),\n        new TermFreq(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"foo\", 50),\n        new TermFreq(\"bar\", 10),\n        new TermFreq(\"barbar\", 12),\n        new TermFreq(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), true, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c784b25e28b81ddedff2b97738c8286773f00f15","date":1352150231,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#test().mjava","sourceNew":"  public void testBasic() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"foo\", 50),\n        new TermFreq(\"bar\", 10),\n        new TermFreq(\"barbar\", 12),\n        new TermFreq(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"foo\", 50),\n        new TermFreq(\"bar\", 10),\n        new TermFreq(\"barbar\", 12),\n        new TermFreq(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e54fda1eb029b24dd806a3b668c0d78b1625fd9":["6ce825e9276493231308229152c48f755ce1a0a5"],"62e52115b56781006682fd92c6938efaf174304d":["6ce825e9276493231308229152c48f755ce1a0a5","3e54fda1eb029b24dd806a3b668c0d78b1625fd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ce825e9276493231308229152c48f755ce1a0a5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c784b25e28b81ddedff2b97738c8286773f00f15"],"c784b25e28b81ddedff2b97738c8286773f00f15":["3e54fda1eb029b24dd806a3b668c0d78b1625fd9"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6ce825e9276493231308229152c48f755ce1a0a5"],"3e54fda1eb029b24dd806a3b668c0d78b1625fd9":["62e52115b56781006682fd92c6938efaf174304d","c784b25e28b81ddedff2b97738c8286773f00f15"],"62e52115b56781006682fd92c6938efaf174304d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6ce825e9276493231308229152c48f755ce1a0a5":["3e54fda1eb029b24dd806a3b668c0d78b1625fd9","62e52115b56781006682fd92c6938efaf174304d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c784b25e28b81ddedff2b97738c8286773f00f15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}