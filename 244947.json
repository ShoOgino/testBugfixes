{"path":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeCollectionResource#post(Representation).mjava","commits":[{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeCollectionResource#post(Representation).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      }\n      \n      if (null == entity.getMediaType())\n        entity.setMediaType(MediaType.APPLICATION_JSON);\n      \n      if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n        String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n            + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n        log.error(message);\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      }\n      \n      Object object = ObjectBuilder.fromJSON(entity.getText());\n      if (!(object instanceof List)) {\n        String message = \"Invalid JSON type \" + object.getClass().getName() \n            + \", expected List of field type definitions in the form of\"\n            + \" (ignore the backslashes): [{\\\"name\\\":\\\"text_general\\\",\\\"class\\\":\\\"solr.TextField\\\", ...}, {...}, ...]\";\n        log.error(message);\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      }\n      \n      List<Map<String, Object>> fieldTypeList = (List<Map<String, Object>>) object;\n      if (fieldTypeList.size() > 0)\n        addOrUpdateFieldTypes(fieldTypeList);\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeCollectionResource#post(Representation).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      }\n      \n      if (null == entity.getMediaType())\n        entity.setMediaType(MediaType.APPLICATION_JSON);\n      \n      if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n        String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n            + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n        log.error(message);\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      }\n      \n      Object object = ObjectBuilder.fromJSON(entity.getText());\n      if (!(object instanceof List)) {\n        String message = \"Invalid JSON type \" + object.getClass().getName() \n            + \", expected List of field type definitions in the form of\"\n            + \" (ignore the backslashes): [{\\\"name\\\":\\\"text_general\\\",\\\"class\\\":\\\"solr.TextField\\\", ...}, {...}, ...]\";\n        log.error(message);\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      }\n      \n      List<Map<String, Object>> fieldTypeList = (List<Map<String, Object>>) object;\n      if (fieldTypeList.size() > 0)\n        addOrUpdateFieldTypes(fieldTypeList);\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f494bc636a1302995e4930fdccd371eeda452f87":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["f494bc636a1302995e4930fdccd371eeda452f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}