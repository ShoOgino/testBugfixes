{"path":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","commits":[{"id":"9d22d0f5940f155267b250876fa797ff69e8e6e7","date":1400540695,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"/dev/null","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 10);\n    assertTrue(\"Expected active 2 replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertTrue(\"Expected rf=3 as all replicas are up, but got \"+rf, rf == 3);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertTrue(\"Expected rf=2 as one replica should be down, but got \"+rf, rf == 2);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertTrue(\"Expected rf=1 as both replicas should be down, but got \"+rf, rf == 1);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    rf = sendDoc(4, minRf);\n    assertTrue(\"Expected rf=3 as partitions to replicas have been healed, but got \"+rf, rf == 3);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertTrue(\"Expected rf=3 for batch but got \"+batchRf, batchRf == 3);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n\n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertTrue(\"Expected rf=2 for batch (one replica is down) but got \"+batchRf, batchRf == 2);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertTrue(\"Expected rf=1 for batch (two replicas are down) but got \"+batchRf, batchRf == 1);\n    \n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    Thread.sleep(1000);\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":["7cef303ab8a41bdfabddc1f0b469f35eaad960f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01a31987ae9ff900326e582e9917563fd59ce159","date":1400592028,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 10);\n    assertTrue(\"Expected active 2 replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertTrue(\"Expected rf=3 as all replicas are up, but got \"+rf, rf == 3);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertTrue(\"Expected rf=2 as one replica should be down, but got \"+rf, rf == 2);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertTrue(\"Expected rf=1 as both replicas should be down, but got \"+rf, rf == 1);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertTrue(\"Expected rf=3 as partitions to replicas have been healed, but got \"+rf, rf == 3);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertTrue(\"Expected rf=3 for batch but got \"+batchRf, batchRf == 3);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n\n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertTrue(\"Expected rf=2 for batch (one replica is down) but got \"+batchRf, batchRf == 2);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertTrue(\"Expected rf=1 for batch (two replicas are down) but got \"+batchRf, batchRf == 1);\n    \n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    Thread.sleep(1000);\n  } \n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 10);\n    assertTrue(\"Expected active 2 replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertTrue(\"Expected rf=3 as all replicas are up, but got \"+rf, rf == 3);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertTrue(\"Expected rf=2 as one replica should be down, but got \"+rf, rf == 2);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertTrue(\"Expected rf=1 as both replicas should be down, but got \"+rf, rf == 1);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    rf = sendDoc(4, minRf);\n    assertTrue(\"Expected rf=3 as partitions to replicas have been healed, but got \"+rf, rf == 3);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertTrue(\"Expected rf=3 for batch but got \"+batchRf, batchRf == 3);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n\n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertTrue(\"Expected rf=2 for batch (one replica is down) but got \"+batchRf, batchRf == 2);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertTrue(\"Expected rf=1 for batch (two replicas are down) but got \"+batchRf, batchRf == 1);\n    \n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    Thread.sleep(1000);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3caf472b0a0fa2bad9079962e59f83162aeec919","date":1400698619,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 10);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n  } \n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 10);\n    assertTrue(\"Expected active 2 replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertTrue(\"Expected rf=3 as all replicas are up, but got \"+rf, rf == 3);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertTrue(\"Expected rf=2 as one replica should be down, but got \"+rf, rf == 2);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertTrue(\"Expected rf=1 as both replicas should be down, but got \"+rf, rf == 1);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertTrue(\"Expected rf=3 as partitions to replicas have been healed, but got \"+rf, rf == 3);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertTrue(\"Expected rf=3 for batch but got \"+batchRf, batchRf == 3);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n\n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertTrue(\"Expected rf=2 for batch (one replica is down) but got \"+batchRf, batchRf == 2);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertTrue(\"Expected rf=1 for batch (two replicas are down) but got \"+batchRf, batchRf == 1);\n    \n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    Thread.sleep(1000);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"/dev/null","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 10);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0a25fce2053175e7165acaaedd21ae5b63530ef","date":1400776425,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 10);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 10);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3426e338f3c13b9647f5332ce8d1a747deb5ce01","date":1402937055,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 10);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 10);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 10);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 10);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9043cd220362869f58e50f635c13c362f8377da","date":1404227796,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 10);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7cef303ab8a41bdfabddc1f0b469f35eaad960f9","date":1426183109,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","bugFix":["9d22d0f5940f155267b250876fa797ff69e8e6e7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    int batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    batchRf = \n        cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), cloudClient.request(up)); \n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615bf5b56d95ed8c9bf06a402db6c817d6bff21a","date":1509492118,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n\n    createCollectionWithRetry(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n\n    // Uses cloudClient do do it's work\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n    doDBQWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n\n\n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    // Uses cloudClient do do it's work\n    doDBQWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n\n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n\n    doDBQWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n\n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n\n    doDBQWithRetry(3, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    doDBQWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n\n    Thread.sleep(2000); \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n  }\n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n    \n    createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n        \n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n    \n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n    \n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n    \n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000);\n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);    \n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43f5f8344e80b4bfb2069917069430266753d2f0","date":1538584815,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n\n    createCollectionWithRetry(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n\n    // Uses cloudClient to do it's work\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n    doDBQWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n\n\n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    // Uses cloudClient to do it's work\n    doDBQWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n\n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n\n    doDBQWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n\n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n\n    doDBQWithRetry(3, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    doDBQWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n\n    Thread.sleep(2000); \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n  }\n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n\n    createCollectionWithRetry(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n\n    // Uses cloudClient do do it's work\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n    doDBQWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n\n\n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    // Uses cloudClient do do it's work\n    doDBQWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n\n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n\n    doDBQWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n\n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n\n    doDBQWithRetry(3, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    doDBQWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n\n    Thread.sleep(2000); \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d99489c6c035e8a49f593f8df53ca127e978060","date":1562104333,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    final int numShards = 1;\n    final int replicationFactor = 3;\n    final int maxShardsPerNode = 1;\n    final String testCollectionName = \"repfacttest_c8n_1x3\";\n    final String shardId = \"shard1\";\n    final int minRf = 2;\n\n    createCollectionWithRetry(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    log.info(\"Indexing docId=1\");\n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n\n    // Uses cloudClient to do it's work\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n    doDBQWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n\n    log.info(\"Closing one proxy port\");\n    getProxyForReplica(replicas.get(0)).close();\n    \n    log.info(\"Indexing docId=2\");\n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    // Uses cloudClient to do it's work\n    doDBQWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n\n\n    // SOLR-13599 sanity check if problem is related to sending a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    log.info(\"Indexing batch of documents (30-45)\");\n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeded, only one replica should be down\", batchRf);\n    \n    log.info(\"Closing second proxy port\");\n    getProxyForReplica(replicas.get(1)).close();    \n\n    log.info(\"Indexing docId=3\");\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n\n    // heal the partitions\n    log.info(\"Re-opening closed proxy ports\");\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    log.info(\"Indexing docId=4\");\n    rf = sendDoc(4, minRf);\n    assertRf(3, \"all replicas have been healed\", rf);\n\n    doDBQWithRetry(3, 5, \"delete should have propagated to all 3 replicas\", 1);\n    doDBIdWithRetry(3, 5, \"delete should have propagated to all 3 replicas\", 1);\n\n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    log.info(\"Indexing batch of documents (5-14)\");\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch add should have succeeded on all replicas\", batchRf);\n\n    doDBQWithRetry(3, 5, \"batch deletes should have propagated to all 3 replica\", 15);\n    doDBIdWithRetry(3, 5, \"batch deletes should have propagated to all 3 replica\", 15);\n\n    // add some chaos to the batch\n    log.info(\"Closing one proxy port (again)\");\n    getProxyForReplica(replicas.get(0)).close();\n\n    // send a single doc (again)\n    // SOLR-13599 sanity check if problem is related to \"re-closing\" a port on the proxy\n    log.info(\"Indexing docId=5\");\n    rf = sendDoc(5, minRf);\n    assertRf(2, \"doc should have succeded, only one replica should be down\", rf);\n    \n    // now send a batch (again)\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    log.info(\"Indexing batch of documents (15-29)\");\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeded, only one replica should be down\", batchRf);\n\n    doDBQWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    log.info(\"Closing second proxy port (again)\");\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n\n    Thread.sleep(2000); \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n  }\n\n","sourceOld":"  protected void testRf3() throws Exception {\n    int numShards = 1;\n    int replicationFactor = 3;\n    int maxShardsPerNode = 1;\n    String testCollectionName = \"repfacttest_c8n_1x3\";\n    String shardId = \"shard1\";\n    int minRf = 2;\n\n    createCollectionWithRetry(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n\n    // Uses cloudClient to do it's work\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n    doDBQWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n\n\n    getProxyForReplica(replicas.get(0)).close();\n    \n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    // Uses cloudClient to do it's work\n    doDBQWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n\n\n    getProxyForReplica(replicas.get(1)).close();    \n\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n\n    // heal the partitions\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    rf = sendDoc(4, minRf);\n    assertRf(3, \"partitions to replicas have been healed\", rf);\n\n    doDBQWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n\n    // now send a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch should have succeeded on all replicas\", batchRf);\n\n    doDBQWithRetry(3, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    // add some chaos to the batch\n    getProxyForReplica(replicas.get(0)).close();\n    \n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeeded on 2 replicas (only one replica should be down)\", batchRf);\n\n    doDBQWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n\n    Thread.sleep(2000); \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#testRf3().mjava","sourceNew":"  protected void testRf3() throws Exception {\n    final int numShards = 1;\n    final int replicationFactor = 3;\n    final String testCollectionName = \"repfacttest_c8n_1x3\";\n    final String shardId = \"shard1\";\n    final int minRf = 2;\n\n    createCollectionWithRetry(testCollectionName, \"conf1\", numShards, replicationFactor);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    log.info(\"Indexing docId=1\");\n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n\n    // Uses cloudClient to do it's work\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n    doDBQWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n\n    log.info(\"Closing one proxy port\");\n    getProxyForReplica(replicas.get(0)).close();\n    \n    log.info(\"Indexing docId=2\");\n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    // Uses cloudClient to do it's work\n    doDBQWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n\n\n    // SOLR-13599 sanity check if problem is related to sending a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    log.info(\"Indexing batch of documents (30-45)\");\n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeded, only one replica should be down\", batchRf);\n    \n    log.info(\"Closing second proxy port\");\n    getProxyForReplica(replicas.get(1)).close();    \n\n    log.info(\"Indexing docId=3\");\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n\n    // heal the partitions\n    log.info(\"Re-opening closed proxy ports\");\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    log.info(\"Indexing docId=4\");\n    rf = sendDoc(4, minRf);\n    assertRf(3, \"all replicas have been healed\", rf);\n\n    doDBQWithRetry(3, 5, \"delete should have propagated to all 3 replicas\", 1);\n    doDBIdWithRetry(3, 5, \"delete should have propagated to all 3 replicas\", 1);\n\n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    log.info(\"Indexing batch of documents (5-14)\");\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch add should have succeeded on all replicas\", batchRf);\n\n    doDBQWithRetry(3, 5, \"batch deletes should have propagated to all 3 replica\", 15);\n    doDBIdWithRetry(3, 5, \"batch deletes should have propagated to all 3 replica\", 15);\n\n    // add some chaos to the batch\n    log.info(\"Closing one proxy port (again)\");\n    getProxyForReplica(replicas.get(0)).close();\n\n    // send a single doc (again)\n    // SOLR-13599 sanity check if problem is related to \"re-closing\" a port on the proxy\n    log.info(\"Indexing docId=5\");\n    rf = sendDoc(5, minRf);\n    assertRf(2, \"doc should have succeded, only one replica should be down\", rf);\n    \n    // now send a batch (again)\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    log.info(\"Indexing batch of documents (15-29)\");\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeded, only one replica should be down\", batchRf);\n\n    doDBQWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    log.info(\"Closing second proxy port (again)\");\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n\n    Thread.sleep(2000); \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n  }\n\n","sourceOld":"  protected void testRf3() throws Exception {\n    final int numShards = 1;\n    final int replicationFactor = 3;\n    final int maxShardsPerNode = 1;\n    final String testCollectionName = \"repfacttest_c8n_1x3\";\n    final String shardId = \"shard1\";\n    final int minRf = 2;\n\n    createCollectionWithRetry(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n    cloudClient.setDefaultCollection(testCollectionName);\n    \n    List<Replica> replicas = \n        ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    assertTrue(\"Expected 2 active replicas for \"+testCollectionName, replicas.size() == 2);\n                \n    log.info(\"Indexing docId=1\");\n    int rf = sendDoc(1, minRf);\n    assertRf(3, \"all replicas should be active\", rf);\n\n    // Uses cloudClient to do it's work\n    doDBIdWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n    doDBQWithRetry(3, 5, \"deletes should have propagated to all 3 replicas\", 1);\n\n    log.info(\"Closing one proxy port\");\n    getProxyForReplica(replicas.get(0)).close();\n    \n    log.info(\"Indexing docId=2\");\n    rf = sendDoc(2, minRf);\n    assertRf(2, \"one replica should be down\", rf);\n\n    // Uses cloudClient to do it's work\n    doDBQWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to 2 replicas\", 1);\n\n\n    // SOLR-13599 sanity check if problem is related to sending a batch\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    log.info(\"Indexing batch of documents (30-45)\");\n    int batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeded, only one replica should be down\", batchRf);\n    \n    log.info(\"Closing second proxy port\");\n    getProxyForReplica(replicas.get(1)).close();    \n\n    log.info(\"Indexing docId=3\");\n    rf = sendDoc(3, minRf);\n    assertRf(1, \"both replicas should be down\", rf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 1);\n\n    // heal the partitions\n    log.info(\"Re-opening closed proxy ports\");\n    getProxyForReplica(replicas.get(0)).reopen();    \n    getProxyForReplica(replicas.get(1)).reopen();\n    \n    Thread.sleep(2000); // give time for the healed partition to get propagated\n    \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n    \n    log.info(\"Indexing docId=4\");\n    rf = sendDoc(4, minRf);\n    assertRf(3, \"all replicas have been healed\", rf);\n\n    doDBQWithRetry(3, 5, \"delete should have propagated to all 3 replicas\", 1);\n    doDBIdWithRetry(3, 5, \"delete should have propagated to all 3 replicas\", 1);\n\n    // now send a batch\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=5; i < 15; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    \n    log.info(\"Indexing batch of documents (5-14)\");\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(3, \"batch add should have succeeded on all replicas\", batchRf);\n\n    doDBQWithRetry(3, 5, \"batch deletes should have propagated to all 3 replica\", 15);\n    doDBIdWithRetry(3, 5, \"batch deletes should have propagated to all 3 replica\", 15);\n\n    // add some chaos to the batch\n    log.info(\"Closing one proxy port (again)\");\n    getProxyForReplica(replicas.get(0)).close();\n\n    // send a single doc (again)\n    // SOLR-13599 sanity check if problem is related to \"re-closing\" a port on the proxy\n    log.info(\"Indexing docId=5\");\n    rf = sendDoc(5, minRf);\n    assertRf(2, \"doc should have succeded, only one replica should be down\", rf);\n    \n    // now send a batch (again)\n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=15; i < 30; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n    log.info(\"Indexing batch of documents (15-29)\");\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(2, \"batch should have succeded, only one replica should be down\", batchRf);\n\n    doDBQWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(2, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    // close the 2nd replica, and send a 3rd batch with expected achieved rf=1\n    log.info(\"Closing second proxy port (again)\");\n    getProxyForReplica(replicas.get(1)).close();\n    \n    batch = new ArrayList<SolrInputDocument>(10);\n    for (int i=30; i < 45; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, String.valueOf(i));\n      doc.addField(\"a_t\", \"hello\" + i);\n      batch.add(doc);\n    }\n\n    batchRf = sendDocsWithRetry(batch, minRf, 5, 1);\n    assertRf(1, \"batch should have succeeded on the leader only (both replicas should be down)\", batchRf);\n\n    doDBQWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n    doDBIdWithRetry(1, 5, \"deletes should have propagated to only 1 replica\", 15);\n\n    getProxyForReplica(replicas.get(0)).reopen();        \n    getProxyForReplica(replicas.get(1)).reopen();\n\n    Thread.sleep(2000); \n    ensureAllReplicasAreActive(testCollectionName, shardId, numShards, replicationFactor, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43f5f8344e80b4bfb2069917069430266753d2f0":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"7cef303ab8a41bdfabddc1f0b469f35eaad960f9":["f9043cd220362869f58e50f635c13c362f8377da"],"197bbedf08450ade98a11f4a0001448059666bec":["7cef303ab8a41bdfabddc1f0b469f35eaad960f9"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3caf472b0a0fa2bad9079962e59f83162aeec919"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["c0a25fce2053175e7165acaaedd21ae5b63530ef","3426e338f3c13b9647f5332ce8d1a747deb5ce01"],"f9043cd220362869f58e50f635c13c362f8377da":["3426e338f3c13b9647f5332ce8d1a747deb5ce01"],"3426e338f3c13b9647f5332ce8d1a747deb5ce01":["c0a25fce2053175e7165acaaedd21ae5b63530ef"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["9d99489c6c035e8a49f593f8df53ca127e978060"],"28288370235ed02234a64753cdbf0c6ec096304a":["7cef303ab8a41bdfabddc1f0b469f35eaad960f9","197bbedf08450ade98a11f4a0001448059666bec"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f9043cd220362869f58e50f635c13c362f8377da","7cef303ab8a41bdfabddc1f0b469f35eaad960f9"],"9d22d0f5940f155267b250876fa797ff69e8e6e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0a25fce2053175e7165acaaedd21ae5b63530ef":["3caf472b0a0fa2bad9079962e59f83162aeec919"],"01a31987ae9ff900326e582e9917563fd59ce159":["9d22d0f5940f155267b250876fa797ff69e8e6e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d99489c6c035e8a49f593f8df53ca127e978060":["43f5f8344e80b4bfb2069917069430266753d2f0"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["7cef303ab8a41bdfabddc1f0b469f35eaad960f9","197bbedf08450ade98a11f4a0001448059666bec"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["28288370235ed02234a64753cdbf0c6ec096304a"],"3caf472b0a0fa2bad9079962e59f83162aeec919":["01a31987ae9ff900326e582e9917563fd59ce159"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"43f5f8344e80b4bfb2069917069430266753d2f0":["9d99489c6c035e8a49f593f8df53ca127e978060"],"7cef303ab8a41bdfabddc1f0b469f35eaad960f9":["197bbedf08450ade98a11f4a0001448059666bec","28288370235ed02234a64753cdbf0c6ec096304a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"b7605579001505896d48b07160075a5c8b8e128e":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"f9043cd220362869f58e50f635c13c362f8377da":["7cef303ab8a41bdfabddc1f0b469f35eaad960f9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"3426e338f3c13b9647f5332ce8d1a747deb5ce01":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","f9043cd220362869f58e50f635c13c362f8377da"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9d22d0f5940f155267b250876fa797ff69e8e6e7":["01a31987ae9ff900326e582e9917563fd59ce159"],"c0a25fce2053175e7165acaaedd21ae5b63530ef":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","3426e338f3c13b9647f5332ce8d1a747deb5ce01"],"01a31987ae9ff900326e582e9917563fd59ce159":["3caf472b0a0fa2bad9079962e59f83162aeec919"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7605579001505896d48b07160075a5c8b8e128e","9d22d0f5940f155267b250876fa797ff69e8e6e7"],"9d99489c6c035e8a49f593f8df53ca127e978060":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["43f5f8344e80b4bfb2069917069430266753d2f0"],"3caf472b0a0fa2bad9079962e59f83162aeec919":["b7605579001505896d48b07160075a5c8b8e128e","c0a25fce2053175e7165acaaedd21ae5b63530ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","c6f080a2ab37c464dd98db173f6cbf10dc74f211","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}