{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","commits":[{"id":"e456307e9593d8518ec97cd724d8a7d3a109297b","date":1343503424,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), IOUtils.CHARSET_UTF_8),\n      TEST_VERSION_CURRENT\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.en.KStemFilterFactory\",\n        rl.newInstance(\"org.apache.lucene.analysis.en.KStemFilterFactory\", TokenFilterFactory.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), IOUtils.CHARSET_UTF_8),\n      TEST_VERSION_CURRENT\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.en.KStemFilterFactory\",\n        rl.newInstance(\"org.apache.lucene.analysis.en.KStemFilterFactory\", TokenFilterFactory.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), IOUtils.CHARSET_UTF_8),\n      TEST_VERSION_CURRENT\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.en.KStemFilterFactory\",\n        rl.newInstance(\"org.apache.lucene.analysis.en.KStemFilterFactory\", TokenFilterFactory.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","sourceNew":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), IOUtils.CHARSET_UTF_8),\n      TEST_VERSION_CURRENT\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.util.RollingCharBuffer\",\n        rl.newInstance(\"org.apache.lucene.analysis.util.RollingCharBuffer\", Object.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","sourceOld":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), IOUtils.CHARSET_UTF_8),\n      TEST_VERSION_CURRENT\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.en.KStemFilterFactory\",\n        rl.newInstance(\"org.apache.lucene.analysis.en.KStemFilterFactory\", TokenFilterFactory.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","sourceNew":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), StandardCharsets.UTF_8),\n      TEST_VERSION_CURRENT\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.util.RollingCharBuffer\",\n        rl.newInstance(\"org.apache.lucene.analysis.util.RollingCharBuffer\", Object.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","sourceOld":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), IOUtils.CHARSET_UTF_8),\n      TEST_VERSION_CURRENT\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.util.RollingCharBuffer\",\n        rl.newInstance(\"org.apache.lucene.analysis.util.RollingCharBuffer\", Object.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","sourceNew":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), StandardCharsets.UTF_8),\n      TEST_VERSION_CURRENT\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.util.RollingCharBuffer\",\n        rl.newInstance(\"org.apache.lucene.analysis.util.RollingCharBuffer\", Object.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","sourceOld":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), IOUtils.CHARSET_UTF_8),\n      TEST_VERSION_CURRENT\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.util.RollingCharBuffer\",\n        rl.newInstance(\"org.apache.lucene.analysis.util.RollingCharBuffer\", Object.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","sourceNew":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), StandardCharsets.UTF_8)\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.util.RollingCharBuffer\",\n        rl.newInstance(\"org.apache.lucene.analysis.util.RollingCharBuffer\", Object.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","sourceOld":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), StandardCharsets.UTF_8),\n      TEST_VERSION_CURRENT\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.util.RollingCharBuffer\",\n        rl.newInstance(\"org.apache.lucene.analysis.util.RollingCharBuffer\", Object.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","sourceNew":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), StandardCharsets.UTF_8),\n      TEST_VERSION_CURRENT\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.util.RollingCharBuffer\",\n        rl.newInstance(\"org.apache.lucene.analysis.util.RollingCharBuffer\", Object.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","sourceOld":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), StandardCharsets.UTF_8)\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.util.RollingCharBuffer\",\n        rl.newInstance(\"org.apache.lucene.analysis.util.RollingCharBuffer\", Object.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","sourceNew":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), StandardCharsets.UTF_8)\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.util.RollingCharBuffer\",\n        rl.newInstance(\"org.apache.lucene.analysis.util.RollingCharBuffer\", Object.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","sourceOld":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), StandardCharsets.UTF_8),\n      TEST_VERSION_CURRENT\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.util.RollingCharBuffer\",\n        rl.newInstance(\"org.apache.lucene.analysis.util.RollingCharBuffer\", Object.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c55f5cb3c0ab032d284f559dab6dcf68b13c67b1","date":1441854815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestFilesystemResourceLoader#assertClasspathDelegation(ResourceLoader).mjava","sourceNew":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), StandardCharsets.UTF_8)\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.util.RollingCharBuffer\",\n        rl.newInstance(\"org.apache.lucene.analysis.util.RollingCharBuffer\", Object.class).getClass().getName());\n  }\n\n","sourceOld":"  private void assertClasspathDelegation(ResourceLoader rl) throws Exception {\n    // try a stopwords file from classpath\n    CharArraySet set = WordlistLoader.getSnowballWordSet(\n      new InputStreamReader(rl.openResource(\"org/apache/lucene/analysis/snowball/english_stop.txt\"), StandardCharsets.UTF_8)\n    );\n    assertTrue(set.contains(\"you\"));\n    // try to load a class; we use string comparison because classloader may be different...\n    assertEquals(\"org.apache.lucene.analysis.util.RollingCharBuffer\",\n        rl.newInstance(\"org.apache.lucene.analysis.util.RollingCharBuffer\", Object.class).getClass().getName());\n    // theoretically classes should also be loadable:\n    IOUtils.closeWhileHandlingException(rl.openResource(\"java/lang/String.class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd","7d89d7e4e5101347833eea558851bf4209218619"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["7d89d7e4e5101347833eea558851bf4209218619"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e456307e9593d8518ec97cd724d8a7d3a109297b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e456307e9593d8518ec97cd724d8a7d3a109297b"],"c55f5cb3c0ab032d284f559dab6dcf68b13c67b1":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["e456307e9593d8518ec97cd724d8a7d3a109297b"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"7d89d7e4e5101347833eea558851bf4209218619":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"e456307e9593d8518ec97cd724d8a7d3a109297b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c55f5cb3c0ab032d284f559dab6dcf68b13c67b1"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["c55f5cb3c0ab032d284f559dab6dcf68b13c67b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","e456307e9593d8518ec97cd724d8a7d3a109297b"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"c55f5cb3c0ab032d284f559dab6dcf68b13c67b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","ff4227bb146f97aabae888091c19e48c88dbb0db"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"e456307e9593d8518ec97cd724d8a7d3a109297b":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}