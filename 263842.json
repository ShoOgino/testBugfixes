{"path":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#findNextPrimeAfter(int).mjava","commits":[{"id":"99b17503f4e360f8140fe80a593268486cd718b4","date":1318337685,"type":1,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#findNextPrimeAfter(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#findNextPrimeAfter(int).mjava","sourceNew":"  /**\n   * Returns the first prime number that is larger than <code>n</code>.\n   * @param n A number less than the prime to be returned.\n   * @return The smallest prime larger than <code>n</code>.\n   */\n  private static int findNextPrimeAfter(int n) {\n    n += (n % 2 == 0) ? 1 : 2; // next odd\n    foundFactor: for (;; n += 2) { //TODO labels??!!\n      int sri = (int) (Math.sqrt(n));\n      for (int primeIndex = 0; primeIndex < N_PRIMES; primeIndex++) {\n        int p = primes[primeIndex];\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n      for (int p = primes[N_PRIMES - 1] + 2;; p += 2) {\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the first prime number that is larger than <code>n</code>.\n   * @param n A number less than the prime to be returned.\n   * @return The smallest prime larger than <code>n</code>.\n   */\n  private static int findNextPrimeAfter(int n) {\n    n += (n % 2 == 0) ? 1 : 2; // next odd\n    foundFactor: for (;; n += 2) {\n      int sri = (int) (Math.sqrt(n));\n      for (int primeIndex = 0; primeIndex < RandomSample.N_PRIMES; primeIndex++) {\n        int p = RandomSample.primes[primeIndex];\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n      for (int p = RandomSample.primes[RandomSample.N_PRIMES - 1] + 2;; p += 2) {\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n    }\n  } // end RandomSample.findNextPrimeAfter()\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#findNextPrimeAfter(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#findNextPrimeAfter(int).mjava","sourceNew":"  /**\n   * Returns the first prime number that is larger than <code>n</code>.\n   * @param n A number less than the prime to be returned.\n   * @return The smallest prime larger than <code>n</code>.\n   */\n  private static int findNextPrimeAfter(int n) {\n    n += (n % 2 == 0) ? 1 : 2; // next odd\n    foundFactor: for (;; n += 2) { //TODO labels??!!\n      int sri = (int) (Math.sqrt(n));\n      for (int primeIndex = 0; primeIndex < N_PRIMES; primeIndex++) {\n        int p = primes[primeIndex];\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n      for (int p = primes[N_PRIMES - 1] + 2;; p += 2) {\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the first prime number that is larger than <code>n</code>.\n   * @param n A number less than the prime to be returned.\n   * @return The smallest prime larger than <code>n</code>.\n   */\n  private static int findNextPrimeAfter(int n) {\n    n += (n % 2 == 0) ? 1 : 2; // next odd\n    foundFactor: for (;; n += 2) { //TODO labels??!!\n      int sri = (int) (Math.sqrt(n));\n      for (int primeIndex = 0; primeIndex < N_PRIMES; primeIndex++) {\n        int p = primes[primeIndex];\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n      for (int p = primes[N_PRIMES - 1] + 2;; p += 2) {\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["99b17503f4e360f8140fe80a593268486cd718b4"],"99b17503f4e360f8140fe80a593268486cd718b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"99b17503f4e360f8140fe80a593268486cd718b4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99b17503f4e360f8140fe80a593268486cd718b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}