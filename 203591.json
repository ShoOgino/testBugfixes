{"path":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","commits":[{"id":"04a4a94db1eb59c8583adb166acfe686a031bedc","date":1230622637,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"/dev/null","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQuery dq = new DistanceQuery(lat, lng, miles, latField, lngField, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 14 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(14, distances.size());\n    assertEquals(7, results);\n    \n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ed23bc688871c07712a31edf012919ea9cd466","date":1230660056,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, latField, lngField, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 14 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(14, distances.size());\n    assertEquals(7, results);\n    \n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQuery dq = new DistanceQuery(lat, lng, miles, latField, lngField, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 14 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(14, distances.size());\n    assertEquals(7, results);\n    \n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c057d06d0103fe57745280be1f2e5da933210462","date":1230866483,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 14 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(14, distances.size());\n    assertEquals(7, results);\n    \n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, latField, lngField, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 14 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(14, distances.size());\n    assertEquals(7, results);\n    \n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5db18f220de7171b50dcc6c58a20e11cc7ebe52","date":1239116090,"type":3,"author":"Patrick O'Leary","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore, dq.getFilter(),sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 14 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(14, distances.size());\n    assertEquals(7, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance > lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 14 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(14, distances.size());\n    assertEquals(7, results);\n    \n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8acf058823017a33328e9af1061fc468632bd8","date":1240938849,"type":3,"author":"Patrick O'Leary","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore,null,sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 14 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(14, distances.size());\n    assertEquals(7, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance > lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore, dq.getFilter(),sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 14 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(14, distances.size());\n    assertEquals(7, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance > lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4281ba2c96715d60b63bc198a292ca602a888c2d","date":1240977201,"type":3,"author":"Patrick O'Leary","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore,null,sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 7 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(7, distances.size()); // fixed a store of only needed distances\n    assertEquals(7, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance > lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore,null,sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 14 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(14, distances.size());\n    assertEquals(7, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance > lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60fe82b6af0f490fe9a473a5315847479e78f73f","date":1247758686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore,null,sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 7 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(7, distances.size()); // fixed a store of only needed distances\n    assertEquals(7, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance > lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore,null,sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 7 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(7, distances.size()); // fixed a store of only needed distances\n    assertEquals(7, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance > lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d41c10b9c61bc826acd344f499e062fb46bc42ae","date":1249408917,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = new Float((miles - distance) / miles ).floatValue();\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore,null,sort);\n\n      int results = hits.length();\n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 7 \"+ distances.size());\n      System.out.println(\"Results should be 7 \"+ results);\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n    \n    final double miles = 6.0;\n    \n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        //System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n        \n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    // \n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore,null,sort);\n\n    int results = hits.length();\n    \n    // Get a list of distances \n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n    \n    // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 7 \"+ distances.size());\n    System.out.println(\"Results should be 7 \"+ results);\n\n    assertEquals(7, distances.size()); // fixed a store of only needed distances\n    assertEquals(7, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n      \n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n      Double geo_distance = distances.get(hits.id(i));\n      \n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance > lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a04035855bf53c50aaef580f2ec794acf73029e","date":1253578101,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = new Float((miles - distance) / miles ).floatValue();\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore,null,sort);\n\n      int results = hits.length();\n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 7 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = new Float((miles - distance) / miles ).floatValue();\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore,null,sort);\n\n      int results = hits.length();\n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 7 \"+ distances.size());\n      System.out.println(\"Results should be 7 \"+ results);\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ( (miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore,null,sort);\n\n      int results = hits.length();\n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 7 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = new Float((miles - distance) / miles ).floatValue();\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore,null,sort);\n\n      int results = hits.length();\n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 7 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ( (miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore,null,sort);\n\n      int results = hits.length();\n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 7 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ( (miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore,null,sort);\n\n      int results = hits.length();\n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 7 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ( (miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 7 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ( (miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore,null,sort);\n\n      int results = hits.length();\n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 7 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"affefdda19991b74568e601456baad0c8e5c2f65","date":1266776825,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n        @Override\n        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n          return new CustomScoreProvider(reader) {\n            @Override // TODO: broken, as reader is not used!\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n              //System.out.println(doc);\n              if (dq.distanceFilter.getDistance(doc) == null)\n                return 0;\n          \n              double distance = dq.distanceFilter.getDistance(doc);\n              // boost score shouldn't exceed 1\n              if (distance < 1.0d)\n                distance = 1.0d;\n              //boost by distance is invertly proportional to\n              // to distance from center point to location\n              float score = (float) ( (miles - distance) / miles );\n              return score * subQueryScore;\n            }\n          };\n        }\n      };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 7 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ( (miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 7 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      if (VERBOSE) System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n        @Override\n        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n          return new CustomScoreProvider(reader) {\n            @Override // TODO: broken, as reader is not used!\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n              if (VERBOSE) System.out.println(doc);\n              if (dq.distanceFilter.getDistance(doc) == null)\n                return 0;\n          \n              double distance = dq.distanceFilter.getDistance(doc);\n              // boost score shouldn't exceed 1\n              if (distance < 1.0d)\n                distance = 1.0d;\n              //boost by distance is invertly proportional to\n              // to distance from center point to location\n              float score = (float) ( (miles - distance) / miles );\n              return score * subQueryScore;\n            }\n          };\n        }\n      };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n      if (VERBOSE) {\n        System.out.println(\"Distance Filter filtered: \" + distances.size());\n        System.out.println(\"Results: \" + results);\n        System.out.println(\"=============================\");\n        System.out.println(\"Distances should be 7 \"+ expected[x] + \":\" + distances.size());\n        System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n      }\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n        @Override\n        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n          return new CustomScoreProvider(reader) {\n            @Override // TODO: broken, as reader is not used!\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n              //System.out.println(doc);\n              if (dq.distanceFilter.getDistance(doc) == null)\n                return 0;\n          \n              double distance = dq.distanceFilter.getDistance(doc);\n              // boost score shouldn't exceed 1\n              if (distance < 1.0d)\n                distance = 1.0d;\n              //boost by distance is invertly proportional to\n              // to distance from center point to location\n              float score = (float) ( (miles - distance) / miles );\n              return score * subQueryScore;\n            }\n          };\n        }\n      };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 7 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testRange().mjava","sourceNew":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      if (VERBOSE) System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n        @Override\n        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n          return new CustomScoreProvider(reader) {\n            @Override // TODO: broken, as reader is not used!\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n              if (VERBOSE) System.out.println(doc);\n              if (dq.distanceFilter.getDistance(doc) == null)\n                return 0;\n          \n              double distance = dq.distanceFilter.getDistance(doc);\n              // boost score shouldn't exceed 1\n              if (distance < 1.0d)\n                distance = 1.0d;\n              //boost by distance is invertly proportional to\n              // to distance from center point to location\n              float score = (float) ( (miles - distance) / miles );\n              return score * subQueryScore;\n            }\n          };\n        }\n      };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n      if (VERBOSE) {\n        System.out.println(\"Distance Filter filtered: \" + distances.size());\n        System.out.println(\"Results: \" + results);\n        System.out.println(\"=============================\");\n        System.out.println(\"Distances should be 7 \"+ expected[x] + \":\" + distances.size());\n        System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n      }\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n    \n      final double miles = milesToTest[x];\n    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n     \n      if (VERBOSE) System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n    \n      CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n        @Override\n        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n          return new CustomScoreProvider(reader) {\n            @Override // TODO: broken, as reader is not used!\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n              if (VERBOSE) System.out.println(doc);\n              if (dq.distanceFilter.getDistance(doc) == null)\n                return 0;\n          \n              double distance = dq.distanceFilter.getDistance(doc);\n              // boost score shouldn't exceed 1\n              if (distance < 1.0d)\n                distance = 1.0d;\n              //boost by distance is invertly proportional to\n              // to distance from center point to location\n              float score = (float) ( (miles - distance) / miles );\n              return score * subQueryScore;\n            }\n          };\n        }\n      };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n    \n      if (VERBOSE) {\n        System.out.println(\"Distance Filter filtered: \" + distances.size());\n        System.out.println(\"Results: \" + results);\n        System.out.println(\"=============================\");\n        System.out.println(\"Distances should be 7 \"+ expected[x] + \":\" + distances.size());\n        System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n      }\n\n      assertEquals(expected[x], distances.size()); // fixed a store of only needed distances\n      assertEquals(expected[x], results);\n      double lastDistance = 0;\n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n        assertTrue(geo_distance > lastDistance);\n        lastDistance = geo_distance;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["0a04035855bf53c50aaef580f2ec794acf73029e"],"2e8acf058823017a33328e9af1061fc468632bd8":["d5db18f220de7171b50dcc6c58a20e11cc7ebe52"],"0a04035855bf53c50aaef580f2ec794acf73029e":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"04a4a94db1eb59c8583adb166acfe686a031bedc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["60fe82b6af0f490fe9a473a5315847479e78f73f"],"4256bc1b3c94786287ccdfc751230374521843cf":["6bcde5e3f23911110baa101ed062b544162825b5"],"4281ba2c96715d60b63bc198a292ca602a888c2d":["2e8acf058823017a33328e9af1061fc468632bd8"],"62ed23bc688871c07712a31edf012919ea9cd466":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d5db18f220de7171b50dcc6c58a20e11cc7ebe52":["c057d06d0103fe57745280be1f2e5da933210462"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["affefdda19991b74568e601456baad0c8e5c2f65"],"affefdda19991b74568e601456baad0c8e5c2f65":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["4256bc1b3c94786287ccdfc751230374521843cf"],"60fe82b6af0f490fe9a473a5315847479e78f73f":["4281ba2c96715d60b63bc198a292ca602a888c2d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"c057d06d0103fe57745280be1f2e5da933210462":["62ed23bc688871c07712a31edf012919ea9cd466"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["4256bc1b3c94786287ccdfc751230374521843cf"],"2e8acf058823017a33328e9af1061fc468632bd8":["4281ba2c96715d60b63bc198a292ca602a888c2d"],"0a04035855bf53c50aaef580f2ec794acf73029e":["6bcde5e3f23911110baa101ed062b544162825b5"],"04a4a94db1eb59c8583adb166acfe686a031bedc":["62ed23bc688871c07712a31edf012919ea9cd466"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["0a04035855bf53c50aaef580f2ec794acf73029e"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"4281ba2c96715d60b63bc198a292ca602a888c2d":["60fe82b6af0f490fe9a473a5315847479e78f73f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"62ed23bc688871c07712a31edf012919ea9cd466":["c057d06d0103fe57745280be1f2e5da933210462"],"d5db18f220de7171b50dcc6c58a20e11cc7ebe52":["2e8acf058823017a33328e9af1061fc468632bd8"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"affefdda19991b74568e601456baad0c8e5c2f65":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["affefdda19991b74568e601456baad0c8e5c2f65"],"60fe82b6af0f490fe9a473a5315847479e78f73f":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"c057d06d0103fe57745280be1f2e5da933210462":["d5db18f220de7171b50dcc6c58a20e11cc7ebe52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}