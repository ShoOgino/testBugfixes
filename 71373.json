{"path":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new StringIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new StringIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new StringIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new StringIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new StringIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new StringIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new StringIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new StringIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new StringIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new StringIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8","date":1333047008,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new StringIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.getValueCount();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.getValueCount();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.numOrd();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":["468a7e3c19d10daec4ebe38459faa9a99706ab0a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.getValueCount();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.getValueCount();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.getValueCount();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.getValueCount();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/StrFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n\n      @Override\n      public int ordVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n\n      @Override\n      public int numOrd() {\n        return termsIndex.getValueCount();\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return strVal(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["d4d69c535930b5cce125cff868d40f6373dc27d4","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["c26f00b574427b55127e869b935845554afde1fa","32e7c2a80dad193a76a03ec46b878969d469ff6c"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["d638301ad1cfcae567b681b893bc8781f0ee48a5","32e7c2a80dad193a76a03ec46b878969d469ff6c"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8":["d4d69c535930b5cce125cff868d40f6373dc27d4","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}