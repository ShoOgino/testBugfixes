{"path":"lucene/src/java/org/apache/lucene/search/Query#toString(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Query#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/Query#toString(String).mjava","sourceNew":"  /** Prints a query to a string, with <code>field</code> assumed to be the \n   * default field and omitted.\n   * <p>The representation used is one that is supposed to be readable\n   * by {@link org.apache.lucene.queryParser.QueryParser QueryParser}. However,\n   * there are the following limitations:\n   * <ul>\n   *  <li>If the query was created by the parser, the printed\n   *  representation may not be exactly what was parsed. For example,\n   *  characters that need to be escaped will be represented without\n   *  the required backslash.</li>\n   * <li>Some of the more complicated queries (e.g. span queries)\n   *  don't have a representation that can be parsed by QueryParser.</li>\n   * </ul>\n   */\n  public abstract String toString(String field);\n\n","sourceOld":"  /** Prints a query to a string, with <code>field</code> assumed to be the \n   * default field and omitted.\n   * <p>The representation used is one that is supposed to be readable\n   * by {@link org.apache.lucene.queryParser.QueryParser QueryParser}. However,\n   * there are the following limitations:\n   * <ul>\n   *  <li>If the query was created by the parser, the printed\n   *  representation may not be exactly what was parsed. For example,\n   *  characters that need to be escaped will be represented without\n   *  the required backslash.</li>\n   * <li>Some of the more complicated queries (e.g. span queries)\n   *  don't have a representation that can be parsed by QueryParser.</li>\n   * </ul>\n   */\n  public abstract String toString(String field);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Query#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Query#toString(String).mjava","sourceNew":"  /** Prints a query to a string, with <code>field</code> assumed to be the \n   * default field and omitted.\n   */\n  public abstract String toString(String field);\n\n","sourceOld":"  /** Prints a query to a string, with <code>field</code> assumed to be the \n   * default field and omitted.\n   * <p>The representation used is one that is supposed to be readable\n   * by {@link org.apache.lucene.queryParser.QueryParser QueryParser}. However,\n   * there are the following limitations:\n   * <ul>\n   *  <li>If the query was created by the parser, the printed\n   *  representation may not be exactly what was parsed. For example,\n   *  characters that need to be escaped will be represented without\n   *  the required backslash.</li>\n   * <li>Some of the more complicated queries (e.g. span queries)\n   *  don't have a representation that can be parsed by QueryParser.</li>\n   * </ul>\n   */\n  public abstract String toString(String field);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Query#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Query#toString(String).mjava","sourceNew":"  /** Prints a query to a string, with <code>field</code> assumed to be the \n   * default field and omitted.\n   */\n  public abstract String toString(String field);\n\n","sourceOld":"  /** Prints a query to a string, with <code>field</code> assumed to be the \n   * default field and omitted.\n   */\n  public abstract String toString(String field);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}