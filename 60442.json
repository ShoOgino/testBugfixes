{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f45457a742a53533c348c4b990b1c579ff364467","date":1353197071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final FieldCache.Bytes values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final byte value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final FieldCache.Bytes values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final byte value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","4f7c8ed26cfbf4007c46fd27a417560e932ab4d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc06632ede7e48a5ddc6917badec25c8336feedc","date":1366983006,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final FieldCache.Bytes values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final byte value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final FieldCache.Bytes values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final byte value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final FieldCache.Bytes values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final byte value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final FieldCache.Bytes values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final byte value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f45457a742a53533c348c4b990b1c579ff364467"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["dc06632ede7e48a5ddc6917badec25c8336feedc","59a0020b413d44dd79d85d7a66ed5004265fb453"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"f45457a742a53533c348c4b990b1c579ff364467":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a0020b413d44dd79d85d7a66ed5004265fb453"]},"commit2Childs":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","f45457a742a53533c348c4b990b1c579ff364467"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f45457a742a53533c348c4b990b1c579ff364467":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}