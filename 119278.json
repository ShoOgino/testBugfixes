{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    new JavaBinCodec(){\n      @Override\n      public void writeMap(Map val) throws IOException {\n        if (val instanceof SolrInputDocument) {\n          writeVal(solrInputDocumentToList((SolrInputDocument) val));\n        } else {\n          super.writeMap(val);\n        }\n      }\n    }.marshal(nl, os);\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    new JavaBinCodec(){\n      @Override\n      public void writeMap(Map val) throws IOException {\n        if (val instanceof SolrInputDocument) {\n          writeVal(solrInputDocumentToList((SolrInputDocument) val));\n        } else {\n          super.writeMap(val);\n        }\n      }\n    }.marshal(nl, os);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    new JavaBinCodec(){\n      @Override\n      public void writeMap(Map val) throws IOException {\n        if (val instanceof SolrInputDocument) {\n          writeVal(solrInputDocumentToList((SolrInputDocument) val));\n        } else {\n          super.writeMap(val);\n        }\n      }\n    }.marshal(nl, os);\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    new JavaBinCodec(){\n      @Override\n      public void writeMap(Map val) throws IOException {\n        if (val instanceof SolrInputDocument) {\n          writeVal(solrInputDocumentToList((SolrInputDocument) val));\n        } else {\n          super.writeMap(val);\n        }\n      }\n    }.marshal(nl, os);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    new JavaBinCodec(){\n      @Override\n      public void writeMap(Map val) throws IOException {\n        if (val instanceof SolrInputDocument) {\n          writeVal(solrInputDocumentToList((SolrInputDocument) val));\n        } else {\n          super.writeMap(val);\n        }\n      }\n    }.marshal(nl, os);\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    new JavaBinCodec(){\n      @Override\n      public void writeMap(Map val) throws IOException {\n        if (val instanceof SolrInputDocument) {\n          writeVal(solrInputDocumentToList((SolrInputDocument) val));\n        } else {\n          super.writeMap(val);\n        }\n      }\n    }.marshal(nl, os);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    JavaBinCodec codec = new JavaBinCodec();\n    codec.marshal(nl, os);\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    new JavaBinCodec(){\n      @Override\n      public void writeMap(Map val) throws IOException {\n        if (val instanceof SolrInputDocument) {\n          writeVal(solrInputDocumentToList((SolrInputDocument) val));\n        } else {\n          super.writeMap(val);\n        }\n      }\n    }.marshal(nl, os);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n    \n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    nl.add(\"docsMap\", docMap);\n    JavaBinCodec codec = new JavaBinCodec();\n    codec.marshal(nl, os);\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delById\", updateRequest.getDeleteById());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    JavaBinCodec codec = new JavaBinCodec();\n    codec.marshal(nl, os);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab8657e27d6bdd6107b9d64da71c635e1f47b59e","date":1390524786,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n    \n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    if (updateRequest.getDeleteByIdMap() != null) {\n      nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    }\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n\n    if (docMap != null) {\n      nl.add(\"docsMap\", docMap.entrySet().iterator());\n    } else {\n      if (updateRequest.getDocuments() != null) {\n        docIter = updateRequest.getDocuments().iterator();\n      }\n      nl.add(\"docs\", docIter);\n    }\n    JavaBinCodec codec = new JavaBinCodec();\n    codec.marshal(nl, os);\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if (updateRequest.getDocuments() != null) {\n      docIter = updateRequest.getDocuments().iterator();\n    }\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n    \n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n    nl.add(\"docs\", docIter);\n    nl.add(\"docsMap\", docMap);\n    JavaBinCodec codec = new JavaBinCodec();\n    codec.marshal(nl, os);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n    \n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    if (updateRequest.getDeleteByIdMap() != null) {\n      nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    }\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n\n    if (docMap != null) {\n      nl.add(\"docsMap\", docMap.entrySet().iterator());\n    } else {\n      if (updateRequest.getDocuments() != null) {\n        docIter = updateRequest.getDocuments().iterator();\n      }\n      nl.add(\"docs\", docIter);\n    }\n    try (JavaBinCodec codec = new JavaBinCodec()) {\n      codec.marshal(nl, os);\n    }\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n    \n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    if (updateRequest.getDeleteByIdMap() != null) {\n      nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    }\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n\n    if (docMap != null) {\n      nl.add(\"docsMap\", docMap.entrySet().iterator());\n    } else {\n      if (updateRequest.getDocuments() != null) {\n        docIter = updateRequest.getDocuments().iterator();\n      }\n      nl.add(\"docs\", docIter);\n    }\n    JavaBinCodec codec = new JavaBinCodec();\n    codec.marshal(nl, os);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n    \n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    if (updateRequest.getDeleteByIdMap() != null) {\n      nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    }\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n\n    if (docMap != null) {\n      nl.add(\"docsMap\", docMap.entrySet().iterator());\n    } else {\n      if (updateRequest.getDocuments() != null) {\n        docIter = updateRequest.getDocuments().iterator();\n      }\n      nl.add(\"docs\", docIter);\n    }\n    try (JavaBinCodec codec = new JavaBinCodec()) {\n      codec.marshal(nl, os);\n    }\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n    \n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    if (updateRequest.getDeleteByIdMap() != null) {\n      nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    }\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n\n    if (docMap != null) {\n      nl.add(\"docsMap\", docMap.entrySet().iterator());\n    } else {\n      if (updateRequest.getDocuments() != null) {\n        docIter = updateRequest.getDocuments().iterator();\n      }\n      nl.add(\"docs\", docIter);\n    }\n    JavaBinCodec codec = new JavaBinCodec();\n    codec.marshal(nl, os);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n    \n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    if (updateRequest.getDeleteByIdMap() != null) {\n      nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    }\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n\n    if (docMap != null) {\n      nl.add(\"docsMap\", docMap.entrySet().iterator());\n    } else {\n      if (updateRequest.getDocuments() != null) {\n        docIter = updateRequest.getDocuments().iterator();\n      }\n      nl.add(\"docs\", docIter);\n    }\n    try (JavaBinCodec codec = new JavaBinCodec()) {\n      codec.marshal(nl, os);\n    }\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n    \n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    if (updateRequest.getDeleteByIdMap() != null) {\n      nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    }\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n\n    if (docMap != null) {\n      nl.add(\"docsMap\", docMap.entrySet().iterator());\n    } else {\n      if (updateRequest.getDocuments() != null) {\n        docIter = updateRequest.getDocuments().iterator();\n      }\n      nl.add(\"docs\", docIter);\n    }\n    JavaBinCodec codec = new JavaBinCodec();\n    codec.marshal(nl, os);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"074c4e385ea7c9ae29556e95c886ea0ccc614029","date":1571011658,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    if (updateRequest.getDeleteByIdMap() != null) {\n      nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    }\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n\n    if (docMap != null) {\n      nl.add(\"docsMap\", docMap.entrySet().iterator());\n    } else {\n      if (updateRequest.getDocuments() != null) {\n        docIter = updateRequest.getDocuments().iterator();\n      }\n      nl.add(\"docs\", docIter);\n    }\n    try (JavaBinCodec codec = new JavaBinCodec()) {\n      codec.marshal(nl, os);\n    }\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n    \n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    if (updateRequest.getDeleteByIdMap() != null) {\n      nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    }\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n\n    if (docMap != null) {\n      nl.add(\"docsMap\", docMap.entrySet().iterator());\n    } else {\n      if (updateRequest.getDocuments() != null) {\n        docIter = updateRequest.getDocuments().iterator();\n      }\n      nl.add(\"docs\", docIter);\n    }\n    try (JavaBinCodec codec = new JavaBinCodec()) {\n      codec.marshal(nl, os);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    if (updateRequest.getDeleteByIdMap() != null) {\n      nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    }\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n\n    if (docMap != null) {\n      nl.add(\"docsMap\", docMap.entrySet().iterator());\n    } else {\n      if (updateRequest.getDocuments() != null) {\n        docIter = updateRequest.getDocuments().iterator();\n      }\n      nl.add(\"docs\", docIter);\n    }\n    try (JavaBinCodec codec = new JavaBinCodec()) {\n      codec.marshal(nl, os);\n    }\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n    \n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    if (updateRequest.getDeleteByIdMap() != null) {\n      nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    }\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n\n    if (docMap != null) {\n      nl.add(\"docsMap\", docMap.entrySet().iterator());\n    } else {\n      if (updateRequest.getDocuments() != null) {\n        docIter = updateRequest.getDocuments().iterator();\n      }\n      nl.add(\"docs\", docIter);\n    }\n    try (JavaBinCodec codec = new JavaBinCodec()) {\n      codec.marshal(nl, os);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#marshal(UpdateRequest,OutputStream).mjava","sourceNew":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    if (updateRequest.getDeleteByIdMap() != null) {\n      nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    }\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n\n    if (docMap != null) {\n      nl.add(\"docsMap\", docMap.entrySet().iterator());\n    } else {\n      if (updateRequest.getDocuments() != null) {\n        docIter = updateRequest.getDocuments().iterator();\n      }\n      nl.add(\"docs\", docIter);\n    }\n    try (JavaBinCodec codec = new JavaBinCodec()) {\n      codec.marshal(nl, os);\n    }\n  }\n\n","sourceOld":"  /**\n   * Converts an UpdateRequest to a NamedList which can be serialized to the given OutputStream in the javabin format\n   *\n   * @param updateRequest the UpdateRequest to be written out\n   * @param os            the OutputStream to which the request is to be written\n   *\n   * @throws IOException in case of an exception during marshalling or writing to the stream\n   */\n  public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOException {\n    NamedList nl = new NamedList();\n    NamedList params = solrParamsToNamedList(updateRequest.getParams());\n    if (updateRequest.getCommitWithin() != -1) {\n      params.add(\"commitWithin\", updateRequest.getCommitWithin());\n    }\n    Iterator<SolrInputDocument> docIter = null;\n\n    if(updateRequest.getDocIterator() != null){\n      docIter = updateRequest.getDocIterator();\n    }\n\n    Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();\n\n    nl.add(\"params\", params);// 0: params\n    if (updateRequest.getDeleteByIdMap() != null) {\n      nl.add(\"delByIdMap\", updateRequest.getDeleteByIdMap());\n    }\n    nl.add(\"delByQ\", updateRequest.getDeleteQuery());\n\n    if (docMap != null) {\n      nl.add(\"docsMap\", docMap.entrySet().iterator());\n    } else {\n      if (updateRequest.getDocuments() != null) {\n        docIter = updateRequest.getDocuments().iterator();\n      }\n      nl.add(\"docs\", docIter);\n    }\n    try (JavaBinCodec codec = new JavaBinCodec()) {\n      codec.marshal(nl, os);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["074c4e385ea7c9ae29556e95c886ea0ccc614029"],"28288370235ed02234a64753cdbf0c6ec096304a":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["c26f00b574427b55127e869b935845554afde1fa"],"ab8657e27d6bdd6107b9d64da71c635e1f47b59e":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["28288370235ed02234a64753cdbf0c6ec096304a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"b0b597c65628ca9e73913a07e81691f8229bae35":["28288370235ed02234a64753cdbf0c6ec096304a","074c4e385ea7c9ae29556e95c886ea0ccc614029"]},"commit2Childs":{"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e"],"c26f00b574427b55127e869b935845554afde1fa":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["074c4e385ea7c9ae29556e95c886ea0ccc614029","b0b597c65628ca9e73913a07e81691f8229bae35"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"ab8657e27d6bdd6107b9d64da71c635e1f47b59e":["28288370235ed02234a64753cdbf0c6ec096304a","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["a7dfea4f7c80813344b0152e37fc18b31369e8ff","b0b597c65628ca9e73913a07e81691f8229bae35"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}