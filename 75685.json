{"path":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBM25Similarity#testLengthEncodingBackwardCompatibility().mjava","commits":[{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBM25Similarity#testLengthEncodingBackwardCompatibility().mjava","pathOld":"/dev/null","sourceNew":"  public void testLengthEncodingBackwardCompatibility() throws IOException {\n    Similarity similarity = new BM25Similarity();\n    for (int indexCreatedVersionMajor : new int[] { Version.LUCENE_6_0_0.major, Version.LATEST.major}) {\n      for (int length : new int[] {1, 2, 4}) { // these length values are encoded accurately on both cases\n        Directory dir = newDirectory();\n        // set the version on the directory\n        new SegmentInfos(indexCreatedVersionMajor).commit(dir);\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(similarity));\n        Document doc = new Document();\n        String value = IntStream.range(0, length).mapToObj(i -> \"b\").collect(Collectors.joining(\" \"));\n        doc.add(new TextField(\"foo\", value, Store.NO));\n        w.addDocument(doc);\n        IndexReader reader = DirectoryReader.open(w);\n        IndexSearcher searcher = newSearcher(reader);\n        searcher.setSimilarity(similarity);\n        Explanation expl = searcher.explain(new TermQuery(new Term(\"foo\", \"b\")), 0);\n        Explanation docLen = findExplanation(expl, \"fieldLength\");\n        assertNotNull(docLen);\n        assertEquals(docLen.toString(), length, (int) docLen.getValue());\n        w.close();\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBM25Similarity#testLengthEncodingBackwardCompatibility().mjava","pathOld":"/dev/null","sourceNew":"  public void testLengthEncodingBackwardCompatibility() throws IOException {\n    Similarity similarity = new BM25Similarity();\n    for (int indexCreatedVersionMajor : new int[] { Version.LUCENE_6_0_0.major, Version.LATEST.major}) {\n      for (int length : new int[] {1, 2, 4}) { // these length values are encoded accurately on both cases\n        Directory dir = newDirectory();\n        // set the version on the directory\n        new SegmentInfos(indexCreatedVersionMajor).commit(dir);\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(similarity));\n        Document doc = new Document();\n        String value = IntStream.range(0, length).mapToObj(i -> \"b\").collect(Collectors.joining(\" \"));\n        doc.add(new TextField(\"foo\", value, Store.NO));\n        w.addDocument(doc);\n        IndexReader reader = DirectoryReader.open(w);\n        IndexSearcher searcher = newSearcher(reader);\n        searcher.setSimilarity(similarity);\n        Explanation expl = searcher.explain(new TermQuery(new Term(\"foo\", \"b\")), 0);\n        Explanation docLen = findExplanation(expl, \"fieldLength\");\n        assertNotNull(docLen);\n        assertEquals(docLen.toString(), length, (int) docLen.getValue());\n        w.close();\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fb98e487030cfb0192224997e59495c63cddebe","date":1498845545,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBM25Similarity#testLengthEncodingBackwardCompatibility().mjava","sourceNew":null,"sourceOld":"  public void testLengthEncodingBackwardCompatibility() throws IOException {\n    Similarity similarity = new BM25Similarity();\n    for (int indexCreatedVersionMajor : new int[] { Version.LUCENE_6_0_0.major, Version.LATEST.major}) {\n      for (int length : new int[] {1, 2, 4}) { // these length values are encoded accurately on both cases\n        Directory dir = newDirectory();\n        // set the version on the directory\n        new SegmentInfos(indexCreatedVersionMajor).commit(dir);\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(similarity));\n        Document doc = new Document();\n        String value = IntStream.range(0, length).mapToObj(i -> \"b\").collect(Collectors.joining(\" \"));\n        doc.add(new TextField(\"foo\", value, Store.NO));\n        w.addDocument(doc);\n        IndexReader reader = DirectoryReader.open(w);\n        IndexSearcher searcher = newSearcher(reader);\n        searcher.setSimilarity(similarity);\n        Explanation expl = searcher.explain(new TermQuery(new Term(\"foo\", \"b\")), 0);\n        Explanation docLen = findExplanation(expl, \"fieldLength\");\n        assertNotNull(docLen);\n        assertEquals(docLen.toString(), length, (int) docLen.getValue());\n        w.close();\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":4,"author":"Anshum Gupta","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBM25Similarity#testLengthEncodingBackwardCompatibility().mjava","sourceNew":null,"sourceOld":"  public void testLengthEncodingBackwardCompatibility() throws IOException {\n    Similarity similarity = new BM25Similarity();\n    for (int indexCreatedVersionMajor : new int[] { Version.LUCENE_6_0_0.major, Version.LATEST.major}) {\n      for (int length : new int[] {1, 2, 4}) { // these length values are encoded accurately on both cases\n        Directory dir = newDirectory();\n        // set the version on the directory\n        new SegmentInfos(indexCreatedVersionMajor).commit(dir);\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(similarity));\n        Document doc = new Document();\n        String value = IntStream.range(0, length).mapToObj(i -> \"b\").collect(Collectors.joining(\" \"));\n        doc.add(new TextField(\"foo\", value, Store.NO));\n        w.addDocument(doc);\n        IndexReader reader = DirectoryReader.open(w);\n        IndexSearcher searcher = newSearcher(reader);\n        searcher.setSimilarity(similarity);\n        Explanation expl = searcher.explain(new TermQuery(new Term(\"foo\", \"b\")), 0);\n        Explanation docLen = findExplanation(expl, \"fieldLength\");\n        assertNotNull(docLen);\n        assertEquals(docLen.toString(), length, (int) docLen.getValue());\n        w.close();\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBM25Similarity#testLengthEncodingBackwardCompatibility().mjava","sourceNew":null,"sourceOld":"  public void testLengthEncodingBackwardCompatibility() throws IOException {\n    Similarity similarity = new BM25Similarity();\n    for (int indexCreatedVersionMajor : new int[] { Version.LUCENE_6_0_0.major, Version.LATEST.major}) {\n      for (int length : new int[] {1, 2, 4}) { // these length values are encoded accurately on both cases\n        Directory dir = newDirectory();\n        // set the version on the directory\n        new SegmentInfos(indexCreatedVersionMajor).commit(dir);\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(similarity));\n        Document doc = new Document();\n        String value = IntStream.range(0, length).mapToObj(i -> \"b\").collect(Collectors.joining(\" \"));\n        doc.add(new TextField(\"foo\", value, Store.NO));\n        w.addDocument(doc);\n        IndexReader reader = DirectoryReader.open(w);\n        IndexSearcher searcher = newSearcher(reader);\n        searcher.setSimilarity(similarity);\n        Explanation expl = searcher.explain(new TermQuery(new Term(\"foo\", \"b\")), 0);\n        Explanation docLen = findExplanation(expl, \"fieldLength\");\n        assertNotNull(docLen);\n        assertEquals(docLen.toString(), length, (int) docLen.getValue());\n        w.close();\n        reader.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["615370d2b876c3435773b5174df2e2242ad7981a","8fb98e487030cfb0192224997e59495c63cddebe"],"30c8e5574b55d57947e989443dfde611646530ee":["e9017cf144952056066919f1ebc7897ff9bd71b1","cc018b79379c67835b40b1259cd3dc931df60944"],"8fb98e487030cfb0192224997e59495c63cddebe":["615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc018b79379c67835b40b1259cd3dc931df60944"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["30c8e5574b55d57947e989443dfde611646530ee"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cc018b79379c67835b40b1259cd3dc931df60944","8fb98e487030cfb0192224997e59495c63cddebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"8fb98e487030cfb0192224997e59495c63cddebe":["cc018b79379c67835b40b1259cd3dc931df60944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}