{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValued().mjava","commits":[{"id":"22c24d4a654221b7563bec52013446d6cc8bcad4","date":1222286638,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiValued() throws Exception  {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"testdata.xml\",\n            XPathEntityProcessor.FOR_EACH, \"/root\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"a\", \"xpath\", \"/root/a\", DataImporter.MULTI_VALUED, \"true\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), getDataSource(testXml), 0, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    Assert.assertEquals(2, ((List)result.get(0).get(\"a\")).size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValued().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValued().mjava","sourceNew":"  @Test\n  public void testMultiValued() throws Exception  {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"testdata.xml\",\n            XPathEntityProcessor.FOR_EACH, \"/root\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"a\", \"xpath\", \"/root/a\", DataImporter.MULTI_VALUED, \"true\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), getDataSource(testXml), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    Assert.assertEquals(2, ((List)result.get(0).get(\"a\")).size());\n  }\n\n","sourceOld":"  @Test\n  public void testMultiValued() throws Exception  {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"testdata.xml\",\n            XPathEntityProcessor.FOR_EACH, \"/root\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"a\", \"xpath\", \"/root/a\", DataImporter.MULTI_VALUED, \"true\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), getDataSource(testXml), 0, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    Assert.assertEquals(2, ((List)result.get(0).get(\"a\")).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValued().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#testMultiValued().mjava","sourceNew":"  @Test\n  public void testMultiValued() throws Exception  {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"testdata.xml\",\n            XPathEntityProcessor.FOR_EACH, \"/root\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"a\", \"xpath\", \"/root/a\", DataImporter.MULTI_VALUED, \"true\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), getDataSource(testXml), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    Assert.assertEquals(2, ((List)result.get(0).get(\"a\")).size());\n  }\n\n","sourceOld":"  @Test\n  public void testMultiValued() throws Exception  {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"testdata.xml\",\n            XPathEntityProcessor.FOR_EACH, \"/root\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"a\", \"xpath\", \"/root/a\", DataImporter.MULTI_VALUED, \"true\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n            new VariableResolverImpl(), getDataSource(testXml), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    Assert.assertEquals(2, ((List)result.get(0).get(\"a\")).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22c24d4a654221b7563bec52013446d6cc8bcad4":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["22c24d4a654221b7563bec52013446d6cc8bcad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"22c24d4a654221b7563bec52013446d6cc8bcad4":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["22c24d4a654221b7563bec52013446d6cc8bcad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}