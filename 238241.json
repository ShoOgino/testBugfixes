{"path":"backwards/src/test/org/apache/lucene/analysis/TestASCIIFoldingFilter#testLatin1Accents().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/analysis/TestASCIIFoldingFilter#testLatin1Accents().mjava","pathOld":"/dev/null","sourceNew":"  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().\n  public void testLatin1Accents() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader\n      (\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ\"\n      +\" Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ\"\n      +\" ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream);\n\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/analysis/TestASCIIFoldingFilter#testLatin1Accents().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestASCIIFoldingFilter#testLatin1Accents().mjava","sourceNew":"  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().\n  public void testLatin1Accents() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader\n      (\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ\"\n      +\" Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ\"\n      +\" ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream);\n\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().\n  public void testLatin1Accents() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader\n      (\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ\"\n      +\" Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ\"\n      +\" ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream);\n\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}