{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#copyOverBufferingUpdates(CommitUpdateCommand).mjava","commits":[{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#copyOverBufferingUpdates(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Block updates, append a commit at current tlog,\n   * then copy over buffer updates to new tlog and bring back ulog to active state.\n   * So any updates which hasn't made it to the index is preserved in the current tlog,\n   * this also make RTG work\n   * @param cuc any updates that have version larger than the version of cuc will be copied over\n   */\n  public void copyOverBufferingUpdates(CommitUpdateCommand cuc) {\n    versionInfo.blockUpdates();\n    try {\n      operationFlags &= ~FLAG_GAP;\n      state = State.ACTIVE;\n      copyAndSwitchToNewTlog(cuc);\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#copyOverBufferingUpdates(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Block updates, append a commit at current tlog,\n   * then copy over buffer updates to new tlog and bring back ulog to active state.\n   * So any updates which hasn't made it to the index is preserved in the current tlog,\n   * this also make RTG work\n   * @param cuc any updates that have version larger than the version of cuc will be copied over\n   */\n  public void copyOverBufferingUpdates(CommitUpdateCommand cuc) {\n    versionInfo.blockUpdates();\n    try {\n      operationFlags &= ~FLAG_GAP;\n      state = State.ACTIVE;\n      copyAndSwitchToNewTlog(cuc);\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#copyOverBufferingUpdates(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Block updates, append a commit at current tlog,\n   * then copy over buffer updates to new tlog and bring back ulog to active state.\n   * So any updates which hasn't made it to the index is preserved in the current tlog,\n   * this also make RTG work\n   * @param cuc any updates that have version larger than the version of cuc will be copied over\n   */\n  public void copyOverBufferingUpdates(CommitUpdateCommand cuc) {\n    versionInfo.blockUpdates();\n    try {\n      operationFlags &= ~FLAG_GAP;\n      state = State.ACTIVE;\n      copyAndSwitchToNewTlog(cuc);\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#copyOverBufferingUpdates(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#copyOverBufferingUpdates(CommitUpdateCommand).mjava","sourceNew":"  /**\n   * Block updates, append a commit at current tlog,\n   * then copy over buffer updates to new tlog and bring back ulog to active state.\n   * So any updates which hasn't made it to the index is preserved in the current tlog,\n   * this also make RTG work\n   * @param cuc any updates that have version larger than the version of cuc will be copied over\n   */\n  public void copyOverBufferingUpdates(CommitUpdateCommand cuc) {\n    versionInfo.blockUpdates();\n    try {\n      synchronized (this) {\n        state = State.ACTIVE;\n        if (bufferTlog == null) {\n          return;\n        }\n        // by calling this, we won't switch to new tlog (compared to applyBufferedUpdates())\n        // if we switch to new tlog we can possible lose updates on the next fetch\n        copyOverOldUpdates(cuc.getVersion(), bufferTlog);\n        dropBufferTlog();\n      }\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":"  /**\n   * Block updates, append a commit at current tlog,\n   * then copy over buffer updates to new tlog and bring back ulog to active state.\n   * So any updates which hasn't made it to the index is preserved in the current tlog,\n   * this also make RTG work\n   * @param cuc any updates that have version larger than the version of cuc will be copied over\n   */\n  public void copyOverBufferingUpdates(CommitUpdateCommand cuc) {\n    versionInfo.blockUpdates();\n    try {\n      operationFlags &= ~FLAG_GAP;\n      state = State.ACTIVE;\n      copyAndSwitchToNewTlog(cuc);\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#copyOverBufferingUpdates(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#copyOverBufferingUpdates(CommitUpdateCommand).mjava","sourceNew":"  /**\n   * Block updates, append a commit at current tlog,\n   * then copy over buffer updates to new tlog and bring back ulog to active state.\n   * So any updates which hasn't made it to the index is preserved in the current tlog,\n   * this also make RTG work\n   * @param cuc any updates that have version larger than the version of cuc will be copied over\n   */\n  public void copyOverBufferingUpdates(CommitUpdateCommand cuc) {\n    versionInfo.blockUpdates();\n    try {\n      synchronized (this) {\n        state = State.ACTIVE;\n        if (bufferTlog == null) {\n          return;\n        }\n        // by calling this, we won't switch to new tlog (compared to applyBufferedUpdates())\n        // if we switch to new tlog we can possible lose updates on the next fetch\n        copyOverOldUpdates(cuc.getVersion(), bufferTlog);\n        dropBufferTlog();\n      }\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":"  /**\n   * Block updates, append a commit at current tlog,\n   * then copy over buffer updates to new tlog and bring back ulog to active state.\n   * So any updates which hasn't made it to the index is preserved in the current tlog,\n   * this also make RTG work\n   * @param cuc any updates that have version larger than the version of cuc will be copied over\n   */\n  public void copyOverBufferingUpdates(CommitUpdateCommand cuc) {\n    versionInfo.blockUpdates();\n    try {\n      operationFlags &= ~FLAG_GAP;\n      state = State.ACTIVE;\n      copyAndSwitchToNewTlog(cuc);\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#copyOverBufferingUpdates(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#copyOverBufferingUpdates(CommitUpdateCommand).mjava","sourceNew":"  /**\n   * Block updates, append a commit at current tlog,\n   * then copy over buffer updates to new tlog and bring back ulog to active state.\n   * So any updates which hasn't made it to the index is preserved in the current tlog,\n   * this also make RTG work\n   * @param cuc any updates that have version larger than the version of cuc will be copied over\n   */\n  public void copyOverBufferingUpdates(CommitUpdateCommand cuc) {\n    versionInfo.blockUpdates();\n    try {\n      synchronized (this) {\n        state = State.ACTIVE;\n        if (bufferTlog == null) {\n          return;\n        }\n        // by calling this, we won't switch to new tlog (compared to applyBufferedUpdates())\n        // if we switch to new tlog we can possible lose updates on the next fetch\n        copyOverOldUpdates(cuc.getVersion(), bufferTlog);\n        dropBufferTlog();\n      }\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","sourceOld":"  /**\n   * Block updates, append a commit at current tlog,\n   * then copy over buffer updates to new tlog and bring back ulog to active state.\n   * So any updates which hasn't made it to the index is preserved in the current tlog,\n   * this also make RTG work\n   * @param cuc any updates that have version larger than the version of cuc will be copied over\n   */\n  public void copyOverBufferingUpdates(CommitUpdateCommand cuc) {\n    versionInfo.blockUpdates();\n    try {\n      operationFlags &= ~FLAG_GAP;\n      state = State.ACTIVE;\n      copyAndSwitchToNewTlog(cuc);\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f996f8177b9204bdc92f7164460c6cefad9ac99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["be320990bdc77e643388fa801e75017f19289c42","1455c941cc4ce652efc776fc23471b0e499246f6"],"be320990bdc77e643388fa801e75017f19289c42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["be320990bdc77e643388fa801e75017f19289c42","1455c941cc4ce652efc776fc23471b0e499246f6"],"ab68488225b6a6c357dda72ed11dedca9914a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1455c941cc4ce652efc776fc23471b0e499246f6"],"1455c941cc4ce652efc776fc23471b0e499246f6":["be320990bdc77e643388fa801e75017f19289c42"]},"commit2Childs":{"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"be320990bdc77e643388fa801e75017f19289c42":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","1455c941cc4ce652efc776fc23471b0e499246f6"],"f592209545c71895260367152601e9200399776d":[],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"1455c941cc4ce652efc776fc23471b0e499246f6":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}