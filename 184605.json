{"path":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed\n   * due to IOException then the live server is moved to dead pool and the request is retried on another live server if\n   * available. If all live servers are exhausted then a SolrServerException is thrown.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    int count = counter.incrementAndGet();\n    int attempts = 0;\n    Exception ex;\n    int startSize = aliveServers.size();\n    while (true) {\n      int size = aliveServers.size();\n      if (size < 1) throw new SolrServerException(\"No live SolrServers available to handle this request\");\n      ServerWrapper solrServer;\n      try {\n        solrServer = aliveServers.get(count % size);\n      } catch (IndexOutOfBoundsException e) {\n        //this list changes dynamically. so it is expected to get IndexOutOfBoundsException\n        continue;\n      }\n      try {\n        return solrServer.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(solrServer);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n      attempts++;\n      if (attempts >= startSize)\n        throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":null,"sourceOld":"  /**\n   * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed\n   * due to IOException then the live server is moved to dead pool and the request is retried on another live server if\n   * available. If all live servers are exhausted then a SolrServerException is thrown.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    int count = counter.incrementAndGet();\n    int attempts = 0;\n    Exception ex;\n    int startSize = aliveServers.size();\n    while (true) {\n      int size = aliveServers.size();\n      if (size < 1) throw new SolrServerException(\"No live SolrServers available to handle this request\");\n      ServerWrapper solrServer;\n      try {\n        solrServer = aliveServers.get(count % size);\n      } catch (IndexOutOfBoundsException e) {\n        //this list changes dynamically. so it is expected to get IndexOutOfBoundsException\n        continue;\n      }\n      try {\n        return solrServer.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(solrServer);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n      attempts++;\n      if (attempts >= startSize)\n        throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed\n   * due to IOException then the live server is moved to dead pool and the request is retried on another live server if\n   * available. If all live servers are exhausted then a SolrServerException is thrown.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    int count = counter.incrementAndGet();\n    int attempts = 0;\n    Exception ex;\n    int startSize = aliveServers.size();\n    while (true) {\n      int size = aliveServers.size();\n      if (size < 1) throw new SolrServerException(\"No live SolrServers available to handle this request\");\n      ServerWrapper solrServer;\n      try {\n        solrServer = aliveServers.get(count % size);\n      } catch (IndexOutOfBoundsException e) {\n        //this list changes dynamically. so it is expected to get IndexOutOfBoundsException\n        continue;\n      }\n      try {\n        return solrServer.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(solrServer);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n      attempts++;\n      if (attempts >= startSize)\n        throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed\n   * due to IOException then the live server is moved to dead pool and the request is retried on another live server if\n   * available. If all live servers are exhausted then a SolrServerException is thrown.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    int count = counter.incrementAndGet();\n    int attempts = 0;\n    Exception ex;\n    int startSize = aliveServers.size();\n    while (true) {\n      int size = aliveServers.size();\n      if (size < 1) throw new SolrServerException(\"No live SolrServers available to handle this request\");\n      ServerWrapper solrServer;\n      try {\n        solrServer = aliveServers.get(count % size);\n      } catch (IndexOutOfBoundsException e) {\n        //this list changes dynamically. so it is expected to get IndexOutOfBoundsException\n        continue;\n      }\n      try {\n        return solrServer.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(solrServer);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n      attempts++;\n      if (attempts >= startSize)\n        throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed\n   * due to IOException then the live server is moved to dead pool and the request is retried on another live server if\n   * available. If all live servers are exhausted then a SolrServerException is thrown.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    int count = counter.incrementAndGet();\n    int attempts = 0;\n    Exception ex;\n    int startSize = aliveServers.size();\n    while (true) {\n      int size = aliveServers.size();\n      if (size < 1) throw new SolrServerException(\"No live SolrServers available to handle this request\");\n      ServerWrapper solrServer;\n      try {\n        solrServer = aliveServers.get(count % size);\n      } catch (IndexOutOfBoundsException e) {\n        //this list changes dynamically. so it is expected to get IndexOutOfBoundsException\n        continue;\n      }\n      try {\n        return solrServer.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(solrServer);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n      attempts++;\n      if (attempts >= startSize)\n        throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed\n   * due to IOException then the live server is moved to dead pool and the request is retried on another live server if\n   * available. If all live servers are exhausted then a SolrServerException is thrown.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    int count = counter.incrementAndGet();\n    int attempts = 0;\n    Exception ex;\n    int startSize = aliveServers.size();\n    while (true) {\n      int size = aliveServers.size();\n      if (size < 1) throw new SolrServerException(\"No live SolrServers available to handle this request\");\n      ServerWrapper solrServer;\n      try {\n        solrServer = aliveServers.get(count % size);\n      } catch (IndexOutOfBoundsException e) {\n        //this list changes dynamically. so it is expected to get IndexOutOfBoundsException\n        continue;\n      }\n      try {\n        return solrServer.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(solrServer);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n      attempts++;\n      if (attempts >= startSize)\n        throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed\n   * due to IOException then the live server is moved to dead pool and the request is retried on another live server if\n   * available. If all live servers are exhausted then a SolrServerException is thrown.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    int count = counter.incrementAndGet();\n    int attempts = 0;\n    Exception ex;\n    int startSize = aliveServers.size();\n    while (true) {\n      int size = aliveServers.size();\n      if (size < 1) throw new SolrServerException(\"No live SolrServers available to handle this request\");\n      ServerWrapper solrServer;\n      try {\n        solrServer = aliveServers.get(count % size);\n      } catch (IndexOutOfBoundsException e) {\n        //this list changes dynamically. so it is expected to get IndexOutOfBoundsException\n        continue;\n      }\n      try {\n        return solrServer.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(solrServer);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n      attempts++;\n      if (attempts >= startSize)\n        throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed\n   * due to IOException then the live server is moved to dead pool and the request is retried on another live server if\n   * available. If all live servers are exhausted then a SolrServerException is thrown.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    int count = counter.incrementAndGet();\n    int attempts = 0;\n    Exception ex;\n    int startSize = aliveServers.size();\n    while (true) {\n      int size = aliveServers.size();\n      if (size < 1) throw new SolrServerException(\"No live SolrServers available to handle this request\");\n      ServerWrapper solrServer;\n      try {\n        solrServer = aliveServers.get(count % size);\n      } catch (IndexOutOfBoundsException e) {\n        //this list changes dynamically. so it is expected to get IndexOutOfBoundsException\n        continue;\n      }\n      try {\n        return solrServer.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(solrServer);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n      attempts++;\n      if (attempts >= startSize)\n        throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["1da8d55113b689b06716246649de6f62430f15c0","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}