{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,Bits).mjava","commits":[{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d4e5ccb1c589a2962235f13b65cc725050818d9","date":1404995758,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d4e5ccb1c589a2962235f13b65cc725050818d9":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3d4e5ccb1c589a2962235f13b65cc725050818d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"3d4e5ccb1c589a2962235f13b65cc725050818d9":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["3d4e5ccb1c589a2962235f13b65cc725050818d9"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}