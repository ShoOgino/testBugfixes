{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#vectorBoxCorner(double[],double[],double,boolean).mjava","commits":[{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#vectorBoxCorner(double[],double[],double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the coordinates of a vector that is the corner of a box (upper right or lower left), assuming a Rectangular\n   * coordinate system.  Note, this does not apply for points on a sphere or ellipse (although it could be used as an approximatation).\n   *\n   * @param center     The center point\n   * @param result Holds the result, potentially resizing if needed.\n   * @param distance   The d from the center to the corner\n   * @param upperRight If true, return the coords for the upper right corner, else return the lower left.\n   * @return The point, either the upperLeft or the lower right\n   */\n  public static double[] vectorBoxCorner(double[] center, double[] result, double distance, boolean upperRight) {\n    if (result == null || result.length != center.length) {\n      result = new double[center.length];\n    }\n    if (upperRight == false) {\n      distance = -distance;\n    }\n    //We don't care about the power here,\n    // b/c we are always in a rectangular coordinate system, so any norm can be used by\n    //using the definition of sine\n    distance = SIN_45 * distance; // sin(Pi/4) == (2^0.5)/2 == opp/hyp == opp/distance, solve for opp, similarily for cosine\n    for (int i = 0; i < center.length; i++) {\n      result[i] = center[i] + distance;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"459be89020f9023e3b60066066a892c7edb5de58","date":1279657074,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#vectorBoxCorner(double[],double[],double,boolean).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#vectorBoxCorner(double[],double[],double,boolean).mjava","sourceNew":"  /**\n   * Return the coordinates of a vector that is the corner of a box (upper right or lower left), assuming a Rectangular\n   * coordinate system.  Note, this does not apply for points on a sphere or ellipse (although it could be used as an approximatation).\n   *\n   * @param center     The center point\n   * @param result Holds the result, potentially resizing if needed.\n   * @param distance   The d from the center to the corner\n   * @param upperRight If true, return the coords for the upper right corner, else return the lower left.\n   * @return The point, either the upperLeft or the lower right\n   */\n  public static double[] vectorBoxCorner(double[] center, double[] result, double distance, boolean upperRight) {\n    if (result == null || result.length != center.length) {\n      result = new double[center.length];\n    }\n    if (upperRight == false) {\n      distance = -distance;\n    }\n    //We don't care about the power here,\n    // b/c we are always in a rectangular coordinate system, so any norm can be used by\n    //using the definition of sine\n    distance = SIN_45 * distance; // sin(Pi/4) == (2^0.5)/2 == opp/hyp == opp/distance, solve for opp, similarily for cosine\n    for (int i = 0; i < center.length; i++) {\n      result[i] = center[i] + distance;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the coordinates of a vector that is the corner of a box (upper right or lower left), assuming a Rectangular\n   * coordinate system.  Note, this does not apply for points on a sphere or ellipse (although it could be used as an approximatation).\n   *\n   * @param center     The center point\n   * @param result Holds the result, potentially resizing if needed.\n   * @param distance   The d from the center to the corner\n   * @param upperRight If true, return the coords for the upper right corner, else return the lower left.\n   * @return The point, either the upperLeft or the lower right\n   */\n  public static double[] vectorBoxCorner(double[] center, double[] result, double distance, boolean upperRight) {\n    if (result == null || result.length != center.length) {\n      result = new double[center.length];\n    }\n    if (upperRight == false) {\n      distance = -distance;\n    }\n    //We don't care about the power here,\n    // b/c we are always in a rectangular coordinate system, so any norm can be used by\n    //using the definition of sine\n    distance = SIN_45 * distance; // sin(Pi/4) == (2^0.5)/2 == opp/hyp == opp/distance, solve for opp, similarily for cosine\n    for (int i = 0; i < center.length; i++) {\n      result[i] = center[i] + distance;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"459be89020f9023e3b60066066a892c7edb5de58":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["459be89020f9023e3b60066066a892c7edb5de58"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["459be89020f9023e3b60066066a892c7edb5de58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"459be89020f9023e3b60066066a892c7edb5de58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}