{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performDefaultTests(TestReopen).mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performDefaultTests(TestReopen).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#performDefaultTests(TestReopen).mjava","sourceNew":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestDirectoryReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestDirectoryReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","sourceOld":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestIndexReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestIndexReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestIndexReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performDefaultTests(TestReopen).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performDefaultTests(TestReopen).mjava","sourceNew":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestDirectoryReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true);\n    assertReaderClosed(index2_refreshed, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestDirectoryReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true);\n    assertReaderClosed(index2, true);\n  }\n\n","sourceOld":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestDirectoryReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestDirectoryReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","bugFix":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performDefaultTests(TestReopen).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performDefaultTests(TestReopen).mjava","sourceNew":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestDirectoryReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true);\n    assertReaderClosed(index2_refreshed, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestDirectoryReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true);\n    assertReaderClosed(index2, true);\n  }\n\n","sourceOld":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestDirectoryReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestDirectoryReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performDefaultTests(TestReopen).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performDefaultTests(TestReopen).mjava","sourceNew":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestDirectoryReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true);\n    assertReaderClosed(index2_refreshed, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestDirectoryReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true);\n    assertReaderClosed(index2, true);\n  }\n\n","sourceOld":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestDirectoryReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestDirectoryReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performDefaultTests(TestReopen).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performDefaultTests(TestReopen).mjava","sourceNew":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestDirectoryReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestDirectoryReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","sourceOld":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestDirectoryReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true);\n    assertReaderClosed(index2_refreshed, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestDirectoryReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true);\n    assertReaderClosed(index2, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performDefaultTests(TestReopen).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#performDefaultTests(TestReopen).mjava","sourceNew":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestDirectoryReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true);\n    assertReaderClosed(index2_refreshed, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestDirectoryReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true);\n    assertReaderClosed(index2, true);\n  }\n\n","sourceOld":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    DirectoryReader index1 = test.openReader();\n    DirectoryReader index2 = test.openReader();\n        \n    TestDirectoryReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    DirectoryReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestDirectoryReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh DirectoryReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestDirectoryReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}