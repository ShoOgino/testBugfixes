{"path":"lucene/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","commits":[{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    double[] doubles = cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    int[] ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    int[] numInts = cache.getInts(reader, \"numInt\", random.nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    double[] doubles = cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    int[] ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    int[] numInts = cache.getInts(reader, \"numInt\", random.nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    double[] doubles = cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    int[] ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    int[] numInts = cache.getInts(reader, \"numInt\", random.nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts[i]);\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["382fe3a6ca9745891afebda9b9a57cc158305545"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["382fe3a6ca9745891afebda9b9a57cc158305545"],"382fe3a6ca9745891afebda9b9a57cc158305545":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}