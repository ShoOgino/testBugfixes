{"path":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","sourceNew":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","sourceOld":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"/dev/null","sourceNew":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","sourceNew":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      final BytesRef term = dv.lookupOrd(ordAndValue.ord);\n      String[] parts = FacetsConfig.stringToPath(term.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","sourceOld":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","sourceNew":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) throws IOException {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      final BytesRef term = dv.lookupOrd(ordAndValue.ord);\n      String[] parts = FacetsConfig.stringToPath(term.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","sourceOld":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      final BytesRef term = dv.lookupOrd(ordAndValue.ord);\n      String[] parts = FacetsConfig.stringToPath(term.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","bugFix":["21d36d0db865f7b84026b447bec653469a6e66df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","sourceNew":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) throws IOException {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      final BytesRef term = dv.lookupOrd(ordAndValue.ord);\n      String[] parts = FacetsConfig.stringToPath(term.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","sourceOld":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      final BytesRef term = dv.lookupOrd(ordAndValue.ord);\n      String[] parts = FacetsConfig.stringToPath(term.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7558b5077dd4abd457be151475f13b541f4f13e"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["f7558b5077dd4abd457be151475f13b541f4f13e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}