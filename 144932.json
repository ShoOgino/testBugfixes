{"path":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,ValueType).mjava","commits":[{"id":"39d51e9acac1e629cffe47855e85dc6dedc4754d","date":1305711497,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,Type).mjava","sourceNew":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   * @param omitTermFreqAndPositions true if term freqs should be omitted for this field\n   */\n  synchronized public FieldInfo addOrUpdate(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions, ValueType docValues) {\n    return addOrUpdateInternal(name, -1, isIndexed, storeTermVector, storePositionWithTermVector,\n                               storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValues);\n  }\n\n","sourceOld":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   * @param omitTermFreqAndPositions true if term freqs should be omitted for this field\n   */\n  synchronized public FieldInfo addOrUpdate(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions, Type docValues) {\n    return addOrUpdateInternal(name, -1, isIndexed, storeTermVector, storePositionWithTermVector,\n                               storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,ValueType).mjava","pathOld":"/dev/null","sourceNew":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   * @param omitTermFreqAndPositions true if term freqs should be omitted for this field\n   */\n  synchronized public FieldInfo addOrUpdate(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions, ValueType docValues) {\n    return addOrUpdateInternal(name, -1, isIndexed, storeTermVector, storePositionWithTermVector,\n                               storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValues);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,ValueType).mjava","pathOld":"/dev/null","sourceNew":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   * @param omitTermFreqAndPositions true if term freqs should be omitted for this field\n   */\n  synchronized public FieldInfo addOrUpdate(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions, ValueType docValues) {\n    return addOrUpdateInternal(name, -1, isIndexed, storeTermVector, storePositionWithTermVector,\n                               storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValues);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,ValueType).mjava","sourceNew":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   * @param indexOptions if term freqs should be omitted for this field\n   */\n  synchronized public FieldInfo addOrUpdate(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, ValueType docValues) {\n    return addOrUpdateInternal(name, -1, isIndexed, storeTermVector, storePositionWithTermVector,\n                               storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n  }\n\n","sourceOld":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   * @param omitTermFreqAndPositions true if term freqs should be omitted for this field\n   */\n  synchronized public FieldInfo addOrUpdate(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions, ValueType docValues) {\n    return addOrUpdateInternal(name, -1, isIndexed, storeTermVector, storePositionWithTermVector,\n                               storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","39d51e9acac1e629cffe47855e85dc6dedc4754d"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"2e8d7ba2175f47e280231533f7d3016249cea88b":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","39d51e9acac1e629cffe47855e85dc6dedc4754d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}