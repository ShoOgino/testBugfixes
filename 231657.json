{"path":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin#testEditRules().mjava","commits":[{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin#testEditRules().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#testEditRules().mjava","sourceNew":"  public void testEditRules() throws IOException {\n    Perms perms =  new Perms();\n    perms.runCmd(\"{set-permission : {name: config-edit, role: admin } }\", true);\n    assertEquals(\"config-edit\",  getObjectByPath(perms.conf, false, \"permissions[0]/name\"));\n    assertEquals(1 , perms.getVal(\"permissions[0]/index\"));\n    assertEquals(\"admin\", perms.getVal(\"permissions[0]/role\"));\n    perms.runCmd(\"{set-permission : {name: config-edit, role: [admin, dev], index:2 } }\", false);\n    perms.runCmd(\"{set-permission : {name: config-edit, role: [admin, dev], index:1}}\", true);\n    Collection roles = (Collection) perms.getVal(\"permissions[0]/role\");\n    assertEquals(2, roles.size());\n    assertTrue(roles.contains(\"admin\"));\n    assertTrue(roles.contains(\"dev\"));\n    perms.runCmd(\"{set-permission : {role: [admin, dev], collection: x , path: '/a/b' , method :[GET, POST] }}\", true);\n    assertNotNull(perms.getVal(\"permissions[1]\"));\n    assertEquals(\"x\", perms.getVal(\"permissions[1]/collection\"));\n    assertEquals(\"/a/b\", perms.getVal(\"permissions[1]/path\"));\n    perms.runCmd(\"{update-permission : {index : 2, method : POST }}\", true);\n    assertEquals(\"POST\", perms.getVal(\"permissions[1]/method\"));\n    perms.runCmd(\"{set-permission : {name : read, collection : y, role:[guest, dev] ,  before :2}}\", true);\n    assertNotNull(perms.getVal(\"permissions[2]\"));\n    assertEquals(\"y\", perms.getVal(\"permissions[1]/collection\"));\n    assertEquals(\"read\", perms.getVal(\"permissions[1]/name\"));\n    perms.runCmd(\"{delete-permission : 3}\", true);\n    assertTrue(captureErrors(perms.parsedCommands).isEmpty());\n    assertEquals(\"y\", perms.getVal(\"permissions[1]/collection\"));\n  }\n\n","sourceOld":"  public void testEditRules() throws IOException {\n    Perms perms =  new Perms();\n    perms.runCmd(\"{set-permission : {name: config-edit, role: admin } }\", true);\n    assertEquals(\"config-edit\",  getObjectByPath(perms.conf, false, \"permissions[0]/name\"));\n    assertEquals(1 , perms.getVal(\"permissions[0]/index\"));\n    assertEquals(\"admin\", perms.getVal(\"permissions[0]/role\"));\n    perms.runCmd(\"{set-permission : {name: config-edit, role: [admin, dev], index:2 } }\", false);\n    perms.runCmd(\"{set-permission : {name: config-edit, role: [admin, dev], index:1}}\", true);\n    Collection roles = (Collection) perms.getVal(\"permissions[0]/role\");\n    assertEquals(2, roles.size());\n    assertTrue(roles.contains(\"admin\"));\n    assertTrue(roles.contains(\"dev\"));\n    perms.runCmd(\"{set-permission : {role: [admin, dev], collection: x , path: '/a/b' , method :[GET, POST] }}\", true);\n    assertNotNull(perms.getVal(\"permissions[1]\"));\n    assertEquals(\"x\", perms.getVal(\"permissions[1]/collection\"));\n    assertEquals(\"/a/b\", perms.getVal(\"permissions[1]/path\"));\n    perms.runCmd(\"{update-permission : {index : 2, method : POST }}\", true);\n    assertEquals(\"POST\", perms.getVal(\"permissions[1]/method\"));\n    perms.runCmd(\"{set-permission : {name : read, collection : y, role:[guest, dev] ,  before :2}}\", true);\n    assertNotNull(perms.getVal(\"permissions[2]\"));\n    assertEquals(\"y\", perms.getVal(\"permissions[1]/collection\"));\n    assertEquals(\"read\", perms.getVal(\"permissions[1]/name\"));\n    perms.runCmd(\"{delete-permission : 3}\", true);\n    assertTrue(captureErrors(perms.parsedCommands).isEmpty());\n    assertEquals(\"y\", perms.getVal(\"permissions[1]/collection\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin#testEditRules().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin#testEditRules().mjava","sourceNew":"  public void testEditRules() throws IOException {\n    Perms perms =  new Perms();\n    perms.runCmd(\"{set-permission : {name: config-edit, role: admin } }\", true);\n    assertEquals(\"config-edit\",  getObjectByPath(perms.conf, false, \"permissions[0]/name\"));\n    assertEquals(1 , perms.getVal(\"permissions[0]/index\"));\n    assertEquals(\"admin\", perms.getVal(\"permissions[0]/role\"));\n    perms.runCmd(\"{set-permission : {name: config-edit, role: [admin, dev], index:2 } }\", false);\n    perms.runCmd(\"{set-permission : {name: config-edit, role: [admin, dev], index:1}}\", true);\n    @SuppressWarnings({\"rawtypes\"})\n    Collection roles = (Collection) perms.getVal(\"permissions[0]/role\");\n    assertEquals(2, roles.size());\n    assertTrue(roles.contains(\"admin\"));\n    assertTrue(roles.contains(\"dev\"));\n    perms.runCmd(\"{set-permission : {role: [admin, dev], collection: x , path: '/a/b' , method :[GET, POST] }}\", true);\n    assertNotNull(perms.getVal(\"permissions[1]\"));\n    assertEquals(\"x\", perms.getVal(\"permissions[1]/collection\"));\n    assertEquals(\"/a/b\", perms.getVal(\"permissions[1]/path\"));\n    perms.runCmd(\"{update-permission : {index : 2, method : POST }}\", true);\n    assertEquals(\"POST\", perms.getVal(\"permissions[1]/method\"));\n    perms.runCmd(\"{set-permission : {name : read, collection : y, role:[guest, dev] ,  before :2}}\", true);\n    assertNotNull(perms.getVal(\"permissions[2]\"));\n    assertEquals(\"y\", perms.getVal(\"permissions[1]/collection\"));\n    assertEquals(\"read\", perms.getVal(\"permissions[1]/name\"));\n    perms.runCmd(\"{delete-permission : 3}\", true);\n    assertTrue(captureErrors(perms.parsedCommands).isEmpty());\n    assertEquals(\"y\", perms.getVal(\"permissions[1]/collection\"));\n  }\n\n","sourceOld":"  public void testEditRules() throws IOException {\n    Perms perms =  new Perms();\n    perms.runCmd(\"{set-permission : {name: config-edit, role: admin } }\", true);\n    assertEquals(\"config-edit\",  getObjectByPath(perms.conf, false, \"permissions[0]/name\"));\n    assertEquals(1 , perms.getVal(\"permissions[0]/index\"));\n    assertEquals(\"admin\", perms.getVal(\"permissions[0]/role\"));\n    perms.runCmd(\"{set-permission : {name: config-edit, role: [admin, dev], index:2 } }\", false);\n    perms.runCmd(\"{set-permission : {name: config-edit, role: [admin, dev], index:1}}\", true);\n    Collection roles = (Collection) perms.getVal(\"permissions[0]/role\");\n    assertEquals(2, roles.size());\n    assertTrue(roles.contains(\"admin\"));\n    assertTrue(roles.contains(\"dev\"));\n    perms.runCmd(\"{set-permission : {role: [admin, dev], collection: x , path: '/a/b' , method :[GET, POST] }}\", true);\n    assertNotNull(perms.getVal(\"permissions[1]\"));\n    assertEquals(\"x\", perms.getVal(\"permissions[1]/collection\"));\n    assertEquals(\"/a/b\", perms.getVal(\"permissions[1]/path\"));\n    perms.runCmd(\"{update-permission : {index : 2, method : POST }}\", true);\n    assertEquals(\"POST\", perms.getVal(\"permissions[1]/method\"));\n    perms.runCmd(\"{set-permission : {name : read, collection : y, role:[guest, dev] ,  before :2}}\", true);\n    assertNotNull(perms.getVal(\"permissions[2]\"));\n    assertEquals(\"y\", perms.getVal(\"permissions[1]/collection\"));\n    assertEquals(\"read\", perms.getVal(\"permissions[1]/name\"));\n    perms.runCmd(\"{delete-permission : 3}\", true);\n    assertTrue(captureErrors(perms.parsedCommands).isEmpty());\n    assertEquals(\"y\", perms.getVal(\"permissions[1]/collection\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e0ac06a3dde3a146042d8eb8820dc45326e9263","date":1594139870,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin#testEditRules().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin#testEditRules().mjava","sourceNew":"  public void testEditRules() throws IOException {\n    Perms perms =  new Perms();\n    perms.runCmd(\"{set-permission : {name: config-edit, role: admin } }\", true);\n    assertEquals(\"config-edit\",  getObjectByPath(perms.conf, false, \"permissions[0]/name\"));\n    assertEquals(1 , perms.getVal(\"permissions[0]/index\"));\n    assertEquals(\"admin\", perms.getVal(\"permissions[0]/role\"));\n    perms.runCmd(\"{set-permission : {name: config-edit, role: [admin, dev], index:2 } }\", false);\n    perms.runCmd(\"{set-permission : {name: config-edit, role: [admin, dev], index:1}}\", true);\n    Collection<String> roles = (Collection<String>) perms.getVal(\"permissions[0]/role\");\n    assertEquals(2, roles.size());\n    assertTrue(roles.contains(\"admin\"));\n    assertTrue(roles.contains(\"dev\"));\n    perms.runCmd(\"{set-permission : {role: [admin, dev], collection: x , path: '/a/b' , method :[GET, POST] }}\", true);\n    assertNotNull(perms.getVal(\"permissions[1]\"));\n    assertEquals(\"x\", perms.getVal(\"permissions[1]/collection\"));\n    assertEquals(\"/a/b\", perms.getVal(\"permissions[1]/path\"));\n    perms.runCmd(\"{update-permission : {index : 2, method : POST }}\", true);\n    assertEquals(\"POST\", perms.getVal(\"permissions[1]/method\"));\n    perms.runCmd(\"{set-permission : {name : read, collection : y, role:[guest, dev] ,  before :2}}\", true);\n    assertNotNull(perms.getVal(\"permissions[2]\"));\n    assertEquals(\"y\", perms.getVal(\"permissions[1]/collection\"));\n    assertEquals(\"read\", perms.getVal(\"permissions[1]/name\"));\n    perms.runCmd(\"{delete-permission : 3}\", true);\n    assertTrue(captureErrors(perms.parsedCommands).isEmpty());\n    assertEquals(\"y\", perms.getVal(\"permissions[1]/collection\"));\n  }\n\n","sourceOld":"  public void testEditRules() throws IOException {\n    Perms perms =  new Perms();\n    perms.runCmd(\"{set-permission : {name: config-edit, role: admin } }\", true);\n    assertEquals(\"config-edit\",  getObjectByPath(perms.conf, false, \"permissions[0]/name\"));\n    assertEquals(1 , perms.getVal(\"permissions[0]/index\"));\n    assertEquals(\"admin\", perms.getVal(\"permissions[0]/role\"));\n    perms.runCmd(\"{set-permission : {name: config-edit, role: [admin, dev], index:2 } }\", false);\n    perms.runCmd(\"{set-permission : {name: config-edit, role: [admin, dev], index:1}}\", true);\n    @SuppressWarnings({\"rawtypes\"})\n    Collection roles = (Collection) perms.getVal(\"permissions[0]/role\");\n    assertEquals(2, roles.size());\n    assertTrue(roles.contains(\"admin\"));\n    assertTrue(roles.contains(\"dev\"));\n    perms.runCmd(\"{set-permission : {role: [admin, dev], collection: x , path: '/a/b' , method :[GET, POST] }}\", true);\n    assertNotNull(perms.getVal(\"permissions[1]\"));\n    assertEquals(\"x\", perms.getVal(\"permissions[1]/collection\"));\n    assertEquals(\"/a/b\", perms.getVal(\"permissions[1]/path\"));\n    perms.runCmd(\"{update-permission : {index : 2, method : POST }}\", true);\n    assertEquals(\"POST\", perms.getVal(\"permissions[1]/method\"));\n    perms.runCmd(\"{set-permission : {name : read, collection : y, role:[guest, dev] ,  before :2}}\", true);\n    assertNotNull(perms.getVal(\"permissions[2]\"));\n    assertEquals(\"y\", perms.getVal(\"permissions[1]/collection\"));\n    assertEquals(\"read\", perms.getVal(\"permissions[1]/name\"));\n    perms.runCmd(\"{delete-permission : 3}\", true);\n    assertTrue(captureErrors(perms.parsedCommands).isEmpty());\n    assertEquals(\"y\", perms.getVal(\"permissions[1]/collection\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8076096f334b0665d0a69a63ee98ac09baad402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"],"e98520789adb1d5ad05afb4956eca0944a929688":["8076096f334b0665d0a69a63ee98ac09baad402b"]},"commit2Childs":{"8076096f334b0665d0a69a63ee98ac09baad402b":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8076096f334b0665d0a69a63ee98ac09baad402b"],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e98520789adb1d5ad05afb4956eca0944a929688":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}