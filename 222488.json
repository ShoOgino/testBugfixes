{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testParsingWithChildDocs().mjava","commits":[{"id":"220577719e3753e52195ed66dc9af6c4e65e2873","date":1550042623,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testParsingWithChildDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testParsingWithChildDocs() throws IOException {\n    SolrDocument d1 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d1.setField(\"id\", \"101\");\n    SolrDocument d2 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d2.setField(\"id\", \"102\");\n    d2.setField(\"longs\", Arrays.asList(100l, 200l));\n\n    SolrDocumentList sdocs = new SolrDocumentList();\n    sdocs.setStart(0);\n    sdocs.setNumFound(2);\n    sdocs.add(d1);\n    sdocs.add(d2);\n\n    SimpleOrderedMap orderedMap = new SimpleOrderedMap();\n    orderedMap.add(\"response\", sdocs);\n\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    new JavaBinCodec().marshal(orderedMap, baos);\n    boolean[] useListener = new boolean[1];\n    useListener[0] = true;\n\n    class Pojo {\n      CharSequence id;\n      CharSequence subject;\n      CharSequence cat;\n      long[] longs;\n      final List<Pojo> children = new ArrayList<>();\n\n      public void compare(SolrDocument d) {\n        assertEquals(id, d.getFieldValue(\"id\"));\n        assertEquals(subject, d.getFieldValue(\"subject\"));\n        assertEquals(cat, d.getFieldValue(\"cat\"));\n        assertEquals(d.getChildDocumentCount(), children.size());\n        List<Long> l = (List<Long>) d.getFieldValue(\"longs\");\n        if(l != null){\n          assertNotNull(longs);\n          for (int i = 0; i < l.size(); i++) {\n            Long v = l.get(i);\n            assertEquals(v.longValue(), longs[i]);\n          }\n        }\n        List<SolrDocument> childDocuments = d.getChildDocuments();\n        if (childDocuments == null) return;\n        for (int i = 0; i < childDocuments.size(); i++) {\n          children.get(i).compare(childDocuments.get(i));\n        }\n\n      }\n\n    }\n    List<Pojo> l = new ArrayList<>();\n    StreamingBinaryResponseParser binaryResponseParser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        return l;\n      }\n\n      @Override\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        ((List) docListObj).add(pojo);\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (field.name().equals(\"id\")) {\n          pojo.id = field.strValue();\n        } else if (field.name().equals(\"subject\")) {\n          pojo.subject = field.strValue();\n        } else if (field.name().equals(\"cat\")) {\n          pojo.cat = field.strValue();\n        } else if (field.type() == DataEntry.Type.ENTRY_ITER && \"longs\".equals(field.name())) {\n          if(useListener[0]){\n            field.listenContainer(pojo.longs = new long[field.length()], READLONGS);\n          } else {\n            List<Long> longList = (List<Long>) field.val();\n            pojo.longs = new long[longList.size()];\n            for (int i = 0; i < longList.size(); i++) {\n              pojo.longs[i] = longList.get(i);\n\n            }\n\n          }\n        }\n\n      }\n\n\n      @Override\n      public Object startChildDoc(Object parentDocObj) {\n        Pojo parent = (Pojo) parentDocObj;\n        Pojo child = new Pojo();\n        parent.children.add(child);\n        return child;\n      }\n    });\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n    l.clear();\n\n    useListener[0] = false;\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c5cdabe00d4d433e6a831e18f68201284973eef","date":1578510992,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testParsingWithChildDocs().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testParsingWithChildDocs().mjava","sourceNew":"  public void testParsingWithChildDocs() throws IOException {\n    SolrDocument d1 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d1.setField(\"id\", \"101\");\n    SolrDocument d2 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d2.setField(\"id\", \"102\");\n    d2.setField(\"longs\", Arrays.asList(100l, 200l));\n\n    SolrDocumentList sdocs = new SolrDocumentList();\n    sdocs.setStart(0);\n    sdocs.setNumFound(2);\n    sdocs.add(d1);\n    sdocs.add(d2);\n\n    SimpleOrderedMap orderedMap = new SimpleOrderedMap();\n    orderedMap.add(\"response\", sdocs);\n\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(orderedMap, baos);\n    }\n    boolean[] useListener = new boolean[1];\n    useListener[0] = true;\n\n    class Pojo {\n      CharSequence id;\n      CharSequence subject;\n      CharSequence cat;\n      long[] longs;\n      final List<Pojo> children = new ArrayList<>();\n\n      public void compare(SolrDocument d) {\n        assertEquals(id, d.getFieldValue(\"id\"));\n        assertEquals(subject, d.getFieldValue(\"subject\"));\n        assertEquals(cat, d.getFieldValue(\"cat\"));\n        assertEquals(d.getChildDocumentCount(), children.size());\n        List<Long> l = (List<Long>) d.getFieldValue(\"longs\");\n        if(l != null){\n          assertNotNull(longs);\n          for (int i = 0; i < l.size(); i++) {\n            Long v = l.get(i);\n            assertEquals(v.longValue(), longs[i]);\n          }\n        }\n        List<SolrDocument> childDocuments = d.getChildDocuments();\n        if (childDocuments == null) return;\n        for (int i = 0; i < childDocuments.size(); i++) {\n          children.get(i).compare(childDocuments.get(i));\n        }\n\n      }\n\n    }\n    List<Pojo> l = new ArrayList<>();\n    StreamingBinaryResponseParser binaryResponseParser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        return l;\n      }\n\n      @Override\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        ((List) docListObj).add(pojo);\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (field.name().equals(\"id\")) {\n          pojo.id = field.strValue();\n        } else if (field.name().equals(\"subject\")) {\n          pojo.subject = field.strValue();\n        } else if (field.name().equals(\"cat\")) {\n          pojo.cat = field.strValue();\n        } else if (field.type() == DataEntry.Type.ENTRY_ITER && \"longs\".equals(field.name())) {\n          if(useListener[0]){\n            field.listenContainer(pojo.longs = new long[field.length()], READLONGS);\n          } else {\n            List<Long> longList = (List<Long>) field.val();\n            pojo.longs = new long[longList.size()];\n            for (int i = 0; i < longList.size(); i++) {\n              pojo.longs[i] = longList.get(i);\n\n            }\n\n          }\n        }\n\n      }\n\n\n      @Override\n      public Object startChildDoc(Object parentDocObj) {\n        Pojo parent = (Pojo) parentDocObj;\n        Pojo child = new Pojo();\n        parent.children.add(child);\n        return child;\n      }\n    });\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n    l.clear();\n\n    useListener[0] = false;\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n\n  }\n\n","sourceOld":"  public void testParsingWithChildDocs() throws IOException {\n    SolrDocument d1 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d1.setField(\"id\", \"101\");\n    SolrDocument d2 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d2.setField(\"id\", \"102\");\n    d2.setField(\"longs\", Arrays.asList(100l, 200l));\n\n    SolrDocumentList sdocs = new SolrDocumentList();\n    sdocs.setStart(0);\n    sdocs.setNumFound(2);\n    sdocs.add(d1);\n    sdocs.add(d2);\n\n    SimpleOrderedMap orderedMap = new SimpleOrderedMap();\n    orderedMap.add(\"response\", sdocs);\n\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    new JavaBinCodec().marshal(orderedMap, baos);\n    boolean[] useListener = new boolean[1];\n    useListener[0] = true;\n\n    class Pojo {\n      CharSequence id;\n      CharSequence subject;\n      CharSequence cat;\n      long[] longs;\n      final List<Pojo> children = new ArrayList<>();\n\n      public void compare(SolrDocument d) {\n        assertEquals(id, d.getFieldValue(\"id\"));\n        assertEquals(subject, d.getFieldValue(\"subject\"));\n        assertEquals(cat, d.getFieldValue(\"cat\"));\n        assertEquals(d.getChildDocumentCount(), children.size());\n        List<Long> l = (List<Long>) d.getFieldValue(\"longs\");\n        if(l != null){\n          assertNotNull(longs);\n          for (int i = 0; i < l.size(); i++) {\n            Long v = l.get(i);\n            assertEquals(v.longValue(), longs[i]);\n          }\n        }\n        List<SolrDocument> childDocuments = d.getChildDocuments();\n        if (childDocuments == null) return;\n        for (int i = 0; i < childDocuments.size(); i++) {\n          children.get(i).compare(childDocuments.get(i));\n        }\n\n      }\n\n    }\n    List<Pojo> l = new ArrayList<>();\n    StreamingBinaryResponseParser binaryResponseParser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        return l;\n      }\n\n      @Override\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        ((List) docListObj).add(pojo);\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (field.name().equals(\"id\")) {\n          pojo.id = field.strValue();\n        } else if (field.name().equals(\"subject\")) {\n          pojo.subject = field.strValue();\n        } else if (field.name().equals(\"cat\")) {\n          pojo.cat = field.strValue();\n        } else if (field.type() == DataEntry.Type.ENTRY_ITER && \"longs\".equals(field.name())) {\n          if(useListener[0]){\n            field.listenContainer(pojo.longs = new long[field.length()], READLONGS);\n          } else {\n            List<Long> longList = (List<Long>) field.val();\n            pojo.longs = new long[longList.size()];\n            for (int i = 0; i < longList.size(); i++) {\n              pojo.longs[i] = longList.get(i);\n\n            }\n\n          }\n        }\n\n      }\n\n\n      @Override\n      public Object startChildDoc(Object parentDocObj) {\n        Pojo parent = (Pojo) parentDocObj;\n        Pojo child = new Pojo();\n        parent.children.add(child);\n        return child;\n      }\n    });\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n    l.clear();\n\n    useListener[0] = false;\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testParsingWithChildDocs().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testParsingWithChildDocs().mjava","sourceNew":"  public void testParsingWithChildDocs() throws IOException {\n    SolrDocument d1 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d1.setField(\"id\", \"101\");\n    SolrDocument d2 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d2.setField(\"id\", \"102\");\n    d2.setField(\"longs\", Arrays.asList(100l, 200l));\n\n    SolrDocumentList sdocs = new SolrDocumentList();\n    sdocs.setStart(0);\n    sdocs.setNumFound(2);\n    sdocs.add(d1);\n    sdocs.add(d2);\n\n    SimpleOrderedMap orderedMap = new SimpleOrderedMap();\n    orderedMap.add(\"response\", sdocs);\n\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(orderedMap, baos);\n    }\n    boolean[] useListener = new boolean[1];\n    useListener[0] = true;\n\n    class Pojo {\n      CharSequence id;\n      CharSequence subject;\n      CharSequence cat;\n      long[] longs;\n      final List<Pojo> children = new ArrayList<>();\n\n      public void compare(SolrDocument d) {\n        assertEquals(id, d.getFieldValue(\"id\"));\n        assertEquals(subject, d.getFieldValue(\"subject\"));\n        assertEquals(cat, d.getFieldValue(\"cat\"));\n        assertEquals(d.getChildDocumentCount(), children.size());\n        List<Long> l = (List<Long>) d.getFieldValue(\"longs\");\n        if(l != null){\n          assertNotNull(longs);\n          for (int i = 0; i < l.size(); i++) {\n            Long v = l.get(i);\n            assertEquals(v.longValue(), longs[i]);\n          }\n        }\n        List<SolrDocument> childDocuments = d.getChildDocuments();\n        if (childDocuments == null) return;\n        for (int i = 0; i < childDocuments.size(); i++) {\n          children.get(i).compare(childDocuments.get(i));\n        }\n\n      }\n\n    }\n    List<Pojo> l = new ArrayList<>();\n    StreamingBinaryResponseParser binaryResponseParser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        return l;\n      }\n\n      @Override\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        ((List) docListObj).add(pojo);\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (field.name().equals(\"id\")) {\n          pojo.id = field.strValue();\n        } else if (field.name().equals(\"subject\")) {\n          pojo.subject = field.strValue();\n        } else if (field.name().equals(\"cat\")) {\n          pojo.cat = field.strValue();\n        } else if (field.type() == DataEntry.Type.ENTRY_ITER && \"longs\".equals(field.name())) {\n          if(useListener[0]){\n            field.listenContainer(pojo.longs = new long[field.length()], READLONGS);\n          } else {\n            List<Long> longList = (List<Long>) field.val();\n            pojo.longs = new long[longList.size()];\n            for (int i = 0; i < longList.size(); i++) {\n              pojo.longs[i] = longList.get(i);\n\n            }\n\n          }\n        }\n\n      }\n\n\n      @Override\n      public Object startChildDoc(Object parentDocObj) {\n        Pojo parent = (Pojo) parentDocObj;\n        Pojo child = new Pojo();\n        parent.children.add(child);\n        return child;\n      }\n    });\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n    l.clear();\n\n    useListener[0] = false;\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n\n  }\n\n","sourceOld":"  public void testParsingWithChildDocs() throws IOException {\n    SolrDocument d1 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d1.setField(\"id\", \"101\");\n    SolrDocument d2 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d2.setField(\"id\", \"102\");\n    d2.setField(\"longs\", Arrays.asList(100l, 200l));\n\n    SolrDocumentList sdocs = new SolrDocumentList();\n    sdocs.setStart(0);\n    sdocs.setNumFound(2);\n    sdocs.add(d1);\n    sdocs.add(d2);\n\n    SimpleOrderedMap orderedMap = new SimpleOrderedMap();\n    orderedMap.add(\"response\", sdocs);\n\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    new JavaBinCodec().marshal(orderedMap, baos);\n    boolean[] useListener = new boolean[1];\n    useListener[0] = true;\n\n    class Pojo {\n      CharSequence id;\n      CharSequence subject;\n      CharSequence cat;\n      long[] longs;\n      final List<Pojo> children = new ArrayList<>();\n\n      public void compare(SolrDocument d) {\n        assertEquals(id, d.getFieldValue(\"id\"));\n        assertEquals(subject, d.getFieldValue(\"subject\"));\n        assertEquals(cat, d.getFieldValue(\"cat\"));\n        assertEquals(d.getChildDocumentCount(), children.size());\n        List<Long> l = (List<Long>) d.getFieldValue(\"longs\");\n        if(l != null){\n          assertNotNull(longs);\n          for (int i = 0; i < l.size(); i++) {\n            Long v = l.get(i);\n            assertEquals(v.longValue(), longs[i]);\n          }\n        }\n        List<SolrDocument> childDocuments = d.getChildDocuments();\n        if (childDocuments == null) return;\n        for (int i = 0; i < childDocuments.size(); i++) {\n          children.get(i).compare(childDocuments.get(i));\n        }\n\n      }\n\n    }\n    List<Pojo> l = new ArrayList<>();\n    StreamingBinaryResponseParser binaryResponseParser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        return l;\n      }\n\n      @Override\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        ((List) docListObj).add(pojo);\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (field.name().equals(\"id\")) {\n          pojo.id = field.strValue();\n        } else if (field.name().equals(\"subject\")) {\n          pojo.subject = field.strValue();\n        } else if (field.name().equals(\"cat\")) {\n          pojo.cat = field.strValue();\n        } else if (field.type() == DataEntry.Type.ENTRY_ITER && \"longs\".equals(field.name())) {\n          if(useListener[0]){\n            field.listenContainer(pojo.longs = new long[field.length()], READLONGS);\n          } else {\n            List<Long> longList = (List<Long>) field.val();\n            pojo.longs = new long[longList.size()];\n            for (int i = 0; i < longList.size(); i++) {\n              pojo.longs[i] = longList.get(i);\n\n            }\n\n          }\n        }\n\n      }\n\n\n      @Override\n      public Object startChildDoc(Object parentDocObj) {\n        Pojo parent = (Pojo) parentDocObj;\n        Pojo child = new Pojo();\n        parent.children.add(child);\n        return child;\n      }\n    });\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n    l.clear();\n\n    useListener[0] = false;\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testParsingWithChildDocs().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testParsingWithChildDocs().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testParsingWithChildDocs() throws IOException {\n    SolrDocument d1 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d1.setField(\"id\", \"101\");\n    SolrDocument d2 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d2.setField(\"id\", \"102\");\n    d2.setField(\"longs\", Arrays.asList(100l, 200l));\n\n    SolrDocumentList sdocs = new SolrDocumentList();\n    sdocs.setStart(0);\n    sdocs.setNumFound(2);\n    sdocs.add(d1);\n    sdocs.add(d2);\n\n    @SuppressWarnings({\"rawtypes\"})\n    SimpleOrderedMap orderedMap = new SimpleOrderedMap();\n    orderedMap.add(\"response\", sdocs);\n\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(orderedMap, baos);\n    }\n    boolean[] useListener = new boolean[1];\n    useListener[0] = true;\n\n    class Pojo {\n      CharSequence id;\n      CharSequence subject;\n      CharSequence cat;\n      long[] longs;\n      final List<Pojo> children = new ArrayList<>();\n\n      public void compare(SolrDocument d) {\n        assertEquals(id, d.getFieldValue(\"id\"));\n        assertEquals(subject, d.getFieldValue(\"subject\"));\n        assertEquals(cat, d.getFieldValue(\"cat\"));\n        assertEquals(d.getChildDocumentCount(), children.size());\n        @SuppressWarnings({\"unchecked\"})\n        List<Long> l = (List<Long>) d.getFieldValue(\"longs\");\n        if(l != null){\n          assertNotNull(longs);\n          for (int i = 0; i < l.size(); i++) {\n            Long v = l.get(i);\n            assertEquals(v.longValue(), longs[i]);\n          }\n        }\n        List<SolrDocument> childDocuments = d.getChildDocuments();\n        if (childDocuments == null) return;\n        for (int i = 0; i < childDocuments.size(); i++) {\n          children.get(i).compare(childDocuments.get(i));\n        }\n\n      }\n\n    }\n    List<Pojo> l = new ArrayList<>();\n    StreamingBinaryResponseParser binaryResponseParser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        return l;\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        ((List) docListObj).add(pojo);\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (field.name().equals(\"id\")) {\n          pojo.id = field.strValue();\n        } else if (field.name().equals(\"subject\")) {\n          pojo.subject = field.strValue();\n        } else if (field.name().equals(\"cat\")) {\n          pojo.cat = field.strValue();\n        } else if (field.type() == DataEntry.Type.ENTRY_ITER && \"longs\".equals(field.name())) {\n          if(useListener[0]){\n            field.listenContainer(pojo.longs = new long[field.length()], READLONGS);\n          } else {\n            @SuppressWarnings({\"unchecked\"})\n            List<Long> longList = (List<Long>) field.val();\n            pojo.longs = new long[longList.size()];\n            for (int i = 0; i < longList.size(); i++) {\n              pojo.longs[i] = longList.get(i);\n\n            }\n\n          }\n        }\n\n      }\n\n\n      @Override\n      public Object startChildDoc(Object parentDocObj) {\n        Pojo parent = (Pojo) parentDocObj;\n        Pojo child = new Pojo();\n        parent.children.add(child);\n        return child;\n      }\n    });\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n    l.clear();\n\n    useListener[0] = false;\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n\n  }\n\n","sourceOld":"  public void testParsingWithChildDocs() throws IOException {\n    SolrDocument d1 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d1.setField(\"id\", \"101\");\n    SolrDocument d2 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();\n    d2.setField(\"id\", \"102\");\n    d2.setField(\"longs\", Arrays.asList(100l, 200l));\n\n    SolrDocumentList sdocs = new SolrDocumentList();\n    sdocs.setStart(0);\n    sdocs.setNumFound(2);\n    sdocs.add(d1);\n    sdocs.add(d2);\n\n    SimpleOrderedMap orderedMap = new SimpleOrderedMap();\n    orderedMap.add(\"response\", sdocs);\n\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(orderedMap, baos);\n    }\n    boolean[] useListener = new boolean[1];\n    useListener[0] = true;\n\n    class Pojo {\n      CharSequence id;\n      CharSequence subject;\n      CharSequence cat;\n      long[] longs;\n      final List<Pojo> children = new ArrayList<>();\n\n      public void compare(SolrDocument d) {\n        assertEquals(id, d.getFieldValue(\"id\"));\n        assertEquals(subject, d.getFieldValue(\"subject\"));\n        assertEquals(cat, d.getFieldValue(\"cat\"));\n        assertEquals(d.getChildDocumentCount(), children.size());\n        List<Long> l = (List<Long>) d.getFieldValue(\"longs\");\n        if(l != null){\n          assertNotNull(longs);\n          for (int i = 0; i < l.size(); i++) {\n            Long v = l.get(i);\n            assertEquals(v.longValue(), longs[i]);\n          }\n        }\n        List<SolrDocument> childDocuments = d.getChildDocuments();\n        if (childDocuments == null) return;\n        for (int i = 0; i < childDocuments.size(); i++) {\n          children.get(i).compare(childDocuments.get(i));\n        }\n\n      }\n\n    }\n    List<Pojo> l = new ArrayList<>();\n    StreamingBinaryResponseParser binaryResponseParser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        return l;\n      }\n\n      @Override\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        ((List) docListObj).add(pojo);\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (field.name().equals(\"id\")) {\n          pojo.id = field.strValue();\n        } else if (field.name().equals(\"subject\")) {\n          pojo.subject = field.strValue();\n        } else if (field.name().equals(\"cat\")) {\n          pojo.cat = field.strValue();\n        } else if (field.type() == DataEntry.Type.ENTRY_ITER && \"longs\".equals(field.name())) {\n          if(useListener[0]){\n            field.listenContainer(pojo.longs = new long[field.length()], READLONGS);\n          } else {\n            List<Long> longList = (List<Long>) field.val();\n            pojo.longs = new long[longList.size()];\n            for (int i = 0; i < longList.size(); i++) {\n              pojo.longs[i] = longList.get(i);\n\n            }\n\n          }\n        }\n\n      }\n\n\n      @Override\n      public Object startChildDoc(Object parentDocObj) {\n        Pojo parent = (Pojo) parentDocObj;\n        Pojo child = new Pojo();\n        parent.children.add(child);\n        return child;\n      }\n    });\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n    l.clear();\n\n    useListener[0] = false;\n    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n    for (int i = 0; i < sdocs.size(); i++) {\n      l.get(i).compare(sdocs.get(i));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8c5cdabe00d4d433e6a831e18f68201284973eef"],"220577719e3753e52195ed66dc9af6c4e65e2873":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["220577719e3753e52195ed66dc9af6c4e65e2873"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["220577719e3753e52195ed66dc9af6c4e65e2873","8c5cdabe00d4d433e6a831e18f68201284973eef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"220577719e3753e52195ed66dc9af6c4e65e2873":["8c5cdabe00d4d433e6a831e18f68201284973eef","1da93834e39ce341a13e42b611d0a83bd3114bba"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["9ba1b632c041956c93c41aa1143d16a567014891","1da93834e39ce341a13e42b611d0a83bd3114bba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["220577719e3753e52195ed66dc9af6c4e65e2873"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}