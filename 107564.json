{"path":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(AtomicReaderContext,int).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(ReaderContext,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(ReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(AtomicReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(AtomicReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /** Explain the score we computed for doc */\n    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5e679b9c5f68f1f331de920ae8366af75b44060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["e5e679b9c5f68f1f331de920ae8366af75b44060","868da859b43505d9d2a023bfeae6dd0c795f5295"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}