{"path":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#advance(ScoredDocIDsIterator,int).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#advance(ScoredDocIDsIterator,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#advance(ScoredDocIDsIterator,int).mjava","sourceNew":"  /**\n   * utility: advance the iterator until finding (or exceeding) specific\n   * document\n   * \n   * @param iterator\n   *          iterator being advanced\n   * @param targetDoc\n   *          target of advancing\n   * @return false if iterator exhausted, true otherwise.\n   */\n  private static boolean advance(ScoredDocIDsIterator iterator, int targetDoc) {\n    while (iterator.next()) {\n      if (iterator.getDocID() >= targetDoc) {\n        return true; // target reached\n      }\n    }\n    return false; // exhausted\n  }\n\n","sourceOld":"  /**\n   * utility: advance the iterator until finding (or exceeding) specific\n   * document\n   * \n   * @param iterator\n   *          iterator being advanced\n   * @param targetDoc\n   *          target of advancing\n   * @return false if iterator exhausted, true otherwise.\n   */\n  private static boolean advance(ScoredDocIDsIterator iterator, int targetDoc) {\n    while (iterator.next()) {\n      if (iterator.getDocID() >= targetDoc) {\n        return true; // target reached\n      }\n    }\n    return false; // exhausted\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#advance(ScoredDocIDsIterator,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * utility: advance the iterator until finding (or exceeding) specific\n   * document\n   * \n   * @param iterator\n   *          iterator being advanced\n   * @param targetDoc\n   *          target of advancing\n   * @return false if iterator exhausted, true otherwise.\n   */\n  private static boolean advance(ScoredDocIDsIterator iterator, int targetDoc) {\n    while (iterator.next()) {\n      if (iterator.getDocID() >= targetDoc) {\n        return true; // target reached\n      }\n    }\n    return false; // exhausted\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#advance(ScoredDocIDsIterator,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * utility: advance the iterator until finding (or exceeding) specific\n   * document\n   * \n   * @param iterator\n   *          iterator being advanced\n   * @param targetDoc\n   *          target of advancing\n   * @return false if iterator exhausted, true otherwise.\n   */\n  private static boolean advance(ScoredDocIDsIterator iterator, int targetDoc) {\n    while (iterator.next()) {\n      if (iterator.getDocID() >= targetDoc) {\n        return true; // target reached\n      }\n    }\n    return false; // exhausted\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}