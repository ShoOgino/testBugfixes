{"path":"lucene/src/java/org/apache/lucene/store/FSDirectory#copy(FileChannel,FileChannel,long).mjava","commits":[{"id":"462dfb1d8690f192817503773f5b8b94a702246a","date":1280128992,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#copy(FileChannel,FileChannel,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies the content of a given {@link FileChannel} to a destination one. The\n   * copy is done in chunks of 2MB because if transferFrom is used without a\n   * limit when copying a very large file, then an OOM may be thrown (depends on\n   * the state of the RAM in the machine, as well as the OS used). Performance\n   * measurements showed that chunk sizes larger than 2MB do not result in much\n   * faster file copy, therefore we limit the size to be safe with different\n   * file sizes and systems.\n   */\n  static void copy(FileChannel input, FileChannel output, long numBytes) throws IOException {\n    long pos = output.position();\n    long writeTo = numBytes + pos;\n    while (pos < writeTo) {\n      pos += output.transferFrom(input, pos, Math.min(CHANNEL_CHUNK_SIZE, writeTo - pos));\n    }\n    // transferFrom does not change the position of the channel. Need to change it manually\n    output.position(pos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#copy(FileChannel,FileChannel,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies the content of a given {@link FileChannel} to a destination one. The\n   * copy is done in chunks of 2MB because if transferFrom is used without a\n   * limit when copying a very large file, then an OOM may be thrown (depends on\n   * the state of the RAM in the machine, as well as the OS used). Performance\n   * measurements showed that chunk sizes larger than 2MB do not result in much\n   * faster file copy, therefore we limit the size to be safe with different\n   * file sizes and systems.\n   */\n  static void copy(FileChannel input, FileChannel output, long numBytes) throws IOException {\n    long pos = output.position();\n    long writeTo = numBytes + pos;\n    while (pos < writeTo) {\n      pos += output.transferFrom(input, pos, Math.min(CHANNEL_CHUNK_SIZE, writeTo - pos));\n    }\n    // transferFrom does not change the position of the channel. Need to change it manually\n    output.position(pos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d05b801583d7568b68b06c67b22136d2a3b3e3bb","date":1280470393,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#copy(FileChannel,FileChannel,long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copies the content of a given {@link FileChannel} to a destination one. The\n   * copy is done in chunks of 2MB because if transferFrom is used without a\n   * limit when copying a very large file, then an OOM may be thrown (depends on\n   * the state of the RAM in the machine, as well as the OS used). Performance\n   * measurements showed that chunk sizes larger than 2MB do not result in much\n   * faster file copy, therefore we limit the size to be safe with different\n   * file sizes and systems.\n   */\n  static void copy(FileChannel input, FileChannel output, long numBytes) throws IOException {\n    long pos = output.position();\n    long writeTo = numBytes + pos;\n    while (pos < writeTo) {\n      pos += output.transferFrom(input, pos, Math.min(CHANNEL_CHUNK_SIZE, writeTo - pos));\n    }\n    // transferFrom does not change the position of the channel. Need to change it manually\n    output.position(pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#copy(FileChannel,FileChannel,long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copies the content of a given {@link FileChannel} to a destination one. The\n   * copy is done in chunks of 2MB because if transferFrom is used without a\n   * limit when copying a very large file, then an OOM may be thrown (depends on\n   * the state of the RAM in the machine, as well as the OS used). Performance\n   * measurements showed that chunk sizes larger than 2MB do not result in much\n   * faster file copy, therefore we limit the size to be safe with different\n   * file sizes and systems.\n   */\n  static void copy(FileChannel input, FileChannel output, long numBytes) throws IOException {\n    long pos = output.position();\n    long writeTo = numBytes + pos;\n    while (pos < writeTo) {\n      pos += output.transferFrom(input, pos, Math.min(CHANNEL_CHUNK_SIZE, writeTo - pos));\n    }\n    // transferFrom does not change the position of the channel. Need to change it manually\n    output.position(pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"462dfb1d8690f192817503773f5b8b94a702246a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","462dfb1d8690f192817503773f5b8b94a702246a"],"d05b801583d7568b68b06c67b22136d2a3b3e3bb":["462dfb1d8690f192817503773f5b8b94a702246a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","d05b801583d7568b68b06c67b22136d2a3b3e3bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d05b801583d7568b68b06c67b22136d2a3b3e3bb"]},"commit2Childs":{"462dfb1d8690f192817503773f5b8b94a702246a":["3242a09f703274d3b9283f2064a1a33064b53a1b","d05b801583d7568b68b06c67b22136d2a3b3e3bb"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["462dfb1d8690f192817503773f5b8b94a702246a","3242a09f703274d3b9283f2064a1a33064b53a1b"],"d05b801583d7568b68b06c67b22136d2a3b3e3bb":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}