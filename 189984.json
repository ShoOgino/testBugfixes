{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#writeIndex(IndexOutput,int,long,long[],int[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#writeIndex(IndexOutput,int,long,long[],int[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#writeIndex(IndexOutput,int,long,long[],int[]).mjava","sourceNew":"    protected void writeIndex(IndexOutput idxOut, int docCount,\n        long maxValue, long[] addresses, int[] toEntry) throws IOException {\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          bitsRequired(maxValue));\n      final int limit = docCount > docToEntry.length ? docToEntry.length\n          : docCount;\n      assert toEntry.length >= limit -1;\n      if (addresses != null) {\n        for (int i = 0; i < limit; i++) {\n          assert addresses[toEntry[i]] >= 0;\n          w.add(addresses[toEntry[i]]);\n        }\n      } else {\n        for (int i = 0; i < limit; i++) {\n          assert toEntry[i] >= 0;\n          w.add(toEntry[i]);\n        }\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(0);\n      }\n      w.finish();\n    }\n\n","sourceOld":"    protected void writeIndex(IndexOutput idxOut, int docCount,\n        long maxValue, long[] addresses, int[] toEntry) throws IOException {\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          bitsRequired(maxValue));\n      final int limit = docCount > docToEntry.length ? docToEntry.length\n          : docCount;\n      assert toEntry.length >= limit -1;\n      if (addresses != null) {\n        for (int i = 0; i < limit; i++) {\n          assert addresses[toEntry[i]] >= 0;\n          w.add(addresses[toEntry[i]]);\n        }\n      } else {\n        for (int i = 0; i < limit; i++) {\n          assert toEntry[i] >= 0;\n          w.add(toEntry[i]);\n        }\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(0);\n      }\n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#writeIndex(IndexOutput,int,long,long[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#writeIndex(IndexOutput,int,long,long[],int[]).mjava","sourceNew":"    protected void writeIndex(IndexOutput idxOut, int docCount,\n        long maxValue, long[] addresses, int[] toEntry) throws IOException {\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          PackedInts.bitsRequired(maxValue), acceptableOverheadRatio);\n      final int limit = docCount > docToEntry.length ? docToEntry.length\n          : docCount;\n      assert toEntry.length >= limit -1;\n      if (addresses != null) {\n        for (int i = 0; i < limit; i++) {\n          assert addresses[toEntry[i]] >= 0;\n          w.add(addresses[toEntry[i]]);\n        }\n      } else {\n        for (int i = 0; i < limit; i++) {\n          assert toEntry[i] >= 0;\n          w.add(toEntry[i]);\n        }\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(0);\n      }\n      w.finish();\n    }\n\n","sourceOld":"    protected void writeIndex(IndexOutput idxOut, int docCount,\n        long maxValue, long[] addresses, int[] toEntry) throws IOException {\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          bitsRequired(maxValue));\n      final int limit = docCount > docToEntry.length ? docToEntry.length\n          : docCount;\n      assert toEntry.length >= limit -1;\n      if (addresses != null) {\n        for (int i = 0; i < limit; i++) {\n          assert addresses[toEntry[i]] >= 0;\n          w.add(addresses[toEntry[i]]);\n        }\n      } else {\n        for (int i = 0; i < limit; i++) {\n          assert toEntry[i] >= 0;\n          w.add(toEntry[i]);\n        }\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(0);\n      }\n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#writeIndex(IndexOutput,int,long,long[],int[]).mjava","sourceNew":null,"sourceOld":"    protected void writeIndex(IndexOutput idxOut, int docCount,\n        long maxValue, long[] addresses, int[] toEntry) throws IOException {\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          PackedInts.bitsRequired(maxValue), acceptableOverheadRatio);\n      final int limit = docCount > docToEntry.length ? docToEntry.length\n          : docCount;\n      assert toEntry.length >= limit -1;\n      if (addresses != null) {\n        for (int i = 0; i < limit; i++) {\n          assert addresses[toEntry[i]] >= 0;\n          w.add(addresses[toEntry[i]]);\n        }\n      } else {\n        for (int i = 0; i < limit; i++) {\n          assert toEntry[i] >= 0;\n          w.add(toEntry[i]);\n        }\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(0);\n      }\n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#writeIndex(IndexOutput,int,long,long[],int[]).mjava","sourceNew":null,"sourceOld":"    protected void writeIndex(IndexOutput idxOut, int docCount,\n        long maxValue, long[] addresses, int[] toEntry) throws IOException {\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          PackedInts.bitsRequired(maxValue), acceptableOverheadRatio);\n      final int limit = docCount > docToEntry.length ? docToEntry.length\n          : docCount;\n      assert toEntry.length >= limit -1;\n      if (addresses != null) {\n        for (int i = 0; i < limit; i++) {\n          assert addresses[toEntry[i]] >= 0;\n          w.add(addresses[toEntry[i]]);\n        }\n      } else {\n        for (int i = 0; i < limit; i++) {\n          assert toEntry[i] >= 0;\n          w.add(toEntry[i]);\n        }\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(0);\n      }\n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}