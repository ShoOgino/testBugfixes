{"path":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","commits":[{"id":"3d5335b75378451628ea2c59d34e446d476a78a8","date":1097529879,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Determines the largest number of documents ever merged by addDocument().\n   * Small values (e.g., less than 10,000) are best for interactive indexing,\n   * as this limits the length of pauses while indexing to a few seconds.\n   * Larger values are best for batched indexing and speedier searches.\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    this.maxMergeDocs = maxMergeDocs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d7f2d45bf4e1ec80e37552ebe21f66cd1a6e4270"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","sourceNew":"  /** Determines the largest number of documents ever merged by addDocument().\n   * Small values (e.g., less than 10,000) are best for interactive indexing,\n   * as this limits the length of pauses while indexing to a few seconds.\n   * Larger values are best for batched indexing and speedier searches.\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    ensureOpen();\n    this.maxMergeDocs = maxMergeDocs;\n  }\n\n","sourceOld":"  /** Determines the largest number of documents ever merged by addDocument().\n   * Small values (e.g., less than 10,000) are best for interactive indexing,\n   * as this limits the length of pauses while indexing to a few seconds.\n   * Larger values are best for batched indexing and speedier searches.\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    this.maxMergeDocs = maxMergeDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","sourceNew":"  /** Determines the largest number of documents ever merged by addDocument().\n   * Small values (e.g., less than 10,000) are best for interactive indexing,\n   * as this limits the length of pauses while indexing to a few seconds.\n   * Larger values are best for batched indexing and speedier searches.\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    getLogDocMergePolicy().setMaxMergeDocs(maxMergeDocs);\n  }\n\n","sourceOld":"  /** Determines the largest number of documents ever merged by addDocument().\n   * Small values (e.g., less than 10,000) are best for interactive indexing,\n   * as this limits the length of pauses while indexing to a few seconds.\n   * Larger values are best for batched indexing and speedier searches.\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    ensureOpen();\n    this.maxMergeDocs = maxMergeDocs;\n  }\n\n","bugFix":null,"bugIntro":["5b05dbf5e8a6920898fb3838ec15c9eb64bc01af"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b05dbf5e8a6920898fb3838ec15c9eb64bc01af","date":1191617513,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","sourceNew":"  /** Determines the largest number of documents ever merged by addDocument().\n   * Small values (e.g., less than 10,000) are best for interactive indexing,\n   * as this limits the length of pauses while indexing to a few seconds.\n   * Larger values are best for batched indexing and speedier searches.\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    getLogMergePolicy().setMaxMergeDocs(maxMergeDocs);\n  }\n\n","sourceOld":"  /** Determines the largest number of documents ever merged by addDocument().\n   * Small values (e.g., less than 10,000) are best for interactive indexing,\n   * as this limits the length of pauses while indexing to a few seconds.\n   * Larger values are best for batched indexing and speedier searches.\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    getLogDocMergePolicy().setMaxMergeDocs(maxMergeDocs);\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7f2d45bf4e1ec80e37552ebe21f66cd1a6e4270","date":1192640062,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","sourceNew":"  /** <p>Determines the largest segment (measured by\n   * document count) that may be merged with other segments.\n   * Small values (e.g., less than 10,000) are best for\n   * interactive indexing, as this limits the length of\n   * pauses while indexing to a few seconds.  Larger values\n   * are best for batched indexing and speedier\n   * searches.</p>\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>The default merge policy ({@link\n   * LogByteSizeMergePolicy}) also allows you to set this\n   * limit by net size (in MB) of the segment, using {@link\n   * LogByteSizeMergePolicy#setMaxMergeMB}.</p>\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    getLogMergePolicy().setMaxMergeDocs(maxMergeDocs);\n  }\n\n","sourceOld":"  /** Determines the largest number of documents ever merged by addDocument().\n   * Small values (e.g., less than 10,000) are best for interactive indexing,\n   * as this limits the length of pauses while indexing to a few seconds.\n   * Larger values are best for batched indexing and speedier searches.\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    getLogMergePolicy().setMaxMergeDocs(maxMergeDocs);\n  }\n\n","bugFix":["3d5335b75378451628ea2c59d34e446d476a78a8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","sourceNew":"  /** <p>Determines the largest segment (measured by\n   * document count) that may be merged with other segments.\n   * Small values (e.g., less than 10,000) are best for\n   * interactive indexing, as this limits the length of\n   * pauses while indexing to a few seconds.  Larger values\n   * are best for batched indexing and speedier\n   * searches.</p>\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>The default merge policy ({@link\n   * LogByteSizeMergePolicy}) also allows you to set this\n   * limit by net size (in MB) of the segment, using {@link\n   * LogByteSizeMergePolicy#setMaxMergeMB}.</p>\n   * @deprecated use {@link LogMergePolicy#setMaxMergeDocs(int)} directly.\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    getLogMergePolicy().setMaxMergeDocs(maxMergeDocs);\n  }\n\n","sourceOld":"  /** <p>Determines the largest segment (measured by\n   * document count) that may be merged with other segments.\n   * Small values (e.g., less than 10,000) are best for\n   * interactive indexing, as this limits the length of\n   * pauses while indexing to a few seconds.  Larger values\n   * are best for batched indexing and speedier\n   * searches.</p>\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>The default merge policy ({@link\n   * LogByteSizeMergePolicy}) also allows you to set this\n   * limit by net size (in MB) of the segment, using {@link\n   * LogByteSizeMergePolicy#setMaxMergeMB}.</p>\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    getLogMergePolicy().setMaxMergeDocs(maxMergeDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","sourceNew":"  /** <p>Determines the largest segment (measured by\n   * document count) that may be merged with other segments.\n   * Small values (e.g., less than 10,000) are best for\n   * interactive indexing, as this limits the length of\n   * pauses while indexing to a few seconds.  Larger values\n   * are best for batched indexing and speedier\n   * searches.</p>\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>The default merge policy ({@link\n   * LogByteSizeMergePolicy}) also allows you to set this\n   * limit by net size (in MB) of the segment, using {@link\n   * LogByteSizeMergePolicy#setMaxMergeMB}.</p>\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    getLogMergePolicy().setMaxMergeDocs(maxMergeDocs);\n  }\n\n","sourceOld":"  /** <p>Determines the largest segment (measured by\n   * document count) that may be merged with other segments.\n   * Small values (e.g., less than 10,000) are best for\n   * interactive indexing, as this limits the length of\n   * pauses while indexing to a few seconds.  Larger values\n   * are best for batched indexing and speedier\n   * searches.</p>\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>The default merge policy ({@link\n   * LogByteSizeMergePolicy}) also allows you to set this\n   * limit by net size (in MB) of the segment, using {@link\n   * LogByteSizeMergePolicy#setMaxMergeMB}.</p>\n   * @deprecated use {@link LogMergePolicy#setMaxMergeDocs(int)} directly.\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    getLogMergePolicy().setMaxMergeDocs(maxMergeDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","sourceNew":"  /** <p>Determines the largest segment (measured by\n   * document count) that may be merged with other segments.\n   * Small values (e.g., less than 10,000) are best for\n   * interactive indexing, as this limits the length of\n   * pauses while indexing to a few seconds.  Larger values\n   * are best for batched indexing and speedier\n   * searches.</p>\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>The default merge policy ({@link\n   * LogByteSizeMergePolicy}) also allows you to set this\n   * limit by net size (in MB) of the segment, using {@link\n   * LogByteSizeMergePolicy#setMaxMergeMB}.</p>\n   * @deprecated use {@link LogMergePolicy#setMaxMergeDocs(int)} directly.\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    getLogMergePolicy().setMaxMergeDocs(maxMergeDocs);\n  }\n\n","sourceOld":"  /** <p>Determines the largest segment (measured by\n   * document count) that may be merged with other segments.\n   * Small values (e.g., less than 10,000) are best for\n   * interactive indexing, as this limits the length of\n   * pauses while indexing to a few seconds.  Larger values\n   * are best for batched indexing and speedier\n   * searches.</p>\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>The default merge policy ({@link\n   * LogByteSizeMergePolicy}) also allows you to set this\n   * limit by net size (in MB) of the segment, using {@link\n   * LogByteSizeMergePolicy#setMaxMergeMB}.</p>\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    getLogMergePolicy().setMaxMergeDocs(maxMergeDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxMergeDocs(int).mjava","sourceNew":"  /** <p>Determines the largest segment (measured by\n   * document count) that may be merged with other segments.\n   * Small values (e.g., less than 10,000) are best for\n   * interactive indexing, as this limits the length of\n   * pauses while indexing to a few seconds.  Larger values\n   * are best for batched indexing and speedier\n   * searches.</p>\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>The default merge policy ({@link\n   * LogByteSizeMergePolicy}) also allows you to set this\n   * limit by net size (in MB) of the segment, using {@link\n   * LogByteSizeMergePolicy#setMaxMergeMB}.</p>\n   * @deprecated use {@link LogMergePolicy#setMaxMergeDocs(int)} directly.\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    getLogMergePolicy().setMaxMergeDocs(maxMergeDocs);\n  }\n\n","sourceOld":"  /** <p>Determines the largest segment (measured by\n   * document count) that may be merged with other segments.\n   * Small values (e.g., less than 10,000) are best for\n   * interactive indexing, as this limits the length of\n   * pauses while indexing to a few seconds.  Larger values\n   * are best for batched indexing and speedier\n   * searches.</p>\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.</p>\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMaxMergeDocs as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>The default merge policy ({@link\n   * LogByteSizeMergePolicy}) also allows you to set this\n   * limit by net size (in MB) of the segment, using {@link\n   * LogByteSizeMergePolicy#setMaxMergeMB}.</p>\n   * @deprecated use {@link LogMergePolicy#setMaxMergeDocs(int)} directly.\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    getLogMergePolicy().setMaxMergeDocs(maxMergeDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["3d5335b75378451628ea2c59d34e446d476a78a8"],"3d5335b75378451628ea2c59d34e446d476a78a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["d7f2d45bf4e1ec80e37552ebe21f66cd1a6e4270"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"d7f2d45bf4e1ec80e37552ebe21f66cd1a6e4270":["5b05dbf5e8a6920898fb3838ec15c9eb64bc01af"],"5b05dbf5e8a6920898fb3838ec15c9eb64bc01af":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["5b05dbf5e8a6920898fb3838ec15c9eb64bc01af"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"3d5335b75378451628ea2c59d34e446d476a78a8":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3d5335b75378451628ea2c59d34e446d476a78a8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"d7f2d45bf4e1ec80e37552ebe21f66cd1a6e4270":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"5b05dbf5e8a6920898fb3838ec15c9eb64bc01af":["d7f2d45bf4e1ec80e37552ebe21f66cd1a6e4270"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}