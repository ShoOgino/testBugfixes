{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(BytesRef,byte[],byte[]).mjava","commits":[{"id":"16ffb58ba57f805651a528311c104f104d9f4573","date":1457861471,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(BytesRef,byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(byte[],byte[],byte[]).mjava","sourceNew":"  /** Called only in assert */\n  private boolean valueInBounds(BytesRef packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (StringHelper.compare(bytesPerDim, packedValue.bytes, packedValue.offset + offset, minPackedValue, offset) < 0) {\n        return false;\n      }\n      if (StringHelper.compare(bytesPerDim, packedValue.bytes, packedValue.offset + offset, maxPackedValue, offset) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Called only in assert */\n  private boolean valueInBounds(byte[] packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (StringHelper.compare(bytesPerDim, packedValue, offset, minPackedValue, offset) < 0) {\n        return false;\n      }\n      if (StringHelper.compare(bytesPerDim, packedValue, offset, maxPackedValue, offset) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9028cf27fe30db95667505bb92ecaee8fa3aef7","date":1457861734,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(BytesRef,byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(byte[],byte[],byte[]).mjava","sourceNew":"  /** Called only in assert */\n  private boolean valueInBounds(BytesRef packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (StringHelper.compare(bytesPerDim, packedValue.bytes, packedValue.offset + offset, minPackedValue, offset) < 0) {\n        return false;\n      }\n      if (StringHelper.compare(bytesPerDim, packedValue.bytes, packedValue.offset + offset, maxPackedValue, offset) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Called only in assert */\n  private boolean valueInBounds(byte[] packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (StringHelper.compare(bytesPerDim, packedValue, offset, minPackedValue, offset) < 0) {\n        return false;\n      }\n      if (StringHelper.compare(bytesPerDim, packedValue, offset, maxPackedValue, offset) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(BytesRef,byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(BytesRef,byte[],byte[]).mjava","sourceNew":"  /** Called only in assert */\n  private boolean valueInBounds(BytesRef packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDim, minPackedValue, offset, offset + bytesPerDim) < 0) {\n        return false;\n      }\n      if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Called only in assert */\n  private boolean valueInBounds(BytesRef packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (StringHelper.compare(bytesPerDim, packedValue.bytes, packedValue.offset + offset, minPackedValue, offset) < 0) {\n        return false;\n      }\n      if (StringHelper.compare(bytesPerDim, packedValue.bytes, packedValue.offset + offset, maxPackedValue, offset) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(BytesRef,byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(BytesRef,byte[],byte[]).mjava","sourceNew":"  /** Called only in assert */\n  private boolean valueInBounds(BytesRef packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numIndexDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDim, minPackedValue, offset, offset + bytesPerDim) < 0) {\n        return false;\n      }\n      if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Called only in assert */\n  private boolean valueInBounds(BytesRef packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDim, minPackedValue, offset, offset + bytesPerDim) < 0) {\n        return false;\n      }\n      if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(BytesRef,byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(BytesRef,byte[],byte[]).mjava","sourceNew":"  /** Called only in assert */\n  private boolean valueInBounds(BytesRef packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numIndexDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (Arrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDim, minPackedValue, offset, offset + bytesPerDim) < 0) {\n        return false;\n      }\n      if (Arrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Called only in assert */\n  private boolean valueInBounds(BytesRef packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numIndexDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDim, minPackedValue, offset, offset + bytesPerDim) < 0) {\n        return false;\n      }\n      if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(BKDConfig,BytesRef,byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInBounds(BytesRef,byte[],byte[]).mjava","sourceNew":"  // only called from assert\n  private static boolean valueInBounds(BKDConfig config, BytesRef packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<config.numIndexDims;dim++) {\n      int offset = config.bytesPerDim*dim;\n      if (Arrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + config.bytesPerDim, minPackedValue, offset, offset + config.bytesPerDim) < 0) {\n        return false;\n      }\n      if (Arrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + config.bytesPerDim, maxPackedValue, offset, offset + config.bytesPerDim) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Called only in assert */\n  private boolean valueInBounds(BytesRef packedValue, byte[] minPackedValue, byte[] maxPackedValue) {\n    for(int dim=0;dim<numIndexDims;dim++) {\n      int offset = bytesPerDim*dim;\n      if (Arrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDim, minPackedValue, offset, offset + bytesPerDim) < 0) {\n        return false;\n      }\n      if (Arrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDim, maxPackedValue, offset, offset + bytesPerDim) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["f6652c943595e92c187ee904c382863013eae28f"],"16ffb58ba57f805651a528311c104f104d9f4573":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9028cf27fe30db95667505bb92ecaee8fa3aef7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16ffb58ba57f805651a528311c104f104d9f4573"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"f6652c943595e92c187ee904c382863013eae28f":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["b9028cf27fe30db95667505bb92ecaee8fa3aef7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"16ffb58ba57f805651a528311c104f104d9f4573":["b9028cf27fe30db95667505bb92ecaee8fa3aef7"],"b9028cf27fe30db95667505bb92ecaee8fa3aef7":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"f6652c943595e92c187ee904c382863013eae28f":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["f6652c943595e92c187ee904c382863013eae28f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16ffb58ba57f805651a528311c104f104d9f4573","b9028cf27fe30db95667505bb92ecaee8fa3aef7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}