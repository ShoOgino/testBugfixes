{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n      pending.add(new PendingTerm(BytesRef.deepCopyOf(text), stats));\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10f5f1c7f2dcd4a60664dd5c34d803794e023c9","date":1371380031,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n      PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), stats);\n      PendingMetaData meta = new PendingMetaData(postingsWriter.longsSize(fieldInfo));\n      pending.add(term);\n      postingsWriter.finishTerm(meta.longs, meta.bytesWriter, stats);\n      pendingMetaData.add(meta);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n      pending.add(new PendingTerm(BytesRef.deepCopyOf(text), stats));\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90","date":1371385497,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n      PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), stats);\n      PendingMetaData meta = new PendingMetaData(postingsWriter.longsSize());\n      pending.add(term);\n      postingsWriter.finishTerm(meta.longs, meta.bytesWriter, stats);\n      pendingMetaData.add(meta);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n      PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), stats);\n      PendingMetaData meta = new PendingMetaData(postingsWriter.longsSize(fieldInfo));\n      pending.add(term);\n      postingsWriter.finishTerm(meta.longs, meta.bytesWriter, stats);\n      pendingMetaData.add(meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fdc7abadfc0d660ccad65a5329c3e0abea4e30c","date":1371387989,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n      long[] longs = new long[postingsWriter.longsSize()];\n      postingsWriter.finishTerm(longs, metaWriter, stats);\n      byte[] bytes = new byte[(int)metaWriter.getFilePointer()];\n      metaWriter.writeTo(bytes, 0);\n      metaWriter.reset();\n\n      PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), stats, longs, bytes);\n      pending.add(term);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n      PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), stats);\n      PendingMetaData meta = new PendingMetaData(postingsWriter.longsSize());\n      pending.add(term);\n      postingsWriter.finishTerm(meta.longs, meta.bytesWriter, stats);\n      pendingMetaData.add(meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135f40667e65c7c4488c5457956f54c20fd79a43","date":1371393873,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n      long[] longs = new long[longsSize];\n      postingsWriter.finishTerm(longs, metaWriter, stats);\n      byte[] bytes = new byte[(int)metaWriter.getFilePointer()];\n      metaWriter.writeTo(bytes, 0);\n      metaWriter.reset();\n\n      PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), stats, longs, bytes);\n      pending.add(term);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n      long[] longs = new long[postingsWriter.longsSize()];\n      postingsWriter.finishTerm(longs, metaWriter, stats);\n      byte[] bytes = new byte[(int)metaWriter.getFilePointer()];\n      metaWriter.writeTo(bytes, 0);\n      metaWriter.reset();\n\n      PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), stats, longs, bytes);\n      pending.add(term);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n      long[] longs = new long[longsSize];\n      postingsWriter.finishTerm(longs, metaWriter, stats);\n      byte[] bytes = new byte[(int)metaWriter.getFilePointer()];\n      metaWriter.writeTo(bytes, 0);\n      metaWriter.reset();\n\n      PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), stats, longs, bytes);\n      pending.add(term);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n      long[] longs = new long[longsSize];\n      postingsWriter.finishTerm(longs, metaWriter, stats);\n      byte[] bytes = new byte[(int)metaWriter.getFilePointer()];\n      metaWriter.writeTo(bytes, 0);\n      metaWriter.reset();\n\n      PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), stats, longs, bytes);\n      pending.add(term);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fdc7abadfc0d660ccad65a5329c3e0abea4e30c":["8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90"],"8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90":["a10f5f1c7f2dcd4a60664dd5c34d803794e023c9"],"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"135f40667e65c7c4488c5457956f54c20fd79a43":["9fdc7abadfc0d660ccad65a5329c3e0abea4e30c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["135f40667e65c7c4488c5457956f54c20fd79a43"],"a10f5f1c7f2dcd4a60664dd5c34d803794e023c9":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9fdc7abadfc0d660ccad65a5329c3e0abea4e30c":["135f40667e65c7c4488c5457956f54c20fd79a43"],"8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90":["9fdc7abadfc0d660ccad65a5329c3e0abea4e30c"],"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a10f5f1c7f2dcd4a60664dd5c34d803794e023c9"],"135f40667e65c7c4488c5457956f54c20fd79a43":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":[],"a10f5f1c7f2dcd4a60664dd5c34d803794e023c9":["8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}