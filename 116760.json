{"path":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","commits":[{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = createAggregator(facetRequest, facetArrays); // nocommit remove! facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78c3148aa4327f708559af002715f9d8a60a577c","date":1375117718,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = createAggregator(facetRequest, facetArrays); // TODO: remove! facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = createAggregator(facetRequest, facetArrays); // nocommit remove! facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6829aeee95dff0e67c0c0f70155181a76b536e9d","date":1375124073,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = createAggregator(facetRequest, facetArrays);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = createAggregator(facetRequest, facetArrays); // TODO: remove! facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = createAggregator(facetRequest, facetArrays);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = createAggregator(facetRequest, facetArrays);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = createAggregator(facetRequest, facetArrays);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["6829aeee95dff0e67c0c0f70155181a76b536e9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6829aeee95dff0e67c0c0f70155181a76b536e9d":["78c3148aa4327f708559af002715f9d8a60a577c"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6829aeee95dff0e67c0c0f70155181a76b536e9d","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"78c3148aa4327f708559af002715f9d8a60a577c":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["78c3148aa4327f708559af002715f9d8a60a577c"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"6829aeee95dff0e67c0c0f70155181a76b536e9d":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78c3148aa4327f708559af002715f9d8a60a577c":["6829aeee95dff0e67c0c0f70155181a76b536e9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}