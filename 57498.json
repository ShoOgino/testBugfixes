{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#sort(Comparator[BytesRef]).mjava","commits":[{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e3a7c47e11ff0c156c646c37d20af7249370d2","date":1363813308,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        get(pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","bugFix":["d334a3e8e6b94298d8cf2802a403a096c06f0b92","0a2601f536ce2e53d3af7f1ce7cc0c12454ae756"],"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        get(pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        get(pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        get(pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        get(pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        get(pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        return comp.compare(get(scratch1, idx1), get(scratch2, idx2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        get(pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, index));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f","36f5a8c57e16c0f801006a52f87c75378427852e"],"a4e3a7c47e11ff0c156c646c37d20af7249370d2":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"36f5a8c57e16c0f801006a52f87c75378427852e":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a4e3a7c47e11ff0c156c646c37d20af7249370d2"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a4e3a7c47e11ff0c156c646c37d20af7249370d2"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a4e3a7c47e11ff0c156c646c37d20af7249370d2":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}