{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":["6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46ff533a28b45377dffc601931e60e19492e6384","date":1411292651,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb","date":1411653326,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":["77f264c55cbf75404f8601ae7290d69157273a56"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public final SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public final SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"55980207f1977bd1463465de1659b821347e2fa8":["c65d2864d936ccf22dc7ec14dd48b4dff7bacceb","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["46ff533a28b45377dffc601931e60e19492e6384","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"46ff533a28b45377dffc601931e60e19492e6384":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["46ff533a28b45377dffc601931e60e19492e6384"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["46ff533a28b45377dffc601931e60e19492e6384"],"55980207f1977bd1463465de1659b821347e2fa8":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"46ff533a28b45377dffc601931e60e19492e6384":["5f6bd27530a2846413fe2d00030493c0e2d3a072","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["55980207f1977bd1463465de1659b821347e2fa8","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}