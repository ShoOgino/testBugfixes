{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeName(String,String,String).mjava","sourceNew":"  private String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","sourceOld":"  private String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","sourceNew":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","sourceOld":"  private String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","sourceNew":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","sourceOld":"  private String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","sourceNew":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","sourceOld":"  private String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","sourceNew":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      if (docCollection != null && docCollection.getSlicesMap() != null) {\n        Map<String,Slice> slicesMap = docCollection.getSlicesMap();\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","sourceOld":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04","8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","4ddb837927b3de29503b68a05fec256665edab50"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","sourceNew":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      if (docCollection != null && docCollection.getSlicesMap() != null) {\n        Map<String,Slice> slicesMap = docCollection.getSlicesMap();\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","sourceOld":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      Map<String,Slice> slicesMap = zkStateReader.getClusterState()\n          .getSlicesMap(collectionName);\n      if (slicesMap != null) {\n\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","sourceNew":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      if (docCollection != null && docCollection.getSlicesMap() != null) {\n        Map<String,Slice> slicesMap = docCollection.getSlicesMap();\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","sourceOld":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      if (docCollection != null && docCollection.getSlicesMap() != null) {\n        Map<String,Slice> slicesMap = docCollection.getSlicesMap();\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","sourceNew":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      if (docCollection != null && docCollection.getSlicesMap() != null) {\n        Map<String,Slice> slicesMap = docCollection.getSlicesMap();\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","sourceOld":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      if (docCollection != null && docCollection.getSlicesMap() != null) {\n        Map<String,Slice> slicesMap = docCollection.getSlicesMap();\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["344b0840364d990b29b97467bfcc766ff8325d11","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["403d05f7f8d69b65659157eff1bc1d2717f04c66","344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["344b0840364d990b29b97467bfcc766ff8325d11"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"344b0840364d990b29b97467bfcc766ff8325d11":["b94236357aaa22b76c10629851fe4e376e0cea82","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}