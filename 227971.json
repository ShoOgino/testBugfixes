{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHCacheSupport#getSimpleCacheData(Context,String,Iterator[Map[String,Object]]).mjava","commits":[{"id":"3337b86edd36607f0208321f1deee79c55e5fd21","date":1321266471,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHCacheSupport#getSimpleCacheData(Context,String,Iterator[Map[String,Object]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows.\n   * \n   * @param query\n   *          string for which cached row is to be returned\n   * \n   * @return the cached row corresponding to the given query\n   */\n  protected Map<String,Object> getSimpleCacheData(Context context,\n      String query, Iterator<Map<String,Object>> rowIterator) {\n    DIHCache cache = queryVsCache.get(query);\n    if (cache == null) {\n      cache = instantiateCache(context);\n      queryVsCache.put(query, cache);\n      populateCache(query, rowIterator);\n      queryVsCacheIterator.put(query, cache.iterator());\n    }\n    if (dataSourceRowCache == null || !dataSourceRowCache.hasNext()) {\n      dataSourceRowCache = null;\n      Iterator<Map<String,Object>> cacheIter = queryVsCacheIterator.get(query);\n      if (cacheIter.hasNext()) {\n        List<Map<String,Object>> dsrcl = new ArrayList<Map<String,Object>>(1);\n        dsrcl.add(cacheIter.next());\n        dataSourceRowCache = dsrcl.iterator();\n      }\n    }\n    if (dataSourceRowCache == null) {\n      return null;\n    }\n    return getFromRowCacheTransformed();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHCacheSupport#getSimpleCacheData(Context,String,Iterator[Map[String,Object]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHCacheSupport#getSimpleCacheData(Context,String,Iterator[Map[String,Object]]).mjava","sourceNew":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows.\n   * \n   * @param query\n   *          string for which cached row is to be returned\n   * \n   * @return the cached row corresponding to the given query\n   */\n  protected Map<String,Object> getSimpleCacheData(Context context,\n      String query, Iterator<Map<String,Object>> rowIterator) {\n    if (dataSourceRowCache == null) {      \n      DIHCache cache = queryVsCache.get(query);      \n      if (cache == null) {        \n        cache = instantiateCache(context);        \n        queryVsCache.put(query, cache);        \n        populateCache(query, rowIterator);        \n        queryVsCacheIterator.put(query, cache.iterator());        \n      }      \n      Iterator<Map<String,Object>> cacheIter = queryVsCacheIterator.get(query);      \n      dataSourceRowCache = cacheIter;\n    }\n    \n    return getFromRowCacheTransformed();\n  }\n\n","sourceOld":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows.\n   * \n   * @param query\n   *          string for which cached row is to be returned\n   * \n   * @return the cached row corresponding to the given query\n   */\n  protected Map<String,Object> getSimpleCacheData(Context context,\n      String query, Iterator<Map<String,Object>> rowIterator) {\n    DIHCache cache = queryVsCache.get(query);\n    if (cache == null) {\n      cache = instantiateCache(context);\n      queryVsCache.put(query, cache);\n      populateCache(query, rowIterator);\n      queryVsCacheIterator.put(query, cache.iterator());\n    }\n    if (dataSourceRowCache == null || !dataSourceRowCache.hasNext()) {\n      dataSourceRowCache = null;\n      Iterator<Map<String,Object>> cacheIter = queryVsCacheIterator.get(query);\n      if (cacheIter.hasNext()) {\n        List<Map<String,Object>> dsrcl = new ArrayList<Map<String,Object>>(1);\n        dsrcl.add(cacheIter.next());\n        dataSourceRowCache = dsrcl.iterator();\n      }\n    }\n    if (dataSourceRowCache == null) {\n      return null;\n    }\n    return getFromRowCacheTransformed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHCacheSupport#getSimpleCacheData(Context,String,Iterator[Map[String,Object]]).mjava","sourceNew":null,"sourceOld":"  /**\n   * If where clause is not present the cache is a Map of query vs List of Rows.\n   * \n   * @param query\n   *          string for which cached row is to be returned\n   * \n   * @return the cached row corresponding to the given query\n   */\n  protected Map<String,Object> getSimpleCacheData(Context context,\n      String query, Iterator<Map<String,Object>> rowIterator) {\n    if (dataSourceRowCache == null) {      \n      DIHCache cache = queryVsCache.get(query);      \n      if (cache == null) {        \n        cache = instantiateCache(context);        \n        queryVsCache.put(query, cache);        \n        populateCache(query, rowIterator);        \n        queryVsCacheIterator.put(query, cache.iterator());        \n      }      \n      Iterator<Map<String,Object>> cacheIter = queryVsCacheIterator.get(query);      \n      dataSourceRowCache = cacheIter;\n    }\n    \n    return getFromRowCacheTransformed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["3337b86edd36607f0208321f1deee79c55e5fd21"],"3337b86edd36607f0208321f1deee79c55e5fd21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"3337b86edd36607f0208321f1deee79c55e5fd21":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3337b86edd36607f0208321f1deee79c55e5fd21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}